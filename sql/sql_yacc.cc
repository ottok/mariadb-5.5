
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 25 "/home/buildbot/git/sql/sql_yacc.yy"

#define YYLIP (& thd->m_parser_state->m_lip)
#define YYPS (& thd->m_parser_state->m_yacc)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (thd->lex)

#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Alter_table*_statement
#include "sql_truncate.h"                      // Truncate_statement
#include "sql_admin.h"                         // Analyze/Check..._table_stmt
#include "sql_partition_admin.h"               // Alter_table_*_partition_stmt
#include "sql_signal.h"
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(thd, (char*) (A));              \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(thd);  \
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext), thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label((char *)"", lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (val && val->type() == Item::FIELD_ITEM &&
      ((Item_field*)val)->table_name)
  {
    my_error(ER_WRONG_TYPE_FOR_VAR, MYF(0), tmp->var->name.str);
    return TRUE;
  }

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable_t *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->dflt)
    it= spv->dflt;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_NO_WRITE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  lex->option_list= NULL;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list, lex->option_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}



/* Line 189 of yacc.c  */
#line 790 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ALWAYS_SYM = 269,
     ANALYZE_SYM = 270,
     AND_AND_SYM = 271,
     AND_SYM = 272,
     ANY_SYM = 273,
     AS = 274,
     ASC = 275,
     ASCII_SYM = 276,
     ASENSITIVE_SYM = 277,
     AT_SYM = 278,
     AUTHORS_SYM = 279,
     AUTOEXTEND_SIZE_SYM = 280,
     AUTO_INC = 281,
     AVG_ROW_LENGTH = 282,
     AVG_SYM = 283,
     BACKUP_SYM = 284,
     BEFORE_SYM = 285,
     BEGIN_SYM = 286,
     BETWEEN_SYM = 287,
     BIGINT = 288,
     BINARY = 289,
     BINLOG_SYM = 290,
     BIN_NUM = 291,
     BIT_AND = 292,
     BIT_OR = 293,
     BIT_SYM = 294,
     BIT_XOR = 295,
     BLOB_SYM = 296,
     BLOCK_SYM = 297,
     BOOLEAN_SYM = 298,
     BOOL_SYM = 299,
     BOTH = 300,
     BTREE_SYM = 301,
     BY = 302,
     BYTE_SYM = 303,
     CACHE_SYM = 304,
     CALL_SYM = 305,
     CASCADE = 306,
     CASCADED = 307,
     CASE_SYM = 308,
     CAST_SYM = 309,
     CATALOG_NAME_SYM = 310,
     CHAIN_SYM = 311,
     CHANGE = 312,
     CHANGED = 313,
     CHARSET = 314,
     CHAR_SYM = 315,
     CHECKPOINT_SYM = 316,
     CHECKSUM_SYM = 317,
     CHECK_SYM = 318,
     CIPHER_SYM = 319,
     CLASS_ORIGIN_SYM = 320,
     CLIENT_SYM = 321,
     CLIENT_STATS_SYM = 322,
     CLOSE_SYM = 323,
     COALESCE = 324,
     CODE_SYM = 325,
     COLLATE_SYM = 326,
     COLLATION_SYM = 327,
     COLUMNS = 328,
     COLUMN_ADD_SYM = 329,
     COLUMN_CREATE_SYM = 330,
     COLUMN_DELETE_SYM = 331,
     COLUMN_EXISTS_SYM = 332,
     COLUMN_GET_SYM = 333,
     COLUMN_LIST_SYM = 334,
     COLUMN_SYM = 335,
     COLUMN_NAME_SYM = 336,
     COMMENT_SYM = 337,
     COMMITTED_SYM = 338,
     COMMIT_SYM = 339,
     COMPACT_SYM = 340,
     COMPLETION_SYM = 341,
     COMPRESSED_SYM = 342,
     CONCURRENT = 343,
     CONDITION_SYM = 344,
     CONNECTION_SYM = 345,
     CONSISTENT_SYM = 346,
     CONSTRAINT = 347,
     CONSTRAINT_CATALOG_SYM = 348,
     CONSTRAINT_NAME_SYM = 349,
     CONSTRAINT_SCHEMA_SYM = 350,
     CONTAINS_SYM = 351,
     CONTEXT_SYM = 352,
     CONTINUE_SYM = 353,
     CONTRIBUTORS_SYM = 354,
     CONVERT_SYM = 355,
     COUNT_SYM = 356,
     CPU_SYM = 357,
     CREATE = 358,
     CROSS = 359,
     CUBE_SYM = 360,
     CURDATE = 361,
     CURRENT_USER = 362,
     CURSOR_SYM = 363,
     CURSOR_NAME_SYM = 364,
     CURTIME = 365,
     DATABASE = 366,
     DATABASES = 367,
     DATAFILE_SYM = 368,
     DATA_SYM = 369,
     DATETIME = 370,
     DATE_ADD_INTERVAL = 371,
     DATE_SUB_INTERVAL = 372,
     DATE_SYM = 373,
     DAY_HOUR_SYM = 374,
     DAY_MICROSECOND_SYM = 375,
     DAY_MINUTE_SYM = 376,
     DAY_SECOND_SYM = 377,
     DAY_SYM = 378,
     DEALLOCATE_SYM = 379,
     DECIMAL_NUM = 380,
     DECIMAL_SYM = 381,
     DECLARE_SYM = 382,
     DEFAULT = 383,
     DEFINER_SYM = 384,
     DELAYED_SYM = 385,
     DELAY_KEY_WRITE_SYM = 386,
     DELETE_SYM = 387,
     DESC = 388,
     DESCRIBE = 389,
     DES_KEY_FILE = 390,
     DETERMINISTIC_SYM = 391,
     DIRECTORY_SYM = 392,
     DISABLE_SYM = 393,
     DISCARD = 394,
     DISK_SYM = 395,
     DISTINCT = 396,
     DIV_SYM = 397,
     DOUBLE_SYM = 398,
     DO_SYM = 399,
     DROP = 400,
     DUAL_SYM = 401,
     DUMPFILE = 402,
     DUPLICATE_SYM = 403,
     DYNAMIC_SYM = 404,
     EACH_SYM = 405,
     ELSE = 406,
     ELSEIF_SYM = 407,
     ENABLE_SYM = 408,
     ENCLOSED = 409,
     END = 410,
     ENDS_SYM = 411,
     END_OF_INPUT = 412,
     ENGINES_SYM = 413,
     ENGINE_SYM = 414,
     ENUM = 415,
     EQ = 416,
     EQUAL_SYM = 417,
     ERROR_SYM = 418,
     ERRORS = 419,
     ESCAPED = 420,
     ESCAPE_SYM = 421,
     EVENTS_SYM = 422,
     EVENT_SYM = 423,
     EVERY_SYM = 424,
     EXAMINED_SYM = 425,
     EXECUTE_SYM = 426,
     EXISTS = 427,
     EXIT_SYM = 428,
     EXPANSION_SYM = 429,
     EXTENDED_SYM = 430,
     EXTENT_SIZE_SYM = 431,
     EXTRACT_SYM = 432,
     FALSE_SYM = 433,
     FAST_SYM = 434,
     FAULTS_SYM = 435,
     FETCH_SYM = 436,
     FILE_SYM = 437,
     FIRST_SYM = 438,
     FIXED_SYM = 439,
     FLOAT_NUM = 440,
     FLOAT_SYM = 441,
     FLUSH_SYM = 442,
     FORCE_SYM = 443,
     FOREIGN = 444,
     FOR_SYM = 445,
     FOUND_SYM = 446,
     FROM = 447,
     FULL = 448,
     FULLTEXT_SYM = 449,
     FUNCTION_SYM = 450,
     GE = 451,
     GENERAL = 452,
     GENERATED_SYM = 453,
     GEOMETRYCOLLECTION = 454,
     GEOMETRY_SYM = 455,
     GET_FORMAT = 456,
     GLOBAL_SYM = 457,
     GRANT = 458,
     GRANTS = 459,
     GROUP_SYM = 460,
     GROUP_CONCAT_SYM = 461,
     GT_SYM = 462,
     HANDLER_SYM = 463,
     HARD_SYM = 464,
     HASH_SYM = 465,
     HAVING = 466,
     HELP_SYM = 467,
     HEX_NUM = 468,
     HEX_STRING = 469,
     HIGH_PRIORITY = 470,
     HOST_SYM = 471,
     HOSTS_SYM = 472,
     HOUR_MICROSECOND_SYM = 473,
     HOUR_MINUTE_SYM = 474,
     HOUR_SECOND_SYM = 475,
     HOUR_SYM = 476,
     IDENT = 477,
     IDENTIFIED_SYM = 478,
     IDENT_QUOTED = 479,
     IF = 480,
     IGNORE_SYM = 481,
     IGNORE_SERVER_IDS_SYM = 482,
     IMPORT = 483,
     INDEXES = 484,
     INDEX_SYM = 485,
     INDEX_STATS_SYM = 486,
     INFILE = 487,
     INITIAL_SIZE_SYM = 488,
     INNER_SYM = 489,
     INOUT_SYM = 490,
     INSENSITIVE_SYM = 491,
     INSERT = 492,
     INSERT_METHOD = 493,
     INSTALL_SYM = 494,
     INTERVAL_SYM = 495,
     INTO = 496,
     INT_SYM = 497,
     INVOKER_SYM = 498,
     IN_SYM = 499,
     IO_SYM = 500,
     IPC_SYM = 501,
     IS = 502,
     ISOLATION = 503,
     ISSUER_SYM = 504,
     ITERATE_SYM = 505,
     JOIN_SYM = 506,
     KEYS = 507,
     KEY_BLOCK_SIZE = 508,
     KEY_SYM = 509,
     KILL_SYM = 510,
     LANGUAGE_SYM = 511,
     LAST_SYM = 512,
     LAST_VALUE = 513,
     LE = 514,
     LEADING = 515,
     LEAVES = 516,
     LEAVE_SYM = 517,
     LEFT = 518,
     LESS_SYM = 519,
     LEVEL_SYM = 520,
     LEX_HOSTNAME = 521,
     LIKE = 522,
     LIMIT = 523,
     LINEAR_SYM = 524,
     LINES = 525,
     LINESTRING = 526,
     LIST_SYM = 527,
     LOAD = 528,
     LOCAL_SYM = 529,
     LOCATOR_SYM = 530,
     LOCKS_SYM = 531,
     LOCK_SYM = 532,
     LOGFILE_SYM = 533,
     LOGS_SYM = 534,
     LONGBLOB = 535,
     LONGTEXT = 536,
     LONG_NUM = 537,
     LONG_SYM = 538,
     LOOP_SYM = 539,
     LOW_PRIORITY = 540,
     LT = 541,
     MASTER_CONNECT_RETRY_SYM = 542,
     MASTER_HOST_SYM = 543,
     MASTER_LOG_FILE_SYM = 544,
     MASTER_LOG_POS_SYM = 545,
     MASTER_PASSWORD_SYM = 546,
     MASTER_PORT_SYM = 547,
     MASTER_SERVER_ID_SYM = 548,
     MASTER_SSL_CAPATH_SYM = 549,
     MASTER_SSL_CA_SYM = 550,
     MASTER_SSL_CERT_SYM = 551,
     MASTER_SSL_CIPHER_SYM = 552,
     MASTER_SSL_KEY_SYM = 553,
     MASTER_SSL_SYM = 554,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 555,
     MASTER_SYM = 556,
     MASTER_USER_SYM = 557,
     MASTER_HEARTBEAT_PERIOD_SYM = 558,
     MATCH = 559,
     MAX_CONNECTIONS_PER_HOUR = 560,
     MAX_QUERIES_PER_HOUR = 561,
     MAX_ROWS = 562,
     MAX_SIZE_SYM = 563,
     MAX_SYM = 564,
     MAX_UPDATES_PER_HOUR = 565,
     MAX_USER_CONNECTIONS_SYM = 566,
     MAX_VALUE_SYM = 567,
     MEDIUMBLOB = 568,
     MEDIUMINT = 569,
     MEDIUMTEXT = 570,
     MEDIUM_SYM = 571,
     MEMORY_SYM = 572,
     MERGE_SYM = 573,
     MESSAGE_TEXT_SYM = 574,
     MICROSECOND_SYM = 575,
     MIGRATE_SYM = 576,
     MINUTE_MICROSECOND_SYM = 577,
     MINUTE_SECOND_SYM = 578,
     MINUTE_SYM = 579,
     MIN_ROWS = 580,
     MIN_SYM = 581,
     MODE_SYM = 582,
     MODIFIES_SYM = 583,
     MODIFY_SYM = 584,
     MOD_SYM = 585,
     MONTH_SYM = 586,
     MULTILINESTRING = 587,
     MULTIPOINT = 588,
     MULTIPOLYGON = 589,
     MUTEX_SYM = 590,
     MYSQL_SYM = 591,
     MYSQL_ERRNO_SYM = 592,
     NAMES_SYM = 593,
     NAME_SYM = 594,
     NATIONAL_SYM = 595,
     NATURAL = 596,
     NCHAR_STRING = 597,
     NCHAR_SYM = 598,
     NDBCLUSTER_SYM = 599,
     NE = 600,
     NEG = 601,
     NEW_SYM = 602,
     NEXT_SYM = 603,
     NODEGROUP_SYM = 604,
     NONE_SYM = 605,
     NOT2_SYM = 606,
     NOT_SYM = 607,
     NOW_SYM = 608,
     NO_SYM = 609,
     NO_WAIT_SYM = 610,
     NO_WRITE_TO_BINLOG = 611,
     NULL_SYM = 612,
     NUM = 613,
     NUMERIC_SYM = 614,
     NVARCHAR_SYM = 615,
     OFFSET_SYM = 616,
     OLD_PASSWORD = 617,
     ON = 618,
     ONE_SHOT_SYM = 619,
     ONE_SYM = 620,
     ONLINE_SYM = 621,
     OPEN_SYM = 622,
     OPTIMIZE = 623,
     OPTIONS_SYM = 624,
     OPTION = 625,
     OPTIONALLY = 626,
     OR2_SYM = 627,
     ORDER_SYM = 628,
     OR_OR_SYM = 629,
     OR_SYM = 630,
     OUTER = 631,
     OUTFILE = 632,
     OUT_SYM = 633,
     OWNER_SYM = 634,
     PACK_KEYS_SYM = 635,
     PAGE_SYM = 636,
     PAGE_CHECKSUM_SYM = 637,
     PARAM_MARKER = 638,
     PARSER_SYM = 639,
     PARSE_VCOL_EXPR_SYM = 640,
     PARTIAL = 641,
     PARTITIONING_SYM = 642,
     PARTITIONS_SYM = 643,
     PARTITION_SYM = 644,
     PASSWORD = 645,
     PERSISTENT_SYM = 646,
     PHASE_SYM = 647,
     PLUGINS_SYM = 648,
     PLUGIN_SYM = 649,
     POINT_SYM = 650,
     POLYGON = 651,
     PORT_SYM = 652,
     POSITION_SYM = 653,
     PRECISION = 654,
     PREPARE_SYM = 655,
     PRESERVE_SYM = 656,
     PREV_SYM = 657,
     PRIMARY_SYM = 658,
     PRIVILEGES = 659,
     PROCEDURE_SYM = 660,
     PROCESS = 661,
     PROCESSLIST_SYM = 662,
     PROFILE_SYM = 663,
     PROFILES_SYM = 664,
     PROXY_SYM = 665,
     PURGE = 666,
     QUARTER_SYM = 667,
     QUERY_SYM = 668,
     QUICK = 669,
     RANGE_SYM = 670,
     READS_SYM = 671,
     READ_ONLY_SYM = 672,
     READ_SYM = 673,
     READ_WRITE_SYM = 674,
     REAL = 675,
     REBUILD_SYM = 676,
     RECOVER_SYM = 677,
     REDOFILE_SYM = 678,
     REDO_BUFFER_SIZE_SYM = 679,
     REDUNDANT_SYM = 680,
     REFERENCES = 681,
     REGEXP = 682,
     RELAY = 683,
     RELAYLOG_SYM = 684,
     RELAY_LOG_FILE_SYM = 685,
     RELAY_LOG_POS_SYM = 686,
     RELAY_THREAD = 687,
     RELEASE_SYM = 688,
     RELOAD = 689,
     REMOVE_SYM = 690,
     RENAME = 691,
     REORGANIZE_SYM = 692,
     REPAIR = 693,
     REPEATABLE_SYM = 694,
     REPEAT_SYM = 695,
     REPLACE = 696,
     REPLICATION = 697,
     REQUIRE_SYM = 698,
     RESET_SYM = 699,
     RESIGNAL_SYM = 700,
     RESOURCES = 701,
     RESTORE_SYM = 702,
     RESTRICT = 703,
     RESUME_SYM = 704,
     RETURNS_SYM = 705,
     RETURN_SYM = 706,
     REVOKE = 707,
     RIGHT = 708,
     ROLLBACK_SYM = 709,
     ROLLUP_SYM = 710,
     ROUTINE_SYM = 711,
     ROWS_SYM = 712,
     ROW_FORMAT_SYM = 713,
     ROW_SYM = 714,
     RTREE_SYM = 715,
     SAVEPOINT_SYM = 716,
     SCHEDULE_SYM = 717,
     SCHEMA_NAME_SYM = 718,
     SECOND_MICROSECOND_SYM = 719,
     SECOND_SYM = 720,
     SECURITY_SYM = 721,
     SELECT_SYM = 722,
     SENSITIVE_SYM = 723,
     SEPARATOR_SYM = 724,
     SERIALIZABLE_SYM = 725,
     SERIAL_SYM = 726,
     SESSION_SYM = 727,
     SERVER_SYM = 728,
     SERVER_OPTIONS = 729,
     SET = 730,
     SET_VAR = 731,
     SHARE_SYM = 732,
     SHIFT_LEFT = 733,
     SHIFT_RIGHT = 734,
     SHOW = 735,
     SHUTDOWN = 736,
     SIGNAL_SYM = 737,
     SIGNED_SYM = 738,
     SIMPLE_SYM = 739,
     SLAVE = 740,
     SLOW = 741,
     SMALLINT = 742,
     SNAPSHOT_SYM = 743,
     SOCKET_SYM = 744,
     SOFT_SYM = 745,
     SONAME_SYM = 746,
     SOUNDS_SYM = 747,
     SOURCE_SYM = 748,
     SPATIAL_SYM = 749,
     SPECIFIC_SYM = 750,
     SQLEXCEPTION_SYM = 751,
     SQLSTATE_SYM = 752,
     SQLWARNING_SYM = 753,
     SQL_BIG_RESULT = 754,
     SQL_BUFFER_RESULT = 755,
     SQL_CACHE_SYM = 756,
     SQL_CALC_FOUND_ROWS = 757,
     SQL_NO_CACHE_SYM = 758,
     SQL_SMALL_RESULT = 759,
     SQL_SYM = 760,
     SQL_THREAD = 761,
     SSL_SYM = 762,
     STARTING = 763,
     STARTS_SYM = 764,
     START_SYM = 765,
     STATUS_SYM = 766,
     STDDEV_SAMP_SYM = 767,
     STD_SYM = 768,
     STOP_SYM = 769,
     STORAGE_SYM = 770,
     STRAIGHT_JOIN = 771,
     STRING_SYM = 772,
     SUBCLASS_ORIGIN_SYM = 773,
     SUBDATE_SYM = 774,
     SUBJECT_SYM = 775,
     SUBPARTITIONS_SYM = 776,
     SUBPARTITION_SYM = 777,
     SUBSTRING = 778,
     SUM_SYM = 779,
     SUPER_SYM = 780,
     SUSPEND_SYM = 781,
     SWAPS_SYM = 782,
     SWITCHES_SYM = 783,
     SYSDATE = 784,
     TABLES = 785,
     TABLESPACE = 786,
     TABLE_REF_PRIORITY = 787,
     TABLE_STATS_SYM = 788,
     TABLE_SYM = 789,
     TABLE_CHECKSUM_SYM = 790,
     TABLE_NAME_SYM = 791,
     TEMPORARY = 792,
     TEMPTABLE_SYM = 793,
     TERMINATED = 794,
     TEXT_STRING = 795,
     TEXT_SYM = 796,
     THAN_SYM = 797,
     THEN_SYM = 798,
     TIMESTAMP = 799,
     TIMESTAMP_ADD = 800,
     TIMESTAMP_DIFF = 801,
     TIME_SYM = 802,
     TINYBLOB = 803,
     TINYINT = 804,
     TINYTEXT = 805,
     TO_SYM = 806,
     TRAILING = 807,
     TRANSACTION_SYM = 808,
     TRANSACTIONAL_SYM = 809,
     TRIGGERS_SYM = 810,
     TRIGGER_SYM = 811,
     TRIM = 812,
     TRUE_SYM = 813,
     TRUNCATE_SYM = 814,
     TYPES_SYM = 815,
     TYPE_SYM = 816,
     UDF_RETURNS_SYM = 817,
     ULONGLONG_NUM = 818,
     UNCOMMITTED_SYM = 819,
     UNDEFINED_SYM = 820,
     UNDERSCORE_CHARSET = 821,
     UNDOFILE_SYM = 822,
     UNDO_BUFFER_SIZE_SYM = 823,
     UNDO_SYM = 824,
     UNICODE_SYM = 825,
     UNINSTALL_SYM = 826,
     UNION_SYM = 827,
     UNIQUE_SYM = 828,
     UNKNOWN_SYM = 829,
     UNLOCK_SYM = 830,
     UNSIGNED = 831,
     UNTIL_SYM = 832,
     UPDATE_SYM = 833,
     UPGRADE_SYM = 834,
     USAGE = 835,
     USER = 836,
     USER_STATS_SYM = 837,
     USE_FRM = 838,
     USE_SYM = 839,
     USING = 840,
     UTC_DATE_SYM = 841,
     UTC_TIMESTAMP_SYM = 842,
     UTC_TIME_SYM = 843,
     VALUES = 844,
     VALUE_SYM = 845,
     VARBINARY = 846,
     VARCHAR = 847,
     VARIABLES = 848,
     VARIANCE_SYM = 849,
     VARYING = 850,
     VAR_SAMP_SYM = 851,
     VIA_SYM = 852,
     VIEW_SYM = 853,
     VIRTUAL_SYM = 854,
     WAIT_SYM = 855,
     WARNINGS = 856,
     WEEK_SYM = 857,
     WHEN_SYM = 858,
     WHERE = 859,
     WHILE_SYM = 860,
     WITH = 861,
     WITH_CUBE_SYM = 862,
     WITH_ROLLUP_SYM = 863,
     WORK_SYM = 864,
     WRAPPER_SYM = 865,
     WRITE_SYM = 866,
     X509_SYM = 867,
     XA_SYM = 868,
     XML_SYM = 869,
     XOR = 870,
     YEAR_MONTH_SYM = 871,
     YEAR_SYM = 872,
     ZEROFILL = 873,
     IMPOSSIBLE_ACTION = 874
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ALWAYS_SYM 269
#define ANALYZE_SYM 270
#define AND_AND_SYM 271
#define AND_SYM 272
#define ANY_SYM 273
#define AS 274
#define ASC 275
#define ASCII_SYM 276
#define ASENSITIVE_SYM 277
#define AT_SYM 278
#define AUTHORS_SYM 279
#define AUTOEXTEND_SIZE_SYM 280
#define AUTO_INC 281
#define AVG_ROW_LENGTH 282
#define AVG_SYM 283
#define BACKUP_SYM 284
#define BEFORE_SYM 285
#define BEGIN_SYM 286
#define BETWEEN_SYM 287
#define BIGINT 288
#define BINARY 289
#define BINLOG_SYM 290
#define BIN_NUM 291
#define BIT_AND 292
#define BIT_OR 293
#define BIT_SYM 294
#define BIT_XOR 295
#define BLOB_SYM 296
#define BLOCK_SYM 297
#define BOOLEAN_SYM 298
#define BOOL_SYM 299
#define BOTH 300
#define BTREE_SYM 301
#define BY 302
#define BYTE_SYM 303
#define CACHE_SYM 304
#define CALL_SYM 305
#define CASCADE 306
#define CASCADED 307
#define CASE_SYM 308
#define CAST_SYM 309
#define CATALOG_NAME_SYM 310
#define CHAIN_SYM 311
#define CHANGE 312
#define CHANGED 313
#define CHARSET 314
#define CHAR_SYM 315
#define CHECKPOINT_SYM 316
#define CHECKSUM_SYM 317
#define CHECK_SYM 318
#define CIPHER_SYM 319
#define CLASS_ORIGIN_SYM 320
#define CLIENT_SYM 321
#define CLIENT_STATS_SYM 322
#define CLOSE_SYM 323
#define COALESCE 324
#define CODE_SYM 325
#define COLLATE_SYM 326
#define COLLATION_SYM 327
#define COLUMNS 328
#define COLUMN_ADD_SYM 329
#define COLUMN_CREATE_SYM 330
#define COLUMN_DELETE_SYM 331
#define COLUMN_EXISTS_SYM 332
#define COLUMN_GET_SYM 333
#define COLUMN_LIST_SYM 334
#define COLUMN_SYM 335
#define COLUMN_NAME_SYM 336
#define COMMENT_SYM 337
#define COMMITTED_SYM 338
#define COMMIT_SYM 339
#define COMPACT_SYM 340
#define COMPLETION_SYM 341
#define COMPRESSED_SYM 342
#define CONCURRENT 343
#define CONDITION_SYM 344
#define CONNECTION_SYM 345
#define CONSISTENT_SYM 346
#define CONSTRAINT 347
#define CONSTRAINT_CATALOG_SYM 348
#define CONSTRAINT_NAME_SYM 349
#define CONSTRAINT_SCHEMA_SYM 350
#define CONTAINS_SYM 351
#define CONTEXT_SYM 352
#define CONTINUE_SYM 353
#define CONTRIBUTORS_SYM 354
#define CONVERT_SYM 355
#define COUNT_SYM 356
#define CPU_SYM 357
#define CREATE 358
#define CROSS 359
#define CUBE_SYM 360
#define CURDATE 361
#define CURRENT_USER 362
#define CURSOR_SYM 363
#define CURSOR_NAME_SYM 364
#define CURTIME 365
#define DATABASE 366
#define DATABASES 367
#define DATAFILE_SYM 368
#define DATA_SYM 369
#define DATETIME 370
#define DATE_ADD_INTERVAL 371
#define DATE_SUB_INTERVAL 372
#define DATE_SYM 373
#define DAY_HOUR_SYM 374
#define DAY_MICROSECOND_SYM 375
#define DAY_MINUTE_SYM 376
#define DAY_SECOND_SYM 377
#define DAY_SYM 378
#define DEALLOCATE_SYM 379
#define DECIMAL_NUM 380
#define DECIMAL_SYM 381
#define DECLARE_SYM 382
#define DEFAULT 383
#define DEFINER_SYM 384
#define DELAYED_SYM 385
#define DELAY_KEY_WRITE_SYM 386
#define DELETE_SYM 387
#define DESC 388
#define DESCRIBE 389
#define DES_KEY_FILE 390
#define DETERMINISTIC_SYM 391
#define DIRECTORY_SYM 392
#define DISABLE_SYM 393
#define DISCARD 394
#define DISK_SYM 395
#define DISTINCT 396
#define DIV_SYM 397
#define DOUBLE_SYM 398
#define DO_SYM 399
#define DROP 400
#define DUAL_SYM 401
#define DUMPFILE 402
#define DUPLICATE_SYM 403
#define DYNAMIC_SYM 404
#define EACH_SYM 405
#define ELSE 406
#define ELSEIF_SYM 407
#define ENABLE_SYM 408
#define ENCLOSED 409
#define END 410
#define ENDS_SYM 411
#define END_OF_INPUT 412
#define ENGINES_SYM 413
#define ENGINE_SYM 414
#define ENUM 415
#define EQ 416
#define EQUAL_SYM 417
#define ERROR_SYM 418
#define ERRORS 419
#define ESCAPED 420
#define ESCAPE_SYM 421
#define EVENTS_SYM 422
#define EVENT_SYM 423
#define EVERY_SYM 424
#define EXAMINED_SYM 425
#define EXECUTE_SYM 426
#define EXISTS 427
#define EXIT_SYM 428
#define EXPANSION_SYM 429
#define EXTENDED_SYM 430
#define EXTENT_SIZE_SYM 431
#define EXTRACT_SYM 432
#define FALSE_SYM 433
#define FAST_SYM 434
#define FAULTS_SYM 435
#define FETCH_SYM 436
#define FILE_SYM 437
#define FIRST_SYM 438
#define FIXED_SYM 439
#define FLOAT_NUM 440
#define FLOAT_SYM 441
#define FLUSH_SYM 442
#define FORCE_SYM 443
#define FOREIGN 444
#define FOR_SYM 445
#define FOUND_SYM 446
#define FROM 447
#define FULL 448
#define FULLTEXT_SYM 449
#define FUNCTION_SYM 450
#define GE 451
#define GENERAL 452
#define GENERATED_SYM 453
#define GEOMETRYCOLLECTION 454
#define GEOMETRY_SYM 455
#define GET_FORMAT 456
#define GLOBAL_SYM 457
#define GRANT 458
#define GRANTS 459
#define GROUP_SYM 460
#define GROUP_CONCAT_SYM 461
#define GT_SYM 462
#define HANDLER_SYM 463
#define HARD_SYM 464
#define HASH_SYM 465
#define HAVING 466
#define HELP_SYM 467
#define HEX_NUM 468
#define HEX_STRING 469
#define HIGH_PRIORITY 470
#define HOST_SYM 471
#define HOSTS_SYM 472
#define HOUR_MICROSECOND_SYM 473
#define HOUR_MINUTE_SYM 474
#define HOUR_SECOND_SYM 475
#define HOUR_SYM 476
#define IDENT 477
#define IDENTIFIED_SYM 478
#define IDENT_QUOTED 479
#define IF 480
#define IGNORE_SYM 481
#define IGNORE_SERVER_IDS_SYM 482
#define IMPORT 483
#define INDEXES 484
#define INDEX_SYM 485
#define INDEX_STATS_SYM 486
#define INFILE 487
#define INITIAL_SIZE_SYM 488
#define INNER_SYM 489
#define INOUT_SYM 490
#define INSENSITIVE_SYM 491
#define INSERT 492
#define INSERT_METHOD 493
#define INSTALL_SYM 494
#define INTERVAL_SYM 495
#define INTO 496
#define INT_SYM 497
#define INVOKER_SYM 498
#define IN_SYM 499
#define IO_SYM 500
#define IPC_SYM 501
#define IS 502
#define ISOLATION 503
#define ISSUER_SYM 504
#define ITERATE_SYM 505
#define JOIN_SYM 506
#define KEYS 507
#define KEY_BLOCK_SIZE 508
#define KEY_SYM 509
#define KILL_SYM 510
#define LANGUAGE_SYM 511
#define LAST_SYM 512
#define LAST_VALUE 513
#define LE 514
#define LEADING 515
#define LEAVES 516
#define LEAVE_SYM 517
#define LEFT 518
#define LESS_SYM 519
#define LEVEL_SYM 520
#define LEX_HOSTNAME 521
#define LIKE 522
#define LIMIT 523
#define LINEAR_SYM 524
#define LINES 525
#define LINESTRING 526
#define LIST_SYM 527
#define LOAD 528
#define LOCAL_SYM 529
#define LOCATOR_SYM 530
#define LOCKS_SYM 531
#define LOCK_SYM 532
#define LOGFILE_SYM 533
#define LOGS_SYM 534
#define LONGBLOB 535
#define LONGTEXT 536
#define LONG_NUM 537
#define LONG_SYM 538
#define LOOP_SYM 539
#define LOW_PRIORITY 540
#define LT 541
#define MASTER_CONNECT_RETRY_SYM 542
#define MASTER_HOST_SYM 543
#define MASTER_LOG_FILE_SYM 544
#define MASTER_LOG_POS_SYM 545
#define MASTER_PASSWORD_SYM 546
#define MASTER_PORT_SYM 547
#define MASTER_SERVER_ID_SYM 548
#define MASTER_SSL_CAPATH_SYM 549
#define MASTER_SSL_CA_SYM 550
#define MASTER_SSL_CERT_SYM 551
#define MASTER_SSL_CIPHER_SYM 552
#define MASTER_SSL_KEY_SYM 553
#define MASTER_SSL_SYM 554
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 555
#define MASTER_SYM 556
#define MASTER_USER_SYM 557
#define MASTER_HEARTBEAT_PERIOD_SYM 558
#define MATCH 559
#define MAX_CONNECTIONS_PER_HOUR 560
#define MAX_QUERIES_PER_HOUR 561
#define MAX_ROWS 562
#define MAX_SIZE_SYM 563
#define MAX_SYM 564
#define MAX_UPDATES_PER_HOUR 565
#define MAX_USER_CONNECTIONS_SYM 566
#define MAX_VALUE_SYM 567
#define MEDIUMBLOB 568
#define MEDIUMINT 569
#define MEDIUMTEXT 570
#define MEDIUM_SYM 571
#define MEMORY_SYM 572
#define MERGE_SYM 573
#define MESSAGE_TEXT_SYM 574
#define MICROSECOND_SYM 575
#define MIGRATE_SYM 576
#define MINUTE_MICROSECOND_SYM 577
#define MINUTE_SECOND_SYM 578
#define MINUTE_SYM 579
#define MIN_ROWS 580
#define MIN_SYM 581
#define MODE_SYM 582
#define MODIFIES_SYM 583
#define MODIFY_SYM 584
#define MOD_SYM 585
#define MONTH_SYM 586
#define MULTILINESTRING 587
#define MULTIPOINT 588
#define MULTIPOLYGON 589
#define MUTEX_SYM 590
#define MYSQL_SYM 591
#define MYSQL_ERRNO_SYM 592
#define NAMES_SYM 593
#define NAME_SYM 594
#define NATIONAL_SYM 595
#define NATURAL 596
#define NCHAR_STRING 597
#define NCHAR_SYM 598
#define NDBCLUSTER_SYM 599
#define NE 600
#define NEG 601
#define NEW_SYM 602
#define NEXT_SYM 603
#define NODEGROUP_SYM 604
#define NONE_SYM 605
#define NOT2_SYM 606
#define NOT_SYM 607
#define NOW_SYM 608
#define NO_SYM 609
#define NO_WAIT_SYM 610
#define NO_WRITE_TO_BINLOG 611
#define NULL_SYM 612
#define NUM 613
#define NUMERIC_SYM 614
#define NVARCHAR_SYM 615
#define OFFSET_SYM 616
#define OLD_PASSWORD 617
#define ON 618
#define ONE_SHOT_SYM 619
#define ONE_SYM 620
#define ONLINE_SYM 621
#define OPEN_SYM 622
#define OPTIMIZE 623
#define OPTIONS_SYM 624
#define OPTION 625
#define OPTIONALLY 626
#define OR2_SYM 627
#define ORDER_SYM 628
#define OR_OR_SYM 629
#define OR_SYM 630
#define OUTER 631
#define OUTFILE 632
#define OUT_SYM 633
#define OWNER_SYM 634
#define PACK_KEYS_SYM 635
#define PAGE_SYM 636
#define PAGE_CHECKSUM_SYM 637
#define PARAM_MARKER 638
#define PARSER_SYM 639
#define PARSE_VCOL_EXPR_SYM 640
#define PARTIAL 641
#define PARTITIONING_SYM 642
#define PARTITIONS_SYM 643
#define PARTITION_SYM 644
#define PASSWORD 645
#define PERSISTENT_SYM 646
#define PHASE_SYM 647
#define PLUGINS_SYM 648
#define PLUGIN_SYM 649
#define POINT_SYM 650
#define POLYGON 651
#define PORT_SYM 652
#define POSITION_SYM 653
#define PRECISION 654
#define PREPARE_SYM 655
#define PRESERVE_SYM 656
#define PREV_SYM 657
#define PRIMARY_SYM 658
#define PRIVILEGES 659
#define PROCEDURE_SYM 660
#define PROCESS 661
#define PROCESSLIST_SYM 662
#define PROFILE_SYM 663
#define PROFILES_SYM 664
#define PROXY_SYM 665
#define PURGE 666
#define QUARTER_SYM 667
#define QUERY_SYM 668
#define QUICK 669
#define RANGE_SYM 670
#define READS_SYM 671
#define READ_ONLY_SYM 672
#define READ_SYM 673
#define READ_WRITE_SYM 674
#define REAL 675
#define REBUILD_SYM 676
#define RECOVER_SYM 677
#define REDOFILE_SYM 678
#define REDO_BUFFER_SIZE_SYM 679
#define REDUNDANT_SYM 680
#define REFERENCES 681
#define REGEXP 682
#define RELAY 683
#define RELAYLOG_SYM 684
#define RELAY_LOG_FILE_SYM 685
#define RELAY_LOG_POS_SYM 686
#define RELAY_THREAD 687
#define RELEASE_SYM 688
#define RELOAD 689
#define REMOVE_SYM 690
#define RENAME 691
#define REORGANIZE_SYM 692
#define REPAIR 693
#define REPEATABLE_SYM 694
#define REPEAT_SYM 695
#define REPLACE 696
#define REPLICATION 697
#define REQUIRE_SYM 698
#define RESET_SYM 699
#define RESIGNAL_SYM 700
#define RESOURCES 701
#define RESTORE_SYM 702
#define RESTRICT 703
#define RESUME_SYM 704
#define RETURNS_SYM 705
#define RETURN_SYM 706
#define REVOKE 707
#define RIGHT 708
#define ROLLBACK_SYM 709
#define ROLLUP_SYM 710
#define ROUTINE_SYM 711
#define ROWS_SYM 712
#define ROW_FORMAT_SYM 713
#define ROW_SYM 714
#define RTREE_SYM 715
#define SAVEPOINT_SYM 716
#define SCHEDULE_SYM 717
#define SCHEMA_NAME_SYM 718
#define SECOND_MICROSECOND_SYM 719
#define SECOND_SYM 720
#define SECURITY_SYM 721
#define SELECT_SYM 722
#define SENSITIVE_SYM 723
#define SEPARATOR_SYM 724
#define SERIALIZABLE_SYM 725
#define SERIAL_SYM 726
#define SESSION_SYM 727
#define SERVER_SYM 728
#define SERVER_OPTIONS 729
#define SET 730
#define SET_VAR 731
#define SHARE_SYM 732
#define SHIFT_LEFT 733
#define SHIFT_RIGHT 734
#define SHOW 735
#define SHUTDOWN 736
#define SIGNAL_SYM 737
#define SIGNED_SYM 738
#define SIMPLE_SYM 739
#define SLAVE 740
#define SLOW 741
#define SMALLINT 742
#define SNAPSHOT_SYM 743
#define SOCKET_SYM 744
#define SOFT_SYM 745
#define SONAME_SYM 746
#define SOUNDS_SYM 747
#define SOURCE_SYM 748
#define SPATIAL_SYM 749
#define SPECIFIC_SYM 750
#define SQLEXCEPTION_SYM 751
#define SQLSTATE_SYM 752
#define SQLWARNING_SYM 753
#define SQL_BIG_RESULT 754
#define SQL_BUFFER_RESULT 755
#define SQL_CACHE_SYM 756
#define SQL_CALC_FOUND_ROWS 757
#define SQL_NO_CACHE_SYM 758
#define SQL_SMALL_RESULT 759
#define SQL_SYM 760
#define SQL_THREAD 761
#define SSL_SYM 762
#define STARTING 763
#define STARTS_SYM 764
#define START_SYM 765
#define STATUS_SYM 766
#define STDDEV_SAMP_SYM 767
#define STD_SYM 768
#define STOP_SYM 769
#define STORAGE_SYM 770
#define STRAIGHT_JOIN 771
#define STRING_SYM 772
#define SUBCLASS_ORIGIN_SYM 773
#define SUBDATE_SYM 774
#define SUBJECT_SYM 775
#define SUBPARTITIONS_SYM 776
#define SUBPARTITION_SYM 777
#define SUBSTRING 778
#define SUM_SYM 779
#define SUPER_SYM 780
#define SUSPEND_SYM 781
#define SWAPS_SYM 782
#define SWITCHES_SYM 783
#define SYSDATE 784
#define TABLES 785
#define TABLESPACE 786
#define TABLE_REF_PRIORITY 787
#define TABLE_STATS_SYM 788
#define TABLE_SYM 789
#define TABLE_CHECKSUM_SYM 790
#define TABLE_NAME_SYM 791
#define TEMPORARY 792
#define TEMPTABLE_SYM 793
#define TERMINATED 794
#define TEXT_STRING 795
#define TEXT_SYM 796
#define THAN_SYM 797
#define THEN_SYM 798
#define TIMESTAMP 799
#define TIMESTAMP_ADD 800
#define TIMESTAMP_DIFF 801
#define TIME_SYM 802
#define TINYBLOB 803
#define TINYINT 804
#define TINYTEXT 805
#define TO_SYM 806
#define TRAILING 807
#define TRANSACTION_SYM 808
#define TRANSACTIONAL_SYM 809
#define TRIGGERS_SYM 810
#define TRIGGER_SYM 811
#define TRIM 812
#define TRUE_SYM 813
#define TRUNCATE_SYM 814
#define TYPES_SYM 815
#define TYPE_SYM 816
#define UDF_RETURNS_SYM 817
#define ULONGLONG_NUM 818
#define UNCOMMITTED_SYM 819
#define UNDEFINED_SYM 820
#define UNDERSCORE_CHARSET 821
#define UNDOFILE_SYM 822
#define UNDO_BUFFER_SIZE_SYM 823
#define UNDO_SYM 824
#define UNICODE_SYM 825
#define UNINSTALL_SYM 826
#define UNION_SYM 827
#define UNIQUE_SYM 828
#define UNKNOWN_SYM 829
#define UNLOCK_SYM 830
#define UNSIGNED 831
#define UNTIL_SYM 832
#define UPDATE_SYM 833
#define UPGRADE_SYM 834
#define USAGE 835
#define USER 836
#define USER_STATS_SYM 837
#define USE_FRM 838
#define USE_SYM 839
#define USING 840
#define UTC_DATE_SYM 841
#define UTC_TIMESTAMP_SYM 842
#define UTC_TIME_SYM 843
#define VALUES 844
#define VALUE_SYM 845
#define VARBINARY 846
#define VARCHAR 847
#define VARIABLES 848
#define VARIANCE_SYM 849
#define VARYING 850
#define VAR_SAMP_SYM 851
#define VIA_SYM 852
#define VIEW_SYM 853
#define VIRTUAL_SYM 854
#define WAIT_SYM 855
#define WARNINGS 856
#define WEEK_SYM 857
#define WHEN_SYM 858
#define WHERE 859
#define WHILE_SYM 860
#define WITH 861
#define WITH_CUBE_SYM 862
#define WITH_ROLLUP_SYM 863
#define WORK_SYM 864
#define WRAPPER_SYM 865
#define WRITE_SYM 866
#define X509_SYM 867
#define XA_SYM 868
#define XML_SYM 869
#define XOR 870
#define YEAR_MONTH_SYM 871
#define YEAR_SYM 872
#define ZEROFILL 873
#define IMPOSSIBLE_ACTION 874




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 732 "/home/buildbot/git/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  LEX_TYPE lex_type;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  enum ha_choice choice;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  DYNCALL_CREATE_DEF *dyncol_def;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;
  bool is_not_empty;



/* Line 214 of yacc.c  */
#line 2119 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 785 "/home/buildbot/git/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2136 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  602
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   56458

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  639
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  930
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2643
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4474

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   874

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   632,     2,     2,     2,   626,   621,     2,
     629,   630,   624,   623,   631,   622,   637,   625,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   638,   635,
       2,     2,     2,     2,   636,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   627,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   633,   620,   634,   628,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   127,   131,   133,   135,   140,   142,   145,
     146,   151,   152,   155,   159,   161,   164,   165,   169,   170,
     176,   178,   182,   186,   190,   194,   198,   202,   206,   210,
     214,   218,   222,   226,   230,   234,   240,   242,   243,   245,
     249,   251,   255,   259,   263,   267,   268,   276,   277,   290,
     291,   304,   305,   318,   319,   326,   327,   331,   336,   341,
     345,   348,   359,   361,   365,   368,   371,   374,   377,   380,
     383,   386,   387,   401,   402,   409,   412,   413,   415,   419,
     421,   422,   425,   426,   429,   430,   432,   436,   441,   442,
     445,   446,   449,   451,   453,   455,   457,   459,   461,   463,
     465,   467,   469,   471,   473,   475,   476,   480,   482,   483,
     486,   487,   490,   493,   496,   499,   502,   506,   510,   512,
     514,   516,   519,   523,   527,   528,   533,   534,   538,   539,
     541,   545,   547,   548,   550,   554,   556,   557,   561,   562,
     564,   568,   570,   575,   576,   578,   580,   582,   583,   587,
     590,   594,   595,   599,   600,   606,   612,   613,   621,   627,
     628,   631,   633,   635,   637,   641,   643,   645,   647,   651,
     652,   654,   656,   658,   660,   663,   665,   669,   671,   673,
     674,   676,   677,   680,   684,   690,   692,   694,   696,   698,
     700,   702,   704,   706,   708,   710,   712,   714,   716,   718,
     720,   724,   726,   730,   731,   734,   736,   738,   740,   742,
     744,   746,   748,   750,   752,   754,   756,   758,   760,   761,
     767,   768,   771,   772,   776,   777,   780,   783,   786,   789,
     790,   797,   800,   801,   804,   806,   808,   812,   813,   814,
     815,   823,   824,   827,   830,   832,   834,   835,   836,   845,
     846,   853,   855,   858,   860,   863,   864,   865,   872,   873,
     874,   881,   882,   885,   886,   892,   893,   895,   896,   902,
     903,   906,   907,   913,   918,   919,   920,   929,   930,   938,
     940,   942,   944,   946,   948,   951,   956,   962,   963,   968,
     973,   978,   982,   986,   989,   992,   993,   996,   998,  1001,
    1005,  1007,  1009,  1011,  1013,  1015,  1018,  1022,  1024,  1026,
    1028,  1030,  1032,  1034,  1036,  1038,  1040,  1042,  1045,  1049,
    1051,  1053,  1055,  1057,  1059,  1061,  1063,  1066,  1070,  1072,
    1074,  1076,  1078,  1080,  1082,  1084,  1086,  1088,  1091,  1095,
    1097,  1099,  1101,  1104,  1107,  1110,  1112,  1114,  1116,  1118,
    1121,  1125,  1129,  1133,  1137,  1141,  1145,  1149,  1153,  1158,
    1159,  1161,  1163,  1165,  1167,  1169,  1172,  1176,  1179,  1184,
    1185,  1192,  1193,  1199,  1200,  1201,  1207,  1208,  1216,  1218,
    1219,  1221,  1222,  1227,  1228,  1229,  1233,  1239,  1246,  1247,
    1252,  1255,  1258,  1261,  1264,  1265,  1267,  1268,  1272,  1273,
    1275,  1277,  1281,  1283,  1288,  1294,  1300,  1301,  1304,  1305,
    1306,  1314,  1315,  1326,  1328,  1332,  1334,  1336,  1337,  1340,
    1341,  1345,  1347,  1351,  1352,  1359,  1361,  1362,  1363,  1369,
    1370,  1375,  1377,  1379,  1381,  1385,  1387,  1391,  1392,  1393,
    1399,  1401,  1405,  1407,  1409,  1410,  1414,  1416,  1420,  1421,
    1426,  1428,  1429,  1431,  1434,  1436,  1440,  1445,  1449,  1453,
    1457,  1461,  1466,  1471,  1475,  1476,  1477,  1484,  1485,  1487,
    1488,  1490,  1492,  1495,  1497,  1499,  1500,  1502,  1504,  1507,
    1509,  1510,  1514,  1515,  1517,  1519,  1522,  1524,  1527,  1531,
    1535,  1539,  1543,  1547,  1551,  1555,  1559,  1563,  1567,  1571,
    1575,  1579,  1583,  1587,  1588,  1595,  1597,  1599,  1603,  1608,
    1613,  1616,  1619,  1622,  1626,  1630,  1634,  1638,  1642,  1646,
    1650,  1655,  1660,  1662,  1664,  1666,  1668,  1670,  1672,  1674,
    1676,  1678,  1680,  1682,  1684,  1686,  1689,  1691,  1693,  1695,
    1697,  1699,  1701,  1705,  1707,  1709,  1712,  1715,  1716,  1725,
    1726,  1736,  1737,  1747,  1748,  1758,  1767,  1770,  1771,  1773,
    1778,  1779,  1781,  1784,  1785,  1789,  1792,  1793,  1803,  1804,
    1807,  1808,  1810,  1812,  1813,  1815,  1818,  1820,  1822,  1825,
    1828,  1833,  1837,  1841,  1845,  1849,  1851,  1854,  1856,  1858,
    1862,  1865,  1869,  1872,  1875,  1877,  1881,  1885,  1888,  1892,
    1894,  1897,  1900,  1903,  1905,  1908,  1910,  1912,  1914,  1917,
    1921,  1924,  1928,  1931,  1934,  1938,  1942,  1946,  1947,  1954,
    1955,  1962,  1965,  1967,  1969,  1971,  1973,  1975,  1977,  1979,
    1981,  1983,  1985,  1987,  1990,  1993,  1995,  1998,  2000,  2003,
    2007,  2010,  2012,  2014,  2016,  2018,  2020,  2022,  2024,  2027,
    2028,  2030,  2032,  2038,  2039,  2041,  2044,  2046,  2048,  2050,
    2052,  2056,  2060,  2064,  2068,  2069,  2071,  2072,  2074,  2075,
    2077,  2080,  2082,  2084,  2087,  2090,  2095,  2097,  2101,  2104,
    2106,  2109,  2112,  2115,  2119,  2123,  2127,  2131,  2134,  2137,
    2139,  2141,  2143,  2146,  2148,  2150,  2152,  2154,  2156,  2157,
    2160,  2162,  2164,  2166,  2168,  2170,  2171,  2174,  2176,  2178,
    2179,  2181,  2183,  2186,  2189,  2191,  2194,  2197,  2198,  2200,
    2202,  2204,  2208,  2210,  2214,  2215,  2217,  2218,  2220,  2226,
    2227,  2231,  2235,  2237,  2238,  2241,  2244,  2247,  2248,  2252,
    2256,  2263,  2270,  2272,  2274,  2277,  2280,  2283,  2285,  2288,
    2291,  2293,  2295,  2296,  2298,  2300,  2302,  2304,  2305,  2307,
    2309,  2311,  2312,  2314,  2317,  2318,  2320,  2321,  2323,  2324,
    2326,  2328,  2331,  2333,  2336,  2338,  2341,  2344,  2347,  2351,
    2354,  2358,  2362,  2366,  2370,  2372,  2374,  2376,  2378,  2382,
    2384,  2386,  2388,  2393,  2396,  2398,  2403,  2404,  2406,  2407,
    2410,  2412,  2416,  2417,  2424,  2425,  2431,  2439,  2440,  2446,
    2447,  2453,  2454,  2460,  2461,  2466,  2467,  2478,  2482,  2487,
    2491,  2495,  2503,  2504,  2508,  2510,  2515,  2516,  2520,  2521,
    2524,  2525,  2527,  2528,  2531,  2534,  2537,  2540,  2542,  2544,
    2546,  2550,  2555,  2556,  2563,  2568,  2569,  2575,  2576,  2583,
    2588,  2592,  2594,  2597,  2599,  2601,  2602,  2608,  2609,  2613,
    2616,  2617,  2623,  2624,  2625,  2632,  2634,  2638,  2640,  2642,
    2646,  2649,  2653,  2656,  2661,  2662,  2669,  2670,  2671,  2679,
    2684,  2689,  2693,  2697,  2700,  2703,  2710,  2716,  2720,  2726,
    2728,  2730,  2732,  2733,  2735,  2736,  2738,  2739,  2742,  2743,
    2745,  2748,  2750,  2752,  2754,  2755,  2757,  2759,  2760,  2763,
    2765,  2766,  2768,  2770,  2772,  2773,  2779,  2783,  2784,  2790,
    2794,  2798,  2799,  2803,  2804,  2807,  2809,  2813,  2814,  2816,
    2818,  2819,  2822,  2824,  2828,  2829,  2835,  2836,  2838,  2840,
    2844,  2845,  2850,  2851,  2856,  2857,  2859,  2861,  2864,  2866,
    2868,  2870,  2871,  2874,  2875,  2881,  2884,  2888,  2889,  2894,
    2895,  2899,  2900,  2902,  2904,  2907,  2909,  2911,  2913,  2915,
    2917,  2920,  2921,  2924,  2925,  2931,  2932,  2934,  2936,  2937,
    2942,  2947,  2951,  2957,  2959,  2963,  2967,  2968,  2975,  2977,
    2979,  2981,  2985,  2988,  2992,  2994,  2996,  2997,  3004,  3006,
    3008,  3010,  3014,  3018,  3023,  3024,  3031,  3032,  3035,  3036,
    3041,  3042,  3045,  3047,  3050,  3055,  3058,  3062,  3065,  3069,
    3070,  3074,  3075,  3076,  3083,  3086,  3088,  3090,  3093,  3096,
    3105,  3110,  3111,  3113,  3116,  3118,  3120,  3122,  3124,  3125,
    3128,  3133,  3137,  3139,  3141,  3145,  3150,  3151,  3152,  3153,
    3156,  3159,  3161,  3163,  3164,  3167,  3171,  3172,  3175,  3179,
    3183,  3187,  3190,  3194,  3199,  3203,  3208,  3212,  3217,  3219,
    3223,  3228,  3232,  3236,  3243,  3245,  3251,  3258,  3264,  3272,
    3279,  3288,  3294,  3301,  3306,  3311,  3317,  3321,  3326,  3328,
    3332,  3336,  3340,  3344,  3348,  3352,  3358,  3364,  3368,  3372,
    3376,  3380,  3384,  3388,  3390,  3392,  3394,  3396,  3398,  3400,
    3402,  3404,  3406,  3408,  3410,  3412,  3414,  3416,  3418,  3420,
    3422,  3423,  3426,  3428,  3431,  3433,  3435,  3437,  3440,  3443,
    3445,  3447,  3450,  3453,  3458,  3460,  3464,  3466,  3468,  3470,
    3472,  3474,  3478,  3480,  3482,  3484,  3486,  3490,  3493,  3496,
    3499,  3502,  3506,  3510,  3516,  3523,  3528,  3533,  3541,  3544,
    3551,  3557,  3564,  3571,  3576,  3581,  3587,  3592,  3599,  3602,
    3607,  3612,  3617,  3628,  3635,  3644,  3651,  3656,  3661,  3668,
    3673,  3678,  3683,  3690,  3695,  3703,  3711,  3719,  3726,  3733,
    3740,  3747,  3751,  3756,  3763,  3772,  3775,  3778,  3787,  3796,
    3803,  3810,  3813,  3820,  3827,  3836,  3845,  3852,  3861,  3868,
    3871,  3880,  3889,  3892,  3895,  3898,  3905,  3912,  3919,  3924,
    3929,  3938,  3943,  3948,  3953,  3958,  3962,  3971,  3976,  3981,
    3988,  3993,  3998,  4003,  4010,  4019,  4026,  4031,  4038,  4040,
    4047,  4052,  4057,  4062,  4067,  4072,  4079,  4084,  4085,  4091,
    4098,  4101,  4105,  4106,  4111,  4112,  4116,  4117,  4119,  4121,
    4125,  4130,  4135,  4141,  4146,  4151,  4156,  4162,  4167,  4168,
    4169,  4177,  4182,  4188,  4193,  4199,  4204,  4209,  4214,  4219,
    4224,  4230,  4231,  4240,  4241,  4245,  4249,  4251,  4256,  4257,
    4259,  4260,  4263,  4264,  4265,  4270,  4275,  4278,  4279,  4283,
    4286,  4290,  4293,  4295,  4297,  4300,  4302,  4305,  4307,  4310,
    4313,  4316,  4317,  4321,  4322,  4324,  4326,  4330,  4332,  4336,
    4338,  4342,  4343,  4345,  4346,  4349,  4354,  4360,  4362,  4364,
    4366,  4368,  4373,  4375,  4379,  4383,  4387,  4388,  4395,  4396,
    4403,  4404,  4413,  4418,  4419,  4428,  4429,  4440,  4447,  4448,
    4457,  4458,  4469,  4476,  4478,  4481,  4484,  4485,  4490,  4494,
    4500,  4503,  4504,  4505,  4513,  4515,  4516,  4517,  4524,  4525,
    4529,  4530,  4531,  4537,  4538,  4540,  4541,  4543,  4544,  4547,
    4551,  4555,  4557,  4559,  4560,  4568,  4569,  4577,  4579,  4582,
    4583,  4584,  4587,  4588,  4591,  4592,  4594,  4596,  4598,  4600,
    4604,  4606,  4610,  4612,  4614,  4616,  4618,  4620,  4622,  4624,
    4626,  4628,  4630,  4632,  4634,  4636,  4638,  4640,  4642,  4644,
    4646,  4648,  4650,  4652,  4654,  4656,  4658,  4660,  4661,  4663,
    4665,  4666,  4669,  4670,  4672,  4673,  4674,  4678,  4679,  4680,
    4684,  4687,  4688,  4689,  4694,  4699,  4702,  4703,  4705,  4707,
    4711,  4715,  4717,  4720,  4721,  4723,  4724,  4729,  4734,  4737,
    4738,  4740,  4742,  4743,  4745,  4746,  4748,  4751,  4757,  4762,
    4764,  4768,  4772,  4774,  4776,  4778,  4780,  4782,  4784,  4785,
    4788,  4792,  4797,  4799,  4802,  4805,  4807,  4809,  4811,  4813,
    4815,  4817,  4819,  4821,  4823,  4825,  4827,  4829,  4831,  4833,
    4835,  4837,  4839,  4841,  4843,  4845,  4847,  4849,  4851,  4853,
    4855,  4857,  4858,  4859,  4866,  4867,  4869,  4873,  4875,  4879,
    4880,  4883,  4887,  4889,  4892,  4894,  4895,  4899,  4900,  4901,
    4909,  4912,  4914,  4915,  4919,  4920,  4928,  4929,  4936,  4941,
    4948,  4953,  4958,  4963,  4964,  4971,  4976,  4981,  4987,  4994,
    4999,  5001,  5005,  5007,  5009,  5013,  5015,  5016,  5019,  5020,
    5022,  5023,  5024,  5033,  5034,  5035,  5042,  5043,  5045,  5047,
    5049,  5051,  5053,  5056,  5058,  5060,  5062,  5066,  5071,  5072,
    5076,  5080,  5082,  5085,  5088,  5089,  5093,  5094,  5100,  5104,
    5106,  5110,  5112,  5116,  5118,  5120,  5121,  5123,  5124,  5129,
    5130,  5132,  5136,  5138,  5140,  5142,  5143,  5144,  5151,  5152,
    5153,  5165,  5169,  5171,  5175,  5179,  5181,  5185,  5186,  5188,
    5189,  5194,  5195,  5202,  5203,  5209,  5210,  5217,  5219,  5223,
    5226,  5231,  5232,  5235,  5236,  5239,  5241,  5243,  5245,  5246,
    5251,  5252,  5254,  5255,  5257,  5259,  5263,  5265,  5267,  5270,
    5273,  5276,  5278,  5280,  5282,  5284,  5285,  5289,  5290,  5294,
    5297,  5302,  5307,  5311,  5316,  5321,  5323,  5327,  5331,  5338,
    5341,  5344,  5345,  5352,  5353,  5360,  5366,  5369,  5371,  5373,
    5375,  5381,  5387,  5390,  5393,  5395,  5400,  5404,  5407,  5411,
    5414,  5417,  5419,  5423,  5428,  5432,  5436,  5439,  5442,  5444,
    5446,  5448,  5450,  5454,  5458,  5462,  5466,  5470,  5474,  5478,
    5482,  5484,  5486,  5488,  5490,  5492,  5493,  5495,  5496,  5499,
    5500,  5502,  5504,  5506,  5507,  5510,  5511,  5514,  5515,  5518,
    5521,  5522,  5527,  5528,  5533,  5535,  5537,  5538,  5540,  5542,
    5543,  5545,  5547,  5548,  5553,  5554,  5555,  5561,  5563,  5564,
    5569,  5573,  5575,  5578,  5581,  5584,  5587,  5590,  5593,  5596,
    5598,  5600,  5602,  5604,  5606,  5608,  5610,  5612,  5614,  5616,
    5618,  5620,  5621,  5623,  5624,  5628,  5629,  5633,  5637,  5639,
    5640,  5644,  5646,  5649,  5650,  5652,  5653,  5657,  5661,  5664,
    5667,  5668,  5674,  5675,  5677,  5679,  5680,  5682,  5684,  5686,
    5689,  5692,  5693,  5694,  5695,  5696,  5718,  5720,  5722,  5723,
    5725,  5726,  5728,  5730,  5731,  5733,  5735,  5736,  5739,  5742,
    5744,  5748,  5753,  5757,  5761,  5762,  5765,  5768,  5770,  5774,
    5778,  5779,  5784,  5785,  5789,  5791,  5793,  5794,  5798,  5801,
    5805,  5807,  5809,  5812,  5813,  5816,  5820,  5822,  5828,  5830,
    5832,  5835,  5838,  5840,  5842,  5844,  5846,  5848,  5850,  5853,
    5856,  5858,  5860,  5862,  5864,  5866,  5868,  5870,  5872,  5875,
    5878,  5881,  5884,  5887,  5889,  5891,  5893,  5895,  5897,  5899,
    5901,  5905,  5911,  5913,  5915,  5917,  5919,  5921,  5925,  5930,
    5936,  5938,  5944,  5948,  5951,  5953,  5957,  5960,  5963,  5968,
    5970,  5972,  5974,  5976,  5978,  5980,  5982,  5984,  5986,  5988,
    5990,  5992,  5994,  5996,  6000,  6003,  6005,  6007,  6009,  6011,
    6013,  6015,  6017,  6019,  6021,  6023,  6025,  6027,  6029,  6031,
    6033,  6035,  6037,  6039,  6041,  6043,  6045,  6047,  6049,  6051,
    6053,  6055,  6057,  6059,  6061,  6063,  6065,  6067,  6069,  6071,
    6073,  6075,  6077,  6079,  6081,  6083,  6085,  6087,  6089,  6091,
    6093,  6095,  6097,  6099,  6101,  6103,  6105,  6107,  6109,  6111,
    6113,  6115,  6117,  6119,  6121,  6123,  6125,  6127,  6129,  6131,
    6133,  6135,  6137,  6139,  6141,  6143,  6145,  6147,  6149,  6151,
    6153,  6155,  6157,  6159,  6161,  6163,  6165,  6167,  6169,  6171,
    6173,  6175,  6177,  6179,  6181,  6183,  6185,  6187,  6189,  6191,
    6193,  6195,  6197,  6199,  6201,  6203,  6205,  6207,  6209,  6211,
    6213,  6215,  6217,  6219,  6221,  6223,  6225,  6227,  6229,  6231,
    6233,  6235,  6237,  6239,  6241,  6243,  6245,  6247,  6249,  6251,
    6253,  6255,  6257,  6259,  6261,  6263,  6265,  6267,  6269,  6271,
    6273,  6275,  6277,  6279,  6281,  6283,  6285,  6287,  6289,  6291,
    6293,  6295,  6297,  6299,  6301,  6303,  6305,  6307,  6309,  6311,
    6313,  6315,  6317,  6319,  6321,  6323,  6325,  6327,  6329,  6331,
    6333,  6335,  6337,  6339,  6341,  6343,  6345,  6347,  6349,  6351,
    6353,  6355,  6357,  6359,  6361,  6363,  6365,  6367,  6369,  6371,
    6373,  6375,  6377,  6379,  6381,  6383,  6385,  6387,  6389,  6391,
    6393,  6395,  6397,  6399,  6401,  6403,  6405,  6407,  6409,  6411,
    6413,  6415,  6417,  6419,  6421,  6423,  6425,  6427,  6429,  6431,
    6433,  6435,  6437,  6439,  6441,  6443,  6445,  6447,  6449,  6451,
    6453,  6455,  6457,  6459,  6461,  6463,  6465,  6467,  6469,  6471,
    6473,  6475,  6477,  6479,  6481,  6483,  6485,  6487,  6489,  6491,
    6493,  6495,  6497,  6499,  6501,  6503,  6505,  6507,  6509,  6511,
    6513,  6515,  6517,  6519,  6521,  6523,  6525,  6527,  6529,  6531,
    6533,  6535,  6537,  6539,  6541,  6543,  6545,  6547,  6549,  6551,
    6553,  6555,  6557,  6559,  6561,  6563,  6565,  6567,  6569,  6571,
    6573,  6575,  6577,  6579,  6581,  6583,  6585,  6587,  6589,  6591,
    6593,  6595,  6597,  6599,  6601,  6603,  6605,  6607,  6609,  6611,
    6613,  6615,  6617,  6619,  6621,  6623,  6625,  6627,  6629,  6631,
    6633,  6635,  6637,  6639,  6641,  6643,  6645,  6647,  6649,  6651,
    6653,  6655,  6657,  6659,  6661,  6663,  6665,  6667,  6669,  6671,
    6673,  6675,  6677,  6679,  6681,  6683,  6685,  6687,  6689,  6691,
    6693,  6695,  6697,  6699,  6701,  6703,  6705,  6707,  6708,  6713,
    6714,  6716,  6718,  6722,  6723,  6726,  6728,  6730,  6732,  6734,
    6735,  6737,  6738,  6740,  6742,  6744,  6745,  6748,  6751,  6754,
    6756,  6759,  6764,  6770,  6775,  6782,  6785,  6789,  6793,  6797,
    6803,  6805,  6809,  6813,  6816,  6819,  6822,  6824,  6826,  6831,
    6836,  6838,  6840,  6842,  6844,  6846,  6847,  6852,  6854,  6856,
    6858,  6862,  6866,  6868,  6870,  6873,  6876,  6879,  6880,  6884,
    6889,  6893,  6894,  6902,  6904,  6907,  6909,  6911,  6913,  6915,
    6917,  6919,  6920,  6926,  6928,  6930,  6932,  6934,  6936,  6940,
    6947,  6954,  6961,  6969,  6975,  6979,  6988,  6997,  7006,  7013,
    7014,  7016,  7018,  7021,  7022,  7024,  7026,  7030,  7031,  7035,
    7036,  7040,  7041,  7045,  7046,  7050,  7052,  7054,  7056,  7058,
    7060,  7062,  7064,  7066,  7068,  7070,  7072,  7075,  7078,  7080,
    7084,  7087,  7090,  7093,  7096,  7099,  7102,  7105,  7108,  7110,
    7112,  7115,  7116,  7118,  7122,  7124,  7127,  7130,  7133,  7135,
    7139,  7143,  7145,  7147,  7151,  7153,  7157,  7159,  7161,  7163,
    7165,  7170,  7176,  7181,  7188,  7190,  7191,  7195,  7199,  7201,
    7203,  7204,  7207,  7210,  7213,  7216,  7217,  7220,  7221,  7225,
    7228,  7230,  7233,  7236,  7239,  7242,  7245,  7246,  7250,  7251,
    7253,  7254,  7258,  7261,  7262,  7264,  7267,  7268,  7270,  7275,
    7280,  7286,  7289,  7293,  7294,  7296,  7297,  7302,  7303,  7305,
    7307,  7308,  7310,  7311,  7314,  7317,  7319,  7320,  7322,  7324,
    7327,  7331,  7334,  7335,  7342,  7346,  7347,  7348,  7349,  7351,
    7354,  7356,  7358,  7360,  7362,  7364,  7366,  7368,  7370,  7372,
    7375,  7378,  7382,  7384,  7386,  7388,  7390,  7392,  7394,  7396,
    7398,  7400,  7402,  7404,  7406,  7408,  7409,  7413,  7415,  7418,
    7420,  7423,  7427,  7431,  7435,  7436,  7440,  7444,  7445,  7453,
    7454,  7458,  7460,  7464,  7465,  7469,  7472,  7477,  7478,  7482,
    7487,  7492,  7493,  7494,  7495,  7512,  7521,  7529,  7530,  7531,
    7532,  7533,  7534,  7550,  7551,  7552,  7553,  7554,  7567,  7572,
    7577,  7581,  7586,  7590,  7593,  7595,  7599,  7605,  7607,  7609,
    7610,  7612,  7614,  7615,  7618,  7619,  7620,  7624,  7625,  7628,
    7634,  7638,  7642,  7646
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     640,     0,    -1,   157,    -1,    -1,   643,   641,   635,   642,
      -1,   643,   157,    -1,    -1,   157,    -1,   644,    -1,  1496,
      -1,  1002,    -1,  1067,    -1,  1069,    -1,   693,    -1,   656,
      -1,  1072,    -1,  1056,    -1,  1502,    -1,   663,    -1,   645,
      -1,  1320,    -1,  1352,    -1,  1272,    -1,  1274,    -1,   649,
      -1,  1358,    -1,  1468,    -1,  1459,    -1,   654,    -1,  1284,
      -1,  1566,    -1,  1568,    -1,  1086,    -1,  1378,    -1,  1384,
      -1,  1451,    -1,  1078,    -1,   928,    -1,   837,    -1,  1093,
      -1,   647,    -1,  1374,    -1,  1505,    -1,  1081,    -1,  1061,
      -1,  1287,    -1,  1368,    -1,   728,    -1,  1466,    -1,  1503,
      -1,  1504,    -1,  1105,    -1,  1434,    -1,   721,    -1,  1338,
      -1,  1045,    -1,  1048,    -1,  1331,    -1,  1567,    -1,  1457,
      -1,  1312,    -1,  1383,    -1,  1558,    -1,   646,   400,  1428,
      -1,   124,    -1,   145,    -1,   400,  1428,   192,   648,    -1,
    1425,    -1,   636,  1430,    -1,    -1,   171,  1428,   650,   651,
      -1,    -1,   585,   652,    -1,   652,   631,   653,    -1,   653,
      -1,   636,  1430,    -1,    -1,   212,   655,  1430,    -1,    -1,
      57,   301,   551,   657,   658,    -1,   659,    -1,   658,   631,
     659,    -1,   288,   161,  1425,    -1,   302,   161,  1425,    -1,
     291,   161,  1425,    -1,   292,   161,  1251,    -1,   287,   161,
    1251,    -1,   299,   161,  1251,    -1,   295,   161,  1425,    -1,
     294,   161,  1425,    -1,   296,   161,  1425,    -1,   297,   161,
    1425,    -1,   298,   161,  1425,    -1,   300,   161,  1251,    -1,
     303,   161,  1413,    -1,   227,   161,   629,   660,   630,    -1,
     662,    -1,    -1,   661,    -1,   660,   631,   661,    -1,  1251,
      -1,   289,   161,  1425,    -1,   290,   161,  1253,    -1,   430,
     161,  1425,    -1,   431,   161,  1251,    -1,    -1,   103,   889,
     534,   892,  1421,   664,   825,    -1,    -1,   103,   980,   230,
    1428,   984,   363,  1421,   665,   629,   997,   630,   985,    -1,
      -1,   103,   981,   230,  1428,   983,   363,  1421,   666,   629,
     997,   630,   986,    -1,    -1,   103,   982,   230,  1428,   983,
     363,  1421,   667,   629,   997,   630,   987,    -1,    -1,   103,
     111,   892,  1428,   668,   886,    -1,    -1,   103,   669,  1524,
      -1,   103,   581,   686,  1484,    -1,   103,   278,   205,   788,
      -1,   103,   531,   785,    -1,   103,   670,    -1,   473,  1430,
     189,   114,   610,  1430,   369,   629,   671,   630,    -1,   672,
      -1,   671,   631,   672,    -1,   581,  1425,    -1,   216,  1425,
      -1,   111,  1425,    -1,   379,  1425,    -1,   390,  1425,    -1,
     489,  1425,    -1,   397,  1251,    -1,    -1,  1122,   168,   892,
     687,   674,   363,   462,   675,   680,   677,   682,   144,   683,
      -1,    -1,   169,  1127,  1221,   676,   678,   679,    -1,    23,
    1127,    -1,    -1,   153,    -1,   138,   363,   485,    -1,   138,
      -1,    -1,   509,  1127,    -1,    -1,   156,  1127,    -1,    -1,
     681,    -1,   363,    86,   401,    -1,   363,    86,   352,   401,
      -1,    -1,    82,  1425,    -1,    -1,   684,   685,    -1,   734,
      -1,   736,    -1,   732,    -1,   753,    -1,   771,    -1,   773,
      -1,   768,    -1,   738,    -1,   740,    -1,   741,    -1,   742,
      -1,   743,    -1,   745,    -1,    -1,  1428,   637,  1428,    -1,
    1428,    -1,    -1,   688,   690,    -1,    -1,   689,   691,    -1,
      82,  1425,    -1,   256,   505,    -1,   354,   505,    -1,    96,
     505,    -1,   416,   505,   114,    -1,   328,   505,   114,    -1,
     692,    -1,   690,    -1,   136,    -1,  1133,   136,    -1,   505,
     466,   129,    -1,   505,   466,   243,    -1,    -1,    50,   687,
     694,   695,    -1,    -1,   629,   696,   630,    -1,    -1,   697,
      -1,   697,   631,  1127,    -1,  1127,    -1,    -1,   699,    -1,
     699,   631,   701,    -1,   701,    -1,    -1,  1428,   700,   951,
      -1,    -1,   703,    -1,   703,   631,   704,    -1,   704,    -1,
     705,   700,  1428,   951,    -1,    -1,   244,    -1,   378,    -1,
     235,    -1,    -1,   706,   731,   635,    -1,   731,   635,    -1,
     707,   731,   635,    -1,    -1,   708,   709,   635,    -1,    -1,
     127,   729,   710,   951,   730,    -1,   127,  1428,    89,   190,
     717,    -1,    -1,   127,   714,   208,   190,   711,   715,   731,
      -1,   127,  1428,   108,   190,   712,    -1,    -1,   713,  1105,
      -1,   173,    -1,    98,    -1,   716,    -1,   715,   631,   716,
      -1,   720,    -1,  1251,    -1,   718,    -1,   497,   719,  1426,
      -1,    -1,   590,    -1,   717,    -1,  1428,    -1,   498,    -1,
    1133,   191,    -1,   496,    -1,   482,   722,   724,    -1,  1428,
      -1,   718,    -1,    -1,   722,    -1,    -1,   475,   725,    -1,
     727,   161,   726,    -1,   725,   631,   727,   161,   726,    -1,
    1412,    -1,  1158,    -1,  1417,    -1,    65,    -1,   518,    -1,
      93,    -1,    95,    -1,    94,    -1,    55,    -1,   463,    -1,
     536,    -1,    81,    -1,   109,    -1,   319,    -1,   337,    -1,
     445,   723,   724,    -1,  1428,    -1,   729,   631,  1428,    -1,
      -1,   128,  1127,    -1,   734,    -1,   736,    -1,   732,    -1,
     753,    -1,   771,    -1,   773,    -1,   768,    -1,   738,    -1,
     740,    -1,   741,    -1,   742,    -1,   743,    -1,   745,    -1,
      -1,   225,   733,   748,   155,   225,    -1,    -1,   735,   644,
      -1,    -1,   451,   737,  1127,    -1,    -1,   739,   777,    -1,
     262,  1429,    -1,   250,  1429,    -1,   367,  1428,    -1,    -1,
     181,   746,  1428,   241,   744,   747,    -1,    68,  1428,    -1,
      -1,   348,   192,    -1,   192,    -1,  1428,    -1,   747,   631,
    1428,    -1,    -1,    -1,    -1,   749,  1127,   543,   750,   707,
     751,   752,    -1,    -1,   152,   748,    -1,   151,   707,    -1,
     754,    -1,   757,    -1,    -1,    -1,    53,   755,  1127,   756,
     759,   767,   155,    53,    -1,    -1,    53,   758,   760,   767,
     155,    53,    -1,   761,    -1,   759,   761,    -1,   764,    -1,
     760,   764,    -1,    -1,    -1,   603,   762,  1127,   763,   543,
     707,    -1,    -1,    -1,   603,   765,  1127,   766,   543,   707,
      -1,    -1,   151,   707,    -1,    -1,  1429,   638,   769,   777,
     770,    -1,    -1,  1429,    -1,    -1,  1429,   638,   772,   775,
     770,    -1,    -1,   774,   775,    -1,    -1,    31,   776,   708,
     706,   155,    -1,   284,   707,   155,   284,    -1,    -1,    -1,
     605,   778,  1127,   144,   779,   707,   155,   605,    -1,    -1,
     440,   707,   577,   780,  1127,   155,   440,    -1,    30,    -1,
       8,    -1,   237,    -1,   578,    -1,   132,    -1,   810,   812,
      -1,   810,    57,   807,   791,    -1,   810,     6,   807,   786,
     795,    -1,    -1,   584,   278,   205,  1428,    -1,   810,     6,
     807,   798,    -1,   810,   145,   807,   798,    -1,   811,   790,
     801,    -1,   811,   790,   804,    -1,     6,   808,    -1,     6,
     809,    -1,    -1,   792,   793,    -1,   794,    -1,   793,   794,
      -1,   793,   631,   794,    -1,   813,    -1,   814,    -1,   815,
      -1,   796,    -1,   797,    -1,   796,   797,    -1,   796,   631,
     797,    -1,   813,    -1,   814,    -1,   815,    -1,   816,    -1,
     819,    -1,   821,    -1,   823,    -1,   820,    -1,   799,    -1,
     800,    -1,   799,   800,    -1,   799,   631,   800,    -1,   813,
      -1,   814,    -1,   815,    -1,   821,    -1,   823,    -1,   802,
      -1,   803,    -1,   802,   803,    -1,   802,   631,   803,    -1,
     813,    -1,   817,    -1,   818,    -1,   819,    -1,   821,    -1,
     823,    -1,   820,    -1,   805,    -1,   806,    -1,   805,   806,
      -1,   805,   631,   806,    -1,   813,    -1,   821,    -1,   823,
      -1,   113,  1425,    -1,   567,  1425,    -1,   423,  1425,    -1,
    1428,    -1,  1428,    -1,   417,    -1,   419,    -1,   352,     4,
      -1,   233,  1304,   824,    -1,    25,  1304,   824,    -1,   308,
    1304,   824,    -1,   176,  1304,   824,    -1,   568,  1304,   824,
      -1,   424,  1304,   824,    -1,   349,  1304,  1252,    -1,    82,
    1304,  1425,    -1,  1345,   159,  1304,   900,    -1,    -1,   823,
      -1,   600,    -1,   355,    -1,  1254,    -1,  1424,    -1,   629,
     826,    -1,   893,   832,   829,    -1,   267,  1421,    -1,   629,
     267,  1421,   630,    -1,    -1,   906,   630,   827,   893,   832,
     829,    -1,    -1,   832,   882,   630,   828,  1509,    -1,    -1,
      -1,  1392,   885,   882,   830,  1506,    -1,    -1,  1392,   885,
     629,   882,   630,   831,  1509,    -1,   833,    -1,    -1,   834,
      -1,    -1,   389,   836,   835,   839,    -1,    -1,    -1,   389,
     838,   839,    -1,    47,   840,   850,   851,   858,    -1,   842,
     254,   843,   629,   844,   630,    -1,    -1,   842,   210,   841,
     848,    -1,   415,   848,    -1,   415,   847,    -1,   272,   848,
      -1,   272,   847,    -1,    -1,   269,    -1,    -1,    11,   161,
    1252,    -1,    -1,   845,    -1,   846,    -1,   845,   631,   846,
      -1,  1428,    -1,    73,   629,   844,   630,    -1,   629,  1122,
     856,  1123,   630,    -1,   629,  1122,   856,  1123,   630,    -1,
      -1,   388,  1252,    -1,    -1,    -1,   522,    47,   842,   210,
     849,   852,   857,    -1,    -1,   522,    47,   842,   254,   843,
     629,   854,   630,   853,   857,    -1,   855,    -1,   854,   631,
     855,    -1,  1428,    -1,  1130,    -1,    -1,   521,  1252,    -1,
      -1,   629,   859,   630,    -1,   860,    -1,   859,   631,   860,
      -1,    -1,   389,   861,   862,   863,   879,   874,    -1,  1428,
      -1,    -1,    -1,   589,   264,   542,   864,   866,    -1,    -1,
     589,   244,   865,   867,    -1,   312,    -1,   869,    -1,   869,
      -1,   629,   868,   630,    -1,   869,    -1,   868,   631,   869,
      -1,    -1,    -1,   629,   870,   872,   871,   630,    -1,   873,
      -1,   872,   631,   873,    -1,   312,    -1,  1130,    -1,    -1,
     629,   875,   630,    -1,   876,    -1,   875,   631,   876,    -1,
      -1,   522,   877,   878,   879,    -1,  1430,    -1,    -1,   880,
      -1,   880,   881,    -1,   881,    -1,   531,  1304,  1430,    -1,
    1345,   159,  1304,   900,    -1,    90,  1304,  1425,    -1,   349,
    1304,  1252,    -1,   307,  1304,  1254,    -1,   325,  1304,  1254,
      -1,   114,   137,  1304,  1425,    -1,   230,   137,  1304,  1425,
      -1,    82,  1304,  1425,    -1,    -1,    -1,   467,   883,  1116,
    1120,   884,   904,    -1,    -1,    19,    -1,    -1,   887,    -1,
     888,    -1,   887,   888,    -1,   899,    -1,   898,    -1,    -1,
     890,    -1,   891,    -1,   891,   890,    -1,   537,    -1,    -1,
     225,  1133,   172,    -1,    -1,   895,    -1,   896,    -1,   896,
     894,    -1,   896,    -1,   896,   895,    -1,   896,   631,   895,
      -1,   159,  1304,   900,    -1,   307,  1304,  1253,    -1,   325,
    1304,  1253,    -1,    27,  1304,  1251,    -1,   390,  1304,  1425,
      -1,    82,  1304,  1425,    -1,    26,  1304,  1253,    -1,   380,
    1304,  1251,    -1,   380,  1304,   128,    -1,    62,  1304,  1251,
      -1,   535,  1304,  1251,    -1,   382,  1304,  1257,    -1,   131,
    1304,  1251,    -1,   458,  1304,   902,    -1,    -1,   572,  1304,
     897,   629,  1366,   630,    -1,   898,    -1,   899,    -1,   238,
    1304,   903,    -1,   114,   137,  1304,  1425,    -1,   230,   137,
    1304,  1425,    -1,   531,  1428,    -1,   515,   140,    -1,   515,
     317,    -1,    90,  1304,  1425,    -1,   253,  1304,  1251,    -1,
     554,  1304,  1257,    -1,  1424,  1303,  1425,    -1,  1424,  1303,
    1428,    -1,  1424,  1303,  1254,    -1,  1424,  1303,   128,    -1,
     963,   954,  1304,   956,    -1,   963,    71,  1304,   962,    -1,
    1430,    -1,  1430,    -1,   128,    -1,   184,    -1,   149,    -1,
      87,    -1,   425,    -1,    85,    -1,   381,    -1,   354,    -1,
     183,    -1,   257,    -1,  1244,    -1,  1115,  1119,    -1,   517,
      -1,   420,    -1,   126,    -1,   242,    -1,   907,    -1,   908,
      -1,   907,   631,   908,    -1,   909,    -1,   910,    -1,   919,
     915,    -1,   919,   969,    -1,    -1,   975,   999,   984,   629,
     997,   630,   911,   985,    -1,    -1,   981,   978,   999,   983,
     629,   997,   630,   912,   986,    -1,    -1,   982,   978,   999,
     983,   629,   997,   630,   913,   987,    -1,    -1,   917,   976,
     999,   984,   629,   997,   630,   914,   985,    -1,   917,   189,
     254,   999,   629,   997,   630,   969,    -1,   917,   916,    -1,
      -1,   916,    -1,    63,   629,  1127,   630,    -1,    -1,   918,
      -1,    92,   999,    -1,    -1,  1420,   920,   921,    -1,   930,
     948,    -1,    -1,   930,   923,    19,   922,   629,   929,   630,
     924,   925,    -1,    -1,   198,    14,    -1,    -1,   599,    -1,
     391,    -1,    -1,   926,    -1,   926,   927,    -1,   927,    -1,
     573,    -1,   573,   254,    -1,    82,  1425,    -1,   385,   629,
     929,   630,    -1,  1122,  1127,  1123,    -1,   938,   946,   942,
      -1,   939,   947,   942,    -1,   186,   940,   942,    -1,    39,
      -1,    39,   945,    -1,    44,    -1,    43,    -1,   934,   945,
     966,    -1,   934,   966,    -1,   935,   945,   967,    -1,   935,
     967,    -1,    34,   945,    -1,    34,    -1,   936,   945,   966,
      -1,   937,   945,   967,    -1,   591,   945,    -1,   617,   946,
     942,    -1,   118,    -1,   547,   946,    -1,   544,   946,    -1,
     115,   946,    -1,   548,    -1,    41,   946,    -1,   933,    -1,
     313,    -1,   280,    -1,   283,   591,    -1,   283,   936,   966,
      -1,   550,   966,    -1,   541,   946,   966,    -1,   315,   966,
      -1,   281,   966,    -1,   126,   940,   942,    -1,   359,   940,
     942,    -1,   184,   940,   942,    -1,    -1,   160,   931,   629,
    1001,   630,   966,    -1,    -1,   475,   932,   629,  1001,   630,
     966,    -1,   283,   966,    -1,   471,    -1,   200,    -1,   199,
      -1,   395,    -1,   333,    -1,   271,    -1,   332,    -1,   396,
      -1,   334,    -1,    60,    -1,   343,    -1,   340,    60,    -1,
     934,   595,    -1,   592,    -1,   340,   592,    -1,   360,    -1,
     343,   592,    -1,   340,    60,   595,    -1,   343,   595,    -1,
     242,    -1,   549,    -1,   487,    -1,   314,    -1,    33,    -1,
     420,    -1,   143,    -1,   143,   399,    -1,    -1,   945,    -1,
     941,    -1,   629,   358,   631,   358,   630,    -1,    -1,   943,
      -1,   943,   944,    -1,   944,    -1,   483,    -1,   576,    -1,
     618,    -1,   629,   282,   630,    -1,   629,   563,   630,    -1,
     629,   125,   630,    -1,   629,   358,   630,    -1,    -1,   945,
      -1,    -1,   941,    -1,    -1,   949,    -1,   949,   950,    -1,
     950,    -1,   357,    -1,  1133,   357,    -1,   128,   952,    -1,
     363,   578,   353,  1126,    -1,    26,    -1,   471,   128,   590,
      -1,   968,   254,    -1,   573,    -1,   573,   254,    -1,    82,
    1425,    -1,    71,   960,    -1,  1424,  1303,  1425,    -1,  1424,
    1303,  1428,    -1,  1424,  1303,  1254,    -1,  1424,  1303,   128,
      -1,   930,   961,    -1,   353,  1126,    -1,  1411,    -1,   213,
      -1,   214,    -1,    60,   475,    -1,    59,    -1,  1430,    -1,
      34,    -1,   955,    -1,   128,    -1,    -1,   954,   956,    -1,
    1430,    -1,    34,    -1,   958,    -1,   128,    -1,  1430,    -1,
      -1,    71,   962,    -1,   960,    -1,   128,    -1,    -1,   128,
      -1,    21,    -1,    34,    21,    -1,    21,    34,    -1,   570,
      -1,   570,    34,    -1,    34,   570,    -1,    -1,   964,    -1,
     965,    -1,    48,    -1,   954,   955,   967,    -1,    34,    -1,
      34,   954,   955,    -1,    -1,    34,    -1,    -1,   403,    -1,
     426,  1421,   970,   972,   973,    -1,    -1,   629,   971,   630,
      -1,   971,   631,  1428,    -1,  1428,    -1,    -1,   304,   193,
      -1,   304,   386,    -1,   304,   484,    -1,    -1,   363,   578,
     974,    -1,   363,   132,   974,    -1,   363,   578,   974,   363,
     132,   974,    -1,   363,   132,   974,   363,   578,   974,    -1,
     448,    -1,    51,    -1,   475,   357,    -1,   354,     5,    -1,
     475,   128,    -1,   977,    -1,   403,   254,    -1,   573,   978,
      -1,   254,    -1,   230,    -1,    -1,   977,    -1,   252,    -1,
     230,    -1,   229,    -1,    -1,   573,    -1,   194,    -1,   494,
      -1,    -1,   983,    -1,   983,   991,    -1,    -1,   988,    -1,
      -1,   990,    -1,    -1,   989,    -1,   993,    -1,   988,   993,
      -1,   994,    -1,   989,   994,    -1,   995,    -1,   990,   995,
      -1,   585,   996,    -1,   561,   996,    -1,   253,  1304,  1251,
      -1,    82,  1425,    -1,  1424,  1303,  1425,    -1,  1424,  1303,
    1428,    -1,  1424,  1303,  1254,    -1,  1424,  1303,   128,    -1,
     992,    -1,   991,    -1,   992,    -1,   992,    -1,   606,   384,
    1424,    -1,    46,    -1,   460,    -1,   210,    -1,   997,   631,
     998,  1242,    -1,   998,  1242,    -1,  1428,    -1,  1428,   629,
     358,   630,    -1,    -1,  1420,    -1,    -1,   637,  1428,    -1,
    1409,    -1,  1001,   631,  1409,    -1,    -1,    13,  1037,   534,
    1421,  1003,  1014,    -1,    -1,    13,   111,  1013,  1004,   887,
      -1,    13,   111,  1428,   579,   114,   137,   339,    -1,    -1,
      13,   405,   687,  1005,   688,    -1,    -1,    13,   195,   687,
    1006,   688,    -1,    -1,    13,  1532,  1527,  1007,  1534,    -1,
      -1,    13,  1527,  1008,  1534,    -1,    -1,    13,  1527,   168,
     687,  1009,  1010,  1011,   677,   682,  1012,    -1,    13,   531,
     787,    -1,    13,   278,   205,   789,    -1,    13,   531,   784,
      -1,    13,   531,   783,    -1,    13,   473,  1430,   369,   629,
     671,   630,    -1,    -1,   363,   462,   675,    -1,   681,    -1,
     363,   462,   675,   681,    -1,    -1,   436,   551,   687,    -1,
      -1,   144,   683,    -1,    -1,  1428,    -1,    -1,   139,   531,
      -1,   228,   531,    -1,  1029,   833,    -1,  1029,  1018,    -1,
    1018,    -1,   834,    -1,  1020,    -1,   145,   389,  1027,    -1,
     421,   389,  1080,  1019,    -1,    -1,   368,   389,  1080,  1019,
    1015,  1080,    -1,    15,   389,  1080,  1019,    -1,    -1,    63,
     389,  1019,  1016,  1074,    -1,    -1,   438,   389,  1080,  1019,
    1017,  1063,    -1,    69,   389,  1080,  1252,    -1,   559,   389,
    1019,    -1,  1023,    -1,   435,   387,    -1,    12,    -1,  1027,
      -1,    -1,     6,   389,  1080,  1021,  1022,    -1,    -1,   629,
     859,   630,    -1,   388,  1252,    -1,    -1,   437,   389,  1080,
    1024,  1025,    -1,    -1,    -1,  1027,  1026,   241,   629,   859,
     630,    -1,  1028,    -1,  1027,   631,  1028,    -1,  1428,    -1,
    1031,    -1,  1029,   631,  1031,    -1,     6,  1035,    -1,  1030,
     909,  1043,    -1,     6,   910,    -1,  1030,   629,   906,   630,
      -1,    -1,    57,  1035,  1420,  1032,   919,  1043,    -1,    -1,
      -1,   329,  1035,  1420,  1033,   921,  1034,  1043,    -1,   145,
    1035,  1420,  1042,    -1,   145,   189,   254,   999,    -1,   145,
     403,   254,    -1,   145,   977,  1420,    -1,   138,   252,    -1,
     153,   252,    -1,    13,  1035,  1420,   475,   128,  1411,    -1,
      13,  1035,  1420,   145,   128,    -1,   436,  1044,  1421,    -1,
     100,   551,   954,   956,   961,    -1,   894,    -1,   188,    -1,
    1235,    -1,    -1,    80,    -1,    -1,   226,    -1,    -1,  1038,
    1039,    -1,    -1,  1040,    -1,  1040,  1041,    -1,  1041,    -1,
     226,    -1,   366,    -1,    -1,   448,    -1,    51,    -1,    -1,
       8,  1428,    -1,   183,    -1,    -1,   551,    -1,   161,    -1,
      19,    -1,    -1,   510,   485,  1050,  1046,  1054,    -1,   514,
     485,  1050,    -1,    -1,   485,   510,  1050,  1047,  1054,    -1,
     485,   514,  1050,    -1,   510,   553,  1049,    -1,    -1,   606,
      91,   488,    -1,    -1,  1051,  1052,    -1,  1053,    -1,  1052,
     631,  1053,    -1,    -1,   506,    -1,   432,    -1,    -1,   577,
    1055,    -1,   662,    -1,  1055,   631,   662,    -1,    -1,    62,
    1453,  1057,  1278,  1058,    -1,    -1,   414,    -1,   175,    -1,
    1453,  1278,  1063,    -1,    -1,   598,  1060,  1278,  1066,    -1,
      -1,   438,  1080,  1062,  1059,    -1,    -1,  1064,    -1,  1065,
      -1,  1065,  1064,    -1,   414,    -1,   175,    -1,   583,    -1,
      -1,   192,   336,    -1,    -1,    15,  1080,  1453,  1068,  1278,
      -1,    35,  1425,    -1,  1453,  1278,  1074,    -1,    -1,   598,
    1071,  1278,  1077,    -1,    -1,    63,  1073,  1070,    -1,    -1,
    1075,    -1,  1076,    -1,  1076,  1075,    -1,   414,    -1,   179,
      -1,   316,    -1,   175,    -1,    58,    -1,   190,   579,    -1,
      -1,   190,   579,    -1,    -1,   368,  1080,  1453,  1079,  1278,
      -1,    -1,   356,    -1,   274,    -1,    -1,   436,  1453,  1082,
    1084,    -1,   436,   581,   686,  1083,    -1,  1431,   551,  1431,
      -1,  1083,   631,  1431,   551,  1431,    -1,  1085,    -1,  1084,
     631,  1085,    -1,  1421,   551,  1421,    -1,    -1,    49,   230,
    1087,  1088,   244,  1092,    -1,  1089,    -1,  1091,    -1,  1090,
      -1,  1089,   631,  1090,    -1,  1421,  1101,    -1,  1421,  1099,
    1101,    -1,  1428,    -1,   128,    -1,    -1,   273,   230,   241,
      49,  1094,  1095,    -1,  1098,    -1,  1096,    -1,  1097,    -1,
    1096,   631,  1097,    -1,  1421,  1101,  1104,    -1,  1421,  1099,
    1101,  1104,    -1,    -1,   389,   836,  1100,   629,  1019,   630,
      -1,    -1,  1102,  1103,    -1,    -1,   977,   629,  1217,   630,
      -1,    -1,   226,   261,    -1,  1106,    -1,   467,  1109,    -1,
     629,  1107,   630,  1509,    -1,   467,  1111,    -1,   629,  1107,
     630,    -1,   467,  1196,    -1,   629,  1108,   630,    -1,    -1,
    1111,  1110,  1506,    -1,    -1,    -1,  1112,  1116,  1120,  1113,
    1114,  1119,    -1,  1238,  1244,    -1,  1267,    -1,  1115,    -1,
    1267,  1115,    -1,  1115,  1267,    -1,   192,  1178,  1227,  1232,
    1229,  1238,  1244,  1258,    -1,   192,   146,  1227,  1244,    -1,
      -1,  1117,    -1,  1117,  1118,    -1,  1118,    -1,  1523,    -1,
     503,    -1,   501,    -1,    -1,   190,   578,    -1,   277,   244,
     477,   327,    -1,  1120,   631,  1121,    -1,  1121,    -1,   624,
      -1,  1122,  1415,  1123,    -1,  1122,  1127,  1123,  1124,    -1,
      -1,    -1,    -1,    19,  1428,    -1,    19,  1425,    -1,  1428,
      -1,  1425,    -1,    -1,   629,   630,    -1,   629,  1252,   630,
      -1,    -1,   629,   630,    -1,  1127,  1131,  1127,    -1,  1127,
     615,  1127,    -1,  1127,  1132,  1127,    -1,   352,  1127,    -1,
    1128,   247,   558,    -1,  1128,   247,  1133,   558,    -1,  1128,
     247,   178,    -1,  1128,   247,  1133,   178,    -1,  1128,   247,
     574,    -1,  1128,   247,  1133,   574,    -1,  1128,    -1,  1128,
     247,   357,    -1,  1128,   247,  1133,   357,    -1,  1128,   162,
    1129,    -1,  1128,  1135,  1129,    -1,  1128,  1135,  1136,   629,
    1518,   630,    -1,  1129,    -1,  1130,   244,   629,  1518,   630,
      -1,  1130,  1133,   244,   629,  1518,   630,    -1,  1130,   244,
     629,  1127,   630,    -1,  1130,   244,   629,  1127,   631,  1171,
     630,    -1,  1130,  1133,   244,   629,  1127,   630,    -1,  1130,
    1133,   244,   629,  1127,   631,  1171,   630,    -1,  1130,    32,
    1130,    17,  1129,    -1,  1130,  1133,    32,  1130,    17,  1129,
      -1,  1130,   492,   267,  1130,    -1,  1130,   267,  1141,  1231,
      -1,  1130,  1133,   267,  1141,  1231,    -1,  1130,   427,  1130,
      -1,  1130,  1133,   427,  1130,    -1,  1130,    -1,  1130,   620,
    1130,    -1,  1130,   621,  1130,    -1,  1130,   478,  1130,    -1,
    1130,   479,  1130,    -1,  1130,   623,  1130,    -1,  1130,   622,
    1130,    -1,  1130,   623,   240,  1127,  1221,    -1,  1130,   622,
     240,  1127,  1221,    -1,  1130,   624,  1130,    -1,  1130,   625,
    1130,    -1,  1130,   626,  1130,    -1,  1130,   142,  1130,    -1,
    1130,   330,  1130,    -1,  1130,   627,  1130,    -1,  1141,    -1,
     375,    -1,   372,    -1,    17,    -1,    16,    -1,   352,    -1,
     351,    -1,   632,    -1,   351,    -1,   161,    -1,   196,    -1,
     207,    -1,   259,    -1,   286,    -1,   345,    -1,    12,    -1,
      18,    -1,    -1,    19,  1138,    -1,   242,    -1,   576,   242,
      -1,   143,    -1,   420,    -1,   186,    -1,   126,   940,    -1,
     934,   966,    -1,   935,    -1,   118,    -1,   547,   946,    -1,
     115,   946,    -1,  1127,   631,  1127,  1137,    -1,  1139,    -1,
    1140,   631,  1139,    -1,  1417,    -1,  1142,    -1,  1143,    -1,
    1146,    -1,  1144,    -1,  1141,    71,  1430,    -1,  1412,    -1,
    1410,    -1,  1158,    -1,  1154,    -1,  1141,   374,  1141,    -1,
     623,  1141,    -1,   622,  1141,    -1,   628,  1141,    -1,  1134,
    1141,    -1,   629,  1518,   630,    -1,   629,  1127,   630,    -1,
     629,  1127,   631,  1171,   630,    -1,   459,   629,  1127,   631,
    1171,   630,    -1,   172,   629,  1518,   630,    -1,   633,  1428,
    1127,   634,    -1,   304,  1172,     9,   629,  1130,  1148,   630,
      -1,    34,  1141,    -1,    54,   629,  1127,    19,  1168,   630,
      -1,    53,  1174,  1176,  1175,   155,    -1,   100,   629,  1127,
     631,  1168,   630,    -1,   100,   629,  1127,   585,   955,   630,
      -1,   128,   629,  1417,   630,    -1,   589,   629,  1418,   630,
      -1,   240,  1127,  1221,   623,  1127,    -1,    60,   629,  1171,
     630,    -1,    60,   629,  1171,   585,   955,   630,    -1,   107,
    1126,    -1,   118,   629,  1127,   630,    -1,   123,   629,  1127,
     630,    -1,   221,   629,  1127,   630,    -1,   237,   629,  1127,
     631,  1127,   631,  1127,   631,  1127,   630,    -1,   240,   629,
    1127,   631,  1127,   630,    -1,   240,   629,  1127,   631,  1127,
     631,  1171,   630,    -1,   263,   629,  1127,   631,  1127,   630,
      -1,   324,   629,  1127,   630,    -1,   331,   629,  1127,   630,
      -1,   453,   629,  1127,   631,  1127,   630,    -1,   465,   629,
    1127,   630,    -1,   547,   629,  1127,   630,    -1,   544,   629,
    1127,   630,    -1,   544,   629,  1127,   631,  1127,   630,    -1,
     557,   629,  1127,   630,    -1,   557,   629,   260,  1127,   192,
    1127,   630,    -1,   557,   629,   552,  1127,   192,  1127,   630,
      -1,   557,   629,    45,  1127,   192,  1127,   630,    -1,   557,
     629,   260,   192,  1127,   630,    -1,   557,   629,   552,   192,
    1127,   630,    -1,   557,   629,    45,   192,  1127,   630,    -1,
     557,   629,  1127,   192,  1127,   630,    -1,   581,   629,   630,
      -1,   617,   629,  1127,   630,    -1,     7,   629,  1127,   631,
    1127,   630,    -1,     7,   629,  1127,   631,   240,  1127,  1221,
     630,    -1,   106,  1126,    -1,   110,  1125,    -1,   116,   629,
    1127,   631,   240,  1127,  1221,   630,    -1,   117,   629,  1127,
     631,   240,  1127,  1221,   630,    -1,   177,   629,  1221,   192,
    1127,   630,    -1,   201,   629,  1223,   631,  1127,   630,    -1,
     353,  1125,    -1,   398,   629,  1130,   244,  1127,   630,    -1,
     519,   629,  1127,   631,  1127,   630,    -1,   519,   629,  1127,
     631,   240,  1127,  1221,   630,    -1,   523,   629,  1127,   631,
    1127,   631,  1127,   630,    -1,   523,   629,  1127,   631,  1127,
     630,    -1,   523,   629,  1127,   192,  1127,   190,  1127,   630,
      -1,   523,   629,  1127,   192,  1127,   630,    -1,   529,  1125,
      -1,   545,   629,  1222,   631,  1127,   631,  1127,   630,    -1,
     546,   629,  1222,   631,  1127,   631,  1127,   630,    -1,   586,
    1126,    -1,   588,  1125,    -1,   587,  1125,    -1,    74,   629,
    1127,   631,  1140,   630,    -1,    76,   629,  1127,   631,  1171,
     630,    -1,    77,   629,  1127,   631,  1127,   630,    -1,    79,
     629,  1127,   630,    -1,    75,   629,  1140,   630,    -1,    78,
     629,  1127,   631,  1127,    19,  1168,   630,    -1,    21,   629,
    1127,   630,    -1,    59,   629,  1127,   630,    -1,    69,   629,
    1171,   630,    -1,    72,   629,  1127,   630,    -1,   111,   629,
     630,    -1,   225,   629,  1127,   631,  1127,   631,  1127,   630,
      -1,   258,   629,  1171,   630,    -1,   320,   629,  1127,   630,
      -1,   330,   629,  1127,   631,  1127,   630,    -1,   362,   629,
    1127,   630,    -1,   390,   629,  1127,   630,    -1,   412,   629,
    1127,   630,    -1,   440,   629,  1127,   631,  1127,   630,    -1,
     441,   629,  1127,   631,  1127,   631,  1127,   630,    -1,   559,
     629,  1127,   631,  1127,   630,    -1,   602,   629,  1127,   630,
      -1,   602,   629,  1127,   631,  1127,   630,    -1,  1145,    -1,
      96,   629,  1127,   631,  1127,   630,    -1,   199,   629,  1171,
     630,    -1,   271,   629,  1171,   630,    -1,   332,   629,  1171,
     630,    -1,   333,   629,  1171,   630,    -1,   334,   629,  1171,
     630,    -1,   395,   629,  1127,   631,  1127,   630,    -1,   396,
     629,  1171,   630,    -1,    -1,  1424,   629,  1147,  1151,   630,
      -1,  1428,   637,  1428,   629,  1170,   630,    -1,  1149,  1150,
      -1,   244,    43,   327,    -1,    -1,   244,   341,   256,   327,
      -1,    -1,   606,   413,   174,    -1,    -1,  1152,    -1,  1153,
      -1,  1152,   631,  1153,    -1,  1122,  1127,  1123,  1124,    -1,
      28,   629,  1166,   630,    -1,    28,   629,   141,  1166,   630,
      -1,    37,   629,  1166,   630,    -1,    38,   629,  1166,   630,
      -1,    40,   629,  1166,   630,    -1,   101,   629,  1226,   624,
     630,    -1,   101,   629,  1166,   630,    -1,    -1,    -1,   101,
     629,   141,  1155,  1171,  1156,   630,    -1,   326,   629,  1166,
     630,    -1,   326,   629,   141,  1166,   630,    -1,   309,   629,
    1166,   630,    -1,   309,   629,   141,  1166,   630,    -1,   513,
     629,  1166,   630,    -1,   594,   629,  1166,   630,    -1,   512,
     629,  1166,   630,    -1,   596,   629,  1166,   630,    -1,   524,
     629,  1166,   630,    -1,   524,   629,   141,  1166,   630,    -1,
      -1,   206,   629,  1161,  1157,  1171,  1163,  1162,   630,    -1,
      -1,   636,  1159,  1160,    -1,  1430,   476,  1127,    -1,  1430,
      -1,   636,  1443,  1430,  1000,    -1,    -1,   141,    -1,    -1,
     469,  1409,    -1,    -1,    -1,   373,    47,  1164,  1165,    -1,
    1165,   631,  1416,  1242,    -1,  1416,  1242,    -1,    -1,  1226,
    1167,  1127,    -1,    34,   946,    -1,    60,   946,   966,    -1,
     343,   946,    -1,   242,    -1,   483,    -1,   483,   242,    -1,
     576,    -1,   576,   242,    -1,   118,    -1,   547,   946,    -1,
     115,   946,    -1,   126,   940,    -1,    -1,   143,  1169,   947,
      -1,    -1,  1171,    -1,  1127,    -1,  1171,   631,  1127,    -1,
    1173,    -1,   629,  1173,   630,    -1,  1417,    -1,  1173,   631,
    1417,    -1,    -1,  1127,    -1,    -1,   151,  1127,    -1,   603,
    1127,   543,  1127,    -1,  1176,   603,  1127,   543,  1127,    -1,
    1190,    -1,  1181,    -1,  1180,    -1,  1177,    -1,   633,  1428,
    1177,   634,    -1,  1179,    -1,  1180,   631,  1179,    -1,  1177,
    1189,  1177,    -1,  1177,   516,  1190,    -1,    -1,  1177,  1189,
    1177,   363,  1182,  1127,    -1,    -1,  1177,   516,  1190,   363,
    1183,  1127,    -1,    -1,  1177,  1189,  1177,   585,  1184,   629,
    1220,   630,    -1,  1177,   341,   251,  1190,    -1,    -1,  1177,
     263,  1206,   251,  1177,   363,  1185,  1127,    -1,    -1,  1177,
     263,  1206,   251,  1190,  1186,   585,   629,  1220,   630,    -1,
    1177,   341,   263,  1206,   251,  1190,    -1,    -1,  1177,   453,
    1206,   251,  1177,   363,  1187,  1127,    -1,    -1,  1177,   453,
    1206,   251,  1190,  1188,   585,   629,  1220,   630,    -1,  1177,
     341,   453,  1206,   251,  1190,    -1,   251,    -1,   234,   251,
      -1,   104,   251,    -1,    -1,  1191,  1421,  1225,  1215,    -1,
    1205,  1204,  1201,    -1,   629,  1204,  1192,   630,  1225,    -1,
    1199,  1510,    -1,    -1,    -1,  1192,   572,  1514,  1193,  1515,
    1194,  1510,    -1,  1196,    -1,    -1,    -1,  1197,  1521,  1120,
    1198,   904,  1119,    -1,    -1,  1204,  1200,  1180,    -1,    -1,
      -1,  1202,  1116,  1120,  1203,   904,    -1,    -1,   467,    -1,
      -1,   376,    -1,    -1,   190,   251,    -1,   190,   373,    47,
      -1,   190,   205,    47,    -1,   188,    -1,   226,    -1,    -1,
    1208,   977,  1207,  1210,   629,  1219,   630,    -1,    -1,   584,
     977,  1207,  1211,   629,  1217,   630,    -1,  1209,    -1,  1212,
    1209,    -1,    -1,    -1,  1214,  1212,    -1,    -1,  1216,  1213,
      -1,    -1,  1219,    -1,  1428,    -1,   403,    -1,  1218,    -1,
    1219,   631,  1218,    -1,  1428,    -1,  1220,   631,  1428,    -1,
    1222,    -1,   119,    -1,   120,    -1,   121,    -1,   122,    -1,
     218,    -1,   219,    -1,   220,    -1,   322,    -1,   323,    -1,
     464,    -1,   616,    -1,   123,    -1,   602,    -1,   221,    -1,
     324,    -1,   331,    -1,   412,    -1,   465,    -1,   320,    -1,
     617,    -1,   118,    -1,   547,    -1,   115,    -1,   544,    -1,
      -1,    19,    -1,   161,    -1,    -1,  1224,  1428,    -1,    -1,
      12,    -1,    -1,    -1,   604,  1228,  1127,    -1,    -1,    -1,
     211,  1230,  1127,    -1,   166,  1141,    -1,    -1,    -1,   205,
      47,  1233,  1234,    -1,  1233,   631,  1416,  1242,    -1,  1416,
    1242,    -1,    -1,   607,    -1,   608,    -1,   373,    47,  1236,
      -1,  1236,   631,  1237,    -1,  1237,    -1,  1418,  1242,    -1,
      -1,  1239,    -1,    -1,   373,    47,  1240,  1241,    -1,  1241,
     631,  1416,  1242,    -1,  1416,  1242,    -1,    -1,    20,    -1,
     133,    -1,    -1,  1245,    -1,    -1,  1245,    -1,   268,  1246,
      -1,   268,  1246,   457,   170,  1248,    -1,   268,   457,   170,
    1248,    -1,  1247,    -1,  1247,   631,  1247,    -1,  1247,   361,
    1247,    -1,  1428,    -1,  1410,    -1,   563,    -1,   282,    -1,
     358,    -1,  1247,    -1,    -1,   268,  1247,    -1,   268,   457,
     170,    -1,   268,  1247,   457,   170,    -1,   358,    -1,   622,
     358,    -1,   622,   282,    -1,   358,    -1,   213,    -1,   282,
      -1,   563,    -1,   125,    -1,   185,    -1,   358,    -1,   213,
      -1,   282,    -1,   563,    -1,  1255,    -1,   358,    -1,   563,
      -1,   282,    -1,   125,    -1,   185,    -1,   358,    -1,   563,
      -1,   213,    -1,   282,    -1,  1255,    -1,  1256,    -1,   125,
      -1,   185,    -1,  1251,    -1,   128,    -1,    -1,    -1,   405,
    1428,  1259,   629,  1260,   630,    -1,    -1,  1261,    -1,  1261,
     631,  1262,    -1,  1262,    -1,  1122,  1127,  1123,    -1,    -1,
    1264,  1265,    -1,  1265,   631,  1266,    -1,  1266,    -1,   636,
    1430,    -1,  1430,    -1,    -1,   241,  1268,  1269,    -1,    -1,
      -1,   377,  1427,  1270,   957,  1271,  1393,  1396,    -1,   147,
    1427,    -1,  1263,    -1,    -1,   144,  1273,  1171,    -1,    -1,
     145,  1283,  1453,  1282,  1275,  1278,  1042,    -1,    -1,   145,
     230,  1428,   363,  1421,  1276,    -1,   145,   111,  1282,  1428,
      -1,   145,   195,  1282,  1428,   637,  1428,    -1,   145,   195,
    1282,  1428,    -1,   145,   405,  1282,   687,    -1,   145,   581,
     686,  1483,    -1,    -1,   145,   598,  1282,  1277,  1278,  1042,
      -1,   145,   168,  1282,   687,    -1,   145,   556,  1282,   687,
      -1,   145,   531,   810,   821,   822,    -1,   145,   278,   205,
     811,   821,   822,    -1,   145,   473,  1282,  1430,    -1,  1279,
      -1,  1278,   631,  1279,    -1,  1421,    -1,  1281,    -1,  1280,
     631,  1281,    -1,  1422,    -1,    -1,   225,   172,    -1,    -1,
     537,    -1,    -1,    -1,   237,  1285,  1290,  1036,  1292,  1286,
    1294,  1310,    -1,    -1,    -1,   441,  1288,  1291,  1292,  1289,
    1294,    -1,    -1,   285,    -1,   130,    -1,   215,    -1,  1319,
      -1,   130,    -1,   241,  1293,    -1,  1293,    -1,  1279,    -1,
    1297,    -1,   629,   630,  1297,    -1,   629,  1296,   630,  1297,
      -1,    -1,   475,  1295,  1301,    -1,  1296,   631,  1414,    -1,
    1414,    -1,   589,  1300,    -1,   590,  1300,    -1,    -1,   882,
    1298,  1506,    -1,    -1,   629,   882,   630,  1299,  1509,    -1,
    1300,   631,  1305,    -1,  1305,    -1,  1301,   631,  1302,    -1,
    1302,    -1,  1418,  1303,  1309,    -1,   161,    -1,   476,    -1,
      -1,  1303,    -1,    -1,   629,  1306,  1307,   630,    -1,    -1,
    1308,    -1,  1308,   631,  1309,    -1,  1309,    -1,  1127,    -1,
     128,    -1,    -1,    -1,   363,   148,  1311,   254,   578,  1317,
      -1,    -1,    -1,   578,  1313,  1319,  1036,  1178,   475,  1315,
    1314,  1227,  1238,  1249,    -1,  1315,   631,  1316,    -1,  1316,
      -1,  1418,  1303,  1309,    -1,  1317,   631,  1318,    -1,  1318,
      -1,  1418,  1303,  1309,    -1,    -1,   285,    -1,    -1,   132,
    1321,  1329,  1322,    -1,    -1,   192,  1421,  1323,  1227,  1238,
    1249,    -1,    -1,  1326,  1324,   192,  1178,  1227,    -1,    -1,
     192,  1280,  1325,   585,  1178,  1227,    -1,  1327,    -1,  1326,
     631,  1327,    -1,  1428,  1328,    -1,  1428,   637,  1428,  1328,
      -1,    -1,   637,   624,    -1,    -1,  1330,  1329,    -1,   414,
      -1,   285,    -1,   226,    -1,    -1,   559,  1333,  1332,  1279,
      -1,    -1,   534,    -1,    -1,  1335,    -1,  1336,    -1,  1335,
     631,  1336,    -1,   102,    -1,   317,    -1,    42,   245,    -1,
      97,   528,    -1,   381,   180,    -1,   246,    -1,   527,    -1,
     493,    -1,    12,    -1,    -1,   190,   413,   358,    -1,    -1,
     480,  1339,  1340,    -1,   112,  1351,    -1,  1347,   530,  1346,
    1351,    -1,  1347,   555,  1346,  1351,    -1,   167,  1346,  1351,
      -1,   534,   511,  1346,  1351,    -1,   367,   530,  1346,  1351,
      -1,   393,    -1,   159,   901,  1343,    -1,   159,    12,  1343,
      -1,  1347,    73,  1348,  1421,  1346,  1351,    -1,  1344,   279,
      -1,   485,   217,    -1,    -1,    35,   167,  1349,  1350,  1341,
    1243,    -1,    -1,   429,   167,  1349,  1350,  1342,  1243,    -1,
     979,  1348,  1421,  1346,  1227,    -1,  1345,   158,    -1,    24,
      -1,    99,    -1,   404,    -1,   101,   629,   624,   630,   601,
      -1,   101,   629,   624,   630,   164,    -1,   601,  1243,    -1,
     164,  1243,    -1,   409,    -1,   408,  1334,  1337,  1243,    -1,
    1442,   511,  1351,    -1,  1347,   407,    -1,  1442,   593,  1351,
      -1,   954,  1351,    -1,    72,  1351,    -1,   204,    -1,   204,
     190,  1431,    -1,   103,   111,   892,  1428,    -1,   103,   534,
    1421,    -1,   103,   598,  1421,    -1,   301,   511,    -1,   485,
     511,    -1,    67,    -1,   582,    -1,   533,    -1,   231,    -1,
     103,   405,   687,    -1,   103,   195,   687,    -1,   103,   556,
     687,    -1,   405,   511,  1351,    -1,   195,   511,  1351,    -1,
     405,    70,   687,    -1,   195,    70,   687,    -1,   103,   168,
     687,    -1,   511,    -1,   335,    -1,   279,    -1,   301,    -1,
      34,    -1,    -1,   515,    -1,    -1,  1348,  1428,    -1,    -1,
     193,    -1,   192,    -1,   244,    -1,    -1,   244,  1425,    -1,
      -1,   192,  1253,    -1,    -1,   267,  1425,    -1,   604,  1127,
      -1,    -1,  1355,  1421,  1353,  1357,    -1,    -1,  1355,  1356,
    1354,  1105,    -1,   133,    -1,   134,    -1,    -1,   175,    -1,
     388,    -1,    -1,  1409,    -1,  1428,    -1,    -1,   187,  1080,
    1359,  1360,    -1,    -1,    -1,  1453,  1361,  1366,  1362,  1363,
      -1,  1364,    -1,    -1,   606,   418,   277,  1367,    -1,  1364,
     631,  1365,    -1,  1365,    -1,   163,   279,    -1,   159,   279,
      -1,   197,   279,    -1,   486,   279,    -1,    34,   279,    -1,
     428,   279,    -1,   413,    49,    -1,   217,    -1,   404,    -1,
     279,    -1,   511,    -1,   485,    -1,    67,    -1,   582,    -1,
     533,    -1,   231,    -1,   301,    -1,   135,    -1,   446,    -1,
      -1,  1278,    -1,    -1,    17,   138,    61,    -1,    -1,   444,
    1369,  1370,    -1,  1370,   631,  1371,    -1,  1371,    -1,    -1,
     485,  1372,  1373,    -1,   301,    -1,   413,    49,    -1,    -1,
      12,    -1,    -1,   411,  1375,  1376,    -1,  1344,   279,  1377,
      -1,   551,  1425,    -1,    30,  1127,    -1,    -1,   255,  1379,
    1380,  1381,  1382,    -1,    -1,   209,    -1,   490,    -1,    -1,
      90,    -1,   413,    -1,  1127,    -1,   581,  1431,    -1,   584,
    1428,    -1,    -1,    -1,    -1,    -1,   273,  1389,  1385,  1391,
    1390,   232,  1427,  1386,  1392,   241,   534,  1421,  1387,   957,
    1388,  1399,  1393,  1396,  1400,  1402,  1405,    -1,   114,    -1,
     614,    -1,    -1,   274,    -1,    -1,    88,    -1,   285,    -1,
      -1,   441,    -1,   226,    -1,    -1,    73,  1394,    -1,  1394,
    1395,    -1,  1395,    -1,   539,    47,  1409,    -1,   371,   154,
      47,  1409,    -1,   154,    47,  1409,    -1,   165,    47,  1409,
      -1,    -1,   270,  1397,    -1,  1397,  1398,    -1,  1398,    -1,
     539,    47,  1409,    -1,   508,    47,  1409,    -1,    -1,   457,
     223,    47,  1409,    -1,    -1,   226,   358,  1401,    -1,   270,
      -1,   457,    -1,    -1,   629,  1403,   630,    -1,   629,   630,
      -1,  1403,   631,  1404,    -1,  1404,    -1,  1418,    -1,   636,
    1430,    -1,    -1,   475,  1406,    -1,  1406,   631,  1407,    -1,
    1407,    -1,  1418,  1303,  1122,  1309,  1123,    -1,   540,    -1,
     342,    -1,   566,   540,    -1,  1408,  1426,    -1,  1426,    -1,
     213,    -1,   214,    -1,    36,    -1,   383,    -1,  1412,    -1,
     623,  1413,    -1,   622,  1413,    -1,  1408,    -1,  1413,    -1,
     357,    -1,   178,    -1,   558,    -1,   213,    -1,   214,    -1,
      36,    -1,   566,   953,    -1,   566,    36,    -1,   118,  1408,
      -1,   547,  1408,    -1,   544,  1408,    -1,   358,    -1,   282,
      -1,   563,    -1,   125,    -1,   185,    -1,  1418,    -1,  1415,
      -1,  1428,   637,   624,    -1,  1428,   637,  1428,   637,   624,
      -1,  1127,    -1,  1428,    -1,  1419,    -1,  1428,    -1,  1419,
      -1,  1428,   637,  1428,    -1,   637,  1428,   637,  1428,    -1,
    1428,   637,  1428,   637,  1428,    -1,  1428,    -1,  1428,   637,
    1428,   637,  1428,    -1,  1428,   637,  1428,    -1,   637,  1428,
      -1,  1428,    -1,  1428,   637,  1428,    -1,   637,  1428,    -1,
    1428,  1328,    -1,  1428,   637,  1428,  1328,    -1,  1428,    -1,
     222,    -1,   224,    -1,   540,    -1,   540,    -1,   540,    -1,
    1424,    -1,  1432,    -1,  1424,    -1,  1433,    -1,  1428,    -1,
    1425,    -1,   266,    -1,  1430,    -1,  1430,   636,  1430,    -1,
     107,  1126,    -1,  1433,    -1,    21,    -1,    29,    -1,    31,
      -1,    48,    -1,    49,    -1,    59,    -1,    62,    -1,    61,
      -1,    68,    -1,    74,    -1,    75,    -1,    76,    -1,    77,
      -1,    78,    -1,    79,    -1,    82,    -1,    84,    -1,    96,
      -1,   124,    -1,   144,    -1,   155,    -1,   170,    -1,   171,
      -1,   187,    -1,   208,    -1,   212,    -1,   216,    -1,   239,
      -1,   256,    -1,   354,    -1,   367,    -1,   370,    -1,   369,
      -1,   379,    -1,   384,    -1,   389,    -1,   397,    -1,   400,
      -1,   435,    -1,   438,    -1,   444,    -1,   447,    -1,   454,
      -1,   461,    -1,   466,    -1,   473,    -1,   483,    -1,   489,
      -1,   485,    -1,   491,    -1,   510,    -1,   514,    -1,   559,
      -1,   570,    -1,   571,    -1,   610,    -1,   613,    -1,   579,
      -1,     5,    -1,     7,    -1,     8,    -1,     9,    -1,    10,
      -1,    11,    -1,    14,    -1,    18,    -1,    23,    -1,    24,
      -1,    26,    -1,    25,    -1,    27,    -1,    28,    -1,    35,
      -1,    39,    -1,    42,    -1,    44,    -1,    43,    -1,    46,
      -1,    52,    -1,    55,    -1,    56,    -1,    58,    -1,    64,
      -1,    67,    -1,    66,    -1,    65,    -1,    69,    -1,    70,
      -1,    72,    -1,    81,    -1,    73,    -1,    83,    -1,    85,
      -1,    86,    -1,    87,    -1,    88,    -1,    90,    -1,    91,
      -1,    93,    -1,    95,    -1,    94,    -1,    97,    -1,    99,
      -1,   102,    -1,   105,    -1,   109,    -1,   114,    -1,   113,
      -1,   115,    -1,   118,    -1,   123,    -1,   129,    -1,   131,
      -1,   135,    -1,   137,    -1,   138,    -1,   139,    -1,   140,
      -1,   147,    -1,   148,    -1,   149,    -1,   156,    -1,   160,
      -1,   159,    -1,   158,    -1,   163,    -1,   164,    -1,   166,
      -1,   168,    -1,   167,    -1,   169,    -1,   174,    -1,   175,
      -1,   176,    -1,   180,    -1,   179,    -1,   191,    -1,   153,
      -1,   193,    -1,   182,    -1,   183,    -1,   184,    -1,   197,
      -1,   198,    -1,   200,    -1,   199,    -1,   201,    -1,   204,
      -1,   202,    -1,   210,    -1,   209,    -1,   217,    -1,   221,
      -1,   223,    -1,   227,    -1,   231,    -1,   243,    -1,   228,
      -1,   229,    -1,   233,    -1,   245,    -1,   246,    -1,   248,
      -1,   249,    -1,   238,    -1,   253,    -1,   258,    -1,   257,
      -1,   261,    -1,   264,    -1,   265,    -1,   271,    -1,   272,
      -1,   274,    -1,   276,    -1,   278,    -1,   279,    -1,   307,
      -1,   301,    -1,   303,    -1,   288,    -1,   292,    -1,   289,
      -1,   290,    -1,   302,    -1,   291,    -1,   293,    -1,   287,
      -1,   299,    -1,   295,    -1,   294,    -1,   296,    -1,   297,
      -1,   298,    -1,   305,    -1,   306,    -1,   308,    -1,   310,
      -1,   311,    -1,   316,    -1,   317,    -1,   318,    -1,   319,
      -1,   320,    -1,   321,    -1,   324,    -1,   325,    -1,   329,
      -1,   327,    -1,   331,    -1,   332,    -1,   333,    -1,   334,
      -1,   335,    -1,   336,    -1,   337,    -1,   339,    -1,   338,
      -1,   340,    -1,   343,    -1,   344,    -1,   348,    -1,   347,
      -1,   355,    -1,   349,    -1,   350,    -1,   360,    -1,   361,
      -1,   362,    -1,   364,    -1,   365,    -1,   366,    -1,   380,
      -1,   381,    -1,   386,    -1,   387,    -1,   388,    -1,   390,
      -1,   391,    -1,   392,    -1,   394,    -1,   393,    -1,   395,
      -1,   396,    -1,   401,    -1,   402,    -1,   404,    -1,   406,
      -1,   407,    -1,   408,    -1,   409,    -1,   410,    -1,   412,
      -1,   413,    -1,   414,    -1,   417,    -1,   421,    -1,   422,
      -1,   424,    -1,   423,    -1,   425,    -1,   428,    -1,   429,
      -1,   430,    -1,   431,    -1,   432,    -1,   434,    -1,   437,
      -1,   439,    -1,   442,    -1,   446,    -1,   449,    -1,   450,
      -1,   455,    -1,   456,    -1,   457,    -1,   458,    -1,   459,
      -1,   460,    -1,   462,    -1,   463,    -1,   465,    -1,   471,
      -1,   470,    -1,   472,    -1,   484,    -1,   477,    -1,   481,
      -1,   486,    -1,   488,    -1,   490,    -1,   492,    -1,   493,
      -1,   501,    -1,   500,    -1,   503,    -1,   506,    -1,   509,
      -1,   511,    -1,   515,    -1,   517,    -1,   518,    -1,   519,
      -1,   520,    -1,   522,    -1,   521,    -1,   525,    -1,   526,
      -1,   527,    -1,   528,    -1,   536,    -1,   533,    -1,   530,
      -1,   535,    -1,   531,    -1,   537,    -1,   538,    -1,   541,
      -1,   542,    -1,   553,    -1,   554,    -1,   555,    -1,   544,
      -1,   545,    -1,   546,    -1,   547,    -1,   560,    -1,   561,
      -1,   562,    -1,   195,    -1,   564,    -1,   565,    -1,   568,
      -1,   567,    -1,   574,    -1,   577,    -1,   581,    -1,   582,
      -1,   583,    -1,   593,    -1,   598,    -1,   599,    -1,   590,
      -1,   601,    -1,   600,    -1,   602,    -1,   609,    -1,   612,
      -1,   614,    -1,   617,    -1,   597,    -1,    -1,   475,  1436,
    1435,  1437,    -1,    -1,   370,    -1,  1438,    -1,  1437,   631,
    1438,    -1,    -1,  1439,  1444,    -1,  1441,    -1,   202,    -1,
     274,    -1,   472,    -1,    -1,   364,    -1,    -1,   202,    -1,
     274,    -1,   472,    -1,    -1,   202,   637,    -1,   274,   637,
      -1,   472,   637,    -1,  1445,    -1,  1441,  1446,    -1,  1440,
    1447,  1303,  1450,    -1,  1440,   553,   248,   265,  1448,    -1,
     636,  1430,  1303,  1127,    -1,   636,   636,  1443,  1447,  1303,
    1450,    -1,   954,   959,    -1,   338,  1303,  1127,    -1,   338,
     956,   961,    -1,   390,  1303,  1449,    -1,   390,   190,  1431,
    1303,  1449,    -1,  1428,    -1,  1428,   637,  1428,    -1,   128,
     637,  1428,    -1,   418,   564,    -1,   418,    83,    -1,   439,
     418,    -1,   470,    -1,   540,    -1,   390,   629,   540,   630,
      -1,   362,   629,   540,   630,    -1,  1127,    -1,   128,    -1,
     363,    -1,    12,    -1,    34,    -1,    -1,   277,  1453,  1452,
    1454,    -1,   534,    -1,   530,    -1,  1455,    -1,  1454,   631,
    1455,    -1,  1421,  1225,  1456,    -1,   418,    -1,   611,    -1,
     611,    88,    -1,   285,   611,    -1,   418,   274,    -1,    -1,
     575,  1458,  1453,    -1,   208,  1421,   367,  1225,    -1,   208,
    1423,    68,    -1,    -1,   208,  1423,   418,  1460,  1461,  1227,
    1244,    -1,  1462,    -1,  1428,  1463,    -1,   183,    -1,   348,
      -1,   183,    -1,   348,    -1,   402,    -1,   257,    -1,    -1,
    1465,  1464,   629,  1308,   630,    -1,   161,    -1,   196,    -1,
     259,    -1,   207,    -1,   286,    -1,   452,   686,  1467,    -1,
    1471,   363,  1470,  1482,   192,  1483,    -1,  1471,   363,   195,
    1482,   192,  1483,    -1,  1471,   363,   405,  1482,   192,  1483,
      -1,    12,  1472,   631,   203,   370,   192,  1483,    -1,   410,
     363,  1431,   192,  1483,    -1,   203,   686,  1469,    -1,  1471,
     363,  1470,  1482,   551,  1484,  1491,  1492,    -1,  1471,   363,
     195,  1482,   551,  1484,  1491,  1492,    -1,  1471,   363,   405,
    1482,   551,  1484,  1491,  1492,    -1,   410,   363,  1431,   551,
    1484,  1493,    -1,    -1,   534,    -1,  1473,    -1,    12,  1472,
      -1,    -1,   404,    -1,  1474,    -1,  1473,   631,  1474,    -1,
      -1,   467,  1475,  1488,    -1,    -1,   237,  1476,  1488,    -1,
      -1,   578,  1477,  1488,    -1,    -1,   426,  1478,  1488,    -1,
     132,    -1,   580,    -1,   230,    -1,    13,    -1,   103,    -1,
     145,    -1,   171,    -1,   434,    -1,   481,    -1,   406,    -1,
     182,    -1,   203,   370,    -1,   480,   112,    -1,   525,    -1,
     103,   537,   530,    -1,   277,   530,    -1,   442,   485,    -1,
     442,    66,    -1,   103,   598,    -1,   480,   598,    -1,   103,
     456,    -1,    13,   456,    -1,   103,   581,    -1,   168,    -1,
     556,    -1,   103,   531,    -1,    -1,    17,    -1,  1481,  1479,
    1480,    -1,  1481,    -1,   520,   540,    -1,   249,   540,    -1,
      64,   540,    -1,   624,    -1,  1428,   637,   624,    -1,   624,
     637,   624,    -1,  1421,    -1,  1431,    -1,  1483,   631,  1431,
      -1,  1487,    -1,  1484,   631,  1487,    -1,   597,    -1,   606,
      -1,   585,    -1,    19,    -1,  1431,   223,    47,   540,    -1,
    1431,   223,    47,   390,   540,    -1,  1431,   223,  1485,  1430,
      -1,  1431,   223,  1485,  1430,  1486,  1425,    -1,  1431,    -1,
      -1,   629,  1489,   630,    -1,  1489,   631,  1490,    -1,  1490,
      -1,  1428,    -1,    -1,   443,  1480,    -1,   443,   507,    -1,
     443,   612,    -1,   443,   350,    -1,    -1,   606,  1494,    -1,
      -1,   606,   203,   370,    -1,  1494,  1495,    -1,  1495,    -1,
     203,   370,    -1,   306,  1251,    -1,   310,  1251,    -1,   305,
    1251,    -1,   311,  1250,    -1,    -1,    31,  1497,  1498,    -1,
      -1,   609,    -1,    -1,    17,   354,    56,    -1,    17,    56,
      -1,    -1,   433,    -1,   354,   433,    -1,    -1,   461,    -1,
      84,  1498,  1499,  1500,    -1,   454,  1498,  1499,  1500,    -1,
     454,  1498,   551,  1501,  1428,    -1,   461,  1428,    -1,   433,
     461,  1428,    -1,    -1,  1507,    -1,    -1,   572,  1514,  1508,
    1106,    -1,    -1,  1507,    -1,  1511,    -1,    -1,  1511,    -1,
      -1,  1512,  1513,    -1,  1239,  1243,    -1,  1245,    -1,    -1,
     141,    -1,    12,    -1,   467,  1195,    -1,   629,  1108,   630,
      -1,  1515,  1510,    -1,    -1,  1516,   572,  1514,  1517,  1515,
    1510,    -1,  1519,  1516,  1520,    -1,    -1,    -1,    -1,  1522,
      -1,  1522,  1523,    -1,  1523,    -1,   516,    -1,   215,    -1,
     141,    -1,   504,    -1,   499,    -1,   500,    -1,   502,    -1,
      12,    -1,  1529,  1525,    -1,  1528,  1526,    -1,  1530,  1527,
    1534,    -1,  1534,    -1,  1542,    -1,  1553,    -1,  1547,    -1,
     673,    -1,  1534,    -1,  1542,    -1,  1553,    -1,  1547,    -1,
    1546,    -1,   673,    -1,  1528,    -1,  1529,    -1,    -1,   129,
     161,  1431,    -1,  1531,    -1,  1531,  1532,    -1,  1532,    -1,
     375,   441,    -1,    11,   161,   565,    -1,    11,   161,   318,
      -1,    11,   161,   538,    -1,    -1,   505,   466,   129,    -1,
     505,   466,   243,    -1,    -1,  1533,   598,  1421,  1535,  1536,
      19,  1538,    -1,    -1,   629,  1537,   630,    -1,  1428,    -1,
    1537,   631,  1428,    -1,    -1,  1539,  1540,  1541,    -1,   467,
    1109,    -1,   629,  1107,   630,  1509,    -1,    -1,   606,    63,
     370,    -1,   606,    52,    63,   370,    -1,   606,   274,    63,
     370,    -1,    -1,    -1,    -1,   556,  1122,   687,   781,   782,
     363,  1122,  1543,  1421,   190,  1122,  1544,   150,   459,  1545,
     731,    -1,    10,  1122,   195,  1428,   450,   905,   491,  1425,
      -1,  1122,   195,  1428,   450,   905,   491,  1425,    -1,    -1,
      -1,    -1,    -1,    -1,  1122,   195,   687,   629,  1548,   698,
     630,  1549,   450,  1550,   951,  1551,   689,  1552,   731,    -1,
      -1,    -1,    -1,    -1,   405,  1122,   687,  1554,   629,  1555,
     702,   630,  1556,   689,  1557,   731,    -1,   613,  1560,  1559,
    1561,    -1,   613,   155,  1559,  1563,    -1,   613,   400,  1559,
      -1,   613,    84,  1559,  1562,    -1,   613,   454,  1559,    -1,
     613,   422,    -1,  1409,    -1,  1409,   631,  1409,    -1,  1409,
     631,  1409,   631,  1251,    -1,    31,    -1,   510,    -1,    -1,
     251,    -1,   449,    -1,    -1,   365,   392,    -1,    -1,    -1,
     526,  1564,  1565,    -1,    -1,   190,   321,    -1,   239,   394,
    1428,   491,  1425,    -1,   239,   491,  1425,    -1,   571,   394,
    1428,    -1,   571,   491,  1425,    -1,   619,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1710,  1710,  1722,  1721,  1746,  1753,  1755,  1759,  1760,
    1765,  1766,  1767,  1768,  1769,  1770,  1771,  1772,  1773,  1774,
    1775,  1776,  1777,  1778,  1779,  1780,  1781,  1782,  1783,  1784,
    1785,  1786,  1787,  1788,  1789,  1790,  1791,  1792,  1793,  1794,
    1795,  1796,  1797,  1798,  1799,  1800,  1801,  1802,  1803,  1804,
    1805,  1806,  1807,  1808,  1809,  1810,  1811,  1812,  1813,  1814,
    1815,  1816,  1817,  1821,  1830,  1831,  1835,  1844,  1850,  1860,
    1859,  1869,  1871,  1875,  1876,  1880,  1893,  1892,  1912,  1911,
    1920,  1921,  1925,  1929,  1933,  1937,  1941,  1945,  1950,  1954,
    1958,  1962,  1966,  1970,  1976,  2007,  2012,  2015,  2017,  2018,
    2022,  2028,  2032,  2048,  2052,  2064,  2063,  2104,  2103,  2115,
    2113,  2126,  2124,  2136,  2135,  2148,  2147,  2155,  2159,  2163,
    2167,  2174,  2187,  2188,  2192,  2196,  2200,  2204,  2208,  2212,
    2216,  2224,  2223,  2254,  2253,  2260,  2267,  2268,  2274,  2280,
    2290,  2296,  2302,  2304,  2311,  2312,  2316,  2322,  2331,  2332,
    2340,  2340,  2396,  2397,  2398,  2399,  2400,  2401,  2402,  2403,
    2404,  2405,  2406,  2407,  2408,  2413,  2427,  2443,  2461,  2462,
    2466,  2467,  2472,  2474,  2476,  2478,  2480,  2482,  2484,  2490,
    2491,  2492,  2496,  2500,  2508,  2507,  2520,  2522,  2525,  2527,
    2531,  2535,  2542,  2544,  2548,  2549,  2554,  2574,  2600,  2602,
    2606,  2607,  2611,  2637,  2638,  2639,  2640,  2644,  2645,  2649,
    2650,  2655,  2658,  2685,  2684,  2748,  2764,  2763,  2817,  2843,
    2843,  2866,  2867,  2872,  2874,  2879,  2902,  2915,  2919,  2936,
    2937,  2941,  2945,  2954,  2961,  2968,  2978,  2992,  3015,  3021,
    3022,  3028,  3031,  3035,  3043,  3063,  3065,  3083,  3089,  3091,
    3093,  3095,  3097,  3099,  3101,  3103,  3105,  3107,  3109,  3111,
    3116,  3130,  3145,  3163,  3164,  3168,  3169,  3170,  3171,  3172,
    3173,  3174,  3175,  3176,  3177,  3178,  3179,  3180,  3185,  3184,
    3191,  3191,  3246,  3245,  3274,  3274,  3288,  3341,  3384,  3405,
    3404,  3426,  3445,  3447,  3448,  3452,  3472,  3495,  3497,  3513,
    3495,  3532,  3534,  3535,  3539,  3540,  3545,  3551,  3544,  3572,
    3571,  3587,  3588,  3592,  3593,  3598,  3602,  3597,  3623,  3627,
    3622,  3646,  3656,  3661,  3660,  3696,  3697,  3702,  3701,  3734,
    3734,  3749,  3748,  3784,  3796,  3798,  3795,  3825,  3824,  3845,
    3847,  3852,  3854,  3856,  3873,  3878,  3884,  3891,  3892,  3900,
    3906,  3915,  3921,  3927,  3928,  3932,  3932,  3937,  3938,  3939,
    3943,  3944,  3945,  3949,  3953,  3954,  3955,  3959,  3960,  3961,
    3962,  3963,  3964,  3965,  3966,  3970,  3974,  3975,  3976,  3980,
    3981,  3982,  3983,  3984,  3988,  3992,  3993,  3994,  3998,  3999,
    4000,  4001,  4002,  4003,  4004,  4008,  4012,  4013,  4014,  4018,
    4019,  4020,  4025,  4033,  4041,  4049,  4061,  4073,  4078,  4083,
    4091,  4099,  4107,  4115,  4123,  4131,  4139,  4152,  4165,  4178,
    4180,  4184,  4189,  4202,  4203,  4254,  4255,  4258,  4272,  4290,
    4289,  4298,  4296,  4303,  4305,  4304,  4308,  4307,  4313,  4350,
    4351,  4356,  4355,  4374,  4393,  4392,  4409,  4413,  4421,  4420,
    4423,  4425,  4427,  4429,  4434,  4435,  4441,  4442,  4459,  4460,
    4464,  4465,  4469,  4488,  4498,  4509,  4518,  4519,  4535,  4537,
    4536,  4541,  4539,  4550,  4551,  4555,  4573,  4589,  4590,  4606,
    4621,  4643,  4644,  4649,  4648,  4672,  4682,  4704,  4703,  4721,
    4720,  4740,  4762,  4766,  4795,  4807,  4808,  4813,  4824,  4812,
    4849,  4850,  4854,  4867,  4888,  4901,  4927,  4928,  4933,  4932,
    4969,  4974,  4975,  4979,  4980,  4984,  4986,  4992,  4998,  5000,
    5002,  5004,  5006,  5008,  5018,  5033,  5017,  5047,  5048,  5052,
    5053,  5057,  5058,  5062,  5063,  5067,  5068,  5072,  5073,  5077,
    5081,  5082,  5085,  5087,  5091,  5092,  5096,  5097,  5098,  5102,
    5107,  5112,  5117,  5122,  5127,  5132,  5137,  5152,  5158,  5163,
    5168,  5173,  5178,  5184,  5183,  5209,  5210,  5211,  5216,  5221,
    5226,  5228,  5230,  5232,  5238,  5243,  5248,  5254,  5260,  5266,
    5275,  5293,  5310,  5333,  5347,  5348,  5349,  5350,  5351,  5352,
    5353,  5357,  5358,  5359,  5363,  5364,  5368,  5369,  5370,  5371,
    5376,  5383,  5384,  5388,  5389,  5393,  5394,  5402,  5401,  5410,
    5408,  5418,  5416,  5426,  5424,  5432,  5451,  5457,  5459,  5463,
    5467,  5468,  5472,  5477,  5476,  5502,  5505,  5504,  5514,  5516,
    5521,  5524,  5528,  5535,  5536,  5540,  5541,  5545,  5551,  5557,
    5561,  5577,  5593,  5594,  5595,  5596,  5601,  5605,  5610,  5615,
    5619,  5624,  5629,  5635,  5640,  5646,  5650,  5655,  5660,  5678,
    5680,  5682,  5695,  5697,  5702,  5707,  5719,  5724,  5729,  5734,
    5736,  5738,  5740,  5742,  5744,  5746,  5748,  5751,  5750,  5755,
    5754,  5758,  5760,  5769,  5770,  5771,  5777,  5778,  5779,  5780,
    5781,  5785,  5789,  5790,  5794,  5795,  5799,  5800,  5801,  5802,
    5803,  5807,  5808,  5809,  5810,  5811,  5815,  5820,  5822,  5828,
    5829,  5831,  5836,  5845,  5846,  5850,  5851,  5855,  5856,  5857,
    5861,  5862,  5863,  5864,  5867,  5868,  5872,  5873,  5877,  5878,
    5882,  5883,  5887,  5888,  5889,  5890,  5897,  5898,  5904,  5910,
    5916,  5922,  5923,  5936,  5942,  5948,  5954,  5963,  5984,  5990,
    5995,  5996,  6000,  6001,  6005,  6013,  6017,  6018,  6022,  6023,
    6027,  6036,  6040,  6041,  6045,  6056,  6057,  6061,  6062,  6066,
    6067,  6072,  6073,  6077,  6084,  6093,  6101,  6112,  6113,  6114,
    6115,  6116,  6117,  6122,  6130,  6131,  6135,  6137,  6141,  6153,
    6154,  6158,  6165,  6178,  6179,  6181,  6183,  6189,  6194,  6200,
    6206,  6213,  6223,  6224,  6225,  6226,  6227,  6231,  6235,  6236,
    6240,  6241,  6245,  6246,  6250,  6251,  6252,  6256,  6257,  6261,
    6265,  6278,  6290,  6291,  6295,  6296,  6300,  6301,  6305,  6306,
    6310,  6311,  6315,  6316,  6320,  6321,  6325,  6326,  6330,  6332,
    6333,  6339,  6345,  6351,  6359,  6360,  6364,  6368,  6369,  6382,
    6383,  6384,  6388,  6389,  6393,  6399,  6413,  6414,  6418,  6419,
    6423,  6424,  6432,  6431,  6468,  6467,  6481,  6493,  6492,  6511,
    6510,  6529,  6528,  6547,  6541,  6561,  6560,  6593,  6598,  6603,
    6608,  6613,  6623,  6624,  6625,  6626,  6630,  6631,  6643,  6644,
    6648,  6649,  6652,  6654,  6655,  6656,  6658,  6660,  6661,  6670,
    6671,  6675,  6684,  6682,  6695,  6708,  6707,  6720,  6718,  6731,
    6738,  6748,  6752,  6759,  6763,  6768,  6767,  6783,  6785,  6790,
    6798,  6797,  6813,  6817,  6816,  6828,  6829,  6833,  6848,  6849,
    6853,  6862,  6866,  6871,  6876,  6875,  6887,  6898,  6886,  6914,
    6923,  6927,  6936,  6945,  6951,  6957,  6966,  6975,  6994,  7014,
    7024,  7028,  7036,  7037,  7041,  7042,  7046,  7046,  7049,  7051,
    7055,  7056,  7060,  7061,  7065,  7066,  7067,  7071,  7072,  7073,
    7077,  7078,  7079,  7080,  7089,  7088,  7097,  7105,  7104,  7112,
    7121,  7130,  7131,  7138,  7138,  7144,  7145,  7149,  7150,  7151,
    7155,  7156,  7172,  7173,  7178,  7177,  7189,  7190,  7191,  7195,
    7196,  7196,  7201,  7200,  7221,  7222,  7226,  7227,  7231,  7232,
    7233,  7237,  7238,  7243,  7242,  7263,  7271,  7272,  7272,  7276,
    7275,  7301,  7302,  7306,  7307,  7311,  7312,  7313,  7314,  7315,
    7316,  7320,  7321,  7326,  7325,  7346,  7347,  7348,  7353,  7352,
    7358,  7365,  7370,  7378,  7379,  7383,  7397,  7396,  7409,  7410,
    7414,  7415,  7419,  7429,  7439,  7440,  7445,  7444,  7455,  7456,
    7460,  7461,  7465,  7475,  7486,  7485,  7493,  7493,  7502,  7503,
    7508,  7509,  7518,  7527,  7528,  7532,  7537,  7542,  7547,  7552,
    7551,  7571,  7579,  7571,  7586,  7587,  7588,  7589,  7590,  7594,
    7601,  7608,  7610,  7621,  7622,  7626,  7627,  7655,  7685,  7687,
    7693,  7703,  7704,  7705,  7719,  7724,  7749,  7755,  7761,  7762,
    7763,  7764,  7765,  7769,  7770,  7771,  7775,  7776,  7781,  7832,
    7839,  7882,  7888,  7894,  7900,  7906,  7912,  7918,  7924,  7928,
    7934,  7940,  7946,  7952,  7958,  7962,  7968,  7977,  7983,  7991,
    7997,  8007,  8013,  8022,  8032,  8038,  8048,  8054,  8063,  8067,
    8073,  8079,  8085,  8091,  8097,  8103,  8109,  8115,  8121,  8127,
    8133,  8139,  8145,  8151,  8155,  8156,  8160,  8161,  8165,  8166,
    8170,  8171,  8175,  8176,  8177,  8178,  8179,  8180,  8184,  8185,
    8190,  8196,  8200,  8207,  8214,  8221,  8228,  8235,  8240,  8246,
    8253,  8260,  8268,  8279,  8301,  8308,  8316,  8317,  8318,  8319,
    8320,  8321,  8332,  8333,  8334,  8335,  8336,  8342,  8346,  8352,
    8358,  8364,  8370,  8372,  8379,  8386,  8392,  8394,  8403,  8410,
    8418,  8424,  8431,  8437,  8451,  8458,  8474,  8480,  8486,  8494,
    8500,  8506,  8512,  8518,  8532,  8543,  8549,  8555,  8561,  8567,
    8573,  8579,  8585,  8591,  8597,  8603,  8609,  8615,  8621,  8627,
    8633,  8639,  8647,  8668,  8675,  8681,  8688,  8695,  8702,  8709,
    8715,  8721,  8728,  8734,  8741,  8747,  8753,  8759,  8765,  8771,
    8789,  8795,  8801,  8808,  8815,  8823,  8830,  8837,  8844,  8851,
    8858,  8875,  8881,  8887,  8893,  8899,  8906,  8912,  8918,  8924,
    8930,  8936,  8947,  8953,  8959,  8965,  8971,  8982,  8988,  9004,
    9010,  9017,  9024,  9031,  9038,  9045,  9049,  9069,  9068,  9140,
    9181,  9183,  9188,  9189,  9193,  9194,  9198,  9199,  9203,  9210,
    9218,  9245,  9251,  9257,  9263,  9269,  9275,  9284,  9291,  9293,
    9290,  9300,  9311,  9317,  9323,  9329,  9335,  9341,  9347,  9353,
    9359,  9366,  9365,  9385,  9384,  9399,  9409,  9417,  9433,  9434,
    9439,  9444,  9447,  9450,  9449,  9466,  9468,  9474,  9473,  9490,
    9492,  9494,  9496,  9498,  9500,  9502,  9504,  9506,  9508,  9514,
    9520,  9523,  9522,  9528,  9529,  9533,  9540,  9548,  9549,  9553,
    9560,  9568,  9569,  9573,  9574,  9578,  9586,  9597,  9598,  9610,
    9621,  9622,  9628,  9629,  9649,  9651,  9655,  9653,  9670,  9668,
    9686,  9684,  9691,  9700,  9698,  9716,  9715,  9725,  9736,  9734,
    9753,  9752,  9763,  9774,  9775,  9776,  9788,  9788,  9802,  9842,
    9918,  9929,  9934,  9926,  9953,  9973,  9981,  9973,  9990,  9989,
   10012, 10029, 10012, 10036, 10040, 10066, 10067, 10072, 10075, 10076,
   10077, 10081, 10082, 10087, 10086, 10092, 10091, 10099, 10100, 10103,
   10105, 10105, 10109, 10109, 10114, 10115, 10119, 10121, 10126, 10127,
   10131, 10142, 10155, 10156, 10157, 10158, 10159, 10160, 10161, 10162,
   10163, 10164, 10165, 10166, 10170, 10171, 10172, 10173, 10174, 10175,
   10176, 10177, 10178, 10182, 10183, 10184, 10185, 10188, 10190, 10191,
   10195, 10196, 10204, 10206, 10210, 10212, 10211, 10225, 10228, 10227,
   10242, 10248, 10262, 10264, 10268, 10270, 10275, 10276, 10296, 10321,
   10325, 10326, 10330, 10342, 10344, 10349, 10348, 10383, 10385, 10390,
   10391, 10392, 10397, 10404, 10408, 10409, 10413, 10417, 10421, 10428,
   10435, 10442, 10452, 10485, 10489, 10495, 10501, 10510, 10518, 10522,
   10529, 10530, 10534, 10535, 10536, 10540, 10541, 10542, 10543, 10544,
   10545, 10549, 10550, 10551, 10552, 10553, 10557, 10558, 10559, 10560,
   10561, 10565, 10566, 10567, 10568, 10569, 10573, 10578, 10579, 10583,
   10584, 10587, 10590, 10589, 10632, 10633, 10637, 10638, 10642, 10652,
   10652, 10662, 10663, 10667, 10686, 10719, 10718, 10731, 10739, 10730,
   10741, 10753, 10765, 10764, 10782, 10781, 10792, 10792, 10808, 10815,
   10837, 10857, 10869, 10874, 10873, 10883, 10889, 10896, 10901, 10906,
   10916, 10917, 10921, 10932, 10933, 10937, 10948, 10949, 10953, 10954,
   10962, 10970, 10961, 10980, 10987, 10979, 10997, 11005, 11006, 11014,
   11018, 11019, 11030, 11031, 11035, 11044, 11045, 11046, 11048, 11047,
   11058, 11059, 11063, 11064, 11066, 11065, 11069, 11068, 11074, 11075,
   11079, 11080, 11084, 11094, 11095, 11099, 11100, 11105, 11104, 11118,
   11119, 11123, 11128, 11136, 11137, 11145, 11147, 11147, 11155, 11163,
   11154, 11185, 11186, 11190, 11198, 11199, 11203, 11213, 11214, 11221,
   11220, 11236, 11235, 11247, 11246, 11258, 11257, 11271, 11272, 11276,
   11289, 11305, 11306, 11310, 11311, 11315, 11316, 11317, 11322, 11321,
   11342, 11344, 11347, 11349, 11352, 11353, 11356, 11360, 11364, 11368,
   11372, 11376, 11380, 11384, 11388, 11396, 11399, 11409, 11408, 11423,
   11430, 11438, 11446, 11454, 11462, 11470, 11477, 11479, 11481, 11490,
   11494, 11499, 11498, 11504, 11503, 11508, 11517, 11524, 11533, 11542,
   11547, 11549, 11551, 11553, 11555, 11557, 11564, 11572, 11574, 11582,
   11589, 11596, 11606, 11613, 11619, 11627, 11635, 11639, 11643, 11650,
   11657, 11664, 11671, 11678, 11685, 11691, 11698, 11705, 11710, 11715,
   11723, 11725, 11727, 11732, 11733, 11736, 11738, 11742, 11743, 11747,
   11748, 11752, 11753, 11757, 11758, 11762, 11763, 11766, 11768, 11775,
   11786, 11785, 11801, 11800, 11810, 11811, 11815, 11816, 11817, 11821,
   11822, 11823, 11838, 11837, 11850, 11859, 11849, 11861, 11865, 11866,
   11880, 11881, 11886, 11888, 11890, 11892, 11894, 11896, 11898, 11900,
   11902, 11904, 11906, 11908, 11913, 11915, 11917, 11919, 11921, 11923,
   11925, 11930, 11931, 11935, 11936, 11940, 11939, 11949, 11950, 11954,
   11954, 11956, 11957, 11961, 11962, 11967, 11966, 11977, 11981, 11985,
   11998, 11997, 12011, 12012, 12013, 12016, 12017, 12018, 12022, 12027,
   12037, 12049, 12060, 12070, 12080, 12048, 12088, 12089, 12093, 12094,
   12098, 12099, 12107, 12111, 12112, 12113, 12116, 12118, 12122, 12123,
   12127, 12132, 12139, 12144, 12151, 12153, 12157, 12158, 12162, 12167,
   12175, 12176, 12179, 12181, 12189, 12191, 12195, 12196, 12197, 12201,
   12203, 12208, 12209, 12218, 12219, 12223, 12224, 12228, 12241, 12264,
   12276, 12287, 12306, 12314, 12326, 12334, 12349, 12369, 12370, 12371,
   12379, 12380, 12381, 12388, 12394, 12400, 12406, 12412, 12418, 12447,
   12475, 12476, 12477, 12481, 12491, 12501, 12507, 12516, 12531, 12532,
   12536, 12545, 12560, 12564, 12610, 12614, 12631, 12635, 12713, 12737,
   12767, 12768, 12784, 12794, 12798, 12804, 12810, 12820, 12826, 12835,
   12845, 12846, 12874, 12888, 12902, 12917, 12918, 12928, 12929, 12939,
   12940, 12941, 12945, 12961, 12982, 12997, 12998, 12999, 13000, 13001,
   13002, 13003, 13004, 13005, 13006, 13007, 13008, 13009, 13010, 13011,
   13012, 13013, 13014, 13015, 13016, 13017, 13018, 13019, 13020, 13021,
   13022, 13023, 13024, 13025, 13026, 13027, 13028, 13029, 13030, 13031,
   13032, 13033, 13034, 13035, 13036, 13037, 13038, 13039, 13040, 13041,
   13042, 13043, 13044, 13045, 13046, 13047, 13048, 13049, 13050, 13051,
   13052, 13053, 13054, 13055, 13065, 13066, 13067, 13068, 13069, 13070,
   13071, 13072, 13073, 13074, 13075, 13076, 13077, 13078, 13079, 13080,
   13081, 13082, 13083, 13084, 13085, 13086, 13087, 13088, 13089, 13090,
   13091, 13092, 13093, 13094, 13095, 13096, 13097, 13098, 13099, 13100,
   13101, 13102, 13103, 13104, 13105, 13106, 13107, 13108, 13109, 13110,
   13111, 13112, 13113, 13114, 13115, 13116, 13117, 13118, 13119, 13120,
   13121, 13122, 13123, 13124, 13125, 13126, 13127, 13128, 13129, 13130,
   13131, 13132, 13133, 13134, 13135, 13136, 13137, 13138, 13139, 13140,
   13141, 13142, 13143, 13144, 13145, 13146, 13147, 13148, 13149, 13150,
   13151, 13152, 13153, 13154, 13155, 13156, 13157, 13158, 13159, 13160,
   13161, 13162, 13163, 13164, 13165, 13166, 13167, 13168, 13169, 13170,
   13171, 13172, 13173, 13174, 13175, 13176, 13177, 13178, 13179, 13180,
   13181, 13182, 13183, 13184, 13185, 13186, 13187, 13188, 13189, 13190,
   13191, 13192, 13193, 13194, 13195, 13196, 13197, 13198, 13199, 13200,
   13201, 13202, 13203, 13204, 13205, 13206, 13207, 13208, 13209, 13210,
   13211, 13212, 13213, 13214, 13215, 13216, 13217, 13218, 13219, 13220,
   13221, 13222, 13223, 13224, 13225, 13226, 13227, 13228, 13229, 13230,
   13231, 13232, 13233, 13234, 13235, 13236, 13237, 13238, 13239, 13240,
   13241, 13242, 13243, 13244, 13245, 13246, 13247, 13248, 13249, 13250,
   13251, 13252, 13253, 13254, 13255, 13256, 13257, 13258, 13259, 13260,
   13261, 13262, 13263, 13264, 13265, 13266, 13267, 13268, 13269, 13270,
   13271, 13272, 13273, 13274, 13275, 13276, 13277, 13278, 13279, 13280,
   13281, 13282, 13283, 13284, 13285, 13286, 13287, 13288, 13289, 13290,
   13291, 13292, 13293, 13294, 13295, 13296, 13297, 13298, 13299, 13300,
   13301, 13302, 13303, 13304, 13305, 13306, 13307, 13308, 13309, 13310,
   13311, 13312, 13313, 13314, 13315, 13316, 13317, 13318, 13319, 13320,
   13321, 13322, 13323, 13324, 13325, 13326, 13327, 13328, 13329, 13330,
   13331, 13332, 13333, 13334, 13335, 13336, 13337, 13338, 13339, 13340,
   13341, 13342, 13343, 13344, 13345, 13346, 13347, 13348, 13349, 13350,
   13351, 13352, 13353, 13354, 13355, 13356, 13357, 13364, 13363, 13378,
   13379, 13383, 13384, 13388, 13388, 13468, 13469, 13470, 13471, 13475,
   13476, 13480, 13481, 13482, 13483, 13487, 13488, 13489, 13490, 13494,
   13495, 13499, 13540, 13558, 13569, 13581, 13594, 13609, 13628, 13654,
   13667, 13693, 13736, 13750, 13751, 13752, 13753, 13757, 13758, 13767,
   13779, 13780, 13781, 13787, 13793, 13805, 13804, 13820, 13821, 13825,
   13826, 13830, 13845, 13846, 13847, 13852, 13853, 13858, 13857, 13877,
   13889, 13902, 13901, 13935, 13936, 13940, 13941, 13945, 13946, 13947,
   13948, 13950, 13949, 13962, 13963, 13964, 13965, 13966, 13972, 13977,
   13983, 13994, 14005, 14009, 14019, 14024, 14031, 14043, 14055, 14064,
   14066, 14070, 14071, 14078, 14080, 14084, 14085, 14090, 14089, 14093,
   14092, 14096, 14095, 14099, 14098, 14101, 14102, 14103, 14104, 14105,
   14106, 14107, 14108, 14109, 14110, 14111, 14112, 14113, 14114, 14115,
   14116, 14117, 14118, 14119, 14120, 14121, 14122, 14123, 14124, 14125,
   14126, 14130, 14131, 14135, 14136, 14140, 14150, 14160, 14173, 14188,
   14201, 14214, 14226, 14231, 14239, 14244, 14251, 14251, 14252, 14252,
   14255, 14282, 14287, 14293, 14299, 14305, 14309, 14313, 14314, 14318,
   14345, 14347, 14351, 14355, 14359, 14366, 14367, 14371, 14372, 14376,
   14377, 14381, 14382, 14388, 14394, 14400, 14410, 14409, 14419, 14420,
   14425, 14426, 14427, 14432, 14433, 14434, 14438, 14439, 14443, 14455,
   14464, 14474, 14483, 14497, 14498, 14503, 14502, 14518, 14519, 14520,
   14524, 14525, 14529, 14529, 14551, 14552, 14556, 14557, 14558, 14562,
   14566, 14573, 14576, 14574, 14590, 14597, 14618, 14642, 14644, 14648,
   14649, 14653, 14654, 14662, 14663, 14664, 14665, 14671, 14677, 14687,
   14689, 14691, 14696, 14697, 14698, 14699, 14700, 14704, 14705, 14706,
   14707, 14708, 14709, 14719, 14720, 14725, 14738, 14751, 14753, 14755,
   14760, 14765, 14767, 14769, 14775, 14776, 14778, 14784, 14783, 14800,
   14801, 14805, 14810, 14818, 14818, 14842, 14843, 14848, 14849, 14851,
   14853, 14871, 14877, 14882, 14864, 14943, 14960, 14984, 15015, 15019,
   15028, 15051, 14980, 15114, 15138, 15147, 15154, 15113, 15174, 15178,
   15182, 15186, 15190, 15194, 15201, 15208, 15215, 15225, 15226, 15230,
   15231, 15232, 15236, 15237, 15242, 15244, 15243, 15249, 15250, 15254,
   15261, 15271, 15277, 15288
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM", "ANALYZE_SYM",
  "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC", "ASCII_SYM",
  "ASENSITIVE_SYM", "AT_SYM", "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM",
  "AUTO_INC", "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM",
  "BEGIN_SYM", "BETWEEN_SYM", "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM",
  "BIT_AND", "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM",
  "BOOLEAN_SYM", "BOOL_SYM", "BOTH", "BTREE_SYM", "BY", "BYTE_SYM",
  "CACHE_SYM", "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM",
  "CATALOG_NAME_SYM", "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET",
  "CHAR_SYM", "CHECKPOINT_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLIENT_STATS_SYM", "CLOSE_SYM",
  "COALESCE", "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS",
  "COLUMN_ADD_SYM", "COLUMN_CREATE_SYM", "COLUMN_DELETE_SYM",
  "COLUMN_EXISTS_SYM", "COLUMN_GET_SYM", "COLUMN_LIST_SYM", "COLUMN_SYM",
  "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM",
  "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM", "CONCURRENT",
  "CONDITION_SYM", "CONNECTION_SYM", "CONSISTENT_SYM", "CONSTRAINT",
  "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM",
  "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_USER", "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME",
  "DATABASE", "DATABASES", "DATAFILE_SYM", "DATA_SYM", "DATETIME",
  "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM",
  "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM",
  "DEALLOCATE_SYM", "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM", "DIRECTORY_SYM",
  "DISABLE_SYM", "DISCARD", "DISK_SYM", "DISTINCT", "DIV_SYM",
  "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM",
  "DYNAMIC_SYM", "EACH_SYM", "ELSE", "ELSEIF_SYM", "ENABLE_SYM",
  "ENCLOSED", "END", "ENDS_SYM", "END_OF_INPUT", "ENGINES_SYM",
  "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM", "ERROR_SYM", "ERRORS",
  "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM", "EVENT_SYM", "EVERY_SYM",
  "EXAMINED_SYM", "EXECUTE_SYM", "EXISTS", "EXIT_SYM", "EXPANSION_SYM",
  "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM",
  "FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FILE_SYM", "FIRST_SYM",
  "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM",
  "FOREIGN", "FOR_SYM", "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM",
  "FUNCTION_SYM", "GE", "GENERAL", "GENERATED_SYM", "GEOMETRYCOLLECTION",
  "GEOMETRY_SYM", "GET_FORMAT", "GLOBAL_SYM", "GRANT", "GRANTS",
  "GROUP_SYM", "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HARD_SYM",
  "HASH_SYM", "HAVING", "HELP_SYM", "HEX_NUM", "HEX_STRING",
  "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM", "HOUR_MICROSECOND_SYM",
  "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM", "IDENT",
  "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM",
  "INDEX_STATS_SYM", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM",
  "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM",
  "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_SYM",
  "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM",
  "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM",
  "LAST_SYM", "LAST_VALUE", "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT",
  "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM",
  "LINES", "LINESTRING", "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM",
  "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB",
  "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY", "LT",
  "MASTER_CONNECT_RETRY_SYM", "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM",
  "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM",
  "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM",
  "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_KEY_SYM",
  "MASTER_SSL_SYM", "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM",
  "MASTER_USER_SYM", "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH",
  "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM", "MEDIUMBLOB", "MEDIUMINT",
  "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM",
  "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM",
  "NATIONAL_SYM", "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM",
  "NE", "NEG", "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM",
  "NOT2_SYM", "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM",
  "NO_WRITE_TO_BINLOG", "NULL_SYM", "NUM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SHOT_SYM", "ONE_SYM",
  "ONLINE_SYM", "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION",
  "OPTIONALLY", "OR2_SYM", "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER",
  "OUTFILE", "OUT_SYM", "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM",
  "PAGE_CHECKSUM_SYM", "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM",
  "PARTIAL", "PARTITIONING_SYM", "PARTITIONS_SYM", "PARTITION_SYM",
  "PASSWORD", "PERSISTENT_SYM", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM",
  "POINT_SYM", "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION",
  "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES",
  "PROCEDURE_SYM", "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM",
  "PROFILES_SYM", "PROXY_SYM", "PURGE", "QUARTER_SYM", "QUERY_SYM",
  "QUICK", "RANGE_SYM", "READS_SYM", "READ_ONLY_SYM", "READ_SYM",
  "READ_WRITE_SYM", "REAL", "REBUILD_SYM", "RECOVER_SYM", "REDOFILE_SYM",
  "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES", "REGEXP", "RELAY",
  "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM",
  "RELAY_THREAD", "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME",
  "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE",
  "REPLICATION", "REQUIRE_SYM", "RESET_SYM", "RESIGNAL_SYM", "RESOURCES",
  "RESTORE_SYM", "RESTRICT", "RESUME_SYM", "RETURNS_SYM", "RETURN_SYM",
  "REVOKE", "RIGHT", "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM",
  "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM", "RTREE_SYM", "SAVEPOINT_SYM",
  "SCHEDULE_SYM", "SCHEMA_NAME_SYM", "SECOND_MICROSECOND_SYM",
  "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM", "SENSITIVE_SYM",
  "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM", "SESSION_SYM",
  "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR", "SHARE_SYM",
  "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN", "SIGNAL_SYM",
  "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLOW", "SMALLINT", "SNAPSHOT_SYM",
  "SOCKET_SYM", "SOFT_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM",
  "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM",
  "SQLWARNING_SYM", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE_SYM",
  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM",
  "SQL_THREAD", "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM",
  "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM",
  "STRAIGHT_JOIN", "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM",
  "SUBJECT_SYM", "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING",
  "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM",
  "SYSDATE", "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY",
  "TABLE_STATS_SYM", "TABLE_SYM", "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM",
  "TEMPORARY", "TEMPTABLE_SYM", "TERMINATED", "TEXT_STRING", "TEXT_SYM",
  "THAN_SYM", "THEN_SYM", "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF",
  "TIME_SYM", "TINYBLOB", "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING",
  "TRANSACTION_SYM", "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM",
  "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM",
  "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER", "USER_STATS_SYM", "USE_FRM", "USE_SYM", "USING",
  "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES",
  "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE_SYM",
  "VARYING", "VAR_SAMP_SYM", "VIA_SYM", "VIEW_SYM", "VIRTUAL_SYM",
  "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM",
  "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM",
  "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM",
  "YEAR_SYM", "ZEROFILL", "IMPOSSIBLE_ACTION", "'|'", "'&'", "'-'", "'+'",
  "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'",
  "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "$@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "$@3",
  "change", "$@4", "master_defs", "master_def", "ignore_server_id_list",
  "ignore_server_id", "master_file_def", "create", "$@5", "$@6", "$@7",
  "$@8", "$@9", "$@10", "server_def", "server_options_list",
  "server_option", "event_tail", "$@11", "ev_schedule_time", "$@12",
  "opt_ev_status", "ev_starts", "ev_ends", "opt_ev_on_completion",
  "ev_on_completion", "opt_ev_comment", "ev_sql_stmt", "$@13",
  "ev_sql_stmt_inner", "clear_privileges", "sp_name", "sp_a_chistics",
  "sp_c_chistics", "sp_chistic", "sp_c_chistic", "sp_suid", "call", "$@14",
  "opt_sp_cparam_list", "opt_sp_cparams", "sp_cparams", "sp_fdparam_list",
  "sp_fdparams", "sp_init_param", "sp_fdparam", "sp_pdparam_list",
  "sp_pdparams", "sp_pdparam", "sp_opt_inout", "sp_proc_stmts",
  "sp_proc_stmts1", "sp_decls", "sp_decl", "$@15", "$@16",
  "sp_cursor_stmt", "$@17", "sp_handler_type", "sp_hcond_list",
  "sp_hcond_element", "sp_cond", "sqlstate", "opt_value", "sp_hcond",
  "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "sp_decl_idents", "sp_opt_default", "sp_proc_stmt",
  "sp_proc_stmt_if", "$@18", "sp_proc_stmt_statement", "$@19",
  "sp_proc_stmt_return", "$@20", "sp_proc_stmt_unlabeled", "$@21",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "$@22", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "$@23", "$@24", "$@25", "sp_elseifs",
  "case_stmt_specification", "simple_case_stmt", "$@26", "$@27",
  "searched_case_stmt", "$@28", "simple_when_clause_list",
  "searched_when_clause_list", "simple_when_clause", "$@29", "$@30",
  "searched_when_clause", "$@31", "$@32", "else_clause_opt",
  "sp_labeled_control", "$@33", "sp_opt_label", "sp_labeled_block", "$@34",
  "sp_unlabeled_block", "$@35", "sp_block_content", "$@36",
  "sp_unlabeled_control", "$@37", "$@38", "$@39", "trg_action_time",
  "trg_event", "change_tablespace_access", "change_tablespace_info",
  "tablespace_info", "opt_logfile_group_name", "alter_tablespace_info",
  "logfile_group_info", "alter_logfile_group_info", "add_log_file",
  "change_ts_option_list", "$@40", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create2",
  "create2a", "$@41", "$@42", "create3", "$@43", "$@44",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@45",
  "have_partitioning", "partition_entry", "$@46", "partition",
  "part_type_def", "$@47", "opt_linear", "opt_key_algo", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@48",
  "$@49", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@50", "part_name", "opt_part_values", "$@51", "$@52", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@53", "$@54",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@55", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@56", "$@57", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@58", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "$@59", "$@60", "$@61", "$@62", "opt_check_constraint",
  "check_constraint", "opt_constraint", "constraint", "field_spec", "$@63",
  "field_def", "@64", "opt_generated_always", "vcol_opt_specifier",
  "vcol_opt_attribute", "vcol_opt_attribute_list", "vcol_attribute",
  "parse_vcol_expr", "virtual_column_func", "type", "$@65", "$@66",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now_or_signed_literal", "hex_num_or_string",
  "charset", "charset_name", "charset_name_or_default",
  "opt_load_data_charset", "old_or_new_charset_name",
  "old_or_new_charset_name_or_default", "collation_name", "opt_collate",
  "collation_name_or_default", "opt_default", "ascii", "unicode",
  "opt_binary", "opt_bin_mod", "opt_primary", "references", "opt_ref_list",
  "ref_list", "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@67", "$@68", "$@69", "$@70", "$@71", "$@72",
  "$@73", "ev_alter_on_schedule_completion", "opt_ev_rename_to",
  "opt_ev_sql_stmt", "ident_or_empty", "alter_commands", "$@74", "$@75",
  "$@76", "remove_partitioning", "all_or_alt_part_name_list",
  "add_partition_rule", "$@77", "add_part_extra", "reorg_partition_rule",
  "$@78", "reorg_parts_rule", "$@79", "alt_part_name_list",
  "alt_part_name_item", "alter_list", "add_column", "alter_list_item",
  "$@80", "$@81", "$@82", "opt_column", "opt_ignore", "alter_options",
  "$@83", "alter_options_part2", "alter_option_list", "alter_option",
  "opt_restrict", "opt_place", "opt_to", "slave", "$@84", "$@85", "start",
  "start_transaction_opts", "slave_thread_opts", "$@86",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "$@87", "opt_checksum_type",
  "repair_table_or_view", "$@88", "repair", "$@89", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "opt_view_repair_type", "analyze",
  "$@90", "binlog_base64_event", "check_view_or_table", "$@91", "check",
  "$@92", "opt_mi_check_type", "mi_check_types", "mi_check_type",
  "opt_view_check_type", "optimize", "$@93", "opt_no_write_to_binlog",
  "rename", "$@94", "rename_list", "table_to_table_list", "table_to_table",
  "keycache", "$@95", "keycache_list_or_parts", "keycache_list",
  "assign_to_keycache", "assign_to_keycache_parts", "key_cache_name",
  "preload", "$@96", "preload_list_or_parts", "preload_list",
  "preload_keys", "preload_keys_parts", "adm_partition", "$@97",
  "cache_keys_spec", "$@98", "cache_key_list_or_empty",
  "opt_ignore_leaves", "select", "select_init", "select_paren",
  "select_paren_derived", "select_init2", "$@99", "select_part2", "$@100",
  "$@101", "select_into", "select_from", "select_options",
  "select_option_list", "select_option", "select_lock_type",
  "select_item_list", "select_item", "remember_name", "remember_end",
  "select_alias", "opt_time_precision", "optional_braces", "expr",
  "bool_pri", "predicate", "bit_expr", "or", "and", "not", "not2",
  "comp_op", "all_or_any", "opt_dyncol_type", "dyncol_type",
  "dyncall_create_element", "dyncall_create_list", "simple_expr",
  "function_call_keyword", "function_call_nonkeyword",
  "function_call_conflict", "geometry_function", "function_call_generic",
  "@102", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "$@103", "$@104", "$@105", "variable", "$@106",
  "variable_aux", "opt_distinct", "opt_gconcat_separator",
  "opt_gorder_clause", "$@107", "gorder_list", "in_sum_expr", "$@108",
  "cast_type", "$@109", "opt_expr_list", "expr_list", "ident_list_arg",
  "ident_list", "opt_expr", "opt_else", "when_list", "table_ref",
  "join_table_list", "esc_table_ref", "derived_table_list", "join_table",
  "$@110", "$@111", "$@112", "$@113", "$@114", "$@115", "$@116",
  "normal_join", "table_factor", "$@117", "select_derived_union", "$@118",
  "$@119", "select_init2_derived", "select_part2_derived", "$@120",
  "$@121", "select_derived", "$@122", "select_derived2", "$@123", "$@124",
  "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@125",
  "$@126", "index_hints_list", "opt_index_hints_list", "$@127",
  "opt_key_definition", "$@128", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@129", "having_clause", "$@130", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@131", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "limit_rows_option",
  "delete_limit_clause", "int_num", "ulong_num", "real_ulong_num",
  "ulonglong_num", "real_ulonglong_num", "dec_num_error", "dec_num",
  "choice", "procedure_clause", "$@132", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@133",
  "select_var_list", "select_var_ident", "into", "$@134",
  "into_destination", "$@135", "$@136", "do", "$@137", "drop", "$@138",
  "$@139", "$@140", "table_list", "table_name", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "opt_temporary", "insert", "$@141",
  "$@142", "replace", "$@143", "$@144", "insert_lock_option",
  "replace_lock_option", "insert2", "insert_table", "insert_field_spec",
  "$@145", "fields", "insert_values", "$@146", "$@147", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@148", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@149", "update", "$@150", "$@151", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@152", "single_multi", "$@153", "$@154", "$@155", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "$@156", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@157", "show_param",
  "$@158", "$@159", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@160", "$@161", "describe_command",
  "opt_extended_describe", "opt_describe_column", "flush", "$@162",
  "flush_options", "$@163", "$@164", "opt_with_read_lock",
  "flush_options_list", "flush_option", "opt_table_list",
  "optional_flush_tables_arguments", "reset", "$@165", "reset_options",
  "reset_option", "$@166", "slave_reset_options", "purge", "$@167",
  "purge_options", "purge_option", "kill", "$@168", "kill_type",
  "kill_option", "kill_expr", "use", "load", "$@169", "$@170", "$@171",
  "$@172", "data_or_xml", "opt_local", "load_data_lock", "opt_duplicate",
  "opt_field_term", "field_term_list", "field_term", "opt_line_term",
  "line_term_list", "line_term", "opt_xml_rows_identified_by",
  "opt_ignore_lines", "lines_or_rows", "opt_field_or_var_spec",
  "fields_or_vars", "field_or_var", "opt_load_data_set_spec",
  "load_data_set_list", "load_data_set_elem", "text_literal",
  "text_string", "param_marker", "signed_literal", "literal",
  "NUM_literal", "insert_ident", "table_wild", "order_ident",
  "simple_ident", "simple_ident_nospvar", "simple_ident_q", "field_ident",
  "table_ident", "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user", "keyword", "keyword_sp",
  "set", "$@173", "opt_option", "option_value_list", "option_type_value",
  "$@174", "option_type", "option_type2", "opt_var_type",
  "opt_var_ident_type", "ext_option_value", "sys_option_value",
  "option_value", "internal_variable_name", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@175",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@176", "handler", "$@177", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@178",
  "handler_rkey_mode", "revoke", "revoke_command", "grant",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@179", "$@180", "$@181",
  "$@182", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "via_or_with", "using_or_as",
  "grant_user", "opt_column_list", "column_list", "column_list_id",
  "require_clause", "grant_options", "opt_grant_option",
  "grant_option_list", "grant_option", "begin", "$@183", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "$@184",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "$@185",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@186", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@187",
  "view_list_opt", "view_list", "view_select", "$@188", "view_select_aux",
  "view_check_option", "trigger_tail", "$@189", "$@190", "$@191",
  "udf_tail", "sf_tail", "$@192", "$@193", "$@194", "$@195", "$@196",
  "sp_tail", "$@197", "$@198", "$@199", "$@200", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@201", "opt_migrate", "install", "uninstall", "keep_gcc_happy", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     124,    38,    45,    43,    42,    47,    37,    94,   126,    40,
      41,    44,    33,   123,   125,    59,    64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   639,   640,   641,   640,   640,   642,   642,   643,   643,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   645,   646,   646,   647,   648,   648,   650,
     649,   651,   651,   652,   652,   653,   655,   654,   657,   656,
     658,   658,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   660,   660,   660,
     661,   662,   662,   662,   662,   664,   663,   665,   663,   666,
     663,   667,   663,   668,   663,   669,   663,   663,   663,   663,
     663,   670,   671,   671,   672,   672,   672,   672,   672,   672,
     672,   674,   673,   676,   675,   675,   677,   677,   677,   677,
     678,   678,   679,   679,   680,   680,   681,   681,   682,   682,
     684,   683,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   686,   687,   687,   688,   688,
     689,   689,   690,   690,   690,   690,   690,   690,   690,   691,
     691,   691,   692,   692,   694,   693,   695,   695,   696,   696,
     697,   697,   698,   698,   699,   699,   700,   701,   702,   702,
     703,   703,   704,   705,   705,   705,   705,   706,   706,   707,
     707,   708,   708,   710,   709,   709,   711,   709,   709,   713,
     712,   714,   714,   715,   715,   716,   717,   717,   718,   719,
     719,   720,   720,   720,   720,   720,   721,   722,   722,   723,
     723,   724,   724,   725,   725,   726,   726,   726,   727,   727,
     727,   727,   727,   727,   727,   727,   727,   727,   727,   727,
     728,   729,   729,   730,   730,   731,   731,   731,   731,   731,
     731,   731,   731,   731,   731,   731,   731,   731,   733,   732,
     735,   734,   737,   736,   739,   738,   740,   741,   742,   744,
     743,   745,   746,   746,   746,   747,   747,   749,   750,   751,
     748,   752,   752,   752,   753,   753,   755,   756,   754,   758,
     757,   759,   759,   760,   760,   762,   763,   761,   765,   766,
     764,   767,   767,   769,   768,   770,   770,   772,   771,   774,
     773,   776,   775,   777,   778,   779,   777,   780,   777,   781,
     781,   782,   782,   782,   783,   784,   785,   786,   786,   787,
     787,   788,   789,   790,   790,   792,   791,   793,   793,   793,
     794,   794,   794,   795,   796,   796,   796,   797,   797,   797,
     797,   797,   797,   797,   797,   798,   799,   799,   799,   800,
     800,   800,   800,   800,   801,   802,   802,   802,   803,   803,
     803,   803,   803,   803,   803,   804,   805,   805,   805,   806,
     806,   806,   807,   808,   809,   810,   811,   812,   812,   812,
     813,   814,   815,   816,   817,   818,   819,   820,   821,   822,
     822,   823,   823,   824,   824,   825,   825,   825,   825,   827,
     826,   828,   826,   829,   830,   829,   831,   829,   832,   833,
     833,   835,   834,   836,   838,   837,   839,   840,   841,   840,
     840,   840,   840,   840,   842,   842,   843,   843,   844,   844,
     845,   845,   846,   847,   848,   849,   850,   850,   851,   852,
     851,   853,   851,   854,   854,   855,   856,   857,   857,   858,
     858,   859,   859,   861,   860,   862,   863,   864,   863,   865,
     863,   866,   866,   867,   867,   868,   868,   870,   871,   869,
     872,   872,   873,   873,   874,   874,   875,   875,   877,   876,
     878,   879,   879,   880,   880,   881,   881,   881,   881,   881,
     881,   881,   881,   881,   883,   884,   882,   885,   885,   886,
     886,   887,   887,   888,   888,   889,   889,   890,   890,   891,
     892,   892,   893,   893,   894,   894,   895,   895,   895,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   897,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     898,   899,   900,   901,   902,   902,   902,   902,   902,   902,
     902,   903,   903,   903,   904,   904,   905,   905,   905,   905,
     906,   907,   907,   908,   908,   909,   909,   911,   910,   912,
     910,   913,   910,   914,   910,   910,   910,   915,   915,   916,
     917,   917,   918,   920,   919,   921,   922,   921,   923,   923,
     924,   924,   924,   925,   925,   926,   926,   927,   927,   927,
     928,   929,   930,   930,   930,   930,   930,   930,   930,   930,
     930,   930,   930,   930,   930,   930,   930,   930,   930,   930,
     930,   930,   930,   930,   930,   930,   930,   930,   930,   930,
     930,   930,   930,   930,   930,   930,   930,   931,   930,   932,
     930,   930,   930,   933,   933,   933,   933,   933,   933,   933,
     933,   934,   935,   935,   936,   936,   937,   937,   937,   937,
     937,   938,   938,   938,   938,   938,   939,   939,   939,   940,
     940,   940,   941,   942,   942,   943,   943,   944,   944,   944,
     945,   945,   945,   945,   946,   946,   947,   947,   948,   948,
     949,   949,   950,   950,   950,   950,   950,   950,   950,   950,
     950,   950,   950,   950,   950,   950,   950,   951,   952,   952,
     953,   953,   954,   954,   955,   955,   956,   956,   957,   957,
     958,   958,   959,   959,   960,   961,   961,   962,   962,   963,
     963,   964,   964,   964,   965,   965,   965,   966,   966,   966,
     966,   966,   966,   966,   967,   967,   968,   968,   969,   970,
     970,   971,   971,   972,   972,   972,   972,   973,   973,   973,
     973,   973,   974,   974,   974,   974,   974,   975,   976,   976,
     977,   977,   978,   978,   979,   979,   979,   980,   980,   981,
     982,   983,   984,   984,   985,   985,   986,   986,   987,   987,
     988,   988,   989,   989,   990,   990,   991,   991,   992,   992,
     992,   992,   992,   992,   993,   993,   994,   995,   995,   996,
     996,   996,   997,   997,   998,   998,   999,   999,  1000,  1000,
    1001,  1001,  1003,  1002,  1004,  1002,  1002,  1005,  1002,  1006,
    1002,  1007,  1002,  1008,  1002,  1009,  1002,  1002,  1002,  1002,
    1002,  1002,  1010,  1010,  1010,  1010,  1011,  1011,  1012,  1012,
    1013,  1013,  1014,  1014,  1014,  1014,  1014,  1014,  1014,  1014,
    1014,  1014,  1015,  1014,  1014,  1016,  1014,  1017,  1014,  1014,
    1014,  1014,  1018,  1019,  1019,  1021,  1020,  1022,  1022,  1022,
    1024,  1023,  1025,  1026,  1025,  1027,  1027,  1028,  1029,  1029,
    1030,  1031,  1031,  1031,  1032,  1031,  1033,  1034,  1031,  1031,
    1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,
    1031,  1031,  1035,  1035,  1036,  1036,  1038,  1037,  1039,  1039,
    1040,  1040,  1041,  1041,  1042,  1042,  1042,  1043,  1043,  1043,
    1044,  1044,  1044,  1044,  1046,  1045,  1045,  1047,  1045,  1045,
    1048,  1049,  1049,  1051,  1050,  1052,  1052,  1053,  1053,  1053,
    1054,  1054,  1055,  1055,  1057,  1056,  1058,  1058,  1058,  1059,
    1060,  1059,  1062,  1061,  1063,  1063,  1064,  1064,  1065,  1065,
    1065,  1066,  1066,  1068,  1067,  1069,  1070,  1071,  1070,  1073,
    1072,  1074,  1074,  1075,  1075,  1076,  1076,  1076,  1076,  1076,
    1076,  1077,  1077,  1079,  1078,  1080,  1080,  1080,  1082,  1081,
    1081,  1083,  1083,  1084,  1084,  1085,  1087,  1086,  1088,  1088,
    1089,  1089,  1090,  1091,  1092,  1092,  1094,  1093,  1095,  1095,
    1096,  1096,  1097,  1098,  1100,  1099,  1102,  1101,  1103,  1103,
    1104,  1104,  1105,  1106,  1106,  1107,  1107,  1108,  1108,  1110,
    1109,  1112,  1113,  1111,  1114,  1114,  1114,  1114,  1114,  1115,
    1115,  1116,  1116,  1117,  1117,  1118,  1118,  1118,  1119,  1119,
    1119,  1120,  1120,  1120,  1121,  1121,  1122,  1123,  1124,  1124,
    1124,  1124,  1124,  1125,  1125,  1125,  1126,  1126,  1127,  1127,
    1127,  1127,  1127,  1127,  1127,  1127,  1127,  1127,  1127,  1128,
    1128,  1128,  1128,  1128,  1128,  1129,  1129,  1129,  1129,  1129,
    1129,  1129,  1129,  1129,  1129,  1129,  1129,  1129,  1129,  1130,
    1130,  1130,  1130,  1130,  1130,  1130,  1130,  1130,  1130,  1130,
    1130,  1130,  1130,  1130,  1131,  1131,  1132,  1132,  1133,  1133,
    1134,  1134,  1135,  1135,  1135,  1135,  1135,  1135,  1136,  1136,
    1137,  1137,  1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,
    1138,  1138,  1138,  1139,  1140,  1140,  1141,  1141,  1141,  1141,
    1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,
    1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,
    1141,  1141,  1141,  1141,  1141,  1141,  1142,  1142,  1142,  1142,
    1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,
    1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,
    1142,  1142,  1142,  1143,  1143,  1143,  1143,  1143,  1143,  1143,
    1143,  1143,  1143,  1143,  1143,  1143,  1143,  1143,  1143,  1143,
    1143,  1143,  1143,  1143,  1143,  1143,  1143,  1143,  1143,  1143,
    1143,  1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,
    1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,  1145,
    1145,  1145,  1145,  1145,  1145,  1145,  1145,  1147,  1146,  1146,
    1148,  1148,  1149,  1149,  1150,  1150,  1151,  1151,  1152,  1152,
    1153,  1154,  1154,  1154,  1154,  1154,  1154,  1154,  1155,  1156,
    1154,  1154,  1154,  1154,  1154,  1154,  1154,  1154,  1154,  1154,
    1154,  1157,  1154,  1159,  1158,  1160,  1160,  1160,  1161,  1161,
    1162,  1162,  1163,  1164,  1163,  1165,  1165,  1167,  1166,  1168,
    1168,  1168,  1168,  1168,  1168,  1168,  1168,  1168,  1168,  1168,
    1168,  1169,  1168,  1170,  1170,  1171,  1171,  1172,  1172,  1173,
    1173,  1174,  1174,  1175,  1175,  1176,  1176,  1177,  1177,  1178,
    1179,  1179,  1180,  1180,  1181,  1181,  1182,  1181,  1183,  1181,
    1184,  1181,  1181,  1185,  1181,  1186,  1181,  1181,  1187,  1181,
    1188,  1181,  1181,  1189,  1189,  1189,  1191,  1190,  1190,  1190,
    1192,  1193,  1194,  1192,  1195,  1197,  1198,  1196,  1200,  1199,
    1202,  1203,  1201,  1204,  1205,  1206,  1206,  1207,  1207,  1207,
    1207,  1208,  1208,  1210,  1209,  1211,  1209,  1212,  1212,  1213,
    1214,  1213,  1216,  1215,  1217,  1217,  1218,  1218,  1219,  1219,
    1220,  1220,  1221,  1221,  1221,  1221,  1221,  1221,  1221,  1221,
    1221,  1221,  1221,  1221,  1222,  1222,  1222,  1222,  1222,  1222,
    1222,  1222,  1222,  1223,  1223,  1223,  1223,  1224,  1224,  1224,
    1225,  1225,  1226,  1226,  1227,  1228,  1227,  1229,  1230,  1229,
    1231,  1231,  1232,  1232,  1233,  1233,  1234,  1234,  1234,  1235,
    1236,  1236,  1237,  1238,  1238,  1240,  1239,  1241,  1241,  1242,
    1242,  1242,  1243,  1243,  1244,  1244,  1245,  1245,  1245,  1246,
    1246,  1246,  1247,  1247,  1247,  1247,  1247,  1248,  1249,  1249,
    1249,  1249,  1250,  1250,  1250,  1251,  1251,  1251,  1251,  1251,
    1251,  1252,  1252,  1252,  1252,  1252,  1253,  1253,  1253,  1253,
    1253,  1254,  1254,  1254,  1254,  1254,  1255,  1256,  1256,  1257,
    1257,  1258,  1259,  1258,  1260,  1260,  1261,  1261,  1262,  1264,
    1263,  1265,  1265,  1266,  1266,  1268,  1267,  1270,  1271,  1269,
    1269,  1269,  1273,  1272,  1275,  1274,  1276,  1274,  1274,  1274,
    1274,  1274,  1274,  1277,  1274,  1274,  1274,  1274,  1274,  1274,
    1278,  1278,  1279,  1280,  1280,  1281,  1282,  1282,  1283,  1283,
    1285,  1286,  1284,  1288,  1289,  1287,  1290,  1290,  1290,  1290,
    1291,  1291,  1292,  1292,  1293,  1294,  1294,  1294,  1295,  1294,
    1296,  1296,  1297,  1297,  1298,  1297,  1299,  1297,  1300,  1300,
    1301,  1301,  1302,  1303,  1303,  1304,  1304,  1306,  1305,  1307,
    1307,  1308,  1308,  1309,  1309,  1310,  1311,  1310,  1313,  1314,
    1312,  1315,  1315,  1316,  1317,  1317,  1318,  1319,  1319,  1321,
    1320,  1323,  1322,  1324,  1322,  1325,  1322,  1326,  1326,  1327,
    1327,  1328,  1328,  1329,  1329,  1330,  1330,  1330,  1332,  1331,
    1333,  1333,  1334,  1334,  1335,  1335,  1336,  1336,  1336,  1336,
    1336,  1336,  1336,  1336,  1336,  1337,  1337,  1339,  1338,  1340,
    1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,
    1340,  1341,  1340,  1342,  1340,  1340,  1340,  1340,  1340,  1340,
    1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,
    1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,
    1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,
    1343,  1343,  1343,  1344,  1344,  1345,  1345,  1346,  1346,  1347,
    1347,  1348,  1348,  1349,  1349,  1350,  1350,  1351,  1351,  1351,
    1353,  1352,  1354,  1352,  1355,  1355,  1356,  1356,  1356,  1357,
    1357,  1357,  1359,  1358,  1361,  1362,  1360,  1360,  1363,  1363,
    1364,  1364,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1366,  1366,  1367,  1367,  1369,  1368,  1370,  1370,  1372,
    1371,  1371,  1371,  1373,  1373,  1375,  1374,  1376,  1377,  1377,
    1379,  1378,  1380,  1380,  1380,  1381,  1381,  1381,  1382,  1382,
    1383,  1385,  1386,  1387,  1388,  1384,  1389,  1389,  1390,  1390,
    1391,  1391,  1391,  1392,  1392,  1392,  1393,  1393,  1394,  1394,
    1395,  1395,  1395,  1395,  1396,  1396,  1397,  1397,  1398,  1398,
    1399,  1399,  1400,  1400,  1401,  1401,  1402,  1402,  1402,  1403,
    1403,  1404,  1404,  1405,  1405,  1406,  1406,  1407,  1408,  1408,
    1408,  1408,  1409,  1409,  1409,  1409,  1410,  1411,  1411,  1411,
    1412,  1412,  1412,  1412,  1412,  1412,  1412,  1412,  1412,  1412,
    1412,  1412,  1412,  1413,  1413,  1413,  1413,  1413,  1414,  1414,
    1415,  1415,  1416,  1417,  1417,  1418,  1418,  1419,  1419,  1419,
    1420,  1420,  1420,  1420,  1421,  1421,  1421,  1422,  1422,  1423,
    1424,  1424,  1425,  1426,  1427,  1428,  1428,  1429,  1429,  1430,
    1430,  1430,  1431,  1431,  1431,  1432,  1432,  1432,  1432,  1432,
    1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,
    1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,
    1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,
    1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,
    1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,
    1432,  1432,  1432,  1432,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1435,  1434,  1436,
    1436,  1437,  1437,  1439,  1438,  1440,  1440,  1440,  1440,  1441,
    1441,  1442,  1442,  1442,  1442,  1443,  1443,  1443,  1443,  1444,
    1444,  1445,  1445,  1446,  1446,  1446,  1446,  1446,  1446,  1446,
    1447,  1447,  1447,  1448,  1448,  1448,  1448,  1449,  1449,  1449,
    1450,  1450,  1450,  1450,  1450,  1452,  1451,  1453,  1453,  1454,
    1454,  1455,  1456,  1456,  1456,  1456,  1456,  1458,  1457,  1459,
    1459,  1460,  1459,  1461,  1461,  1462,  1462,  1463,  1463,  1463,
    1463,  1464,  1463,  1465,  1465,  1465,  1465,  1465,  1466,  1467,
    1467,  1467,  1467,  1467,  1468,  1469,  1469,  1469,  1469,  1470,
    1470,  1471,  1471,  1472,  1472,  1473,  1473,  1475,  1474,  1476,
    1474,  1477,  1474,  1478,  1474,  1474,  1474,  1474,  1474,  1474,
    1474,  1474,  1474,  1474,  1474,  1474,  1474,  1474,  1474,  1474,
    1474,  1474,  1474,  1474,  1474,  1474,  1474,  1474,  1474,  1474,
    1474,  1479,  1479,  1480,  1480,  1481,  1481,  1481,  1482,  1482,
    1482,  1482,  1483,  1483,  1484,  1484,  1485,  1485,  1486,  1486,
    1487,  1487,  1487,  1487,  1487,  1488,  1488,  1489,  1489,  1490,
    1491,  1491,  1491,  1491,  1491,  1492,  1492,  1493,  1493,  1494,
    1494,  1495,  1495,  1495,  1495,  1495,  1497,  1496,  1498,  1498,
    1499,  1499,  1499,  1500,  1500,  1500,  1501,  1501,  1502,  1503,
    1503,  1504,  1505,  1506,  1506,  1508,  1507,  1509,  1509,  1509,
    1510,  1510,  1512,  1511,  1513,  1513,  1514,  1514,  1514,  1515,
    1515,  1516,  1517,  1516,  1518,  1519,  1520,  1521,  1521,  1522,
    1522,  1523,  1523,  1523,  1523,  1523,  1523,  1523,  1523,  1524,
    1524,  1524,  1525,  1525,  1525,  1525,  1525,  1526,  1526,  1526,
    1526,  1526,  1526,  1527,  1527,  1528,  1529,  1530,  1530,  1530,
    1531,  1532,  1532,  1532,  1533,  1533,  1533,  1535,  1534,  1536,
    1536,  1537,  1537,  1539,  1538,  1540,  1540,  1541,  1541,  1541,
    1541,  1543,  1544,  1545,  1542,  1546,  1546,  1548,  1549,  1550,
    1551,  1552,  1547,  1554,  1555,  1556,  1557,  1553,  1558,  1558,
    1558,  1558,  1558,  1558,  1559,  1559,  1559,  1560,  1560,  1561,
    1561,  1561,  1562,  1562,  1563,  1564,  1563,  1565,  1565,  1566,
    1566,  1567,  1567,  1568
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     4,     1,     2,     0,
       4,     0,     2,     3,     1,     2,     0,     3,     0,     5,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     5,     1,     0,     1,     3,
       1,     3,     3,     3,     3,     0,     7,     0,    12,     0,
      12,     0,    12,     0,     6,     0,     3,     4,     4,     3,
       2,    10,     1,     3,     2,     2,     2,     2,     2,     2,
       2,     0,    13,     0,     6,     2,     0,     1,     3,     1,
       0,     2,     0,     2,     0,     1,     3,     4,     0,     2,
       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     3,     1,     0,     2,
       0,     2,     2,     2,     2,     2,     3,     3,     1,     1,
       1,     2,     3,     3,     0,     4,     0,     3,     0,     1,
       3,     1,     0,     1,     3,     1,     0,     3,     0,     1,
       3,     1,     4,     0,     1,     1,     1,     0,     3,     2,
       3,     0,     3,     0,     5,     5,     0,     7,     5,     0,
       2,     1,     1,     1,     3,     1,     1,     1,     3,     0,
       1,     1,     1,     1,     2,     1,     3,     1,     1,     0,
       1,     0,     2,     3,     5,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     3,     0,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     5,
       0,     2,     0,     3,     0,     2,     2,     2,     2,     0,
       6,     2,     0,     2,     1,     1,     3,     0,     0,     0,
       7,     0,     2,     2,     1,     1,     0,     0,     8,     0,
       6,     1,     2,     1,     2,     0,     0,     6,     0,     0,
       6,     0,     2,     0,     5,     0,     1,     0,     5,     0,
       2,     0,     5,     4,     0,     0,     8,     0,     7,     1,
       1,     1,     1,     1,     2,     4,     5,     0,     4,     4,
       4,     3,     3,     2,     2,     0,     2,     1,     2,     3,
       1,     1,     1,     1,     1,     2,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     1,     1,     2,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     3,     1,
       1,     1,     2,     2,     2,     1,     1,     1,     1,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     4,     0,
       1,     1,     1,     1,     1,     2,     3,     2,     4,     0,
       6,     0,     5,     0,     0,     5,     0,     7,     1,     0,
       1,     0,     4,     0,     0,     3,     5,     6,     0,     4,
       2,     2,     2,     2,     0,     1,     0,     3,     0,     1,
       1,     3,     1,     4,     5,     5,     0,     2,     0,     0,
       7,     0,    10,     1,     3,     1,     1,     0,     2,     0,
       3,     1,     3,     0,     6,     1,     0,     0,     5,     0,
       4,     1,     1,     1,     3,     1,     3,     0,     0,     5,
       1,     3,     1,     1,     0,     3,     1,     3,     0,     4,
       1,     0,     1,     2,     1,     3,     4,     3,     3,     3,
       3,     4,     4,     3,     0,     0,     6,     0,     1,     0,
       1,     1,     2,     1,     1,     0,     1,     1,     2,     1,
       0,     3,     0,     1,     1,     2,     1,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     0,     6,     1,     1,     3,     4,     4,
       2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       4,     4,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     2,     2,     0,     8,     0,
       9,     0,     9,     0,     9,     8,     2,     0,     1,     4,
       0,     1,     2,     0,     3,     2,     0,     9,     0,     2,
       0,     1,     1,     0,     1,     2,     1,     1,     2,     2,
       4,     3,     3,     3,     3,     1,     2,     1,     1,     3,
       2,     3,     2,     2,     1,     3,     3,     2,     3,     1,
       2,     2,     2,     1,     2,     1,     1,     1,     2,     3,
       2,     3,     2,     2,     3,     3,     3,     0,     6,     0,
       6,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     2,     1,     2,     3,
       2,     1,     1,     1,     1,     1,     1,     1,     2,     0,
       1,     1,     5,     0,     1,     2,     1,     1,     1,     1,
       3,     3,     3,     3,     0,     1,     0,     1,     0,     1,
       2,     1,     1,     2,     2,     4,     1,     3,     2,     1,
       2,     2,     2,     3,     3,     3,     3,     2,     2,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     0,     2,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     0,
       1,     1,     2,     2,     1,     2,     2,     0,     1,     1,
       1,     3,     1,     3,     0,     1,     0,     1,     5,     0,
       3,     3,     1,     0,     2,     2,     2,     0,     3,     3,
       6,     6,     1,     1,     2,     2,     2,     1,     2,     2,
       1,     1,     0,     1,     1,     1,     1,     0,     1,     1,
       1,     0,     1,     2,     0,     1,     0,     1,     0,     1,
       1,     2,     1,     2,     1,     2,     2,     2,     3,     2,
       3,     3,     3,     3,     1,     1,     1,     1,     3,     1,
       1,     1,     4,     2,     1,     4,     0,     1,     0,     2,
       1,     3,     0,     6,     0,     5,     7,     0,     5,     0,
       5,     0,     5,     0,     4,     0,    10,     3,     4,     3,
       3,     7,     0,     3,     1,     4,     0,     3,     0,     2,
       0,     1,     0,     2,     2,     2,     2,     1,     1,     1,
       3,     4,     0,     6,     4,     0,     5,     0,     6,     4,
       3,     1,     2,     1,     1,     0,     5,     0,     3,     2,
       0,     5,     0,     0,     6,     1,     3,     1,     1,     3,
       2,     3,     2,     4,     0,     6,     0,     0,     7,     4,
       4,     3,     3,     2,     2,     6,     5,     3,     5,     1,
       1,     1,     0,     1,     0,     1,     0,     2,     0,     1,
       2,     1,     1,     1,     0,     1,     1,     0,     2,     1,
       0,     1,     1,     1,     0,     5,     3,     0,     5,     3,
       3,     0,     3,     0,     2,     1,     3,     0,     1,     1,
       0,     2,     1,     3,     0,     5,     0,     1,     1,     3,
       0,     4,     0,     4,     0,     1,     1,     2,     1,     1,
       1,     0,     2,     0,     5,     2,     3,     0,     4,     0,
       3,     0,     1,     1,     2,     1,     1,     1,     1,     1,
       2,     0,     2,     0,     5,     0,     1,     1,     0,     4,
       4,     3,     5,     1,     3,     3,     0,     6,     1,     1,
       1,     3,     2,     3,     1,     1,     0,     6,     1,     1,
       1,     3,     3,     4,     0,     6,     0,     2,     0,     4,
       0,     2,     1,     2,     4,     2,     3,     2,     3,     0,
       3,     0,     0,     6,     2,     1,     1,     2,     2,     8,
       4,     0,     1,     2,     1,     1,     1,     1,     0,     2,
       4,     3,     1,     1,     3,     4,     0,     0,     0,     2,
       2,     1,     1,     0,     2,     3,     0,     2,     3,     3,
       3,     2,     3,     4,     3,     4,     3,     4,     1,     3,
       4,     3,     3,     6,     1,     5,     6,     5,     7,     6,
       8,     5,     6,     4,     4,     5,     3,     4,     1,     3,
       3,     3,     3,     3,     3,     5,     5,     3,     3,     3,
       3,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     2,     1,     2,     1,     1,     1,     2,     2,     1,
       1,     2,     2,     4,     1,     3,     1,     1,     1,     1,
       1,     3,     1,     1,     1,     1,     3,     2,     2,     2,
       2,     3,     3,     5,     6,     4,     4,     7,     2,     6,
       5,     6,     6,     4,     4,     5,     4,     6,     2,     4,
       4,     4,    10,     6,     8,     6,     4,     4,     6,     4,
       4,     4,     6,     4,     7,     7,     7,     6,     6,     6,
       6,     3,     4,     6,     8,     2,     2,     8,     8,     6,
       6,     2,     6,     6,     8,     8,     6,     8,     6,     2,
       8,     8,     2,     2,     2,     6,     6,     6,     4,     4,
       8,     4,     4,     4,     4,     3,     8,     4,     4,     6,
       4,     4,     4,     6,     8,     6,     4,     6,     1,     6,
       4,     4,     4,     4,     4,     6,     4,     0,     5,     6,
       2,     3,     0,     4,     0,     3,     0,     1,     1,     3,
       4,     4,     5,     4,     4,     4,     5,     4,     0,     0,
       7,     4,     5,     4,     5,     4,     4,     4,     4,     4,
       5,     0,     8,     0,     3,     3,     1,     4,     0,     1,
       0,     2,     0,     0,     4,     4,     2,     0,     3,     2,
       3,     2,     1,     1,     2,     1,     2,     1,     2,     2,
       2,     0,     3,     0,     1,     1,     3,     1,     3,     1,
       3,     0,     1,     0,     2,     4,     5,     1,     1,     1,
       1,     4,     1,     3,     3,     3,     0,     6,     0,     6,
       0,     8,     4,     0,     8,     0,    10,     6,     0,     8,
       0,    10,     6,     1,     2,     2,     0,     4,     3,     5,
       2,     0,     0,     7,     1,     0,     0,     6,     0,     3,
       0,     0,     5,     0,     1,     0,     1,     0,     2,     3,
       3,     1,     1,     0,     7,     0,     7,     1,     2,     0,
       0,     2,     0,     2,     0,     1,     1,     1,     1,     3,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     1,     1,
       0,     2,     0,     1,     0,     0,     3,     0,     0,     3,
       2,     0,     0,     4,     4,     2,     0,     1,     1,     3,
       3,     1,     2,     0,     1,     0,     4,     4,     2,     0,
       1,     1,     0,     1,     0,     1,     2,     5,     4,     1,
       3,     3,     1,     1,     1,     1,     1,     1,     0,     2,
       3,     4,     1,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     0,     6,     0,     1,     3,     1,     3,     0,
       2,     3,     1,     2,     1,     0,     3,     0,     0,     7,
       2,     1,     0,     3,     0,     7,     0,     6,     4,     6,
       4,     4,     4,     0,     6,     4,     4,     5,     6,     4,
       1,     3,     1,     1,     3,     1,     0,     2,     0,     1,
       0,     0,     8,     0,     0,     6,     0,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     3,     4,     0,     3,
       3,     1,     2,     2,     0,     3,     0,     5,     3,     1,
       3,     1,     3,     1,     1,     0,     1,     0,     4,     0,
       1,     3,     1,     1,     1,     0,     0,     6,     0,     0,
      11,     3,     1,     3,     3,     1,     3,     0,     1,     0,
       4,     0,     6,     0,     5,     0,     6,     1,     3,     2,
       4,     0,     2,     0,     2,     1,     1,     1,     0,     4,
       0,     1,     0,     1,     1,     3,     1,     1,     2,     2,
       2,     1,     1,     1,     1,     0,     3,     0,     3,     2,
       4,     4,     3,     4,     4,     1,     3,     3,     6,     2,
       2,     0,     6,     0,     6,     5,     2,     1,     1,     1,
       5,     5,     2,     2,     1,     4,     3,     2,     3,     2,
       2,     1,     3,     4,     3,     3,     2,     2,     1,     1,
       1,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     0,     1,     0,     2,     0,
       1,     1,     1,     0,     2,     0,     2,     0,     2,     2,
       0,     4,     0,     4,     1,     1,     0,     1,     1,     0,
       1,     1,     0,     4,     0,     0,     5,     1,     0,     4,
       3,     1,     2,     2,     2,     2,     2,     2,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     1,     0,     3,     0,     3,     3,     1,     0,
       3,     1,     2,     0,     1,     0,     3,     3,     2,     2,
       0,     5,     0,     1,     1,     0,     1,     1,     1,     2,
       2,     0,     0,     0,     0,    21,     1,     1,     0,     1,
       0,     1,     1,     0,     1,     1,     0,     2,     2,     1,
       3,     4,     3,     3,     0,     2,     2,     1,     3,     3,
       0,     4,     0,     3,     1,     1,     0,     3,     2,     3,
       1,     1,     2,     0,     2,     3,     1,     5,     1,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       2,     2,     2,     1,     1,     1,     1,     1,     1,     1,
       3,     5,     1,     1,     1,     1,     1,     3,     4,     5,
       1,     5,     3,     2,     1,     3,     2,     2,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     4,     0,
       1,     1,     3,     0,     2,     1,     1,     1,     1,     0,
       1,     0,     1,     1,     1,     0,     2,     2,     2,     1,
       2,     4,     5,     4,     6,     2,     3,     3,     3,     5,
       1,     3,     3,     2,     2,     2,     1,     1,     4,     4,
       1,     1,     1,     1,     1,     0,     4,     1,     1,     1,
       3,     3,     1,     1,     2,     2,     2,     0,     3,     4,
       3,     0,     7,     1,     2,     1,     1,     1,     1,     1,
       1,     0,     5,     1,     1,     1,     1,     1,     3,     6,
       6,     6,     7,     5,     3,     8,     8,     8,     6,     0,
       1,     1,     2,     0,     1,     1,     3,     0,     3,     0,
       3,     0,     3,     0,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     2,     1,     1,
       2,     0,     1,     3,     1,     2,     2,     2,     1,     3,
       3,     1,     1,     3,     1,     3,     1,     1,     1,     1,
       4,     5,     4,     6,     1,     0,     3,     3,     1,     1,
       0,     2,     2,     2,     2,     0,     2,     0,     3,     2,
       1,     2,     2,     2,     2,     2,     0,     3,     0,     1,
       0,     3,     2,     0,     1,     2,     0,     1,     4,     4,
       5,     2,     3,     0,     1,     0,     4,     0,     1,     1,
       0,     1,     0,     2,     2,     1,     0,     1,     1,     2,
       3,     2,     0,     6,     3,     0,     0,     0,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     3,     1,     2,     1,
       2,     3,     3,     3,     0,     3,     3,     0,     7,     0,
       3,     1,     3,     0,     3,     2,     4,     0,     3,     4,
       4,     0,     0,     0,    16,     8,     7,     0,     0,     0,
       0,     0,    15,     0,     0,     0,     0,    12,     4,     4,
       3,     4,     3,     2,     1,     3,     5,     1,     1,     0,
       1,     1,     0,     2,     0,     0,     3,     0,     2,     5,
       3,     3,     3,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   956,  1035,  2506,     0,     0,     0,     0,     0,  1019,
    2508,   115,    64,  1679,  1794,  1795,  1592,  1618,     2,     0,
    1035,   165,     0,    76,  1620,     0,  1850,     0,     0,  1035,
       0,   444,     0,  1845,     0,     0,  1035,  1623,  1835,   239,
     165,  2508,     0,  1081,  2329,  1717,     0,     0,     0,     0,
    1700,     0,  2387,  1668,     0,     0,  2643,     0,     0,     3,
       8,    19,     0,    40,    24,    28,    14,    18,    13,    53,
      47,    38,    37,    10,    55,    56,    16,    44,    11,    12,
      15,    36,    43,    32,    39,    51,  1072,    22,    23,    29,
      45,    60,    20,    57,    54,    21,  1796,    25,    46,    41,
      33,    61,    34,    52,    35,    59,    27,    48,    26,     9,
      17,    49,    50,    42,    62,    30,    58,    31,     0,   890,
       0,     0,     0,     0,     0,     0,     0,   958,   873,  2573,
    2574,  2575,  1037,  1036,     0,  2508,  1962,  1015,  1046,  2034,
    2035,  2036,  2037,  2038,  2039,  2040,  2041,  1976,  2042,  2043,
    2045,  2044,  2046,  2047,  1977,  1978,  2048,  2049,  2050,  2052,
    2051,  2053,  1979,  1980,  2054,  2055,  2056,  2057,  1981,  1983,
    1982,  2058,  2061,  2060,  2059,  1984,  2062,  2063,  2064,  2066,
    1985,  1986,  1987,  1988,  1989,  1990,  2065,  1991,  2067,  1992,
    2068,  2069,  2070,  2071,  2072,  2073,  2074,  2076,  2075,  1993,
    2077,  2078,  2079,  2080,  2081,  2083,  2082,  2084,  2085,  2086,
    1994,  2087,  2088,  2089,  2090,  2091,  2092,  2093,  1995,  2094,
    2095,  2096,  2113,  1996,  2097,  2100,  2099,  2098,  2101,  2102,
    2103,  2105,  2104,  2106,  1997,  1998,  2107,  2108,  2109,  2111,
    2110,  2115,  2116,  2117,  1999,  2112,  2114,  2305,  2118,  2119,
    2121,  2120,  2122,  2124,  2123,  2000,  2126,  2125,  2001,  2002,
    2127,  2128,  1960,  2129,  1961,  2130,  2133,  2134,  2131,  2135,
    2140,  2003,  2132,  2136,  2137,  2138,  2139,  2141,  2004,  2143,
    2142,  2144,  2145,  2146,  2147,  2148,  2149,  2150,  2151,  2152,
    2163,  2156,  2158,  2159,  2161,  2157,  2162,  2166,  2165,  2167,
    2168,  2169,  2164,  2154,  2160,  2155,  2170,  2171,  2153,  2172,
    2173,  2174,  2175,  2176,  2177,  2178,  2179,  2180,  2181,  2182,
    2184,  2183,  2185,  2186,  2187,  2188,  2189,  2190,  2191,  2193,
    2192,  2194,  2195,  2196,  2198,  2197,  2200,  2201,  2005,  2199,
    2202,  2203,  2204,  2205,  2206,  2207,  2006,  2008,  2007,  2009,
    2208,  2209,  2010,  2210,  2211,  2212,  2011,  2213,  2214,  2215,
    2217,  2216,  2218,  2219,  2012,  2013,  2220,  2221,  2222,  2223,
    2224,  2225,  2226,  2227,  2228,  2229,  2230,  2231,  2232,  2233,
    2235,  2234,  2236,  2237,  2238,  2239,  2240,  2241,  2242,  2014,
    2243,  2015,  2244,  2245,  2016,  2246,  2017,  2247,  2248,  2018,
    2249,  2250,  2251,  2252,  2253,  2254,  2019,  2255,  2256,  2257,
    2020,  2259,  2258,  2260,  2021,  2262,  2263,  2022,  2261,  2024,
    2264,  2265,  2023,  2266,  2025,  2267,  2268,  2270,  2269,  2271,
    2272,  2273,  2026,  2274,  2027,  2275,  2276,  2277,  2278,  2279,
    2281,  2280,  2282,  2283,  2284,  2285,  2288,  2290,  2287,  2289,
    2286,  2291,  2292,  2293,  2294,  2298,  2299,  2300,  2301,  2295,
    2296,  2297,  2028,  2302,  2303,  2304,  2306,  2307,  2309,  2308,
    2029,  2030,  2310,  2311,  2033,  2312,  2313,  2314,  2318,  2315,
    2326,  2316,  2317,  2320,  2319,  2321,  2322,  2031,  2323,  2032,
    2324,  2325,   184,  1965,   167,  1966,  1975,     0,  2378,  2377,
     994,     0,  2509,  2510,   540,   819,     0,     0,   820,     0,
     539,   818,   165,  2575,   120,     0,   536,   537,     0,     0,
       0,  1693,     0,  1616,  1616,  1616,     0,     0,  1616,  1616,
       0,  1619,  1616,   165,  1616,     0,    69,  1802,     0,     0,
       0,     0,  1959,     0,  1626,     0,     0,  1852,  1866,     0,
    1867,  1861,  2375,     0,  1106,     0,     0,     0,     0,   165,
    1038,  1002,  1677,     0,   229,   238,   240,   241,   237,     0,
    2510,  2521,  1073,  1079,  1091,  2330,  2327,  1779,   241,   983,
     983,   983,   981,   983,  1701,  1698,     0,     0,     0,  1677,
    1860,  2627,     0,     0,     0,  2623,     0,  2628,     0,  1081,
       0,     0,     1,     5,     0,     0,  2108,  2212,  1792,  1790,
    1954,     0,   864,   891,     0,   869,     0,   867,  1971,  1970,
    1969,     0,   880,   879,   877,     0,   405,     0,   962,   963,
     957,   959,   961,     0,  2584,   871,  1013,  2507,     0,   186,
       0,    78,     0,  1017,  1020,     0,     0,  2513,     0,     0,
       0,     0,   119,     0,     0,     0,   116,  1106,  1106,  2575,
    2577,  2579,   540,   538,     0,     0,     0,  1697,  1696,  1695,
       0,  1693,  2035,  1976,  2047,     0,  1927,     0,     0,     0,
    1381,     0,  1981,     0,  2062,  2064,  1985,  1986,  1987,  1988,
    1989,  1990,  1993,     0,     0,  1116,  1116,  1113,     0,     0,
       0,  2085,  2086,  1936,     0,     0,     0,  1923,  1937,  2121,
    2122,     0,  1925,  1926,  2128,     0,     0,     0,  2142,     0,
    2147,  1934,     0,     0,  2179,  2181,     0,     0,  2185,  2186,
    2187,  2188,  1909,  1171,     0,  1113,  1922,  1933,  2204,  1916,
    2213,  2218,  2219,     0,  2228,     0,     0,     0,  2253,  2257,
       0,     0,  2278,     0,     0,  1113,  1908,  2298,  2299,  2300,
    2301,     0,  1924,  2028,  1935,     0,  2312,  1116,  1113,  1113,
       0,     0,     0,  2321,  2325,     0,     0,     0,  2545,  1170,
       0,  1343,     0,  1375,  1128,  1134,  1148,     0,  1163,  1197,
    1198,  1200,  1298,  1199,  1205,  1204,  1593,  1920,  1203,  1202,
    1921,  1196,  1944,  1965,  1943,     0,     0,     0,     0,     0,
       0,     0,     0,  1775,     0,     0,  1603,  1616,    71,     0,
    2423,  2438,  2439,  2435,  2440,  2458,  2441,  2445,     0,  2437,
    2429,     0,  2444,     0,  2433,  2442,     0,  2427,     0,  2443,
    2448,  2459,  2431,  2436,  2414,     0,  2421,  2425,  1956,  1487,
    2390,  2391,     0,    77,  1628,  1629,  1627,   954,     0,  2640,
    1853,  1854,  1855,     0,  1870,     0,  1033,     0,     0,   454,
     445,     0,  1774,  1773,     0,  1846,  2522,     0,     0,     0,
    1631,  1678,     0,  1630,  1841,     0,  1839,  1836,  1838,   230,
       0,     0,   260,  2423,     0,  2408,     0,  2516,  2513,  2523,
    2558,  2553,  2552,  2555,  2556,  1097,  2557,  1096,  2554,  2551,
    1106,  1092,  1094,  1095,  2333,  1737,     0,   753,     0,  1758,
    1787,  1738,     0,     0,  1787,     0,  1522,  1777,  1780,     0,
    2342,  1751,   816,   815,  1761,   814,  2343,  1773,     0,  1725,
    1739,     0,  1702,  1744,     0,  2344,     0,  1776,  1760,     0,
    1759,  1522,  1787,     0,  1718,     0,     0,     0,     0,   236,
     977,   987,   979,   974,     0,   980,   976,     0,  2641,  2642,
    2388,   954,  1915,  1913,  1914,  1963,  2624,  1912,  2632,  2634,
    2620,  2622,  2629,  1075,     0,  2527,     6,    63,     0,  1799,
    2582,  2583,  2581,   769,     0,  1116,  1972,  2576,   168,   878,
       0,   406,   168,     0,     0,     0,     0,     0,   407,   408,
     344,   862,   960,   875,     0,     0,   874,  2584,     0,     0,
    1048,  1050,  1049,  1066,   188,   185,   166,     0,   996,  1610,
    1612,     0,  1021,  2512,     0,     0,  2514,  2518,  1169,  1168,
       0,   113,   118,     0,     0,     0,  2484,   117,  2474,  2580,
    1106,  1106,  1106,  2572,     0,  2560,  2567,  2568,  2571,  2570,
    2569,  2566,     0,  2559,  2562,  2563,  2565,  2564,  2584,  2578,
       0,   821,   821,   821,     0,  1680,  1683,  1687,  1691,  1694,
       0,     0,  1492,  1218,  1492,  1492,  1492,  1382,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1492,     0,  1255,  1228,     0,  1256,     0,     0,
       0,     0,     0,  1930,     0,     0,  2545,     0,     0,     0,
    1348,     0,     0,     0,  2545,     0,     0,     0,     0,     0,
       0,  1377,  1379,  1943,  1492,     0,     0,  1492,     0,     0,
       0,     0,     0,  1121,  1261,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1492,  1492,     0,     0,
    1492,  1269,     0,  1932,     0,     0,     0,  1931,     0,     0,
    1929,   750,   751,  1910,  1928,     0,  1272,  1274,  1273,     0,
    1492,  1492,     0,     0,  1208,  1207,  1209,     0,     0,     0,
       0,     0,     0,  1167,  1166,  1165,  1164,     0,     0,     0,
    1172,     0,  1173,  1174,     0,  1175,  1176,  1177,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1210,     0,     0,
       0,  1911,  1307,     0,  1617,  1598,  1605,  1600,     0,  1775,
    1601,  1609,   419,     0,  1606,  2472,  1602,     0,  1594,     0,
      70,     0,  1824,  1829,     0,     0,     0,  1819,  1827,  1821,
    1828,  1820,     0,     0,  1830,  1823,     0,  1822,  1826,  1825,
    1803,  1807,  1811,  1804,  2424,  2422,  2456,  2455,  2460,     0,
    2457,  2453,  2446,  2485,  2450,     0,  2485,  2452,  2451,  2485,
    2447,  2454,  2485,  2419,     0,  1488,  1489,     0,  2389,     0,
    1955,   955,     0,     0,  1856,  1857,     0,  1056,  1871,  1872,
    1868,  1487,  2376,  2379,     0,   640,  1107,   455,     0,     0,
     466,     0,     0,    66,    67,     0,  1040,     0,  1039,  1043,
       0,  1000,  1003,     0,     0,  1634,  1624,  1633,  1842,  1843,
       0,   228,   253,   248,   256,   250,   252,   251,   257,   258,
     259,   254,   249,   255,   242,     0,  2422,     0,  2419,  2517,
       0,  2519,  2536,  1080,  2524,  1103,  1082,  1102,     0,  1093,
    2328,  2331,  2339,  1783,   752,     0,     0,  1750,     0,   540,
       0,     0,     0,     0,     0,     0,  1719,     0,     0,   583,
       0,  1743,  1523,  1781,  1782,  1787,     0,     0,  1787,     0,
    1756,  1777,     0,  1787,  1714,     0,     0,  1706,  1711,  1707,
       0,  1713,  1712,  1715,  1703,  1704,  1783,  1730,  1757,  1777,
    1742,  1749,     0,  1729,  1736,     0,  1747,  1777,  1777,  1787,
    1787,   990,   989,   988,   984,   985,   990,     0,  1699,  1416,
       0,     0,  2621,  2635,  2619,  2630,  2631,  2618,  1076,  2528,
    1074,  2529,     0,     7,     4,  1793,  1791,  1800,  1801,   770,
     769,   531,   534,   533,     0,     0,  1974,     0,   870,     0,
    1775,   868,     0,     0,  1775,   355,  1775,   409,   769,   882,
       0,     0,   872,  1014,     0,     0,   443,  1066,  1052,  1068,
       0,   189,   191,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    79,    80,    96,   998,   997,     0,   995,  1031,  1029,
    1028,  1026,     0,  1027,  1025,  1016,  1022,  1023,  2511,  2515,
     541,   769,  1775,     0,   347,     0,     0,     0,     0,     0,
     540,     0,     0,  2561,   105,   822,     0,     0,     0,  1685,
    1613,  1681,  1615,  1954,     0,     0,     0,  1689,     0,     0,
    1493,  1492,     0,  1357,     0,     0,     0,     0,  1383,     0,
       0,     0,     0,     0,     0,     0,  1194,     0,     0,     0,
       0,     0,     0,     0,  1328,     0,  1357,  1117,  1567,  1568,
    1552,  1553,  1551,  1554,  1114,     0,  1555,  1566,  1285,     0,
       0,     0,     0,     0,     0,  1463,  1464,  1465,  1466,  1474,
    1467,  1468,  1469,  1476,  1481,  1470,  1471,  1477,  1478,  1479,
    1472,  1480,  1475,  1473,  1482,     0,  1462,     0,  1485,  1483,
    1486,  1484,     0,  1349,  1341,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1492,     0,     0,
       0,  1492,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1492,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1251,     0,  1946,  1945,     0,     0,
       0,     0,  1212,     0,  1211,  1425,     0,  2530,  2546,     0,
    2345,  1344,  1346,     0,  1119,  1118,  1120,  1131,  1124,  1129,
    1122,  1126,     0,  1178,  2041,  1132,     0,     0,  1160,  2545,
    1501,  1161,  1146,  1151,  1152,     0,  1149,  1150,     0,  1154,
       0,  1153,  1157,  1158,  1159,  1162,     0,     0,     0,     0,
    1201,  1206,  1376,  1106,  1947,     0,  1596,   419,   422,   421,
    1607,   420,  1655,     0,   964,     0,     0,    72,    74,  1816,
    1813,  1812,  1814,  1818,  1817,  1815,     0,  1831,  2449,     0,
    2430,     0,  2434,  2428,  2432,     0,     0,  2420,     0,  2426,
    1491,  2116,  2197,     0,  1494,  2393,  1621,  2639,  2312,  1858,
    1851,     0,  1869,     0,     0,     0,  1034,   641,     0,  1106,
     453,   452,   451,   450,     0,   468,   448,   456,    68,     0,
       0,  1847,     0,     0,     0,     0,     0,  1004,  1632,     0,
    1844,  1840,  1837,     0,     0,     0,     0,     0,     0,     0,
    2520,  2538,  2537,  2525,  1106,  1513,  1107,  1107,  1943,  2333,
    2336,  2337,  2340,  2338,     0,  2335,  2334,  2349,     0,  1785,
    1788,  1789,     0,     0,  1769,  1763,  1762,  1754,  1764,  1755,
    1772,  1771,  1770,  1727,  1726,  1535,  1536,  2251,  1534,  1526,
    1529,  1533,  1532,  1722,  1778,  1768,  1766,  1752,  1787,  1767,
    1765,  1708,  1709,  1710,     0,  1522,     0,  1785,  1787,  1777,
       0,  1787,  1787,  1746,  1748,     0,   978,   987,   975,   982,
    1434,  1433,     0,  1390,     0,  1392,  1389,  1388,  1387,     0,
    1433,  2625,  2633,  2637,     0,  1522,  2535,  2533,   532,  1655,
    1655,     0,  1973,     0,     0,     0,     0,     0,     0,     0,
     169,   178,     0,     0,   353,   354,  1655,   352,   395,   396,
     399,   400,   401,     0,     0,     0,     0,     0,     0,     0,
       0,   122,   402,  1655,  1655,   349,   375,   376,   379,   380,
     381,   382,   383,   345,     0,   350,   952,   952,     0,  1655,
    1655,   952,  1655,     0,     0,  1655,  1655,     0,     0,  1655,
       0,     0,   952,     0,  1655,   950,     0,     0,  1655,  1655,
    1655,  1655,   952,     0,     0,  1655,  1655,   443,  1655,     0,
       0,   970,     0,     0,  1655,     0,     0,  1655,  1655,     0,
    1655,   898,   949,   544,   565,   566,   863,   897,   899,   911,
     439,     0,   928,   951,     0,     0,   884,   886,  2585,  2586,
    2587,  1055,  1047,  1054,  1051,  1066,  1064,  1053,   811,   810,
       0,  1067,   187,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1611,     0,  1018,  1030,  1024,   114,   769,
    1655,  1655,  1655,  1655,   351,   384,   385,   388,   389,   390,
     391,   394,   392,   393,     0,     0,  1775,     0,  2476,  2477,
       0,  2475,     0,  2613,     0,     0,     0,   167,   542,     0,
       0,   823,     0,     0,     0,     0,     0,  1494,     0,  1957,
    1688,  1416,  1692,  1691,     0,  1281,     0,  1321,     0,  1323,
    1324,  1325,     0,     0,     0,     0,     0,  1282,     0,  1226,
    1283,  1284,     0,     0,  1279,     0,     0,     0,     0,  1278,
       0,     0,     0,     0,  1327,     0,  1115,     0,     0,  1229,
    1230,  1223,  1215,     0,  1300,     0,     0,  1231,     0,     0,
       0,     0,  1287,     0,  1301,  1378,     0,  1380,  1947,     0,
    1333,  1288,  1236,     0,  1331,     0,  1237,  1302,  1303,  1304,
    1290,  1291,     0,  1306,     0,  1292,     0,     0,     0,     0,
    1239,  1337,  1335,     0,     0,     0,     0,  1339,  1241,     0,
       0,     0,  1240,     0,     0,     0,     0,     0,     0,     0,
    1243,     0,  1224,  1336,  1338,  1296,     0,  1252,     0,  2539,
    1424,  2547,  1425,     0,     0,  2541,  2531,  2536,  2544,  1216,
       0,     0,     0,     0,     0,  1948,  1125,  1130,  1123,  1127,
    2545,     0,     0,     0,     0,  1144,  1143,     0,     0,     0,
    2545,  1501,  1147,     0,     0,  1317,  1318,  1373,     0,  1599,
    1597,  1608,  1653,  1654,  1656,     0,  2473,   966,   965,  1604,
     964,    75,     0,  1810,  1832,  1805,  2489,     0,  2488,     0,
    2468,  2471,  1954,     0,     0,     0,  2403,  2397,  2404,  2406,
    2400,  2405,  2407,  2398,  2399,  2394,  2401,  1495,  1524,     0,
    1859,  1057,  1059,  1060,  1058,  1066,     0,     0,  2382,  2383,
    2381,  2380,   458,     0,   467,     0,   479,     0,     0,     0,
    1849,  1848,     0,  1041,  1044,  1045,  1011,  1009,  1008,  1010,
     999,  1005,  1006,   524,  1638,     0,     0,     0,  1644,  1625,
    1635,     0,  2085,  2298,  2301,   243,   246,   245,   247,     0,
       0,     0,     0,     0,     0,  1101,  1416,  1585,  1098,  1086,
    1524,  1514,  1085,  1108,  1104,     0,  2332,     0,  2295,  2360,
       0,     0,     0,     0,     0,  2350,  1784,     0,  1731,     0,
    1753,     0,     0,     0,     0,  1724,     0,  1745,  1705,  1733,
    1723,  1494,  1777,  1720,  1721,   992,   991,   986,  1433,  1416,
       0,     0,  1413,  1435,     0,  1435,  1416,  1416,     0,  1416,
    1487,  1430,     0,     0,  2636,  1515,  2534,     0,     0,   866,
     172,   175,   173,     0,   174,     0,     0,   404,   403,     0,
    1775,   397,   126,   125,   127,   128,  1549,  1550,  1546,  1547,
    1545,  1548,   130,   129,   124,   881,     0,     0,     0,  1775,
     377,   356,   357,   360,   361,   362,   953,   856,  1035,   932,
       0,   621,   856,   807,   812,   812,   930,     0,  1035,     0,
       0,     0,     0,     0,  1035,     0,     0,     0,  1655,     0,
     943,   893,     0,     0,     0,     0,     0,   944,     0,   894,
    1655,     0,     0,     0,     0,     0,  1035,     0,     0,     0,
     441,     0,  1035,   912,   973,   972,   971,     0,  1035,  1035,
       0,   571,   572,   570,     0,     0,     0,   563,   545,   769,
     895,   440,   896,   620,     0,   967,   617,   623,  1950,     0,
       0,     0,     0,   136,  2589,     0,  1454,   190,    97,    86,
      82,   101,  1559,  1560,  1558,  1556,  1557,   102,    84,    85,
      89,    88,    90,    91,    92,    87,    93,    83,    94,   103,
     104,    81,  1032,     0,     0,     0,     0,  1775,   386,     0,
       0,  1655,   346,   363,   364,   367,   368,   369,   370,   371,
     374,   372,   373,     0,  2480,  2482,     0,     0,   340,   339,
       0,   131,  2607,     0,     0,   620,   106,   439,   543,   546,
     849,   851,   850,   837,   836,   107,   109,   111,  1614,  1691,
    1416,  1513,  1955,  1494,     0,  1690,     0,     0,  1322,  1358,
       0,  1384,     0,  1220,   724,   724,   724,  1367,   709,  1371,
    1362,   724,  1363,   724,  1365,     0,   755,     0,   754,     0,
    1180,  1195,     0,     0,     0,     0,     0,     0,  1329,  1326,
       0,     0,     0,     0,  1352,     0,     0,     0,  1225,     0,
    1312,  1334,  1332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1340,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1213,  1106,  2548,
    2550,  1077,     0,  2540,  2542,  2346,  2347,  2348,   858,  1345,
       0,  1141,  1137,     0,  1135,  1500,  1156,  1155,     0,     0,
       0,  1145,  1107,  1308,  1106,     0,  1374,  1949,   418,   582,
    1595,    73,  1808,  2486,     0,  2497,     0,     0,     0,     0,
       0,     0,     0,  2392,  1525,  1665,     0,  1066,  1070,  1964,
    1862,  2385,  2386,  2384,     0,   459,   460,   462,  1107,   476,
     454,     0,   446,   449,     0,   458,     0,     0,  1001,  1007,
    1091,     0,  1657,  1642,  1649,  1643,     0,     0,     0,  1641,
    1939,  1938,  1945,  2523,     0,     0,  2413,     0,     0,     0,
    2526,  1494,  1494,  1579,     0,     0,  1083,  1088,  1084,  1087,
       0,  1105,  1112,  1111,  1940,  1947,     0,     0,     0,     0,
     757,   756,   765,     0,     0,     0,  2345,     0,   761,   763,
     762,  2355,   760,  1786,  1522,  1741,  1740,  1537,  1528,     0,
    1531,  1530,  1716,  1522,  1735,  1787,     0,     0,  2530,  1428,
       0,  1415,  1414,  1436,     0,  1416,  1435,  1435,     0,  1395,
    1394,  1669,  1672,     0,  1393,  1452,  1418,  1091,  2626,  2638,
       0,   768,   767,   581,   764,   580,   177,   176,   182,   183,
    1563,  1564,  1561,  1562,   410,   423,  1565,   424,   398,   123,
     411,   412,   378,     0,   358,   622,   857,   915,     0,     0,
       0,   812,   616,   856,   821,   813,   856,   856,     0,     0,
     555,   552,   934,   558,   913,   905,   914,   925,   927,     0,
     554,   573,     0,     0,   561,   856,   900,   941,   942,   964,
     549,     0,   592,   593,   591,   567,   574,   550,   551,   936,
       0,  1509,  1511,  1519,   557,   556,  1570,  1569,   560,     0,
     553,     0,   947,   920,     0,   589,   587,   584,   586,   585,
     590,   588,   562,   559,   575,   910,     0,   952,   952,   929,
       0,   600,   601,   603,   604,  1953,     0,   969,   931,     0,
     605,   618,   606,     0,     0,   579,   578,   576,   577,     0,
     146,     0,     0,   883,     0,   139,   137,   148,     0,     0,
       0,  1457,     0,  1458,  1455,  1456,     0,    98,   100,   417,
     416,   415,   414,   387,     0,     0,     0,  1775,   365,  2481,
    2479,  2478,     0,     0,  2614,   343,   341,   342,     0,     0,
     192,   598,   599,   597,   596,     0,   427,     0,  2011,   425,
       0,   438,     0,  1873,   769,   547,     0,     0,     0,     0,
    1494,  1538,  1958,  1684,     0,  1253,  1385,     0,     0,   725,
    1359,   777,  1369,     0,  1370,   711,   710,   726,  1361,  1364,
    1368,  1366,  1219,  1227,  1275,     0,  1193,  1276,  1277,     0,
    1299,  1222,  1221,     0,     0,     0,  1259,  1260,     0,  1350,
       0,     0,  1233,     0,  1235,     0,     0,  1314,  1289,  1305,
    1262,  1293,     0,  1238,  1214,     0,  1263,     0,  1268,  1266,
       0,  1242,     0,     0,  1249,     0,  1247,     0,  1248,     0,
    1250,  1295,  1297,  1426,  2549,  1078,     0,     0,  1347,  1133,
       0,  1142,  1139,     0,  1136,  1108,  1319,  1309,     0,  1806,
    2487,     0,  2418,  2470,  2469,  2490,  2490,  2490,     0,  1496,
       0,  1622,  1061,  1066,  1070,     0,  1062,  1873,   463,     0,
       0,     0,   483,     0,   481,   457,     0,  1042,  1012,  1106,
    1639,  1651,     0,  1659,     0,     0,  1636,  1646,     0,     0,
       0,  1645,   244,     0,  2410,  2411,  2409,  1524,  1502,     0,
       0,  1591,     0,  1586,  1099,     0,  1110,  1109,     0,  2362,
       0,  2361,  2373,  2374,  2371,  2372,  2370,  2351,     0,  2357,
    2356,     0,     0,     0,  2367,  2358,     0,     0,  1732,  1527,
    1734,  1728,   993,  2536,  1487,  1420,  1416,  1391,  1416,  1402,
       0,     0,  1416,  1398,  1396,  1400,     0,  1494,     0,  1417,
    1449,  1106,  1942,  1516,  1519,   359,   917,     0,   856,   808,
     809,   821,     0,   821,   821,     0,     0,   904,     0,  1021,
       0,   909,   765,   568,   940,   939,   569,     0,   902,     0,
    1520,  1521,  1512,   442,   901,   922,   907,  1831,   933,   620,
     968,   789,   705,   654,   645,   724,   648,   647,   691,   724,
     659,   709,   707,   677,   709,   709,   684,   683,   701,   687,
     667,   777,   777,   666,   704,   777,   688,   686,   690,     0,
     692,   709,   697,   685,   689,   706,   682,   679,   703,   724,
     724,   724,   663,   702,   777,     0,   695,   724,   624,   728,
     665,   777,   784,     0,     0,   724,   726,  1952,   147,   135,
       0,     0,   885,   887,     0,     0,   888,  2591,     0,  2593,
       0,  1069,     0,    95,     0,     0,   348,   413,   366,  2483,
       0,   203,  1106,     0,     0,   193,   195,   196,     0,     0,
       0,   429,  1875,  1874,   426,   527,   548,     0,     0,     0,
    1691,  1686,     0,  1682,     0,  1386,     0,     0,     0,     0,
     771,   782,   780,   774,     0,   778,   779,  1360,     0,     0,
     727,  1372,   724,  1190,   709,  1184,  1186,  1182,     0,   692,
    1185,   724,     0,   777,  1189,  1181,     0,  1330,     0,     0,
    1353,     0,     0,     0,     0,     0,     0,     0,  1217,     0,
    1310,     0,     0,     0,     0,     0,     0,  1246,  1244,  1245,
    1524,  2530,   859,  1138,     0,  1320,     0,     0,     0,  2495,
    2495,  2495,  1664,  1663,     0,  1662,  1666,  1063,  1071,     0,
     461,   464,     0,   456,     0,   480,     0,   447,   525,     0,
       0,     0,  1660,  1648,  2527,  1637,  1640,  1947,  2412,  1090,
       0,  1497,  1590,  1587,     0,  1580,  1582,  1584,     0,  1941,
       0,     0,  2366,  2352,   766,     0,     0,     0,     0,  2353,
    1421,  1419,  1429,     0,  1387,  1416,  1416,     0,  1387,     0,
       0,     0,  1671,  1513,  1673,  1453,     0,  1431,     0,  1518,
       0,     0,   916,     0,     0,     0,     0,     0,     0,   946,
       0,   967,   906,   926,   948,   937,  1035,  1510,   921,   923,
    1004,     0,   602,     0,   793,   653,   646,   664,   662,   713,
     708,     0,   713,   713,   673,   691,   668,     0,   777,   681,
     672,   693,   696,   698,   700,   713,     0,   777,   661,   660,
     670,   657,   713,   736,     0,     0,     0,     0,   732,     0,
     787,     0,   739,     0,   625,   729,   731,     0,     0,     0,
     694,   777,   650,   785,   784,   652,   777,   784,   713,   713,
       0,   133,   138,   149,   150,   876,  2590,     0,  2588,     0,
    1065,  1459,    99,     0,     0,   206,   204,   205,     0,   199,
     201,   196,  2601,     0,  2608,     0,     0,  2606,   428,   431,
     542,   528,     0,     0,  1519,   854,     0,     0,  2251,  1539,
    1254,   722,   720,   723,   721,   773,   772,   776,     0,   775,
     784,     0,     0,  1192,  1187,   693,  1191,  1183,  1188,  1280,
    1257,  1258,     0,  1351,  1342,  1286,     0,  1234,  1311,     0,
       0,  1294,  1264,  1267,  1265,  1270,  1271,  1098,  1098,   594,
    2543,  1140,  1833,  2498,     0,     0,  2494,  2492,     0,  2493,
    2491,  2461,     0,  2416,  2417,  2415,  2402,     0,     0,     0,
    1106,   469,     0,   486,   485,   482,  1524,  1650,  1652,  1658,
    1647,     0,  1498,  1513,   758,  1583,     0,  1100,  2364,  2363,
    2365,  2359,     0,     0,     0,     0,  1403,     0,  1407,  1412,
    1408,     0,  1399,  1397,     0,  1538,  1441,  1442,     0,     0,
    1447,  1451,  1524,  1519,   919,     0,   619,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   945,  1917,   935,
     967,   903,     0,   908,   564,     0,   792,     0,   797,   717,
     718,   719,   674,   714,   716,     0,   676,   644,   669,   699,
     675,     0,   671,   658,   742,   741,  1116,   734,   749,   629,
       0,     0,   740,   626,   730,   738,   733,     0,   649,   651,
     655,   656,   642,   643,  1951,   140,   889,   280,  2592,  1081,
       0,  2597,   121,  2605,  2615,   203,     0,     0,   144,     0,
     194,   765,   197,  2527,   439,     0,   434,   824,     0,   853,
       0,   826,   828,  1540,     0,   783,   781,     0,  1354,  1519,
       0,  1313,  1315,  1427,   595,     0,  1809,  2467,  2466,  2465,
    2462,     0,     0,     0,     0,     0,     0,  2496,  2500,  1661,
       0,     0,     0,   477,     0,     0,   511,   526,  1506,  1519,
       0,  1524,     0,  1588,  1581,  2369,  2368,  2354,  1422,     0,
       0,     0,     0,     0,  1460,  1670,  1437,  1437,  1448,  1432,
    1517,   918,     0,     0,   607,     0,     0,  1919,  1918,   938,
       0,   790,     0,   794,   795,   796,     0,   788,   715,     0,
     860,     0,   748,  1116,   737,     0,   746,   745,   743,   744,
       0,   142,   306,     0,   292,   278,     0,     0,     0,   282,
     151,   154,   152,     0,   153,   159,     0,   160,   161,   162,
     163,   164,   155,   304,   305,   158,   156,   157,     0,  1967,
       0,  1968,  2595,     0,     0,  2594,   170,   200,     0,     0,
     136,   145,  2609,   747,   432,  1873,     0,  2523,     0,  1655,
     108,   825,   845,   844,   830,     0,  1519,     0,     0,   110,
     827,   847,   834,   112,   829,   846,   832,  1541,   712,     0,
    1356,  1232,     0,  2463,  2501,  2504,  2502,  2503,  1542,     0,
    2505,  2499,     0,  1863,  1107,     0,   470,     0,   473,   475,
     489,     0,  1655,  1655,     0,     0,  1655,  1655,  1655,  1655,
     504,   512,   514,     0,  1507,  1508,     0,  1503,  1505,  1499,
    1571,   759,  1876,  2530,  1404,     0,  1409,     0,  1401,     0,
       0,  1445,  1443,     0,   613,   824,   609,   611,     0,   791,
       0,     0,   777,     0,   777,   735,  1106,   141,     0,   134,
       0,     0,   291,   294,     0,     0,   297,   287,   286,   288,
       0,   281,   280,   280,   334,   285,   331,   330,   323,  2527,
       0,     0,     0,  2616,   202,  1106,   148,     0,   430,   436,
     435,   839,     0,   831,     0,   852,   855,     0,   835,   833,
    1519,  1834,  1544,  1543,  1667,  1675,     0,   758,     0,   478,
     471,     0,     0,   487,     0,     0,  1655,  1655,     0,     0,
       0,     0,     0,   484,   513,  1655,  1519,     0,  1089,     0,
    1884,  1423,     0,     0,  1461,     0,  1438,     0,     0,     0,
     615,   824,   608,   826,   828,     0,   803,     0,   802,     0,
     799,   798,   678,   861,   680,     0,   143,   307,   318,   321,
     313,   293,     0,     0,     0,   283,   280,     0,   267,   265,
     266,   272,   273,   274,   275,   276,   277,   268,   271,   269,
     270,   280,     0,   211,     0,     0,  2596,     0,  2598,     0,
     180,   179,   171,     0,   280,  2602,     0,  2610,  2527,   838,
     843,   842,   840,   841,   848,  1355,     0,     0,  1864,   465,
     477,   474,   497,   490,   493,     0,   523,   517,     0,     0,
     519,   520,   518,   515,   508,     0,   506,     0,  1504,  1572,
       0,     0,     0,     0,  1877,  1879,     0,  1589,  1406,  1411,
    1440,  1439,  1454,     0,   614,   610,   612,   924,   805,   806,
     804,     0,     0,   630,     0,     0,   280,   314,     0,   289,
       0,     0,     0,     0,   209,   337,     0,   207,   325,   325,
    2599,  2600,   181,  2617,     0,   150,   170,   437,  1674,  1676,
    1890,   472,   497,     0,   495,     0,   491,   488,   492,   521,
     522,     0,   505,     0,   516,     0,     0,     0,     0,     0,
    1878,     0,     0,  1885,  1887,     0,     0,     0,     0,   632,
     631,   633,   315,   321,   311,   319,   280,     0,     0,   279,
     298,   333,   210,     0,   335,     0,   280,     0,   324,   326,
     328,     0,   132,  2611,     0,  1876,   494,     0,   502,   498,
     500,   503,   511,   510,   507,  1106,  1882,  1883,     0,  1880,
       0,     0,  1886,  1446,  1444,   801,   800,     0,   637,   627,
     634,   636,     0,   312,     0,     0,   310,   290,   295,   280,
       0,   280,   222,   221,     0,   213,   261,   332,     0,   212,
    2603,   280,     0,  1884,   496,     0,     0,   509,     0,     0,
    1575,  1577,  1881,  1889,  1888,   639,   638,   635,   316,     0,
     280,     0,   280,     0,   280,     0,     0,     0,     0,     0,
     208,   280,  2612,     0,  1892,   501,   499,  1107,  1573,  1106,
       0,   308,   280,   296,   301,   338,     0,   216,   262,   263,
       0,   219,  2604,  1891,     0,  1896,  1578,  1576,   280,   280,
     297,   300,   336,     0,     0,   214,   215,   227,   226,   218,
       0,     0,     0,  1903,   280,   280,   302,   235,   233,   280,
     223,   231,   225,     0,   232,   264,   220,  1894,  1895,  1893,
    1898,     0,     0,  1900,  1901,     0,  1865,     0,   217,   234,
    1902,  1897,     0,  1904,  1906,     0,   224,  1899,     0,  1106,
    1905,     0,  1107,  1907
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    58,   604,  1454,    59,    60,    61,    62,    63,  1323,
      64,   818,  1250,  1757,  1758,    65,   543,    66,  1027,  1511,
    1512,  2986,  2987,  1513,    67,  2098,  3026,  3027,  3028,  1531,
     513,   514,  1950,  1951,  1053,  3009,  2973,  3785,  2977,  3901,
    4039,  3940,  2026,  3326,  3786,  3787,  3910,   538,  2096,  1468,
    4063,  1930,  4172,  1931,    68,   639,  1025,  1490,  1491,  3344,
    3345,  3606,  3346,  3598,  3599,  3600,  3601,  4306,  4146,  4247,
    4307,  4387,  4423,  4429,  4430,  4354,  4439,  4440,  4441,  4427,
     890,  4442,    69,   566,   567,   892,  1354,  2345,  1355,    70,
    4355,  4425,  4147,  4148,  4046,  4149,  3913,  4150,  4050,  4151,
    3916,  4152,  4153,  4154,  4155,  4298,  4156,  4045,  4347,  4143,
    4144,  4349,  4404,  4421,  4157,  3923,  4040,  4234,  3924,  4041,
    4293,  4139,  4294,  4342,  4400,  4140,  4235,  4345,  4238,  4158,
    4164,  4308,  4159,  4165,  4160,  3928,  4057,  4163,  4055,  4162,
    4351,  4303,  2590,  3008,   622,   623,   652,  2086,   624,  1042,
     999,  1470,  1963,  1964,  2451,  2452,  2572,  2573,  2574,  1955,
    1956,  1957,  2074,  2075,  2076,  1937,  1938,  1939,  1474,  1934,
    1935,   625,  1000,  1010,  1958,  1959,  1960,  2578,  2078,  2079,
    2080,  2081,  1961,  1750,  1962,  2864,  2596,  3019,  3610,  3803,
    3354,  3947,  4178,  3020,  3021,  2521,  2929,  2500,    71,   555,
     870,  1320,  2317,  1321,  2319,  2744,  2745,  2746,  1800,  1801,
    3681,  1805,  2316,  3843,  4190,  3987,  3988,  2748,  3986,  2752,
    3143,  3144,  3444,  3683,  3846,  4195,  4092,  4267,  4193,  4263,
    4194,  4265,  4366,  4319,  4320,  4103,  4205,  4206,  4271,  4322,
    4000,  4001,  4002,  2338,  2760,  3686,  3612,  2068,  1460,  1461,
     515,   516,   517,   649,  2597,  2012,  2598,  2599,  2946,  2014,
    2015,  2718,  1388,  2942,  2915,  3657,  3015,  2950,  2951,  2952,
    2953,  2954,  4025,  4123,  4124,  4121,  2960,  2882,  2460,  2461,
    2526,  2963,  3308,  3895,  3563,  4291,  4339,  4340,  4341,    72,
     867,  3801,  3531,  3546,  3310,  3311,  3312,  3313,  3314,  3315,
    3316,  3044,  3045,  3752,  3753,  3754,  3039,  3040,  3381,  3564,
    3565,  3566,  3802,  3767,  1174,  3374,  2801,  2802,  3853,  2810,
    2811,  2852,  3189,  2853,  1464,  3375,  3376,  3377,  3575,  3567,
    2962,  3524,  3745,  3748,  3887,  4130,  2462,  2883,  2463,  2886,
     953,   518,  2464,  2465,  1545,  1546,  3950,  3959,  3963,  3951,
    3964,  3960,  3952,  3953,  3954,  3966,  3962,  2603,  3613,  3614,
    2875,  3108,  3889,    73,  1478,   993,  1002,   998,  1017,   634,
    1479,  2027,  2533,  3585,   612,  2016,  3516,  3239,  3520,  2017,
    2895,  2018,  3226,  3502,  2019,  3255,  3518,  3742,  2896,  2897,
    2020,  2021,  2022,  3238,  3247,  3740,  2466,  1302,   126,   127,
     630,   631,   632,  2269,  2958,  2507,    74,  1436,  1431,    75,
     965,   960,   961,  1434,  1435,  1896,  2396,    76,   642,  1517,
    1332,  1816,    77,   879,  2330,  2331,  2332,  2758,    78,  1018,
      79,   644,  1031,    80,   501,  1525,  1526,  1527,  2065,    81,
    1314,   134,    82,   878,  1326,  1328,  1329,    83,   638,  1019,
    1020,  1021,  1022,  2032,    84,  1791,  2301,  2302,  2303,  2304,
    1487,  2535,  1488,  1489,  2041,  3136,    85,    86,   601,  2224,
     572,   899,   573,   574,  1835,  2358,  3658,   910,   911,   912,
    2786,  1366,  1367,  1368,  1797,  2791,  1107,  1104,   783,   784,
     785,   786,  1198,  1199,  3568,   787,  1208,  1716,  3056,  3395,
    1576,  1577,   788,   789,   790,   791,   792,   793,  1743,  3076,
    3077,  3410,  2254,  2255,  2256,   794,  2143,  3063,  2156,   795,
    1191,  1701,  1634,  3402,  3069,  3642,  3818,  1562,  2118,  2635,
    3047,  2715,  2218,  1130,  1131,  1088,  2125,  1568,  1903,  1904,
    1905,  1906,  1907,  3490,  3489,  3491,  3859,  3707,  3861,  3711,
    2407,  1908,  1909,  2827,  3705,  4013,  2219,  2220,  2221,  3420,
    2828,  3206,  2846,  2847,  3722,  2398,  1910,  2834,  4021,  3719,
    3720,  4119,  4118,  3721,  3495,  3496,  3219,  3220,  2982,  2983,
    2984,  3863,  1625,  1626,  1632,  1297,  1298,  1563,  2298,  2732,
    3693,  3850,  2245,  3461,  3848,  4007,  2023,  2921,  2922,  2360,
    2361,  2850,  3223,  3252,  1391,  3659,  2734,  1869,  2817,  2818,
    3363,  3980,  4428,  1595,  2547,  2865,  2866,  1597,  2928,  4108,
    4275,  4369,  4370,  4371,  3171,  3172,  3465,  3466,  2362,  2783,
    3173,  3694,  4012,    87,   522,    88,  1755,  2260,  1247,  2274,
    1029,  1549,  1550,   806,   535,    89,   544,  2299,    90,   562,
    1819,   857,   882,  1336,  1337,  2339,  2761,  2768,  2340,  2773,
    3454,  2763,  3150,  3151,  2264,  2265,  2764,  3153,  3451,  3434,
    3435,  3131,  3678,    91,   589,  3217,  2841,  2842,  4084,  4085,
     883,    92,   521,  1075,  2107,  1555,  2106,  1076,  1077,  2109,
     670,   671,    93,   967,   585,  1413,  1414,  1415,  1885,    94,
     577,   954,  2814,  2823,  1863,   874,  1243,  1395,   957,  1396,
    1849,  2378,  1377,    95,   989,   988,    96,   608,  1456,    97,
     819,  1270,  1767,  2722,  3119,  1271,  1272,  2275,  3826,    98,
     563,   887,   888,  1339,  1821,    99,   557,   875,  1811,   100,
     547,   862,  1306,  1790,   101,   102,   864,  3137,  4087,  4260,
     551,  1793,  1310,  3355,  4110,  4214,  4215,  4217,  4283,  4284,
    4315,  4415,  4449,  4433,  4452,  4453,  4456,  4463,  4464,   797,
     976,   798,  3737,   799,   800,  2769,  2770,  3224,   801,  2771,
     802,  2876,  1030,  1552,   541,   493,   619,   977,  2740,   804,
    3930,   996,  1046,   495,   496,   103,   914,   576,  1370,  1371,
    1372,  1844,  1845,   958,  2233,  1846,  1847,  2375,  2370,  3473,
    3195,  3187,   104,   865,   500,  1312,  1313,  2310,   105,   588,
     106,  1299,  1784,  1785,  2295,  2731,  2296,   107,   895,   108,
     844,  1778,   845,  1275,   846,   847,  1289,  1283,  1292,  1286,
    3831,  3670,  3671,  2283,  1246,  1047,  2090,  3002,  1048,  1770,
    2277,  2278,  3429,  3673,  3122,  3837,  3838,   109,   135,   503,
     647,  1037,  1360,   110,   111,   112,   113,  1363,  1449,  2354,
    1450,  2225,  1451,  1452,  1917,  1833,  1697,  1698,  3106,  1188,
    1189,  2228,  2688,  2689,   913,   656,  1063,  1055,   128,   129,
     130,   659,   660,   131,  1015,  1016,  2534,  2979,  3328,  3588,
    3589,  3791,  3935,  1057,  3797,  4254,  4391,  1058,  1059,  3010,
    3799,  4067,  4256,  4361,  1060,  2587,  3341,  3936,  4174,   114,
     978,   598,  1447,  1442,  1444,  1913,  2414,   115,   116,   117
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3680
static const int yypact[] =
{
    4770,  2447,  1235, -3680,  -151,   688, 48509,   658,  1267, -3680,
     435,  3137, -3680, -3680, -3680, -3680, -3680,  3434, -3680, 48509,
    1235, -3680, 24653, -3680, -3680,   -34, -3680,   175,  1267,  1235,
     445, -3680, 48509, -3680,   676,  1579,  1235, -3680, -3680, 43621,
   -3680,   435, 48509, -3680,   799, -3680, 43621,  1322,  -130,   802,
     786,  1052, -3680, -3680, 48509,  1152, -3680,  -144,  1363,  1253,
   -3680, -3680,  1021, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, 25268, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,  1287, 48509,
    1309, 48509,  1281, 48509, 41788, 48509,   961,   100,  1358, -3680,
   -3680,  1424, -3680, -3680,  1267,   435, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680,   929, -3680, -3680,  1022, -3680, -3680,
   -3680,  1190, -3680,  1611,  1408, -3680,  1483, 41788, -3680, 48509,
   -3680, -3680, -3680,  1032, -3680,  1172, -3680,  1182,  1503,  1534,
    1536,   807, 11527,  1566,  1566,  1566, 48509,  1523,  1566,  1566,
   48509, -3680,  1566, -3680,  1566,  1267, -3680, -3680,  3627, 48509,
    1450,   147,   566, 41788,   195, 48509,  -151,    65, -3680,  1628,
   -3680, -3680, -3680,  1267, -3680,  1806,  1653,   300, 48509, -3680,
   -3680, -3680,  1257,    32,  1277, -3680, -3680,  1405, -3680,  3835,
     167, -3680, -3680, -3680,  2596, -3680, -3680,  4587,  1405, -3680,
   -3680, -3680,  1288, -3680, -3680, -3680, 48509,  -151,  1267,  1614,
   -3680, -3680,   248,   248,   248, -3680,   248, -3680,   248, -3680,
    -144,  1283, -3680, -3680,  1285, 48509,   507,   645, -3680, -3680,
    1291,   633, -3680,  1360, 39344, -3680, 48509, -3680, -3680, -3680,
   -3680,  1568, -3680, -3680, -3680,  1212, -3680, 24653, -3680, -3680,
   -3680,   100, -3680, 48509,  1436, -3680, -3680, -3680, 24653,  1321,
   48509, -3680, 24653, -3680, -3680, 24653,   204,    -7,  1567, 48509,
   48509,  1763, -3680,  1951, 39344,  1531, -3680,   142,   -73,  1424,
    1956, -3680,  1408, -3680, 48509, 48509, 48509, -3680, -3680, -3680,
   44232,   807,  1349,  1355,  1374, 16591, -3680,  1377,  1381,  1384,
   11527,  1389,  1397,  1411,  1417,  1419,  1438,  1444,  1459,  1465,
    1472,  1474,  1487,  1496,  1501,  1509,  1509,  1540,  1544,  1552,
    1565,  1031,  1570, -3680,  1574,  1586,  1631, -3680, -3680,  1634,
    1639,  1643, -3680, -3680,  1648,  1651,  1654, 12160,  1658,  1666,
    1682, -3680, 21569,  1688,  1690,  1711,  1713,  1724,  1741,  1755,
    1758,  1766, -3680, -3680, 11527,  1540, -3680, -3680,  1770, -3680,
    1772,  1775,  1777,  1792,  1803,  1805,  1808,  1813,  1819,  1841,
    1849,  1852,  1869,  1871,  1887,  1540, -3680,  1798,  1890,  1914,
    1928,  1939, -3680,  1946, -3680,   275,  1958,  1509,  1540,  1540,
    1964,  1966,  1998,  2000,  2002, 16591, 16591, 16591, 11527, -3680,
   48509, -3680, 48509,  1159,  3166, -3680,  2284, 16591,   202, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680,  1331,  1476, -3680, -3680,
   -3680, -3680, -3680,  2004,  1400,  1993, 48509, 48509, 48509,  1866,
   48509, 48509, 41788,  1603, 48509, 39344, -3680,  1566,  1607,  4103,
    1836,  1920,  1876, -3680, -3680, -3680, -3680, -3680,  1885, -3680,
   -3680,  1862, -3680,  2009, -3680, -3680,   405, -3680,    73, -3680,
   -3680, -3680, -3680, -3680, -3680,  2101,  1859, -3680, -3680,   115,
   -3680, -3680, 48509, -3680, -3680, -3680, -3680,  2354,  2094, -3680,
   -3680, -3680,   155,  2557,   231, 24653, -3680,  1987, 11527,  1231,
   -3680,  -199, -3680, -3680,  2364, -3680, -3680, 39344, 24653,  1332,
   -3680, -3680, 22186, -3680, -3680,  2597, -3680,  2020, -3680, -3680,
    1476,  2517, -3680,  1836,  2302, -3680,  2305,  2219,    -7,  2132,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
    2065,  2596, -3680, -3680, -3680, -3680,  2533, -3680,  2234, -3680,
      16, -3680,  2085,  1173,    16, 39955,  2458,   196, -3680,   343,
   -3680,  2542, -3680, -3680, -3680, -3680, -3680,  2225,  2204, -3680,
   -3680,   349,  2562, -3680,  2574, -3680,    91, -3680, -3680,  2232,
   -3680,  2458,    16,   196, -3680,  2474,  2609,   840,  1012, -3680,
   -3680,   924, -3680, -3680,  2686, -3680, -3680, 24653, -3680, -3680,
   -3680,  2354, -3680, -3680, -3680, -3680,  2152, -3680,  2423,  2275,
   -3680, -3680,    49, -3680,  2182,   919,  2659, -3680,   726, 35678,
   -3680, -3680, -3680,  2689,  2708,  1509,  2187, -3680, -3680, -3680,
    2819, -3680, -3680,  2197,  2715,  2715,  2715,  2823, -3680, -3680,
   -3680, -3680, -3680, -3680,  2363,  2235, -3680,  1436, 24653,  2586,
    2200, -3680, -3680,  2443, 11527, -3680, -3680,  4305,    35, -3680,
   -3680, 24653,   179, -3680,  2779,  2406, -3680, -3680, -3680, -3680,
    2676, -3680, -3680,  2819,  2735,  2715,  2627,  2222, -3680, -3680,
   -3680, -3680, -3680, -3680,   216, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680,   222, -3680, -3680, -3680, -3680, -3680,  1436, -3680,
   24653, -3680, -3680, -3680, 24653, -3680,  2224, -3680,  2221, -3680,
   11527, 11527,  1299,  2786,  2847,  2847,  2847,  1159,  2257, 11527,
   11527, 11527, 11527, 11527, 11527, 11527, 11527, 11527, 11527, 11527,
   11527, 11527,  1388,  2231, -3680, -3680,  1352, -3680,  2236, 11527,
   11527,  2322, 11527,  1476, 11527, 25883, -3680,  4065, 11527,   379,
    2722, 11527, 11527, 11527, 11527,  3270, 11527, 11527, 11527, 25883,
    2855,  2242, -3680,  2228,  1406, 11527, 11527,  1526, 11527, 11527,
   11527, 11527, 11527, -3680, -3680, 11527, 11527, 11527, 11527, 16591,
   11527, 11527, 11527, 11527, 11527, 11527,  2847,  2847, 11527, 11527,
    1539, -3680, 11527,  1476,  1786,  1786, 11527,  1476,  8362, 11527,
   -3680, -3680, -3680, -3680, -3680,  2244, -3680, -3680, -3680, 25883,
    2847,  2847, 11527, 11527,  2786,  2786,  2786,   210,  2252,   782,
   11527, 27113,  2247, -3680, -3680, -3680, -3680, 11527, 11527, 11527,
   -3680, 16591, -3680, -3680,  1687, -3680, -3680, -3680, 12793, 16591,
   16591,  2256, 16591, 16591, 16591, 16591, 16591,  2620, 16591, 16591,
   17224, 17857, 16591, 16591, 16591, 16591,  1008,  2786, 41788, 16591,
   11527, -3680, -3680, 48509, -3680, -3680, -3680,  2251, 24653,  1603,
   -3680, -3680,   556,  2738, -3680, -3680,  2258, 24653, -3680,  2276,
   -3680,  2615, -3680, -3680,  2622,  2623,  2638, -3680, -3680, -3680,
   -3680, -3680,  2869,  2640, -3680, -3680,  2643, -3680, -3680, -3680,
   -3680,  2293, -3680, -3680, -3680, -3680, -3680, -3680, -3680,  2396,
   -3680, -3680, -3680,  2300, -3680, 39344,  2300, -3680, -3680,  2300,
   -3680, -3680,  2300,    38,  3747, -3680, -3680, 48509, -3680, 49120,
   -3680, -3680, 22186,  -151, -3680, -3680, 13426, -3680, -3680, -3680,
    2657,   211,  2301, -3680, 24653, -3680,  1159, -3680,   149,   149,
    2547,   197, 41788, -3680, -3680,   128,  2306,  2385,  2307, -3680,
    2389, -3680, -3680, 24653, 24653, -3680, -3680, -3680, -3680,  2929,
      32, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680,  2311,  2784,  2315, 39344,    41, -3680,
   48509, -3680,  1560, -3680, -3680, -3680,  2316, -3680, 11527, -3680,
    2323, -3680,  1243,  2711, -3680,  -151, 11527, -3680,  2333,  1408,
   48509, 48509, 48509, 24653, 48509, 24653, -3680,    15,    15, -3680,
   36289, -3680, -3680, -3680, -3680,    16, 48509, 48509,    16, 39344,
   -3680,   196, 48509,    16, -3680,  2717,  2432, -3680, -3680, -3680,
    2783, -3680, -3680,  2775,  2335, -3680,  2711, -3680, -3680,   196,
   -3680, -3680, 24653, -3680, -3680,   196, -3680,   196,   196,    16,
      16,  2390, -3680, -3680,  2338, -3680,  2390,  2482, -3680,   796,
     248,  2579, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680,    96, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
      97, -3680, -3680, -3680,  1995,  2836, -3680, 41788,  1486,   -99,
     817,  1486,  2223,  -151,  1026, -3680,  1026, -3680,  3516,  2614,
     198, 24653, -3680,  2348, 44843, 24653, -3680, -3680, -3680,   962,
    2352,  2353,  1159,  2824,  2826,  2827,  2829,  2834,  2835,  2838,
    2839,  2840,  2841,  2845,  2846,  2853,  2854,  2856,  2858,  2859,
    2860,  2391, -3680, -3680, -3680, -3680, 24653, -3680,   243, -3680,
   -3680, -3680,  2415, -3680, -3680, -3680, -3680,  1833, -3680, -3680,
   -3680,   104,  1527,  2417,  2445,   162, 39344,  2821, 48509, 48509,
    1408, 48509, 48509, -3680, -3680,   867,  2667,  2668,  2670,  2407,
   -3680, -3680, -3680,  1194, 48509,  2862, 30179, -3680,   265,  1143,
   -3680,  2847,  2409, -3680,  2416,  2418,  2420, 11527,    78,   491,
    1150,  1169,  1403,  1209,   358,   392, -3680,  1490,   398,   448,
     458,  1214,   462,   253, -3680,  2421,  2428, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680,  2429, -3680, -3680, -3680,   470,
     476,  1255,  1260,  2430,  2431, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680,  2866, -3680,  1498, -3680, -3680,
   -3680, -3680,  2434, -3680, -3680,  1282,   550,   749,   305,  2449,
    1512,   819,  1515,  1521,  2437, 25883, 48509,  2847,  2438,  1293,
    1306,  2847,  2440,   845,  1314,  1571,  1591,  1595,  1333,  1387,
     881,  1612,  3073,  1415,   883,   889,   893,   946,  1421,  2444,
    2448,   968,   176,  2847,  2450,   313,  2442,  2454,  1485,  9628,
   10261, 10894,  1122,   970, -3680,  2456, -3680,  2228,  2457,  2461,
     319,  1489, -3680, 11527, -3680, -3680,   818,  1140,  2516,   156,
     888, -3680,  2616, 48509,  2237,   134, -3680, -3680, -3680, -3680,
   -3680, -3680,   761, -3680,  2465, -3680,  2475,  2070,  2476, 11527,
     186,  2476,  2603,  2696,  2696, 16591,  2797,  2714, 12160,   321,
   12160,   321,  2476,  2476,  2476, -3680, 16591,  2477, 16591, 16591,
   -3680,  2786,  1159,  2484,  1074, 48509, -3680,   556, -3680, -3680,
   -3680, -3680,    74, 39344,   106, 24653, 41788,  2485, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680,  5161, 24653, -3680, 48509,
   -3680,  2567, -3680, -3680, -3680, 22801, 22801, -3680, 22801, -3680,
   -3680,   208,   281,  3198,  2515, -3680, -3680, -3680, 29566,  1159,
   -3680, 24653, -3680,  2889,    13, 24653,  2348, -3680,  2494, -3680,
   -3680, -3680, -3680, -3680,  1382,  2602, -3680,  3118, -3680, 11527,
    -151, -3680, 39344, 39344, 24653, 24653, 24653,    30, -3680,  1431,
   -3680, -3680, -3680,  2517, 18490,  2932,  2944, 22801, 22801, 22801,
   -3680, -3680, -3680, -3680, -3680,   861,  1159, -3680,  2500, -3680,
   -3680, -3680, -3680, -3680, 45454,   110, -3680, -3680,  -151,  2948,
   -3680,  1159,  2511, 48509, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680,  2974, -3680,  2688,
     577, -3680, -3680, -3680, -3680, -3680, -3680, -3680,    16, -3680,
   -3680, -3680, -3680, -3680,  2736,  2458,  2562,  2948,    16,   196,
   24653,    16,    16, -3680, -3680,  1559, -3680,   924, -3680, -3680,
   -3680, -3680, 48509,  2730,  2673, -3680,  2519, -3680, -3680, 24653,
   -3680,  2521, -3680,  2961,  3108,  2458, -3680, -3680, -3680,    74,
      74,  2820, -3680,  -151,  2655,  2656,  2660,  2662,  2663,  2698,
   -3680, -3680,  -151,  -151, -3680, -3680,    74, -3680,  1667, -3680,
   -3680, -3680, -3680,  -151,  -151,  -151,  -151,  1747,  -151,  -151,
    1663, -3680, -3680,    74,    74, -3680,  2016, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680,   882, -3680,  2621,  3082,  2780,    74,
      74,  3082,    74,  2781,  2785,    74,    74,  2626,  3036,    74,
    2926,  2648,  2351,  2928,    74, -3680,  2650,  3047,    74,    74,
      74,    74,  3082,  2796,  3139,    74,    74, -3680,    74,  2798,
    2801,   178,  2800,  2802,    74,   971, 48509,    74,    74,  2807,
      74, -3680, -3680,  6559, -3680, -3680, -3680, -3680, -3680, -3680,
     564, 23419, -3680, -3680,    74,   154, -3680,  2761, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
    2571, -3680, -3680, 11527,  2572,  1747,  -151,  -151,  1613,  -151,
    1747,  -151,  -151,  -151,  -151,  -151,  1747,  1747,  -151,  1886,
    -151,  1747,  4305, -3680,  2624, -3680, -3680, -3680, -3680,   140,
      74,    74,    74,    74, -3680,  2303, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, 41788,  2924,  2214,   730, -3680, -3680,
   41788, -3680, 48509, -3680,  1054, 48509,  2576,   565,  5637,   855,
     855, -3680, 24653, 24653, 24653, 48509,  2628,  2515, 30179, -3680,
   -3680,   796, -3680,  2569, 14059, -3680,  2577, -3680, 11527, -3680,
   -3680, -3680,  1188, 11527, 11527,  3053,  2833, -3680, 40566, -3680,
   -3680, -3680, 11527, 11527, -3680, 11527, 11527, 11527, 11527, -3680,
   11527, 40566,  2833, 11527, -3680,  2581, -3680,  2972,  2976, -3680,
   -3680, -3680, -3680, 11527, -3680, 11527, 11527, -3680, 11527, 11527,
   11527, 11527, -3680, 11527, -3680, -3680, 16591, -3680,  2580,  2584,
   -3680, -3680, -3680,  2588, -3680, 11527, -3680, -3680, -3680, -3680,
   -3680, -3680, 11527, -3680, 11527, -3680, 11527, 11527, 11527, 11527,
   -3680, -3680, -3680, 14692, 11527, 11527,  2591, -3680, -3680, 11527,
   11527, 11527, -3680, 11527,  1266, 11527,  1835, 11527,  1861, 11527,
   -3680, 11527, -3680, -3680, -3680, -3680, 11527, -3680,  1673, -3680,
   -3680,  2287, -3680,   818,  2601, -3680, -3680,  1560, -3680, -3680,
    2598,  2599,  2600, 41788, 11527, -3680, -3680, -3680, -3680, -3680,
   -3680, 16591,   327,  2611, 16591, -3680,  2603,  3270,  3270,  2220,
   11527,   186,  2603, 11527,  2617,  2608, -3680, 11527, 48509, -3680,
   -3680, -3680, -3680, -3680, -3680, 41788, -3680, -3680, -3680, -3680,
     106, -3680,  2276, -3680,  2348, -3680, -3680,  1691, -3680, 39344,
    2607, -3680,  2613,  2682,  2694,  2703, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,  2458,  1431,
   -3680, -3680,  2629, -3680, -3680,  2443,  2718,  2651,  2983,  3175,
   -3680, -3680, 48509, 16591, -3680,  3217,  2637,  2639,  3111,  2644,
    1159, -3680,  2726, -3680, -3680, -3680,    42, -3680, -3680, -3680,
   -3680, -3680,    63, -3680, -3680,  2649,  2649, 20337, -3680, -3680,
   -3680,  3119,  1262,  1262,  1262, -3680, -3680, -3680, -3680,  2909,
   39344,  3089,  3091,  3093,   726, -3680,   372, -3680,  1067,  3051,
    2458, -3680,  3096, 42399, -3680, 30790, -3680,  2661,  3046,  2664,
      74, 35067,   810, 27727, 36900, -3680, -3680,  1613, -3680,   217,
   -3680, 37511,  3129, 37511, 37511, -3680,  2942, -3680, -3680, -3680,
   -3680,  2515,   196, -3680, -3680, -3680,  2675, -3680, -3680,   870,
    3057,  3058, -3680,  2936,  1096,  2936,   870,   870, 25883,   796,
    2879, -3680,  1747,  2992, -3680, -3680, -3680, 41177, 38122, -3680,
   -3680, -3680, -3680,  3201, -3680,  3210,   224, -3680, -3680,  2520,
     817, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680,  2223,  2520,  2520,  1026,
   -3680,   116, -3680, -3680, -3680, -3680, -3680, 26498,  1235, -3680,
     131, -3680, 26498, -3680,   962,   962, -3680, 26498,  1235,  1613,
    1747, 26498,  1747, 46065,  1235,  -151,  -151,  2266,    74,  1747,
   -3680, -3680,  3075, 48509,  3076, 26498, 26498, -3680, 41788, -3680,
      74,   130,  1747,  1613,  1613, 26498,  1235, 25883,  1326,  2233,
   -3680,  -151,  1235, -3680, -3680, -3680, -3680, 24653,  1235,  1235,
    3348, -3680, -3680, -3680,  1747,  2233, 46065, -3680, -3680,  6315,
   -3680, -3680, -3680, 19722, 48509,   987,   188, -3680,  2697, 33234,
      27,   917,  2792,  1449,  2720,  2721, 46676,  1159,  1747, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680,  -151,  1382,  2520,  2520,  1527, -3680,  2977,
    3142,    74, -3680,  2361, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680,  2825, -3680,   146,  2910,  2732, -3680, -3680,
     272, -3680, -3680,   932, 24653, 19107, -3680,  2975, -3680,  3243,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,  2729,
     796,  2990,  1196,  2515,  2745, -3680, 12160,  1529, -3680,  1159,
   11527,  1159,  2091, -3680,  2741,  2741,  2741, -3680,  2743, -3680,
   -3680,  2741,  3134,  2741,  3135,  2748, -3680,  2749, -3680,  1699,
    2066, -3680,  1789,  1542,  2120,  1563,  2753,  2754,  1331, -3680,
   11527, 11527,  1594,  1598,   -96,  1030,  1040,   345, -3680,  1602,
    3521, -3680, -3680,  1604,  1608,  1620,  1626,  1064,  1656,  1793,
   12160,  1675,   263,   350, -3680,  1677,  1081,  1087,  1697, 11527,
    1705, 11527,  1718, 11527,  1739,  1751,  1759, -3680,  2065,  2287,
   -3680, -3680,  2755, -3680, -3680, -3680, -3680, -3680,  2750,  1159,
    2766, -3680, -3680, 11527, -3680,   202, -3680, -3680, 16591,   439,
    2767, -3680,  1159, -3680, -3680,  2768,  1331, -3680, -3680, -3680,
   -3680, -3680,  2793, -3680, 48509,   858,  2776, 31401, 39344, 39344,
   39344,  2772, 11527, -3680, -3680,  3048, 24653, -3680,  3184, -3680,
   -3680, -3680, -3680, -3680,  2782,  2803, -3680, -3680, -3680,  2603,
    3145,  3028, -3680, -3680,  1382, 48509, 39344,  3092, -3680, -3680,
    2596, 25883, -3680,  2805, -3680,  2805,  1846,  2799,  1822, -3680,
   -3680, -3680,  2790,  2132, 18490,  3239,  2258, 39344, 39344, 39344,
   -3680,  2515,  2515,   152,  2863,  3188, -3680, -3680, -3680, -3680,
   47287, -3680, -3680, -3680, -3680,  1080, 48509,  3172, 48509,  8995,
   -3680, -3680,  3369, 11527, 39344,   -50,   888,    74, -3680, -3680,
   -3680, -3680, -3680, -3680,  2458, -3680, -3680, -3680, -3680, 37511,
   -3680, -3680, -3680,  2458, -3680,    16,  1559,  -209,  1140, -3680,
    1229, -3680, -3680, -3680,  3191,   870,  2936,  2936,  3193,  3084,
     787,  2817, -3680,    74, -3680, -3680, -3680,  2596, -3680, -3680,
   11527, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680,   882, -3680, -3680, -3680, -3680,  2831,  3195,
    3196,   962, -3680, 26498, -3680, -3680, 26498, 26498,   151, 46065,
   -3680, -3680, -3680, -3680, -3680, -3680,  2822, -3680, -3680,  1382,
   -3680, -3680, 38122,  -151, -3680, 26498,  2822, -3680, -3680,   193,
   -3680,  -151, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   46065,  2830, -3680,   317, -3680, -3680, -3680, -3680, -3680,  1806,
   -3680, 46065, -3680, -3680, 46065, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680,  2837,  2945,  1071, -3680,
    2842,  2843, -3680, -3680, -3680, -3680, 48509, -3680, -3680, 24653,
   -3680, -3680, -3680,  6184, 48509, -3680, -3680, -3680, -3680,  3055,
   -3680, 11527, 11527,  3105, 48509,  3106, -3680,  3372, 48509,  3456,
   46065, -3680,  2848, -3680,  2849, -3680,  1829, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680,  2850, 48509,  2520,  2214, -3680, -3680,
   -3680, -3680,  -151,   932, -3680, -3680, -3680, -3680,  3123,  3130,
   48509, -3680, -3680, -3680, -3680,  2991, -3680, 24653,  3445, -3680,
    3027, -3680,  2865,   145,  5754, -3680,  2872,  2873,  2874, 30179,
    2515,  3230, -3680, -3680,  3270, -3680,  1159, 11527,   831, -3680,
   -3680,   297, -3680,   843, -3680, -3680, -3680,  2875, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680,  3344, -3680, -3680, -3680,  2833,
   -3680, -3680, -3680,  2876,  3270,  3270, -3680, -3680,  3458,  3038,
   11527, 11527, -3680, 11527, -3680,   871,  2878,  2914, -3680, -3680,
   -3680, -3680, 11527, -3680, -3680,  3270, -3680, 11527, -3680, -3680,
   11527, -3680, 11527, 11527, -3680,  1778, -3680,  1795, -3680,  1799,
   -3680, -3680, -3680,  2316, -3680, -3680,   782, 48509, -3680, -3680,
    1842, -3680, -3680, 11527, -3680, 42399, -3680, -3680,  3098, -3680,
   -3680,  3318, -3680, -3680, -3680,   548,   548,   548, 15325,  1159,
    3375, -3680, -3680, -3680,  3184,  3263, -3680,    64, -3680, 48509,
    2895,  1494, -3680,  1857, -3680, -3680,  2896, -3680, -3680,  2065,
    2902, -3680,    74, 15325,  2649,  3027, -3680, -3680,  1846, 25883,
   30790, -3680, -3680, 39344,  2258,  2258,  2258,  2458,  3329,  2718,
    2718, -3680, 28341, -3680, -3680,  3059, -3680, -3680, 32012, -3680,
     -45, -3680, -3680, 16591,  1574, -3680,  1159, -3680, 41177, -3680,
    1159,    74,  2906,  2915, -3680, -3680, 47898, 11527, -3680, -3680,
   -3680, -3680, -3680,  1560,   837, -3680,   796, -3680,   870, -3680,
    3287,  3288,   870, -3680, -3680, -3680, 25883,  2515, 15325, -3680,
     293,  2065,  1159,  2916,   317, -3680,   520, 11527, 26498, -3680,
   -3680, -3680,  2920, -3680, -3680,  3426,  3427, -3680, 26498,  1833,
   48509, -3680,  3369, -3680, -3680, -3680, -3680,  6184, -3680, 25883,
   -3680, -3680, -3680, -3680, -3680, 48509, -3680, 24653, -3680, 19722,
   -3680,  2927, -3680,  2741,  2741,  2741, -3680, -3680, -3680,  2741,
   -3680,  2743,  3158, -3680,  2743,  2743, -3680, -3680, -3680, -3680,
   -3680,   297,   207, -3680, -3680,   297, -3680, -3680, -3680,   129,
    1251,  2743, -3680, -3680, -3680, -3680, -3680, -3680, -3680,  2741,
    2741,  2741, -3680, -3680,   297,  2741, -3680,  2741, -3680,  2904,
   -3680,   257,   109,  2741,  2741,  2741,  2875,  2921, -3680,  1159,
    3270,  3473, -3680, -3680,  3077,  -151,  3417, -3680,  1874, -3680,
    2933, -3680, 46676, -3680,  1747,  2223, -3680, -3680, -3680, -3680,
    3078,   762, -3680,  3102,  2937,  2935, -3680, -3680,  -151,  2940,
    2941, -3680, -3680, -3680, -3680,  3553, -3680, 48509, 48509, 48509,
    2569, -3680, 38733, -3680,  -237,  1159,  2946,  2947,  2950,  2952,
    3541,   190, -3680,  3549, 40566, -3680, -3680, -3680,  1877,  3226,
   -3680, -3680,  2741, -3680,  2743, -3680, -3680, -3680,  3528, -3680,
   -3680,  2741,  3347,   297, -3680, -3680,  2965, -3680,  2967,  2973,
   -3680,   248,  2978,  1825,  1110,  1883,  3264,  3349, -3680,  3194,
   -3680,  1839,   584,  1894,  1971,  1977,  1988, -3680, -3680, -3680,
     191,  1140, -3680, -3680,  1895, -3680,  3332,  3241,   717,  3008,
    3008,  3008,  1574,  1159,  1916, -3680, -3680, -3680, -3680,  3374,
   -3680, -3680,  2988,  3118, 48509, -3680,  3028, -3680,  2316, 25883,
   15325,  2994,  2987, -3680,   919, -3680, -3680,  2984,  2258, -3680,
    3580,  3421, -3680, -3680, 41788,  2997, -3680, -3680,  3307, -3680,
     108,  3218, -3680, -3680, -3680,   -50,  3095,  3097,    74,  1159,
   -3680, -3680,  2519,  2278,  3056,   870,   870,  2693,  3061, 11527,
   11527,  3009, -3680,  2990, -3680, -3680,   348,  2316, 11527, -3680,
    1382,  3028, -3680,  2008,  3014,  3021, 48509,  3022,  3023, -3680,
    3435,   987, -3680, -3680, -3680, -3680,  1235, -3680, -3680,  2822,
      63,  3026, -3680, 48509,  3353, -3680, -3680, -3680, -3680,   728,
   -3680,  3029,   728,   728, -3680,  2234, -3680,  3064,   297, -3680,
   -3680,  3065, -3680, -3680, -3680,   728,  3041,   297, -3680, -3680,
   -3680, -3680,   728, -3680, 41788,  -151,  3501,  3651, -3680,  3099,
   -3680,  3548,  3424,  3661, -3680,  2646, -3680,  3429,  3324,    74,
   -3680,   297, -3680, -3680,  3654, -3680,   297,  3654,   728,   728,
   48509, -3680, -3680, -3680, -3680, -3680, -3680, 48509, -3680,   898,
   -3680, -3680, -3680,  1922,  -151, -3680, -3680, -3680,  3062,  3054,
   -3680, -3680, -3680,   917, -3680, 48509,  6184, -3680, -3680, -3680,
    6559, -3680,   899,  1925,   317,  3060,  1929,  1931,  3532,  3234,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, 40566, -3680,
    3654,  3345,  3074, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, 11527, -3680, -3680, -3680, 11527, -3680, -3680,  3379,
    3535, -3680, -3680, -3680, -3680, -3680, -3680,  1067,  1067, -3680,
   -3680, -3680,  3694, -3680,  3173,  3176, -3680, -3680,  3179, -3680,
   -3680,   118,  2045, -3680, -3680, -3680, -3680, 15325,  3466,  3189,
   -3680, -3680,  3103,  3144, -3680, -3680,   191, -3680, -3680, -3680,
   -3680, 11527, -3680,  2990,  2266, -3680, 28341, -3680, -3680, -3680,
   -3680, -3680,  3101,  3107,  8995,   782, -3680,  3141, -3680, -3680,
   -3680,  3143,  1159,  1159, 48509,  3230, -3680, -3680,   962,   962,
   -3680,   348,   191,   317, -3680,  1934, -3680, 48509, 48509,  1940,
   48509, 48509,  1262,  1262,  1262,  1886,  1886, -3680, -3680, -3680,
     987, -3680,  3495, -3680, -3680,  1947, -3680,   833,  3376, -3680,
   -3680, -3680, -3680,   728, -3680,   248, -3680, -3680, -3680, -3680,
   -3680,   248, -3680, -3680, -3680, -3680,  1509, -3680, -3680, -3680,
    3388,  3152, -3680, -3680, -3680, -3680, -3680, 33845, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680,  3236, -3680, 54619, -3680, -3680,
    -144,  3146, -3680, -3680, -3680,  1441, 48509, 24653,  3105,  3299,
   -3680,  3369, -3680,   919,  2975,  3027, -3680,  1114, 48509, -3680,
    3393,   177,  1434, -3680,  3583, -3680, -3680,  3125,  3131,   317,
    2058, -3680, -3680, -3680, -3680,  3618, -3680, -3680, -3680, -3680,
   -3680,   338,  3391,  1747,  1747,  1747,   -63,  2045, -3680, -3680,
    3185, 24653, 16591,  3245, 48509,   852,  3081, -3680,  -211,   317,
   11527,  2458, 38122, -3680, -3680, -3680, -3680, -3680, -3680, 11527,
    3138, 11527,  3150,  1953, -3680, -3680,  3585,  3585, -3680, -3680,
   -3680, -3680,  1991,  2018, -3680,  2025,  2032, -3680, -3680, -3680,
    3151, -3680, 48509, -3680, -3680, -3680,   295, -3680, -3680,  2048,
   -3680,  2055, -3680,  1509, -3680,  3153, -3680, -3680, -3680, -3680,
   11527,  3614,  3178, 48509,   122, -3680, 55841, 55841, 48509, -3680,
   -3680, -3680, -3680,  5389, -3680, -3680,   860, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,  3753, -3680,
    3147, -3680, -3680,  3156,  1181, -3680, -3680, -3680,  6184,  3599,
    1449, -3680, -3680, -3680, -3680,   145,  3164,  2132,  -151,    74,
   -3680,  1114, -3680, -3680, -3680,    74,   317,  3169,  3412, -3680,
     177, -3680, -3680, -3680,  1434, -3680, -3680, -3680, -3680, 11527,
   -3680, -3680,  3742, -3680, -3680, -3680, -3680, -3680, -3680,    77,
   -3680, -3680, 25883, -3680, -3680,  1382, -3680,  2072, -3680, -3680,
   -3680,  3262,    74,    74,  3669,  3670,    74,    74,    74,    74,
    3182,  3081, -3680,  3649, -3680, -3680, 11527, -3680, -3680,  1159,
    3407, -3680,  3740,  1140,  1159, 48509,  1159, 48509, -3680, 48509,
    1495, -3680, -3680,  3390, -3680,  1114, -3680, -3680,  3028, -3680,
     913,   913,   297,   248,   297, -3680, -3680,  1159, 11527, -3680,
   11527,  3211, -3680, -3680,  3625, 48509, -3680, -3680, -3680, -3680,
   11527, -3680, 54619, 54619, -3680, -3680, -3680, -3680,  3787,   919,
    3756,  3450,  3758,  3571, -3680, -3680,  3372,  6184, -3680, -3680,
   -3680, -3680,  1747, -3680, 34456, -3680, -3680,  1376, -3680, -3680,
     317, -3680, -3680, -3680,  3197, -3680,    74,  2266,  3192, -3680,
   -3680, 48509,  3200, -3680,  -151,  -151,    74,    74,  2033,  2033,
    1382, 41788,  3302, -3680, -3680,    74,   317, 48509, -3680,   918,
    3555, -3680,  2077,  2089, -3680,  3779, -3680,  3784,  3203,  3204,
   -3680,  1114, -3680,   177,  1434,  2117, -3680,  3831, -3680,   181,
    3474,  3477, -3680, -3680, -3680,  3212,  1159,  1159, -3680,   229,
   -3680, -3680,  3603,  3697, 11527,  1159, 51564,  3214, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, 55230, 11527, -3680,   860,  3753, -3680,  3483, -3680,  3485,
   -3680, -3680, -3680,  3724, 54619, -3680,  3717, -3680,   919, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, 25883, 15325, -3680, -3680,
    3245, -3680,  3237, -3680, -3680,   -25, -3680, -3680,  -151,  -151,
   -3680, -3680, -3680, -3680, -3680,  2121, -3680, 41788, -3680, -3680,
    3816,  3820,  3714,  3822,   918, -3680,  -123, -3680, -3680, -3680,
   -3680, -3680, 46676, 46676, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680,  3292,  3739,   -76,  3272, 11527, 54619, -3680,  3718, -3680,
    3652,  2131,  3594,  3246, -3680,  3242,  2170,  3755, 55841, 55841,
   -3680, -3680, -3680, -3680,  3733, -3680, -3680, -3680, -3680, -3680,
    3431, -3680, -3680,  2126, -3680, 15958, -3680, -3680, -3680, -3680,
   -3680, 41788, -3680,  3302, -3680,  3261,   248,   248,  3846,   248,
   -3680,  3847,  3848,  -123, -3680,  3271,  2128,   913,   913, -3680,
   -3680,   206, -3680,   241, -3680,  1159, 52175,  3850, 48509, -3680,
   -3680, -3680, -3680, 11527, -3680, 43010, 52786,  3273, -3680, -3680,
   -3680,  3451, -3680,  3571,  3686,  3740, -3680,  3237, -3680,  3280,
   -3680,  2603,  3081, -3680, -3680,  3282, -3680, -3680,   248, -3680,
     248,   248, -3680, -3680, -3680, -3680, -3680,  -151,  3659, -3680,
     206, -3680, 11527, -3680,  3759,  3373, -3680,  3286, -3680, 54619,
    2163, 54619, -3680, -3680,  3711,  3290,  1561, -3680,  3289, -3680,
   -3680, 54619,  3879,  3555, -3680, 15958,  3297, -3680, 11527,  3298,
    3300, -3680, -3680, -3680, -3680, -3680, -3680, -3680,  1159,  3877,
   54619, 48509, 49731,  3493, 53397,  3744, 48509,  6184,  3745,  3746,
   -3680, 54619, -3680,   248,  3713, -3680, -3680,  1159, -3680, -3680,
    3397, -3680, 50342, -3680,  2265, -3680,  3336, -3680, -3680,  3814,
    1308, -3680, -3680, -3680,  3586,  3314, -3680, -3680, 54619, 54619,
   -3680, -3680, -3680, 32623, 11527, -3680, -3680, -3680, -3680, -3680,
     726,   642, 20952,  3470, 50953, 54008, -3680, -3680, -3680, 28955,
   -3680, -3680, -3680,  3757, -3680,  1159, -3680, -3680, -3680, -3680,
   -3680, 41788,  2130, -3680, -3680, 25883, -3680, 32623, -3680, -3680,
   -3680, -3680, 24036,  3315, -3680,    74, -3680, -3680, 25883, -3680,
   -3680, 15325, -3680, -3680
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3680, -3680, -3680, -3680, -3680,    34, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680,  1683, -3680, -3680, -3680, -3680, -3680,
    1897, -3680,   615, -1792, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680,   621,  1511,  3303, -3680,   357, -3680,    22, -3680,
   -3680, -3680, -2867,  -103,  -291, -3680, -3680,   270,    17,  2964,
    -288, -3070, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680,   368,   365, -3680, -3680,   183, -3680, -3680, -1287, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680,  -485,  -437,  1530,
   -3680, -3680, -3680,  3935, -3680,  3405, -3680,  1211,  2165, -3680,
   -3680, -3680,  -634,   199, -3680,   209, -3680,   215, -3680,   218,
   -3680,   220,   221,   223,   225, -3680,   227, -3680, -3680,  -431,
   -3680, -3680, -3680, -3680,   232, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680,  -302, -3680, -3680,  -145, -3680, -3680,  -298,   233,
   -3680,  -252,   234, -3680,   235, -3680,  -161, -3680,  -148, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680,  2982, -3680, -3680, -3680, -2056, -3680, -3680, -2355,  2550,
   -3680, -1653, -3680, -3680, -1832, -3680, -3680, -1682,   738, -3680,
   -3680,  -118,   444, -3680, -1385, -1863, -1862, -3680, -3680, -3680,
   -1981, -1979,  -781,  2280, -1184, -2273, -3680, -3680, -3680, -3680,
      83, -3680, -3680, -2538,  2010,  2551, -3680,  2548, -3680, -3680,
    1106, -3680, -3680,  1286,   597,  1289, -3680,   903,  2724, -1242,
   -3680, -3680, -3680, -3680, -3680, -3680,   -42,   212,  -140, -3680,
   -3341,   600, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3154, -3680, -3680, -3680,  -313, -3680, -3680,  -218, -3680, -3680,
    -266, -3680,    61, -2286, -3680, -3680, -3680, -3680,  2532, -1333,
   -3680,  3554, -3680,  -558,   456,  2060, -2401, -1402, -3680,  -928,
    -914, -2450, -3680, -3680, -3680, -3304,  1075,  1479, -3680,   820,
    2059, -1886, -3680, -3680, -3680, -3680, -3680,  1556, -3680, -3680,
     848, -3680,   834, -3680, -3680, -3680, -3680, -3680,  -257, -3680,
      51, -2625, -3680, -3680, -3680, -2031,  1034,   808, -3680, -3680,
   -3680,  -614, -2789,  -908, -3680,   339, -2519, -2412,   775, -3680,
   -3680,   528, -3568, -3680, -3680,  -572, -2071, -2362,     9, -3680,
   -3680,   543, -3086,   911, -3680, -3680, -3680, -3065, -1900, -3680,
      79, -3680, -3680, -3680, -3680, -3059, -3680, -3680, -1461, -2026,
   -3680, -3680,  4089,  4092, -1038, -2631, -3679,   -17,   -15, -3680,
   -3680, -3680,  2565, -1679,   160,   150,   153,  2015,  -620,   308,
   -2191, -3680,   356, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,  2102,
   -1507, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -2373,   885,
   -3680, -3680,  1609, -3680, -3680, -3680, -1838,  3155, -3680, -3680,
   -3680, -3680,  3496, -2140, -3210, -3680, -3680, -3680, -3680, -3680,
   -3680,  1416, -3680, -3680,  2238,  2695, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680,   609,  1800, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680,   894,  2612, -3680, -3680, -3680,
   -3680,    25, -3680, -3680, -3680, -3680,  2320, -3680, -3680, -3680,
   -3680,  2653, -3680, -3680, -3680, -3680, -3680, -3680,  1404, -3680,
    1831, -3680, -1435, -3680, -3680,  1015,  -984,  1796,  -592,  1932,
     367, -3680,  3558, -3680, -3680, -3680, -1669, -2418, -3680,  3247,
    -982, -2436,  2325,  -537, -1818,  1039,  1124,  -689,  3995, -3680,
   -1146, -1127, -3680, -3680,  -647, -3680, -3680, -3680, -3680, -3680,
    2026,  2028,  -651, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680,  1451, -3680, -3680, -3680, -3680, -1725,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680,  1735, -3680, -2042,
   -3680, -3680,  -473, -3680,  3034, -3680, -3680, -3680, -2291, -1904,
    1757,   958, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -2333, -3680, -3680, -3680, -3680, -3680,  1945, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -1698, -3680, -2174,   301, -3680,
     450, -3680, -3680, -3680, -3680, -3680, -3680, -3680,   -53,   842,
     -51, -2264, -1100,  1600, -3680, -3680, -1280,  3080, -2040, -3680,
   -3680, -3680,  1924, -3680, -3680, -3680, -3680, -3680,   927, -2539,
    2725, -3680, -3680, -3092,  -907, -2238,  -883, -3680, -1348,  1359,
     464, -3680, -1908, -1777,  -547, -2482, -1095, -3680,  1676, -3680,
   -3680, -3680, -3680,  -207, -3680, -3680, -3680,   494,  1834, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,  -571,
    -719, -3680,  2090,  1750, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680,  2892,  2864,  1898, -3680, -3680, -2275, -3680,
   -3680,  1860, -3680,   750, -1994, -1808,  1046, -3680, -3680,  1049,
   -3165, -3680, -3680, -3680, -3680, -3680, -3680,   988, -3680,    20,
    3621, -3680, -3680, -3680, -3680, -3680, -3680, -3680,  2658, -1058,
    3542, -3680, -3680, -3680, -3680, -3680, -3680,  2317, -3680, -3680,
   -3680, -3680, -3680, -3680,  2832,  3638,  -575, -1224, -3680,  -706,
    2806,  2331,  -746, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680,  2453,   964, -3680, -3680,
   -3680, -3680,  2883, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680,  1088,   -91, -3680,    12,  -134, -3680,   -52,
   -3680, -3680, -3680, -3680, -3680,  -232, -3680, -3680,  -236,  -691,
    -986, -1353,   677, -1778, -2009,  1076,  2868, -2583,  -693, -1158,
   -1173, -1890,    59, -3680, -3680,  3343,    10,   481,  -390,    -6,
   -2626,  -109,  -573, -3680, -1752, -3680, -3680, -3680, -3680,  2395,
   -3680, -3680, -3680, -3680,  1433, -3680, -3680, -3680,  1041, -3680,
     765,   538, -3680, -3680,   173, -3680,  2451, -3680, -3680, -3680,
   -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680,
   -3680,  2885,  3675,  3354, -3680,  2954, -3680, -3680, -3680, -3680,
   -3680,   418, -3680,   569, -2236, -1709, -3680, -3680,  2716,  -886,
   -3680,  1532,  -345,  -624, -3680, -3680,   413, -3680, -3680,  1555,
    3681,  3355, -3680, -3680, -3680, -3680, -3680, -2709,  -890, -3680,
   -3331, -2765, -1685, -3680, -3680, -2143, -2947, -3680, -3680, -1041,
   -3680, -3680, -3680, -3680, -2035, -3680, -3680, -3680,    48,  3741,
    3750, -3680, -3680,   563, -3680,  -113, -3680, -3680, -3680, -3680,
   -3680, -3680, -3680,  3597, -3680, -3680, -3680, -3680,  3600, -3680,
   -3680, -3680, -3680, -3680,  3601, -3680, -3680, -3680, -3680, -3680,
    1743, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680, -3680
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2585
static const yytype_int16 yytable[] =
{
     494,  1040,   956,  1457,  1455,   952,  1686,  1105,   984,  1364,
    1113,  1596,  2226,   536,   137,   621,   542,   868,  2363,  2364,
    1557,  1685,  1662,   492,  1083,  1639,   556,  2314,  2040,  1132,
    2529,  1794,  1242,   568,  1547,  1548,   571,  1871,  2910,  2442,
     568,   997,  1870,  1392,  1420,   537,  2347,  2966,   590,   796,
    2558,  2767,  2037,  3494,   553,  1707,  2855,  2637,  1751,  3023,
    2733,   561,  1715,  3205,  3161,  1462,  1163,  2611,  1392,  1167,
    2646,  1028,  3031,  2839,  1032,  1604,  2013,  1803,  1176,  1463,
    2459,   540,  1717,  1718,  2694,  1940,  1721,  1722,  1723,  1724,
     610,  1726,  1727,  1729,  1731,  1732,  1733,  1734,  1735,  2346,
    2647,  2454,  2455,  2395,  1070,  2579,  3322,  2580,  2830,  3046,
    2906,  2417,  2418,   613,  2776,   494,  2840,   494,   620,   626,
    1054,  1062,  2788,  3690,  1184,  1185,  1186,  1918,  2429,  2467,
    2720,  2527,  3499,  2471,  1295,  3830,  1227,  2539,   615,  1226,
     617,  1953,  2549,  3573,  2486,  2447,  2448,  2077,  2555,  2556,
    1193,  1194,  1050,  2560,  2495,   609,  3514,  2267,  1809,  3421,
    3725,  2469,  2470,  1335,  2472,  3000,  2359,  2475,  2476,   917,
     918,  2479,  1193,  1194,  2870,  2871,  2488,  1878,  1386,   635,
    2491,  2492,  2493,  2494,   646,  1290,  2690,  2498,  2499,  3541,
    2501,  3698,  1193,  1194,  2878,  1888,  2510,  2504,  3025,  2514,
    2515,   552,  2517,  1891,  1892,  2327,  1421,  2613,   560,  2087,
    1514,  3626,  2411,  3041,  3042,   850,  3534,  3539,  2998,  3048,
    3540,  3050,  1798,  2576,  2577,  1459,  1193,  1194,  3370,  2123,
    1295,  2838,  1459,  1775,  2757,  2262,  1827,  1519,  2327,  3550,
    2530,  3371,  1245,  2568,  2267,  1304,  3572,  1422,  1438,   917,
     918,  2878,  3103,  3232,  -865,  3372,  2431,  1228,  3380,  3948,
    1033,  -529,  2563,  2564,  2565,  2566,   917,  3535,  1459,  1193,
    1194,  2884, -1490,  1228,   860, -2464,  1296,  3068,  3370,  1193,
    1194,  1193,  1194,  1375,   972,  3688,  1942,  4266,  4337,   548,
    3352,  3371,  2991,  2992,  1860,  3978,  3235,  -530,  2307,  3169,
    1445,  3739,  -433,  2450,  1327,  3372,  1466,   636,  1417,  4229,
     569,  1170,  3192,  2912,  4043,  4289,   917,   918,  3370,  1308,
    2879,  1193,  1194,   599,  1932,   854,   628,  2028,  3638,  1193,
    1194,  3371,  1051,   884,   872,  1193,  1194,  3250,  3309,  2505,
    3193,   136,  3149,  1193,  1194,  3372,  4122,  1035,  2083,  1936,
    1861,  2824,  2244,  2858,  1520,   581,   917,   918,  1521,  4082,
     545,  1193,  1194,  3203,  1390, -2395,  1193,  1194,  2194,  1522,
    4064,  3352,  1296,  3470,  1193,  1194,  2799,  2803,  2805,  2969,
    4236,  2815,  3847,  2356,  1540,  4281,  2161,  2913,  1393,   136,
    1540,   653,  4236,  3620,  3471,  2874,  4004,  4005,   651,   262,
    1772,   264,  3664,  1773,  3005,   549,  1774,  1806,  1193,  1194,
     855,  1541,   813,  1397,  1193,  1194,  4282,  1542,  3869,  1402,
    4006,  3204,  1603,   582,  1954,  3472,  1036,  4030,  2970,  3221,
    3949,  2308,  1014,  2064,   853,  4083,  1132,  1322, -2396,  2887,
    1394,  2029,  4224,  1776,  2328,   885,  1828,  1483,  2371,  1515,
    3251,  1807,  2782,  3087,  1911,  1193,  1194,   546,  1747,  1390,
    1518,   973,   974,  1210,  1193,  1194,   629,  2859,  1933,  1914,
    4044,  1287,  3944,  3758,  1193,  1194, -2395,  2328,  1193,  1194,
     856, -1450,  3762,  1052,  2914,   600,  1193,  1194,  1171,  1172,
    3194,  3156,  1193,  1194,  1628,  1523, -1490,  1629,  1446,  4177,
    2372,   620,  3209,   626,  2848,  3353,  3778,  1193,  1194,  3006,
    2126,  3780,  3839,  1537,  1538,  1539,  1309,   886,  2781, -1450,
     809,  2485,  3809,  4290,   626, -2584,  1862,  3380,  1195,  3170,
    3879,  1196,  1462,   848,  2880,  1230,  3716,   620,  4230,   858,
    3242,  3164,  3165,  3166,  1056,  1064,  1463,  1051,  1195, -2396,
    2263,  1196,   876,  1940,  2268,   861,   859,  1712,  1034,  3979,
    1229,  1720,  2891,  1751,  2893,   851,  1193,  1194,  1305,  1916,
    2725,  2904,  1777,  3033,  3717,  1777,  1229,  2888,  1741,  2453,
     968,  2892,  1195,  1335,  2916,  1196,  3353,  3665,  2454,  2455,
    2925,  2927,  2579,  1524,  2580,  2908,  2909,   969,  2246,   987,
    3505,   873,  1418,  1462,  4262,  2919,  2943,  2927,   620,  2249,
    1001,  2013,  2252,  2329,  2959,  1335,  2531,  1463,  1571,  1572,
    1376,   610,  3309,  3356,  2309,  1195,  3236,   494,  1196, -1490,
    2988,  3870,   610,  2527,  1026,  1195,   610,  1195,  1196,   610,
    1196,  2268,  3338,  1041,  1001,  1627,  2329,  1014,   620,  1873,
    1013,  1213,  1876,  1640,  3104,  1642,  3660,  1880,  1071,  1072,
    1073,  1516,  3210,  3211,  1078,  2391,  1516,  1655,  1656,  1657,
    2903,  1291,  3699,  1516,   645,  1661,  1754,  1195,  2243,  1810,
    1196,  2124,  2911,  1893,  1894,  1195,  1011,  4125,  1196,  1941,
    2077,  1195,  3231,  2789,  1196,  3233,  3234,  1023,  1052,  1195,
    2829,  2575,  1196,  1241,  2881,  2527,  3030,  1068,   817,  1596,
    2576,  2577,  1771,  3448,  3244,  3943,  1133,  1195,   897,  1890,
    1196,  3542,  1195,  3337, -2464,  1196,   866,  3970,  4166,  2506,
    1195,  3001,  -865,  1196,  3350,  2993,  1918,  1516,  3038,  -529,
   -2584,  3167,  3168,  1796,  3525,  3526,  2373,  2873,  2868,  1197,
   -1490,  2082,  3046, -2464,  1942,  3046,  3046,  4008,  3858,  2088,
    3627,   970,  1817,  2996,  1195,  1193,  1194,  1196,  2089,  3245,
    1195,  1197,  3046,  1196,  1190,  -530,  1192,  3373,  1799,  4338,
    -433,  3664,   654,  3958,  1826,  3497,  3551,  2990,   975,   550,
    2229,  1197,  3571,  3574,  3576,  3577,  2872,  2063,  3536,  3306,
    1235,   494,  1237,   815,  1001,   494,   620,  2195,   494,   620,
    1516,  1195, -2395,  3197,  1196,  1173,  1389,  3225,  2816,  4409,
    1195,  1853, -1490,  1196,  1236,  1197,  1877,  3373,  1240,   877,
    1195,  1244,  4138,  1196,  1195,  1193,  1194,  1196,  2141,  1900,
    1692,  1693,  1195, -2395,  4292,  1196,  1300,  4257,  1195,  3218,
    3007,  1196,  3570,  3527,  1398,  3230,  1295,  3528,  3668,   610,
    1403,  1193,  1194,  1195,  4075,  3046,  1196,  3373,  1197,  2767,
    2738,   620,   610,  4031,  1516,  3484,   610, -1450,  1197,  3488,
    1197,  1324,  3519,  3455,  2142, -2396,  3038,  3547,  3548,  3549,
    1288,  2083,  1920,  3088,  3115,  3552,  2114,  1193,  1194,  1193,
    1194,  2600,  2582,  3578,  1482,  1193,  1194,  1953,  3500,  1193,
    1194,  1748,  4447,  1425,  3406,  3723, -2396,  3483,   138,   620,
    1197,  3487,  1195,  1630,  1311,  1196,  1631,  3458,  1197,  3459,
    3140,  3941,  3718, -1954,  1197,  1692,  2160,  1330,  2383,  2236,
    2971, -1490,  1197,  2198,  2199,  1222,  1223,  1224,  1225,  2215,
    2216,   990,  2167,  1997,  3715,  1543,  3366,  2702,  2703,   497,
    1197,   610,  1193,  1194,  4126,  1197,  3665,  4132,  3366,  4134,
    3633,  2262,  4131,  1197, -1797,  3072,  3073,  3145,  2387,  3636,
    3089,  3090,  2095,  1458,  1193,  1194,  1193,  1194,  4185,  2132,
    3361,  3428,  1273,  4171, -1490,  2956,  2347,  3595,  1296,  2000,
    2804,  1901,  1392,  2885,  2885,  1902,  3596,  1197,  2416,  2945,
    2454,  2455,   610,  1197,  4208,  2593,  2579,  3396,  2580,  3125,
    3126,  3127,  4259,  2133,  3393,   610,  3883, -1490,  1871,  2136,
    1871,  1871,  1392,   667,  3202,  2820,  2821,  3504,  4264,  2660,
    1736,  4268, -1490,   118,   502,  1940,  1193,  1194, -1490,  2346,
    1936,  1953,  1333,  2356,  1197,  2615,  1193,  1194,  3011,  3819,
    3480,  2459,  2588,  1197,   610,  2601,  2453,  3666,  1553,  3112,
    3113, -1490,  4210,  1197,   554,  2753,   661,  1197, -1490,  2137,
    1193,  1194,  1702,  4211,  2589,  1197,  2972,  2251, -1490,  2138,
    2230,  1197,   668,  2140,  1043,  2701,  3990,  1193,  1194,  4448,
   -1490,  2147,  2357,  1193,  1194, -1490,  1197,  2148,  3849,  1133,
    2486,  2511, -1798,  3367, -1490,  1936,  3991,  2013,  2237,  1740,
    2583,  1195,  3241,  1133,  1196,  3367,  1193,  1194,  2404,  1544,
    2845,  2348,  2385,  1551,  2576,  2577, -1797,   558,  1193,  1194,
    3597,  1462,  2390,  2226,  4052,  2393,  2394,  2706,  2707,  3501,
    3214,  2456,  3708,  3709,  3851,  1463,  1749,  1941,  3450,  1193,
    1194,   120,  2231,  4364,  1686,  1197,  1193,  1194,  2825,   575,
    2957,   991,  1748,  1687,  3012,  1193,  1194,  3493, -1490,  1536,
    2266,  2158,  2077,   591,  2270,   620,  2749, -2532,  2575,  3368,
    1954,  1195,  2038,    43,  1196,  2519,  3948,  3475,   992,  2700,
   -1490,  3378,   640,   852,  1193,  1194,  2253,  2161,  2384,  2710,
   -1490,  3749,  3407,  1808,  3652,  2300,  2039,  1195,  1004,  3884,
    1196,   669,   620,  1069,  3667,  1193,  1194,  1744,  4335,  4336,
    1193,  1194,   610,  4060,  1914,  1686,   592,  3668,  4070,  2322,
    2323,   610, -1490,  4171,  4061,  2326,  1942,  1426,  4111,  1695,
    2843,  3537,  1737,  1195,  1239,  1195,  1196,  2784,  1196,  1936,
    2482,  1195,  2313,  1900,  1196,  1195,  3945,  4127,  1196,  1005,
    2584,  1193,  1194,  2374, -1798,  1738,  1193,  1194,  1231,   620,
    4047,  4048,  1193,  1194,  1379,  2222,  2263,   583,  2512,  4212,
   -1490,  1780, -2532,  1783,  2082,  3897,   610,  1746,  1193,  1194,
    4053,  2038,  3134,  3630,  3750,  2581,  4472,   593,   610,  1193,
    1194,  1560, -1490,  1787,  2209,  2602,   620,  3885,  1195,  2238,
     584,  1196,  1193,  1194,  1686,  2039,  3806,   610,   610,  3669,
    1193,  1194,   947,  2400,  1954,  2239,   262,  1900,   264,  2923,
    1195,  1380,  1195,  1196,  2785,  1196,  3751,  2835,  2527,  1193,
    1194,   620,  3013, -1490,  1830,    57,  1432,  1006,  1922,  2836,
    2232,  4128,  1838,   602,  1197,  3789,  2333,  3949,  1381,  2527,
    1427,  1341,  3215,   732,   494,   494,   494,   610,   494,   610,
    2159,  1748,  3237,  2083,  1872,  1850,  4080,   880,  4129,  2582,
    1874,   494,  -198,   620,  3369,  1428,   494,  1854,  1855,  1856,
    1560,  1858,  1195,  1193,  1194,  1196,  3369,   655, -2532, -1490,
     603,  1696,  1195,  3248,  1875,  1196,   610,  1749,  1560,  1879,
    2885,   605, -1490,  4106,  3254,  1901,  2988,  3256,  2099,  1902,
    1433,  1193,  1194,  2436,  1197,  1739,  1195,  1193,  1194,  1196,
    1561, -1490,  1857, -1490,  1859,  1840,   586,  2223,   611,  3014,
    2163,  2436,  2100,  1195,  2924,  4062,  1196,  4213,  2679,  1195,
    1197,   620,  1196,  2401,  3121,  4054,  1871, -1490, -1490,  1596,
     614, -1490, -1490,  3330,  2484,   610,  2175,  1588,  2033,   610,
    2402,  1889,  1195,  1952,  3704,  1196,   616,  2485,  2453,  1536,
    4011,  1362,  2403,  2437,  1195,   627,  1197,  1196,  1197,  1901,
    1317,  1193,  1194,  1318,  1197,  1193,  1194,  1588,  1197,   132,
     610,  2437,  2182, -2532,  2186,  1195,  3948,  1841,  1196,  3946,
    2187,  2438,  1195,  1429,  2188,  1196,   633,  3790,  3805,  1584,
     620,  1195,   494,   494,  1196,  2097,   494,  1589,  1560,  2438,
    2030,   947,   881,   587,  2035,  1193,  1194,  1647,  1078,  2837,
    2113,  1560,   594,   120,  3032,  2093,  2094,  3815,  1193,  1194,
    1195,  1197,  3111,  1196,  1007,  1590,   640,  1589,  1923,   565,
    2404,   756,  1831,   641,   595,  3777,   565,  2189,  1382,  1193,
    1194,  1195,  1924,  1197,  1196,  1197,  1195,  2975,  1686,  1196,
    2439,   133,  4181,  2705,  1231,  1590,   570,  1111,   262,  2193,
     264,  2211,  2976,  3152,   732,  1430,   596,  1842,  2439,  2070,
    1193,  1194,  2575,  4010,  1193,  1194,  4200,  4201,  1193,  1194,
    1193,  1194,  4309,  4309,  1193,  1194,  1749,  1195,   646,  1008,
    1196,  1009,  1195,   648,  1591,  1196,  1193,  1194,  1195,  1133,
    2168,  1196,  1193,  1194,  1231,  1197,  1319,  2271,  1231,  1941,
    4388,  1113,  1163,  1167,  1195,  1197,   262,  1196,   264,  1596,
    1112,  3070,   597,  2642,  1591,  1195,  2440,  1651,  1196,  4389,
    2648,  3071,  1193,  1194,  3779,  2099,  3595,  3781,  1195,  1197,
    1673,  1196,  2405,  2654,  2440,  3596,  1195,  3949,   650,  1196,
     637,  1193,  1194,  1193,  1194,  3082,  1197,  2235,  2738,  2100,
    4115,  1832,  1197,  2257,  3442,  1195,   662,  1383,  1196,  2257,
    1592,  2258,  3092,  1193,  1194,  1843,  2669,  3178,  3093,   510,
     498,  1193,  1194,  3724,   499,  1197,  3877,  3878,   810,  1384,
    3816,  2620,  3738,   664,  1193,  1194,  2226,  1197,  2542,  2259,
    1592,  3646,  1925,  1475,  1476,  2406,  4116,   620,  3443,   610,
     620,  4112,  2210,  4113,  2128,  1193,  1194,  4274,  1197,  1195,
    1936,   610,  1196,  2276,   665,  1197,   666,  1193,  1194,  2282,
    2282,  1385,  2282,  2115,  1197,  1193,  1194,  1245,  3738, -1691,
    2127, -1691,   620,  1534,  2716,   610,  2082,  1195,   643,   610,
    1196,   805,  2581,  1195,  1193,  1194,  1196,   498,  2543,  2129,
    1230,   499,   756,  1197,  1596,   564,   620,   620,   610,   610,
     610,  1193,  1194,  2582,  1926,  1193,  1194,   849,  1133,  3597,
    2321,  2282,  2282,  2282,  1197, -1691, -1775, -1691,  1111,  1197,
    2813,  2108,   579,  2614,  2281,  2281,   580,  2281,  2369,  2131,
    1927,  1193,  1194,  3543,  2139,   871,  3544,  2380,  1496,  1497,
    2305,  1193,  1194,   869,  1311,  1193,  1194,  1195,  2376,  1144,
    1196,  1195,   498,  3207,  1196,  1708,   499,   889,  4117,   863,
    1197,  2441,  2436,  1330,  2325,  1197,  2071,  1193,  1194,  1161,
     891,  1197,  1748,  1364,   610,  2149,  2281,  2281,  2281,  2441,
    2150,  1519,  1177,  1178,   964,  2544,  2399,  1197,  2333,   881,
    1936,  1195,  1928,   610,  1196,  2902,  2334,  3198,  1197,  1609,
    1193,  1194,  2157,   985,  1195,  1593,  3200,  1196,  1038,  1039,
     986,  1197,  2890,  2171,  3481,  3975,  3976,  3977,   852,  1197,
    1331,  1392,  2437,  2420,  3364,  1195,  2172,  1003,  1196,   994,
    1392,  1014,  2427,  2428,  2176,  1593,  2917,  2918,  1197,  2392,
    1024,  2072,  1044,  2432,  2433,  2434,  2435,  1045,  2443,  2444,
    2438,  4074,  1230,  2180,  3398,  3399,  1195,   118,  2410,  1196,
    1195,  2545,  1049,  1196,  1195,  2569,  1195,  1196,  1080,  1196,
    1195,  2585,  1594,  1196,  1081,  3412,  1686,  1193,  1194,  1509,
    1510,  1929,  1195,  1193,  1194,  1196,   962,   963,  1195,   966,
    2513,  1196,  1197,  1082,  1193,  1194,  1084,  1613,  1520,  1871,
    1085,   703,  1521,  1086,  3619,  2528,   975,  2181,  1089,  2638,
    2335,  2336,  1748,  1522,  1193,  1194,  1090,  2681,  1195,  2439,
    1197,  1196,  2638,  2130,  1230,  3931,  1197,  1233,  1038,  1039,
    1091,  1953,   947,  1686,  1709,  2185,  1092,  1195,  1093,  1195,
    1196,  2190,  1196,  2683,   917,   918,  2540,  2541,  2843,  2548,
    2337,  2550,  2551,  2552,  2553,  2554,  1919,  1094,  2557,  1195,
    2559,   708,  1196,  1095,  1193,  1194,  1686,  1195,   620,  3201,
    1196,  2348,  1193,  1194,   620,  3055,  2586,  2241,  1096,   494,
    1195,  2923,  4187,  1196,  1097,  2073,   610,   610,   610,  2609,
    1197,  1098,  2612,  1099,  1197,  2440,  1614,  1193,  1194,   498,
    1617,  1195,  2591,   499,  1196,  2202,  1100,  1618,   947,  2217,
    2134,  2135,   620,  1195,  2698,  1101,  1196,  1749,  2154,  1230,
    1102,  1195,  3961,  3965,  1196,   620,  1193,  1194,  1103,  3059,
     732,  4072,  2162,  1230,  1197,  2164,  1230,  1193,  1194,  1523,
    1195,  2165,  1645,  1196,  3931,  3931,  2719,  1197,  1588,  3035,
     559,  2605,  2606,  2607,  4179,  1234,  4088,  1195,   721,  1106,
    1196,  1195,  3058,  1108,  1196, -1775,  2546,  2253,  1197,  1193,
    1194,  1109,   947,  3147,  4094,  4095,  1193,  1194,  4098,  4099,
    4100,  4101,  1249,  3060,  1110,  3507,  3508,  1195,  1619,  1114,
    1196,  2177,  1230,  1115,  1245,  1245,  1245,  1195,  4089,  1197,
    1196,  1195,  1210,  1197,  1196,  1116,  2581,  1197,  1589,  1197,
    3581,  2178,  1230,  1197,  3066,  2179,  1230,   620,  3067,  1238,
    3110,  3191,  3074,  1195,  3078,  1197,  1196,  2708,  3079,  1953,
    1274,  1197,  2183,  1230,   737,  1710,  2860,  1524,  3832,  1936,
    3080,  1621,  2717,  1193,  1194,  1282,  3081,  3866,  3867,   620,
    1117,  1711,  2638,  1118,  2807,  2812,  1195,  1749,  1119,  1196,
     732,  1197,  1120,   620,   807,   808,  1686,  1121,   811,   812,
    1122,  3961,   814,  1123,   816,  3965,  3083,  1126,  4198,  4199,
    1197,  3152,  1197,  2445,  2446,  1127,  2070,  4207,  2430,   900,
    3931,  3931,  3032,  2687,  1230,  3086,  2747,  3091,  2854,  2638,
    2441,  1128,  1197,  2333,  4304,  2861,  1209,  1134,  4383,  1135,
    1197,  2723,  2724,  4202,  1954,   917,   918,  3094,  2226,  3054,
    2135,  2772,  1277,  1197,  1943,  3096,   979,   980,   756,   981,
    1136,   982,  1137,  1195,   620,  2284,  1196,  2285,  3098,  1195,
    3833,  3834,  1196,  1138,  1197,  3835,  3836,  2793,  2436,  2795,
    1195,  2926,  1210,  1196,  1111,   620,  1197,   620,   620,  3100,
    1139,  1748,  1285,  2792,  1197,  1872,  1276,  1872,  1872,  2719,
    1195,  3101,  2400,  1196,  1140,  2070,  1953,  1141,  1622,  3102,
    2571,  2862,  1284,  1197,  3931,  1142,  2351,  2352,  2353,  1145,
    1213,  1146,  1687,  1624,  1147,  1596,  1148,  1278,  3417,  3931,
    1197,   620,   620,  1279,  1197,  3643,  4419,  4420,  2437,  3057,
    1230,  1149,  3931,  3084,  1230,  3418,  1210,  1162,   901,  3419,
    1195,  2456,  1150,  1196,  1151,  2335,  2336,  1152,  1195,  1944,
    1197,  1196,  1153,  2070,  3961,  3965,  2438,  1936,  1154,   764,
    1197,  2528,  3158,  3159,  1197,  3645,  2528,  1280,   118,  3333,
    3334,  2528, -1775,  1195,  1293,  2528,  1196,  2898,   756,  3651,
    1155,  4469,  3423,  1230,  1281,  3155,  1197,  2898,  1156,  2528,
    2528,  1157,   620,  2877,  3931,  2900,  2901,  3445,  3446,  2528,
    1294,  1687,  1195,  2889,  1111,  1196,  3931,  3931,  1158,  2899,
    1159,   610,   902,  1195,  3586,  3587,  1196,  3623,  3631,  1197,
    2898,  2930,  2401,  3647,  1230,  2439,  1160,  2528,  2955,  1164,
   -1775,  2920,  1954,  2968,  3653,  3661,  1230,  2931,  1211,  2402,
    2985,   947,  1083,  2933,  2934,  1195,  1936,  2571,  1196,  2967,
    2482,  2403,  1195,  1165,  3931,  1196,  3676,  3677,  1215,  1216,
    1213,  1212,  3792,  2446,  3931,  3807,  3808,  1166,   119,  3811,
    3808,  3812,  3808,  2071,  3871,  3446,  2932,  1248,  1168,  1748,
    3874,  3808,  1342,  2989,  1404,  1169,   120,  3881,  3882,  4416,
    1301,  2038,  1343,  4018,  4019,  1303,  1197,  1175,   610,  2528,
    1245,  2440,  1197,  1179,  1936,  1180,  2863,  3931,  1344,  3931,
    3405,  3654,  1945,  1197,  1405,  2039,  1307,  3655,   900,  3931,
    1345,  1346,  1347,  1946,  1213, -2575,  1749,  1315,  3656,  2404,
    1947,  4023,  3808,  1197,  3756,  3757,  1348,  1181,  3931,  1182,
    3931,  1183,  3931,  1232,  3037,  1038,  1039,  3760,  3726,  3931,
    3424,  3706,   121,  1325,  3763,  1588,  1338,  2449,  4024,  3808,
    3931,  1340,  2071,  3016,  4473,  4026,  3808,  3529,  1748,  1406,
    3532,  3533,  4027,  3808,  1407,  1357,  3931,  3931,  1358,  1954,
    3782,  3783,  3553,  1197,  4300,  3823,  3824,  3545,  4032,  4033,
    1359,  1197,  3931,  3931,  -620,  4034,  4033,  3931,  3971,  1365,
    1218,  1219,  1220,  1221,  1222,  1223,  1224,  1225,  1215,  1216,
    1373,  2456,  4090,  4091,  1362,  1589,  1197,  4218,  4019,  1374,
    2071,  1214,  1948,  2457,  1378,  2749,  1748,  3554,  2276,  4219,
    4019,  1300,   620,   620,   620,   122,  1390,  2072,  3555,   947,
     610,  2405,  1399,  2860,  1401,  1197,  1400,   901,  3616,  3617,
    2483,  1416,   262,  1419,   264,  1210,  1197,  4227,  3446,  2747,
     620,  4272,  4273,  1423,  2484,  1687,  4316,  4317,  4334,  3332,
    4461,  4462,  1215,  1216,  1676,  1677,  4161,  1424,  1133,  3890,
    3634,   620,   620,   620,  3556,  3890,  1217,  1437,  1197,  3462,
    3463,  3430,  3431,  1440,  3177,  1197,   903,   904,  1441,   906,
    3179,   908,  3181,  2638,  2406,  3133,  2441,  2400,   620,  3628,
    3176,  1443,  2861,   909,  1949,  3602,  3674,  3675,  1408,  1686,
    -620,   902,  1448,  1872,  1749,   505,  1453,  1459,   947,  1564,
    1565,  1566,  1465,  1467,  4086,  1469,  1472,  1477,  1473,  1480,
    1484,  1485,  1486,  1481,  2400,  1528,  1349,  1585,  1210,  1529,
    1218,  1219,  1220,  1221,  1222,  1223,  1224,  1225,  1530,  1533,
    1535,  2038,   123,  1536,  1350,  1554,  1210,  1228,  1556,  1560,
    1567,  1587,  1173,  1633,  1644,  1646,  1598,  2624,   262,  1648,
     264,  2073,  1652,  1645,  1684,  2039,   947,  2528,  2862,  1409,
    2528,  2528,  1694,  2898,  1703,  1719,  3729,  1725,  1745,  1753,
    1596,  1669,  1670,  2625,  1759,  1674,   620,  1752,  1295,  2528,
    -786,  1760,  1761,  1749,  1218,  1219,  1220,  1221,  1222,  1223,
    1224,  1225,  1756,  3243,  2898,  1688,  1689,  1762,  1763,  1764,
     124,  3246,  1765,  -628,  1766,  2898,  1768,  2401,  2898,  1769,
    3553,  1792,  1795,  1213,  2567,  1804,  1813,  1812,  1814,  1210,
    1815,  1820,  1823,  1410,  2402,  1824,  1825,  1834,  2626,  4296,
    3260,  2627, -2575,   610,  1839,  1848,  2403,  1852,  3317,  2628,
    1882,  1749,  1881,  1883,  2401,  1884,  1886,  1895,   494,  1897,
    1899,  1912,  3327,  1921,  2898,  3554,  2629,  2025,   125,  1516,
    1351,  2402,  2042, -1490,  2043,  2044,  3555,  2045,  2046,  3336,
    2047,  3323,  2997,  2403,  2066,  2048,  2049,  1038,  1039,  2050,
    2051,  2052,  2053,  3558,  3347,  1596,  2054,  2055,  -620,  3559,
    2458,   610,  3339,  1686,  2056,  2057,  2092,  2058,  3261,  2059,
    2060,  2061,  2062,  3360,  -620,  2456,  1213,  2084,  4086,  2085,
    2102,  2103,  3556,  2104,  2404,  1352, -1490,  2457,  2105,  2117,
    1296,  1113,  1163,  1167,  1213, -2575,  2119,  4133,  2120,  3560,
    2121,  2144,  2145,  1353,  2111,  1411,  3710,  1364,  2153,  2146,
    2151,  2152,  4382,  3467,  4384,  2155,  2166, -1490,  2170, -1490,
    2174,  2404,  2161,  2200,  2191,  2630,  3349,  3892,  2192,  2854,
    2197,  1215,  1216,  2863, -1490,  2201,  2212,  2213,  2227,  1412,
   -1490,  2214,  2234,  4402, -1179,   903,   904,   905,   906,   907,
     908,  3422,  3557,  1225,  2240, -1490,  2250,  3872,  3873,  2793,
    3875,  3876,   909, -1490, -1316,   508,  2272,  3561,  2279,  2297,
   -1490,  2306,  3852,  2312,  2315,  2792,   262,  1213,   264,  2318,
   -1490,  4434,  4435,  2747,  -620,  2349,  2350,  2365,  4321,   505,
    2377,  2379, -1490,  3842,  2381,  2382,  2405, -1490,  2408,  2386,
    2409,  2413,  2412,  2772,  3457,  2415, -1490,   620,  -786,  2419,
    2421,  2422,  2456,  3992,  2426,  2423,   620,  2424,  2425,  2468,
    2473,  3993,  2717,  2478,  2474,  2038,  2631,  2477,  2480,  2481,
    2487,  2489,   620,  2405,  2490,  2496,  2497,  2502,  2503,  2508,
    2369,  2509,  1215,  1216,  -620,  3994,  2516,  2532,  3933,  2039,
    2536,  2538,  2570,  2562,  4035,  2592,  2614,  2618,  2623,  2406,
    1687,  2649,  2650,  2610,  2661,  1210,  2651,  2258,  2662,  3562,
   -1490,  2674,  2528,  1218,  1219,  1220,  1221,  1222,  1223,  1224,
    1225,  2693,  2528,  2728,  2898,  2695,  2696,  2697,  4321,  2714,
   -1775,  2704, -1490,  1687,  2726,  2729,  2406,  2713,   504,  2898,
    2727,   610, -1490,  2528,  2730,  1038,  1039,  2742,  2739,  1686,
    2736,  3558,  2741,  2743,  2750,  2638,  2751,  3559,  1799,  1969,
    1970,  4003,  2754,  2755,  4454,  1215,  1216,  2756,  2762,  2775,
    2774,  2777,  1686,  2778, -1490,  2779,  1193,  1194,  2356,  1686,
    4326,  4327,  2357,  4329,  2797,  1686,  2116,  4465,  2796,  2819,
    2822,  2798,  -769,  -769,  4454,  1972,  2826,  3560,  2831,  2832,
    4465,  3995,  2833,  2849,  -769,  2856,  2632,  2184,  1220,  1221,
    1222,  1223,  1224,  1225,  2857,  1975,  2985,  1200,  1201,  2905,
    2907,   505, -1490,  1976,  2964,  3583,  1220,  1221,  1222,  1223,
    1224,  1225,  4372,  2974,  4373,  4374,  2994,  2995,  -620,  2978,
    2980,  3615,  3615,  3615, -1490,  3695,  1872,  1978,  3607,  2286,
    3003,  3004,  1202,  1914,  1997,  2999,  3029,  -817,   620,  2112,
    3038,  1459,  3043,  1203,  1979,  3561,  3049,  3051,  3052,  3053,
    2633,  2287,  2169,  3061,  3062,  3105,  2173,  3107,  3996,  1605,
    1606,  1607,  1608,  1609,  2288, -1490,  3109,  3114,  3117,  3118,
    3123,  3128,  1984,  1213,  3268,  2289,  3997,  4413,  2196,  2634,
    3135,  3130,  3138,  1204,  1317,   506,  4173,  3142,  1219,  1220,
    1221,  1222,  1223,  1224,  1225,  1205,  4003,  3160,  3148,  3157,
    3998,  3163,  3175,  2935,  3139,  2936,  3154,  3180,  3684,   508,
    3188,  3174,  3208,  1687,  3212,  2854,  4446,  3213,  3216,  3228,
    3229, -1490,  1206,  3240,  3325,  2290,  3318,  2291,   620,  3382,
    3227,  3249,  3383, -1490, -1490,   262,  3257,   264,  3321,  3324,
    3384,   676,  3258,  1987,  3259,  3329,  2937,  3562,  3331,  3335,
    3332,  1988,  3348, -1490,  2292, -1490,  3342,  3385,  1610,  1611,
    1612,  1613,  -443,  3343,  2333,  3351,  1989,  2938,  3362,   868,
    3615,  3357,  3358,  3359,  3379,  3400,  3397,  3401,  3408, -1490,
   -1490,  1207,  4243, -1490, -1490,  3852,  3426,  3746,  -620,  2638,
    3409,  3427,  1966,  3436,  3438,  3441,  3447,  4243,  4175,  1967,
    3386,  1968,  2939,  3449,  3460,  3476,  3468,   676,  3485,  3486,
    4253,  3741,  1969,  1970,  3477,   523,  2293,  3498,   620,  3506,
    1990,  1215,  1216,  3732,  3509,  3510,  3523,  3530,  3580,  2530,
     703,  3584,  3582,  3590,  3603,  3765,  3605,  3604,  1991,  3594,
    3608,  3609,  3611,  1971,  3784,  3625,  3621,  3622,  1972,  1973,
    3623,  3788,  3624,  3629,  3632,  1974,  3387,  3467,  3635,  3637,
    1614,  3648,  1615,  1616,  1617,  3639,   947,  3640,  1975,  3347,
    2294,  1618,   524,  3641,  3793,  3649,  1976,  3650,  3644,  3662,
     507,  3663,  3999,   707,  3672,  3679,  1977,  3680,  3677,  3732,
     708,  3178,   620,  1995,  3689,  1996,   703,  3691,  3696,   525,
    1978,   508,  3692,  1998,  3697,  3702,  3700,  3703,  3714,   820,
     821, -1405,  1195,  3727,  1459,  1196, -1410,  1979,   712,   713,
    3728,  3730,  3731,  1923,  1980,  1981,  3744,  3747,  3755,  3570,
    3759,  1982,  4243,  1210,   526,  3769,  4173,  1924,   509,  1983,
    3761,  -535,  4358,  -892,   510,  1984,  3771,  3770,  3772,   707,
    3773,  3776,  1619,  3775,  3388,  3795,   708,  3389,  3573,  3810,
     620,  3814,  3794,  1218,  1219,  1220,  1221,  1222,  1223,  1224,
    1225,  2004,  3813,  3817,  1985,  3631,  3821,  4170,  3864,  3822,
     511,  3825,   527,  3827,   712,   713,  3828,   721,   512,  3829,
    3840,  3615,  3615,  3841,  3615,  3615,  3860,  4392,  3862,  2940,
     822,  3855,  3844,  3845,  1620,  1621,  3880,  3856,   262,  3886,
     264,  3893,  3894,  2638,  1986,  3900,  1987,  4003,  4243,  3942,
    4243,  3957,  3934,  3967,  1988,  3968,  3972,  4412,  2005,   823,
     821,  3974,  3969,  3982,  3390,  3075,  3985,  4015,  4243,  1989,
    4038,  3899,   824,  2941,  2006,  4020,  4443,   732,  2007,  4017,
    4028,  -309,  4036,   721,  4056,  4058,  4059,  3898,  4368,  4065,
    3938,   610,   736,   737,  4069,   825,  4077,  2008,   826,  4076,
    4243,  4243,  3615,  4081,  4093,  4458,  4096,  4097,  4105,   827,
    4443,  4102,  4107,  4109,  4138,  2010,  2959,  4141,  -327,  4167,
    4168,  4169,  4189,  1990,  4204,  4216,  4220,  1925,  4186,  4192,
     828,  4221,  4222,  4223,   -65,   610,  4228,  4231,  3989,   528,
    4232,  1991,  4233,   732,  4239,  1992,   620,   893,   821,  4244,
     822,  1213,  4240,  4250,  3766,  4251,  3939,   829,   736,   737,
    4252,  4255,  4368,  4276,   830,   803,  4262,  4277,  4278,  4279,
    4287,  4288,  1622,  4297,  3024,  4292,  4029,  4299,  4301,   823,
   -2311,  4302,  4305,  4311,  1993,  1197,  1623,  1624,  4314,  1994,
    4325,  3391,   824,  4328,  4330,  4331,  1995,  4042,  1996,  1926,
    3983,  4333,  4049,  4346,   831,  1997,  1998,   529,  4359,  4362,
    4360,  4365, -1574,  4376,  4379,   825,  4380,  4381,   826,  4385,
    3392,  4386,  1038,  1039,  4390,  1927,  4393,  4396,  4398,   827,
    4401,  4399,  4471,  4405,  4407,  4410,  4411,  1999,   822,  4414,
    4418,  4422,  4424,  4432,  4431,  4455,  4468,  4051,  4459,  3592,
     828,  2000,  2001,  2002,  2003,  2721,  3593,  2869,  4071,  2561,
    3798,  1061,  4066,  4176,  4312,   530,  1471,   823,  4313,  3796,
    3800,   531,  4466,  4426,  2004,   756,  1687,   829,  3937,  3733,
     824,   578,  3734,   959,   830,  3162,  3911,  1928,  2341,  4436,
     532,  4343,  4203,   762,  4237,  4344,  3912,  4310,   764,  1215,
    1216,   765,  3914,   825,  4249,  3915,   826,  3917,  3918,  3864,
    3919,  3864,  3920,  4114,  3921,   533,  4248,   827,   803,  3922,
    3925,  3926,  3927,   803,   831,  1532,  1965,  2261,  4068,  2011,
    2520,  2005,   534,   832,  2036,  3253,  3141,   833,   828,  4142,
    3682,   756,  3440,  1802,  3146,  3733,  3685,  2006,  3734,  4191,
    4261,  2007,  4395,   834,  3984,  4324,  4367,  3735,  3736,   762,
     803,   835,  4104,  2069,   764,   829,  3804,   765,  4183,   836,
    2008,   663,   830,  2518,  3022,  2009,  1929,   803,  3340,  3522,
    2525,  3515,  2961,  4377,  4182,  3989,  3511,  4135,  2010,  3394,
    3538,  3579,  3888,  3774,   837,   620,  4188,  3764,  2719,  3474,
     519,  4209,  4120,   520,  4196,  4197,  4225,   838,   839,  4226,
    2101,  4073,   831,  4078,  4079,  2604,  3956,  3891,   803,   803,
     803,   803,  2522,  3735,  3736,  3513,  1439,  1012,  2949,  3743,
     803,  1898,  2759,  3512,  2324,  2397,  2737,  1251,  2034,  2067,
    3132,  1218,  1219,  1220,  1221,  1222,  1223,  1224,  1225,  3437,
    2780,  -892,   840,   832,  3425,  2692,  3932,   983,  1369,  2355,
    2639,  2641,  4323,  1643,  3482,  3116,  2844,  2691,  4022,  4285,
    1252,  3868,  4286,   834,  3591,  2711,  3517,  1915,  3199,  3865,
    1687,   835,  1586,   841,  1605,  1606,  1607,  1608,  1609,   836,
    3854,  2944,  4417,  2787,  1786,  2608,  2765,  2735,  1818,  3687,
    3453,   620,  3452,  2388,  3492,   842,  4258,   843,  4269,  4270,
     971,   803,  2110,  1079,   837,   955,  2985,  2985,  2389,  2273,
    1864,  3521,  1887,  1822,  4363,  3439,  4280,   838,   839,  4394,
    4467,  4332,  4470,  3768,  2366,  3456,  1837,  3478,  1253,  3196,
    3701,   832,  3857,  1829,   896,   894,  2311,  1356,  1779,  3973,
    3981,   898,  2091,  1361,   657,  1065,  3120,     0,  1066,  1067,
       0,   834,  1254,   658,     0,   620,  1255,     0,     0,   835,
       0,     0,   840,     0,     0,     0,     0,   836,     0,     0,
       0,     0,     0,  1610,  1611,  1612,  1613,     0,     0,     0,
       0,     0,  4348,     0,     0,     0,     0,     0,     0,  4356,
    1256,     0,   837,   841,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   838,   839,     0,     0,     0,
    1257,     0,     0,     0,     0,   842,     0,   843,     0,     0,
       0,     0,     0,     0,  1258,     0,     0,     0,     0,     0,
       0,     0,  4460,     0,     0,     0,     0,  4375,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     840,     0,     0,     0,     0,     0,     0,   803,     0,     0,
       0,     0,     0,     0,     0,  4403,     0,     0,     0,     0,
    4408,     0,  1259,     0,     0,  1614,     0,  1615,  1616,  1617,
       0,   841,     0,     0,     0,     0,  1618,     0,     0,     0,
       0,     0,     0,     0,  1260,     0,     0,     0,     0,     0,
       0,     0,     0,   842,     0,   843,     0,  4444,     0,     0,
       0,     0,     0,   803,   803,     0,  1687,     0,     0,     0,
       0,     0,   803,   803,   803,   803,   803,   803,   803,   803,
     803,   803,   803,   803,   803,   620,     0,     0,     0,  1687,
       0,  4444,   803,   803,     0,   803,  1687,   803,     0,     0,
       0,   803,  1687,     0,   803,   803,   803,   803,     0,   803,
     803,   803,     0,     0,     0,     0,     0,  1619,   803,   803,
       0,   803,   803,   803,   803,   803,     0,     0,   803,   803,
     803,   803,   803,   803,   803,   803,   803,   803,   803,     0,
       0,   803,   803,     0,     0,   803,     0,  1261,     0,   803,
       0,   803,   803,     0,     0,     0,  1262,     0,     0,     0,
       0,     0,     0,     0,     0,   803,   803,     0,     0,  1620,
    1621,  1263,  1493,   803,     0,     0,     0,     0,     0,     0,
     803,   803,   803,     0,   803,     0,     0,     0,     0,  1264,
       0,   803,   803,   803,     0,   803,   803,   803,   803,   803,
       0,   803,   803,   803,   803,   803,   803,   803,   803,     0,
       0,     0,   803,   803,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1265,  1266,
       0,     0,  1494,  1495,  1496,  1497,  1498,  1499,     0,  1500,
    1501,  1502,  1503,  1504,  1505,  1506,     0,  1507,  1508,     0,
       0,   915,     0,     0,  1267,     0,     0,     0,     0,     0,
       0,   872,   916,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   498,     0,     0,  1268,   499,     0,     0,
       0,     0,     0,     0,     0,     0,   917,   918,     0,   803,
       0,     0,     0,     0,   919,     0,     0,     0,     0,   920,
       0,     0,     0,     0,     0,     0,     0,  1622,     0,     0,
       0,     0,     0,     0,     0,  1087,     0,     0,     0,     0,
       0,  1623,  1624,     0,     0,  1269,   921,     0,   922,     0,
     923,     0,     0,     0,     0,     0,     0,     0,     0,   924,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   803,  1125,     0,     0,     0,     0,     0,     0,   803,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1143,
       0,     0,     0,     0,     0,  1509,  1510,     0,     0,     0,
       0,     0,     0,     0,     0, -1775,   925,     0,     0,     0,
       0,   926,     0,     0,   927,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1187,     0,     0,     0,     0,     0,     0,
     928,     0,   929,     1,     0,     2,     0,     0,     0,   930,
       0,   931,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     3,     0,     0,     0,     4,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   932,   933,   934,     5,
       6,  2024,     0,     0,     0,     0,     0,     7,     0,     0,
       0,     0,     8,     9,     0,     0,     0,     0,     0,   935,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    10,     0,     0,     0,     0,     0,
       0,   936,     0,  1316,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    11,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   937,     0,
       0,     0,     0,     0,    12,     0,     0,     0,     0,     0,
       0,     0,    13,    14,    15,     0,     0,     0,     0,     0,
     803,     0,     0,     0,    16,    17,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    18,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    19,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   938,     0,     0,    20,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    21,     0,     0,     0,     0,    22,     0,
     939,     0,    23,     0,     0,     0,     0,     0,     0,     0,
       0,   940,   941,     0,     0,   942,   943,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    24,     0,    25,
       0,     0,     0,     0,     0,     0,   944,     0,     0,  1492,
       0,     0,   803,   803,   803,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   803,     0,     0,     0,
       0,     0,     0,    27,     0,     0,     0,    28,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   945,
       0,     0,   803,     0,     0,     0,     0,     0,   803,     0,
       0,   803,   946,   803,     0,  1558,  1559,     0,     0,   803,
       0,   803,   803,     0,  1569,  1570,     0,     0,  1573,  1574,
    1575,  1578,  1579,  1580,  1581,  1582,  1583,     0, -2341,     0,
       0,     0,   947,     0,  1599,  1600,     0,  1601,     0,  1602,
       0,     0,     0,     0,     0,     0,  1635,  1636,  1637,  1638,
     948,   949,  1641,     0,     0,     0,     0,     0,     0,     0,
    1649,  1650,     0,  1653,  1654,     0,     0,     0,    29,     0,
    1658,  1659,  1660,     0,     0,  1663,  1664,  1665,  1666,  1667,
    1668,     0,   803,  1671,  1672,    30,     0,  1675,     0,    31,
       0,  1678,     0,  1682,  1683,     0,     0,     0,     0,   950,
      32,     0,     0,     0,     0,     0,     0,  1690,  1691,     0,
   -2341,    33,     0,     0,     0,  1699,     0,     0,   951,     0,
       0,     0,  1704,  1705,  1706,  1251,     0,     0,     0,     0,
       0,     0,     0,    34,     0,     0,    35,     0,    36,     0,
       0,    37,     0,     0,    38,    39,     0,     0,     0,     0,
       0,     0,    40,     0,    41,  1742,     0,     0,  1252,     0,
       0,    42,     0,     0,     0,     0,     0,    43,     0,     0,
       0,     0,     0,     0,     0,    44,     0,     0,     0,     0,
      45,     0,    46,     0,     0,    47,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      48,     0,     0,     0,    49,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1253,     0,     0,     0,
       0,  1789,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1254,     0,     0,     0,  1255,     0,     0,     0,     0,    50,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    51,     0,     0,     0,    52,     0,     0,    53,     0,
       0,     0,     0,     0,    54,     0,  2024,     0,  1256,     0,
       0,     0,     0,  1836,     0,     0,     0,     0,     0,     0,
       0,  1851,     0,     0,     0,     0,     0,     0,  1257,     0,
       0,     0,     0,    55,     0,     0,   803,     0,     0,    56,
       0,     0,  1258,     0,     0,     0,     0,     0,     0,    57,
       0,     0,     1,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     4,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     5,     6,
    1259,  2024,     0,     0,     0,     0,     7,     0,     0,     0,
       0,     8,     9,     0,     0,     0,     0,   803,     0,     0,
       0,   803,  1260,     0,     0,     0,   803,   803,     0,     0,
       0,     0,     0,    10,     0,   803,   803,     0,   803,   803,
     803,   803,     0,   803,     0,     0,   803,     0,     0,     0,
       0,     0,    11,     0,     0,     0,   803,     0,   803,   803,
       0,   803,   803,   803,   803,     0,   803,     0,     0,   803,
       0,     0,     0,    12,     0,     0,     0,     0,   803,     0,
       0,    13,    14,    15,     0,   803,     0,   803,     0,   803,
     803,   803,   803,    16,    17,     0,   803,   803,   803,     0,
       0,     0,   803,   803,   803,     0,   803,     0,   803,     0,
     803,     0,   803,     0,   803,     0,     0,     0,     0,   803,
      19,     0,  2122,     0,     0,  1261,     0,     0,     0,     0,
       0,     0,     0,     0,  1262,     0,    20,   803,     0,     0,
       0,     0,     0,     0,   803,     0,     0,   803,     0,  1263,
       0,     0,    21,   803,     0,     0,   803,    22,     0,     0,
     803,    23,     0,     0,     0,     0,     0,  1264,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    24,     0,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    26,     0,  1265,  1266,     0,     0,
       0,     0,     0,     0,     0,     0,   803,     0,     0,     0,
       0,     0,    27,  1969,  1970,     0,    28,     0,     0,     0,
       0,     0,  1267,     0,  2204,  2206,  2208,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1268,     0,  -769,  -769,     0,  1972,
       0,     0,     0,     0,     0,     0,     0,     0,  -769,     0,
       0,     0,     0,     0,  2242,     0,     0,     0,     0,  1975,
       0,     0,     0,  2247,     0,  2248,     0,  1976,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1269,     0,     0,     0,     0,     0,     0,
       0,  1978,     0,     0,     0,     0,     0,    29,     0,     0,
       0,     0,     0,     0,     0,  1459,     0,     0,  1979,     0,
       0,     0,  2867,     0,    30,     0,     0,     0,    31,     0,
    1969,  1970,     0,     0,     0,     0,     0,     0,     0,    32,
    2867,  2867,     0,     0,     0,     0,  1984,     0,     0,     0,
      33,     0,     0,     0,  2320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1972,     0,     0,     0,
       0,     0,    34,     0,     0,    35,     0,    36,     0,     0,
      37,     0,     0,    38,    39,     0,  1975,     0,     0,     0,
       0,    40,     0,    41,  1976,     0,     0,     0,     0,     0,
      42,     0,     0,     0,     0,     0,    43,     0,     0,   262,
       0,   264,  2024,     0,    44,     0,     0,  1987,  1978,    45,
       0,    46,     0,     0,    47,  1988,     0,     0,     0,     0,
       0,     0,  1459,     0,     0,  1979,     0,     0,     0,     0,
    1989,     0,     0,     0,     0,     0,     0,     0,     0,    48,
       0,     0,     0,    49,  2594,     0,     0,     0,  2867,  2867,
       0,     0,     0,  1984,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2024,     0,  1990,     0,     0,     0,    50,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   803,
      51,     0,  1991,   803,    52,     0,     0,    53,     0,     0,
       0,     0,     0,    54,     0,     0,   262,     0,   264,     0,
       0,     0,     0,     0,  1987,     0,     0,     0,     0,     0,
       0,     0,  1988,   803,   803,     0,     0,     0,     0,     0,
       0,     0,    55,     0,     0,     0,     0,  1989,    56,     0,
       0,     0,     0,   803,     0,     0,     0,  1995,    57,  1996,
       0,     0,   803,     0,   803,     0,   803,  1998,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2537,     0,
       0,     0,     0,     0,     0,     0,   803,     0,     0,     0,
       0,   803,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1990,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   803,     0,     0,     0,  1991,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2004,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2617,
       0,     0,     0,  2619,     0,     0,     0,     0,  2621,  2622,
       0,     0,     0,     0,     0,     0,     0,  1575,  2640,     0,
    1575,     0,  2643,  2644,  1995,  2645,  1996,     0,     0,     0,
       0,     0,   803,     0,  1998,     0,   803,     0,  2652,     0,
    2653,     0,  2005,  2655,  2656,  2657,  2658,     0,  2659,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2006,     0,
    2663,     0,  2007,     0,     0,     0,     0,  2664,     0,  2665,
       0,  2666,  2667,  2668,     0,     0,     0,     0,  2671,  2672,
    2673,  2008,     0,   803,  2675,  2676,  2677,     0,  2678,     0,
    2680,     0,  2682,     0,  2684,     0,  2685,     0,     0,  2010,
       0,  2686,  2004,     0,     0,     0,     0,  3262,  3263,     0,
       0,     0,     0,  3264,     0,  3265,     0,  3266,  3267,  2699,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3268,  2709,     0,     0,  2712,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2595,     0,     0,  2005,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2006,     0,     0,     0,  2007,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3269,
       0,     0,  3270,     0,     0,     0,     0,     0,  2008,     0,
    3271,     0,     0,     0,   803,   803,     0,     0,     0,     0,
       0,  2947,     0,     0,     0,     0,  2010,  3272,  1967,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2867,
       0,  1969,  1970,     0,  3273,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2024,  3274,     0,
    3275,     0,  1971,     0,     0,     0,     0,  1972,     0,     0,
     803,     0,     0,  3276,  3277,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1975,     0,     0,
       0,     0,     0,     0,     0,  1976,     0,     0,     0,     0,
       0,     0,     0,   803,   803,  1977,   803,     0,     0,     0,
       0,     0,     0,     0,     0,   803,  3278,     0,     0,  1978,
     803,     0,     0,   803,     0,   803,   803,     0,     0,     0,
       0,     0,     0,  1459,     0,     0,  1979,     0,     0,     0,
       0,     0,     0,  1980,     0,  3279,   803,     0,     0,     0,
    2948,     0,     0,     0,  3280,  3281,     0,  3282,  1983,     0,
       0,   803,     0,     0,  1984,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   803,  3283,  3284,  3285,
       0,     0,     0,  1985,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3286,  3287,  3288,     0,
       0,     0,     0,     0,  3289,     0,   803,  3290,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   262,     0,   264,
     803,     0,     0,  3291,  3292,  1987,     0,     0,     0,     0,
       0,     0,     0,  1988,     0,     0,     0,     0,     0,     0,
       0,   803,     0,     0,     0,     0,     0,     0,  1989,     0,
     803,     0,     0,     0,     0,     0,     0,     0,     0,  3293,
    3294,     0,     0,     0,     0,  1969,  1970,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3295,     0,     0,     0,     0,     0,
       0,  3034,     0,     0,     0,  3036,     0,     0,  -769,  -769,
       0,  1972,  1990,     0,     0,     0,     0,     0,     0,     0,
    -769,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1991,  1975,     0,     0,  1992,  3064,  3065,     0,     0,  1976,
       0,     0,  3569,     0,     0,  3296,     0,     0,     0,  3297,
       0,     0,     0,     0,     0,  3085,     0,     0,     0,     0,
       0,  3298,     0,  1978,  3095,     0,  3097,     0,  3099,     0,
       0,     0,     0,     0,     0,     0,     0,  1459,  1994,     0,
    1979,     0,     0,     0,     0,  1995,     0,  1996,     0,     0,
       0,     0,     0,     0,     0,  1998,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1984,     0,
       0,     0,     0,     0,     0,  3299,     0,  3129,  3300,     0,
       0,  3301,  3302,  3303,  3304,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2001,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2004,     0,  3305,  3306,     0,     0,     0,
       0,   262,     0,   264,     0,     0,     0,     0,     0,  1987,
       0,     0,     0,   803,  3186,     0,     0,  1988,  3190,     0,
       0,  3307,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1989,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2005,     0,   803,   803,     0,     0,     0,     0,     0,     0,
       0,   803,     0,     0,     0,  3222,  2006,     0,     0,     0,
    2007,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1990,     0,     0,  2008,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1991,     0,     0,  2010,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3569,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1995,
       0,  1996,     0,     0,     0,     0,     0,     0,     0,  1998,
       0,     0,     0,  2024,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3319,  3320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   803,     0,     0,     0,   803,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2004,     0,     0,
     803,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3365,     0,   803,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   803,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3403,  3404,     0,     0,     0,
       0,     0,     0,     0,  2005,     0,     0,  3411,     0,     0,
       0,     0,  3413,     0,     0,  3414,     0,  3415,  3416,     0,
    2006,     0,     0,     0,  2007,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2008,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3433,     0,     0,     0,     0,     0,     0,
    3929,  2010,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3433,     0,
    3955,     0,     0,     0,  3955,  3955,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   803,     0,     0,     0,     0,
       0,     0,  3479,   803,     0,     0,     0,     0,     0,     0,
       0,     0,   803,     0,   803,     0,     0,     0,     0,     0,
       0,     0,     0,  3433,     0,     0,     0,     0,     0,     0,
       0,     0,  3503,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   803,     0,     0,     0,     0,     0,  3929,
    3929,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3955,     0,     0,     0,     0,     0,
       0,     0,     0,  3955,     0,     0,     0,  3955,     0,     0,
       0,     0,   803,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   803,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3955,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   803,     0,   803,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   803,     0,  3929,  3929,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4184,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3433,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3955,     0,  3955,  3955,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3712,  3713,     0,   803,     0,  3929,
       0,     0,     0,  3222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3929,   803,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3929,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     803,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   803,  3929,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3929,  3929,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   803,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3222,     0,  3929,
       0,  3820,     0,     0,     0,     0,   803,     0,     0,  3929,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3433,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   803,  3222,     0,     0,     0,
       0,     0,  3929,     0,  3929,     0,     0,     0,     0,  3186,
       0,     0,     0,     0,  3929,     0,     0,     0,   803,     0,
       0,   803,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3929,     0,  3929,     0,  3929,     0,     0,
       0,     0,     0,     0,  3929,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3929,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3929,  3929,     0,     0,     0,     0,   803,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3929,  3929,     0,
       0,     0,  3929,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   803,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4009,     0,     0,     0,     0,
       0,     0,     0,     0,  4014,     0,  4016,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4037,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3222,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4136,     0,  4137,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4145,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4241,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4246,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3433,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4295,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4350,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4378,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4397,     0,     0,     0,   139,     0,   672,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   673,     0,   148,   149,   150,   151,   152,
     674,   154,     0,   155,     0,     0,   675,   156,   676,   677,
     678,   157,   679,     0,   158,   159,   160,  1679,   161,     0,
     162,   163,     0,     0,   164,   680,   681,   165,   166,  4445,
     167,   682,   683,   169,   170,     0,   171,   172,   173,   174,
     175,   684,   177,     0,   685,   179,   686,   687,   688,   689,
     690,   691,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   692,   200,
       0,   201,   693,   694,   202,     0,  3433,   203,   695,   696,
       0,   204,   697,   698,     0,   205,   206,   207,   699,   700,
     701,     0,     0,     0,     0,   702,   210,   703,     0,     0,
     704,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,   705,     0,   236,   237,   238,   706,
     707,   239,   240,     0,   241,   242,   243,   708,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   709,   251,   710,   253,     0,   254,     0,   711,     0,
     255,   256,   257,     0,   258,   712,   713,     0,   259,   260,
       0,     0,     0,   714,   262,   263,   264,   715,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,   716,
     270,   271,   717,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     718,     0,  1680,   281,     0,   719,   282,   283,     0,     0,
       0,     0,     0,   720,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,   721,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,   722,   306,   307,   308,
     309,   723,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   724,   317,     0,     0,   725,   319,   726,   320,
       0,   321,   727,   728,   729,   730,   731,   326,   327,   328,
     329,   330,   331,     0,   732,   332,   333,     0,     0,   334,
     335,   336,   337,   733,   734,   735,   338,   339,     0,   736,
     737,     0,   340,   341,   738,     0,   343,   344,   345,   346,
       0,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,   349,   350,   351,     0,   739,   352,     0,   353,   354,
     355,   356,   740,   358,   359,   360,   361,   741,   742,   364,
     743,     0,   365,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   744,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   390,
     391,   392,   745,   746,   393,     0,   394,     0,   395,   396,
       0,   397,   398,     0,     0,   747,   399,   400,   401,   402,
     403,   748,   405,   406,   407,   408,     0,   749,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   750,   751,   434,   435,     0,   436,
     437,   752,   439,   440,   441,   753,   754,   442,   443,   444,
     445,   755,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,   756,   453,   454,     0,   757,   758,   759,   760,
       0,     0,     0,     0,  1681,   459,   460,   461,     0,   761,
     762,   763,   463,   464,   465,   764,   466,   467,   765,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   766,   476,   477,     0,     0,   767,   768,
     769,   770,   478,     0,     0,   479,   771,     0,   772,   480,
     481,   482,   483,   484,   773,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,     0,   774,
       0,     0,     0,     0,   775,   776,     0,     0,     0,     0,
     777,   778,     0,     0,   779,   780,     0,     0,   781,   782,
     139,     0,   672,   141,   142,   143,   144,  3182,     0,   145,
       0,     0,     0,   146,     0,     0,   673,     0,   148,   149,
     150,   151,   152,   674,   154,     0,   155,     0,     0,  3183,
     156,   676,   677,   678,   157,   679,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,   680,   681,
     165,   166,     0,   167,   682,   683,   169,   170,     0,   171,
     172,   173,   174,   175,   684,   177,     0,   685,   179,   686,
     687,   688,   689,   690,   691,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   692,   200,     0,   201,   693,   694,   202,     0,     0,
     203,   695,   696,     0,   204,   697,   698,     0,   205,   206,
     207,   699,   700,   701,     0,     0,     0,     0,   702,   210,
     703,     0,     0,  3184,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,   705,     0,   236,
     237,   238,   706,   707,   239,   240,     0,   241,   242,   243,
     708,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   709,   251,   710,   253,     0,   254,
       0,   711,     0,   255,   256,   257,     0,   258,   712,   713,
       0,   259,   260,     0,     0,     0,   714,   262,   263,   264,
     715,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,   716,   270,   271,   717,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   718,     0,     0,   281,     0,   719,   282,
     283,     0,     0,     0,     0,     0,   720,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,   721,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,   722,
     306,   307,   308,   309,   723,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   724,   317,     0,     0,   725,
     319,   726,   320,     0,   321,   727,   728,   729,   730,   731,
     326,   327,   328,   329,   330,   331,     0,   732,   332,   333,
       0,     0,   334,   335,   336,   337,   733,   734,   735,   338,
     339,     0,   736,   737,     0,   340,   341,   738,  3185,   343,
     344,   345,   346,     0,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,   739,   352,
       0,   353,   354,   355,   356,   740,   358,   359,   360,   361,
     741,   742,   364,   743,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   744,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,   745,   746,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,   747,   399,
     400,   401,   402,   403,   748,   405,   406,   407,   408,     0,
     749,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,   750,   751,   434,
     435,     0,   436,   437,   752,   439,   440,   441,   753,   754,
     442,   443,   444,   445,   755,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,   756,   453,   454,     0,   757,
     758,   759,   760,     0,     0,     0,     0,     0,   459,   460,
     461,     0,   761,   762,   763,   463,   464,   465,   764,   466,
     467,   765,   468,   469,     0,   470,   471,     0,     0,   472,
       0,     0,   473,     0,   474,     0,   766,   476,   477,     0,
       0,   767,   768,   769,   770,   478,     0,     0,   479,   771,
       0,   772,   480,   481,   482,   483,   484,   773,     0,     0,
       0,     0,     0,     0,   486,   487,     0,   488,   489,   490,
       0,     0,   774,     0,     0,     0,     0,   775,   776,     0,
       0,     0,     0,   777,   778,     0,     0,   779,   780,     0,
       0,   781,   782,   139,     0,   672,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   673,
       0,   148,   149,   150,   151,   152,   674,   154,     0,   155,
       0,     0,   675,   156,   676,   677,   678,   157,   679,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,   680,   681,   165,   166,     0,   167,   682,   683,   169,
     170,     0,   171,   172,   173,   174,   175,   684,   177,     0,
     685,   179,   686,   687,   688,   689,   690,   691,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   692,   200,     0,   201,   693,   694,
     202,     0,     0,   203,   695,   696,     0,   204,   697,   698,
       0,   205,   206,   207,   699,   700,   701,     0,     0,     0,
       0,   702,   210,   703,     0,     0,   704,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     705,     0,   236,   237,   238,   706,   707,   239,   240,     0,
     241,   242,   243,   708,     0,   244,     0,     0,     0,   245,
    2203,   246,     0,   247,     0,   248,   249,   709,   251,   710,
     253,     0,   254,     0,   711,     0,   255,   256,   257,     0,
     258,   712,   713,     0,   259,   260,     0,     0,     0,   714,
     262,   263,   264,   715,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,   716,   270,   271,   717,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   718,     0,     0,   281,
       0,   719,   282,   283,     0,     0,     0,     0,     0,   720,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
     721,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,   722,   306,   307,   308,   309,   723,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   724,   317,
       0,     0,   725,   319,   726,   320,     0,   321,   727,   728,
     729,   730,   731,   326,   327,   328,   329,   330,   331,     0,
     732,   332,   333,     0,     0,   334,   335,   336,   337,   733,
     734,   735,   338,   339,     0,   736,   737,     0,   340,   341,
     738,     0,   343,   344,   345,   346,     0,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   350,   351,
       0,   739,   352,     0,   353,   354,   355,   356,   740,   358,
     359,   360,   361,   741,   742,   364,   743,     0,   365,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     744,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   390,   391,   392,   745,   746,
     393,     0,   394,     0,   395,   396,     0,   397,   398,     0,
       0,   747,   399,   400,   401,   402,   403,   748,   405,   406,
     407,   408,     0,   749,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     750,   751,   434,   435,     0,   436,   437,   752,   439,   440,
     441,   753,   754,   442,   443,   444,   445,   755,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,   756,   453,
     454,     0,   757,   758,   759,   760,     0,     0,     0,     0,
       0,   459,   460,   461,     0,   761,   762,   763,   463,   464,
     465,   764,   466,   467,   765,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   766,
     476,   477,     0,     0,   767,   768,   769,   770,   478,     0,
       0,   479,   771,     0,   772,   480,   481,   482,   483,   484,
     773,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,     0,   774,     0,     0,     0,     0,
     775,   776,     0,     0,     0,     0,   777,   778,     0,     0,
     779,   780,     0,     0,   781,   782,   139,     0,   672,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   673,     0,   148,   149,   150,   151,   152,   674,
     154,     0,   155,     0,     0,   675,   156,   676,   677,   678,
     157,   679,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,   680,   681,   165,   166,     0,   167,
     682,   683,   169,   170,     0,   171,   172,   173,   174,   175,
     684,   177,     0,   685,   179,   686,   687,   688,   689,   690,
     691,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   692,   200,     0,
     201,   693,   694,   202,     0,     0,   203,   695,   696,     0,
     204,   697,   698,     0,   205,   206,   207,   699,   700,   701,
       0,     0,     0,     0,   702,   210,   703,     0,     0,   704,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   705,     0,   236,   237,   238,   706,   707,
     239,   240,     0,   241,   242,   243,   708,     0,   244,     0,
       0,     0,   245,  2205,   246,     0,   247,     0,   248,   249,
     709,   251,   710,   253,     0,   254,     0,   711,     0,   255,
     256,   257,     0,   258,   712,   713,     0,   259,   260,     0,
       0,     0,   714,   262,   263,   264,   715,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,   716,   270,
     271,   717,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   718,
       0,     0,   281,     0,   719,   282,   283,     0,     0,     0,
       0,     0,   720,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,   721,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,   722,   306,   307,   308,   309,
     723,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   724,   317,     0,     0,   725,   319,   726,   320,     0,
     321,   727,   728,   729,   730,   731,   326,   327,   328,   329,
     330,   331,     0,   732,   332,   333,     0,     0,   334,   335,
     336,   337,   733,   734,   735,   338,   339,     0,   736,   737,
       0,   340,   341,   738,     0,   343,   344,   345,   346,     0,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,   739,   352,     0,   353,   354,   355,
     356,   740,   358,   359,   360,   361,   741,   742,   364,   743,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   744,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,   745,   746,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,   747,   399,   400,   401,   402,   403,
     748,   405,   406,   407,   408,     0,   749,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,     0,     0,     0,     0,     0,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,   750,   751,   434,   435,     0,   436,   437,
     752,   439,   440,   441,   753,   754,   442,   443,   444,   445,
     755,   446,   447,     0,   448,     0,   449,   450,   451,   452,
       0,   756,   453,   454,     0,   757,   758,   759,   760,     0,
       0,     0,     0,     0,   459,   460,   461,     0,   761,   762,
     763,   463,   464,   465,   764,   466,   467,   765,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   766,   476,   477,     0,     0,   767,   768,   769,
     770,   478,     0,     0,   479,   771,     0,   772,   480,   481,
     482,   483,   484,   773,     0,     0,     0,     0,     0,     0,
     486,   487,     0,   488,   489,   490,     0,     0,   774,     0,
       0,     0,     0,   775,   776,     0,     0,     0,     0,   777,
     778,     0,     0,   779,   780,     0,     0,   781,   782,   139,
       0,   672,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   673,     0,   148,   149,   150,
     151,   152,   674,   154,     0,   155,     0,     0,   675,   156,
     676,   677,   678,   157,   679,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,   680,   681,   165,
     166,     0,   167,   682,   683,   169,   170,     0,   171,   172,
     173,   174,   175,   684,   177,     0,   685,   179,   686,   687,
     688,   689,   690,   691,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     692,   200,     0,   201,   693,   694,   202,     0,     0,   203,
     695,   696,     0,   204,   697,   698,     0,   205,   206,   207,
     699,   700,   701,     0,     0,     0,     0,   702,   210,   703,
       0,     0,   704,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   705,     0,   236,   237,
     238,   706,   707,   239,   240,     0,   241,   242,   243,   708,
       0,   244,     0,     0,     0,   245,  2207,   246,     0,   247,
       0,   248,   249,   709,   251,   710,   253,     0,   254,     0,
     711,     0,   255,   256,   257,     0,   258,   712,   713,     0,
     259,   260,     0,     0,     0,   714,   262,   263,   264,   715,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,   716,   270,   271,   717,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   718,     0,     0,   281,     0,   719,   282,   283,
       0,     0,     0,     0,     0,   720,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,   721,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,   722,   306,
     307,   308,   309,   723,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   724,   317,     0,     0,   725,   319,
     726,   320,     0,   321,   727,   728,   729,   730,   731,   326,
     327,   328,   329,   330,   331,     0,   732,   332,   333,     0,
       0,   334,   335,   336,   337,   733,   734,   735,   338,   339,
       0,   736,   737,     0,   340,   341,   738,     0,   343,   344,
     345,   346,     0,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,   739,   352,     0,
     353,   354,   355,   356,   740,   358,   359,   360,   361,   741,
     742,   364,   743,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   744,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,   745,   746,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,   747,   399,   400,
     401,   402,   403,   748,   405,   406,   407,   408,     0,   749,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   750,   751,   434,   435,
       0,   436,   437,   752,   439,   440,   441,   753,   754,   442,
     443,   444,   445,   755,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,   756,   453,   454,     0,   757,   758,
     759,   760,     0,     0,     0,     0,     0,   459,   460,   461,
       0,   761,   762,   763,   463,   464,   465,   764,   466,   467,
     765,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   766,   476,   477,     0,     0,
     767,   768,   769,   770,   478,     0,     0,   479,   771,     0,
     772,   480,   481,   482,   483,   484,   773,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
       0,   774,     0,     0,     0,     0,   775,   776,     0,     0,
       0,     0,   777,   778,     0,     0,   779,   780,     0,     0,
     781,   782,   139,     0,   672,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   673,     0,
     148,   149,   150,   151,   152,   674,   154,     0,   155,     0,
       0,   675,   156,   676,   677,   678,   157,   679,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
     680,   681,   165,   166,     0,   167,   682,   683,   169,   170,
       0,   171,   172,   173,   174,   175,   684,   177,     0,   685,
     179,   686,   687,   688,   689,   690,   691,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   692,   200,     0,   201,   693,   694,   202,
       0,     0,   203,   695,   696,     0,   204,   697,   698,     0,
     205,   206,   207,   699,   700,   701,     0,     0,     0,     0,
     702,   210,   703,     0,     0,   704,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,   705,
       0,   236,   237,   238,   706,   707,   239,   240,     0,   241,
     242,   243,   708,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   709,   251,   710,   253,
       0,   254,     0,   711,     0,   255,   256,   257,     0,   258,
     712,   713,     0,   259,   260,     0,     0,     0,   714,   262,
     263,   264,   715,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,   716,   270,   271,   717,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   718,     0,     0,   281,     0,
     719,   282,   283,     0,     0,     0,     0,     0,   720,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,   721,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,   722,   306,   307,   308,   309,   723,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   724,   317,     0,
       0,   725,   319,   726,   320,     0,   321,   727,   728,   729,
     730,   731,   326,   327,   328,   329,   330,   331,     0,   732,
     332,   333,     0,     0,   334,   335,   336,   337,   733,   734,
     735,   338,   339,     0,   736,   737,     0,   340,   341,   738,
       0,   343,   344,   345,   346,     0,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
     739,   352,     0,   353,   354,   355,   356,   740,   358,   359,
     360,   361,   741,   742,   364,   743,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   744,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,   745,   746,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
     747,   399,   400,   401,   402,   403,   748,   405,   406,   407,
     408,     0,   749,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,     0,     0,     0,     0,     0,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   750,
     751,   434,   435,     0,   436,   437,   752,   439,   440,   441,
     753,   754,   442,   443,   444,   445,   755,   446,   447,     0,
     448,     0,   449,   450,   451,   452,     0,   756,   453,   454,
       0,   757,   758,   759,   760,     0,     0,     0,     0,     0,
     459,   460,   461,     0,   761,   762,   763,   463,   464,   465,
     764,   466,   467,   765,   468,   469,     0,   470,   471,     0,
       0,   472,     0,     0,   473,     0,   474,     0,   766,   476,
     477,     0,     0,   767,   768,   769,   770,   478,     0,     0,
     479,   771,     0,   772,   480,   481,   482,   483,   484,   773,
       0,     0,     0,     0,     0,     0,   486,   487,     0,   488,
     489,   490,     0,     0,   774,     0,     0,     0,     0,   775,
     776,     0,     0,     0,     0,   777,   778,     0,     0,   779,
     780,     0,     0,   781,   782,   139,     0,   672,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   673,     0,   148,   149,   150,   151,   152,   674,   154,
       0,   155,     0,     0,   675,   156,   676,   677,   678,   157,
     679,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,   680,   681,   165,   166,     0,   167,   682,
     683,   169,   170,     0,   171,   172,   173,   174,   175,   684,
     177,     0,   685,   179,   686,   687,   688,   689,   690,   691,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   692,   200,     0,   201,
     693,   694,   202,     0,     0,   203,   695,   696,     0,   204,
     697,   698,     0,   205,   206,   207,   699,   700,   701,     0,
       0,     0,     0,   702,   210,   703,     0,     0,   704,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,   705,     0,   236,   237,   238,   706,   707,   239,
     240,     0,   241,   242,   243,   708,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   709,
     251,   710,   253,     0,   254,     0,   711,     0,   255,   256,
     257,     0,   258,   712,   713,     0,   259,   260,     0,     0,
       0,   714,   262,   263,   264,   715,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,   716,   270,   271,
     717,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   718,     0,
       0,   281,     0,   719,   282,   283,     0,     0,     0,     0,
       0,   720,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   721,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,   722,   306,   307,   308,   309,   723,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     724,   317,     0,     0,   725,   319,   726,   320,     0,   321,
     727,   728,   729,   730,   731,   326,   327,   328,   329,   330,
     331,     0,   732,   332,   333,     0,     0,   334,   335,   336,
     337,   733,   734,   735,   338,   339,     0,   736,   737,     0,
     340,   341,   738,     0,   343,   344,   345,   346,     0,   347,
     348,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,   351,     0,   739,   352,     0,   353,   354,   355,   356,
     740,   358,   359,   360,   361,   741,   742,   364,   743,     0,
     365,   366,   367,     0,   368,     0,   369,   370,   371,   372,
     373,     0,   744,   375,   376,     0,     0,   377,     0,     0,
       0,   378,   379,   380,   381,   382,     0,     0,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   390,   391,   392,
     745,   746,   393,     0,   394,     0,   395,   396,     0,   397,
     398,     0,     0,   747,   399,   400,   401,   402,   403,   748,
     405,   406,   407,   408,     0,   749,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,   750,   751,   434,   435,     0,   436,   437,   752,
     439,   440,   441,   753,   754,   442,   443,   444,   445,   755,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
     756,   453,   454,     0,   757,   758,   759,   760,     0,     0,
       0,     0,     0,   459,   460,   461,     0,   761,   762,   763,
     463,   464,   465,   764,   466,   467,   765,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   766,   476,   477,     0,     0,   767,   768,   769,   770,
     478,     0,     0,   479,   771,     0,   772,   480,   481,   482,
     483,   484,   773,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,     0,   774,     0,     0,
       0,     0,   775,   776,     0,     0,     0,     0,   777,  1124,
       0,     0,   779,   780,     0,     0,   781,   782,   139,     0,
     672,   141,   142,   143,   144,  1713,     0,   145,     0,     0,
       0,  1714,     0,     0,   673,     0,   148,   149,   150,   151,
     152,   674,   154,     0,   155,     0,     0,   675,   156,   676,
     677,   678,   157,   679,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,   680,   681,   165,   166,
       0,   167,   682,   683,   169,   170,     0,   171,   172,   173,
     174,   175,   684,   177,     0,   685,   179,   686,   687,   688,
     689,   690,   691,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   692,
     200,     0,   201,   693,   694,   202,     0,     0,   203,   695,
     696,     0,   204,   697,   698,     0,   205,   206,   207,   699,
     700,   701,     0,     0,     0,     0,   702,   210,   703,     0,
       0,   704,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   705,     0,   236,   237,   238,
     706,   707,   239,   240,     0,   241,   242,   243,   708,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   709,   251,   710,   253,     0,   254,     0,   711,
       0,   255,   256,   257,     0,   258,   712,   713,     0,   259,
     260,     0,     0,     0,   714,   262,   263,   264,   715,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
     716,   270,   271,   717,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   718,     0,     0,   281,     0,   719,   282,   283,     0,
       0,     0,     0,     0,   720,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,   721,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,   722,   306,   307,
     308,   309,   723,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   724,   317,     0,     0,   725,   319,   726,
     320,     0,   321,   727,   728,   729,   730,   731,   326,   327,
     328,   329,   330,   331,     0,   732,   332,   333,     0,     0,
     334,   335,   336,   337,   733,     0,   735,   338,   339,     0,
     736,   737,     0,   340,   341,   738,     0,   343,   344,   345,
     346,     0,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,   739,   352,     0,   353,
     354,   355,   356,   740,   358,   359,   360,   361,   741,   742,
     364,   743,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   744,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,   745,   746,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,   747,   399,   400,   401,
     402,   403,   748,   405,   406,   407,   408,     0,   749,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,   750,   751,   434,   435,     0,
     436,   437,   752,   439,   440,   441,   753,   754,   442,   443,
     444,   445,   755,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,   756,   453,   454,     0,   757,   758,   759,
     760,     0,     0,     0,     0,     0,   459,   460,   461,     0,
     761,   762,   763,   463,   464,   465,   764,   466,   467,   765,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   766,   476,   477,     0,     0,   767,
     768,   769,   770,   478,     0,     0,   479,   771,     0,   772,
     480,   481,   482,   483,   484,   773,     0,     0,     0,     0,
       0,     0,   486,   487,     0,   488,   489,   490,     0,     0,
     774,     0,     0,     0,     0,   775,   776,     0,     0,     0,
       0,   777,   778,     0,     0,   779,   780,     0,     0,   781,
     782,   139,     0,   672,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   673,     0,   148,
     149,   150,   151,   152,   674,   154,     0,   155,     0,     0,
     675,   156,   676,   677,   678,   157,   679,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,   680,
     681,   165,   166,     0,   167,   682,   683,   169,   170,     0,
     171,   172,   173,   174,   175,   684,   177,     0,   685,   179,
     686,   687,   688,   689,   690,   691,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   692,   200,     0,   201,   693,   694,   202,     0,
       0,   203,   695,   696,     0,   204,   697,   698,     0,   205,
     206,   207,   699,   700,   701,     0,     0,     0,     0,   702,
     210,   703,     0,     0,   704,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   705,     0,
     236,   237,   238,   706,   707,   239,   240,     0,   241,   242,
     243,   708,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   709,   251,   710,   253,     0,
     254,     0,   711,     0,   255,   256,   257,     0,   258,   712,
     713,     0,   259,   260,     0,     0,     0,   714,   262,   263,
     264,   715,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,   716,   270,   271,   717,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   718,     0,     0,   281,     0,   719,
     282,   283,     0,     0,     0,     0,     0,   720,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,   721,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
     722,   306,   307,   308,   309,   723,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   724,   317,     0,     0,
     725,   319,   726,   320,     0,   321,   727,   728,   729,   730,
     731,   326,   327,   328,   329,   330,   331,     0,   732,   332,
     333,     0,     0,   334,   335,   336,   337,   733,   734,   735,
     338,   339,     0,   736,   737,     0,   340,   341,   738,     0,
     343,   344,   345,   346,     0,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   350,   351,     0,   739,
     352,     0,   353,   354,   355,   356,   740,   358,   359,   360,
     361,   741,   742,   364,   743,     0,   365,   366,   367,     0,
     368,     0,   369,   370,   371,   372,   373,     0,   744,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   390,   391,   392,   745,   746,   393,     0,
     394,     0,   395,   396,     0,   397,   398,     0,     0,   747,
     399,   400,   401,   402,   403,   748,   405,   406,   407,   408,
       0,   749,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,   750,   751,
     434,   435,     0,   436,   437,   752,   439,   440,   441,   753,
     754,   442,   443,   444,   445,   755,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,   756,   453,   454,     0,
     757,   758,   759,   760,     0,     0,     0,     0,     0,   459,
     460,   461,     0,   761,   762,   763,   463,   464,   465,   764,
     466,   467,   765,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,  1788,   476,   477,
       0,     0,   767,   768,   769,   770,   478,     0,     0,   479,
     771,     0,   772,   480,   481,   482,   483,   484,   773,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,     0,   774,     0,     0,     0,     0,   775,   776,
       0,     0,     0,     0,   777,   778,     0,     0,   779,   780,
       0,     0,   781,   782,   139,     0,   672,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     673,     0,   148,   149,   150,   151,   152,   674,   154,     0,
     155,     0,     0,   675,   156,   676,   677,   678,   157,   679,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,   680,   681,   165,   166,     0,   167,   682,   683,
     169,   170,     0,   171,   172,   173,   174,   175,   684,   177,
       0,   685,   179,   686,   687,   688,   689,   690,   691,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   692,   200,     0,   201,   693,
     694,   202,     0,     0,   203,   695,   696,     0,   204,   697,
     698,     0,   205,   206,   207,   699,   700,   701,     0,     0,
       0,     0,   702,   210,   703,     0,     0,   704,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,   705,     0,   236,   237,   238,   706,   707,   239,   240,
       0,   241,   242,   243,   708,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   709,   251,
     710,   253,     0,   254,     0,   711,     0,   255,   256,   257,
       0,   258,   712,   713,     0,   259,   260,     0,     0,     0,
     714,   262,   263,   264,   715,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,   716,   270,   271,  2616,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   718,     0,     0,
     281,     0,   719,   282,   283,     0,     0,     0,     0,     0,
     720,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,   721,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,   722,   306,   307,   308,   309,   723,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   724,
     317,     0,     0,   725,   319,   726,   320,     0,   321,   727,
     728,   729,   730,   731,   326,   327,   328,   329,   330,   331,
       0,   732,   332,   333,     0,     0,   334,   335,   336,   337,
     733,   734,   735,   338,   339,     0,   736,   737,     0,   340,
     341,   738,     0,   343,   344,   345,   346,     0,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,   739,   352,     0,   353,   354,   355,   356,   740,
     358,   359,   360,   361,   741,   742,   364,   743,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   744,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,   745,
     746,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,   747,   399,   400,   401,   402,   403,   748,   405,
     406,   407,   408,     0,   749,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,   750,   751,   434,   435,     0,   436,   437,   752,   439,
     440,   441,   753,   754,   442,   443,   444,   445,   755,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,   756,
     453,   454,     0,   757,   758,   759,   760,     0,     0,     0,
       0,     0,   459,   460,   461,     0,   761,   762,   763,   463,
     464,   465,   764,   466,   467,   765,   468,   469,     0,   470,
     471,     0,     0,   472,     0,     0,   473,     0,   474,     0,
     766,   476,   477,     0,     0,   767,   768,   769,   770,   478,
       0,     0,   479,   771,     0,   772,   480,   481,   482,   483,
     484,   773,     0,     0,     0,     0,     0,     0,   486,   487,
       0,   488,   489,   490,     0,     0,   774,     0,     0,     0,
       0,   775,   776,     0,     0,     0,     0,   777,   778,     0,
       0,   779,   780,     0,     0,   781,   782,   139,     0,   672,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   673,     0,   148,   149,   150,   151,   152,
     674,   154,     0,   155,     0,     0,   675,   156,   676,   677,
     678,   157,   679,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,   680,   681,   165,   166,     0,
     167,   682,   683,   169,   170,     0,   171,   172,   173,   174,
     175,   684,   177,     0,   685,   179,   686,   687,   688,   689,
     690,   691,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   692,   200,
       0,   201,   693,   694,   202,     0,     0,   203,   695,   696,
       0,   204,   697,   698,     0,   205,   206,   207,   699,   700,
     701,     0,     0,     0,     0,   702,   210,   703,     0,     0,
     704,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,   705,     0,   236,   237,   238,   706,
     707,   239,   240,     0,   241,   242,   243,   708,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   709,   251,   710,   253,     0,   254,     0,   711,     0,
     255,   256,   257,     0,   258,   712,   713,     0,   259,   260,
       0,     0,     0,   714,   262,   263,   264,   715,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,   716,
     270,   271,  2670,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     718,     0,     0,   281,     0,   719,   282,   283,     0,     0,
       0,     0,     0,   720,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,   721,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,   722,   306,   307,   308,
     309,   723,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   724,   317,     0,     0,   725,   319,   726,   320,
       0,   321,   727,   728,   729,   730,   731,   326,   327,   328,
     329,   330,   331,     0,   732,   332,   333,     0,     0,   334,
     335,   336,   337,   733,   734,   735,   338,   339,     0,   736,
     737,     0,   340,   341,   738,     0,   343,   344,   345,   346,
       0,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,   349,   350,   351,     0,   739,   352,     0,   353,   354,
     355,   356,   740,   358,   359,   360,   361,   741,   742,   364,
     743,     0,   365,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   744,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   390,
     391,   392,   745,   746,   393,     0,   394,     0,   395,   396,
       0,   397,   398,     0,     0,   747,   399,   400,   401,   402,
     403,   748,   405,   406,   407,   408,     0,   749,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   750,   751,   434,   435,     0,   436,
     437,   752,   439,   440,   441,   753,   754,   442,   443,   444,
     445,   755,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,   756,   453,   454,     0,   757,   758,   759,   760,
       0,     0,     0,     0,     0,   459,   460,   461,     0,   761,
     762,   763,   463,   464,   465,   764,   466,   467,   765,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   766,   476,   477,     0,     0,   767,   768,
     769,   770,   478,     0,     0,   479,   771,     0,   772,   480,
     481,   482,   483,   484,   773,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,     0,   774,
       0,     0,     0,     0,   775,   776,     0,     0,     0,     0,
     777,   778,     0,     0,   779,   780,     0,     0,   781,   782,
     139,     0,   672,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   673,     0,   148,   149,
     150,   151,   152,   674,   154,     0,   155,     0,     0,   675,
     156,   676,   677,   678,   157,   679,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,   680,   681,
     165,   166,     0,   167,   682,   683,   169,   170,     0,   171,
     172,   173,   174,   175,   684,   177,     0,   685,   179,   686,
     687,   688,   689,   690,   691,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   692,   200,     0,   201,   693,   694,   202,     0,     0,
     203,   695,   696,     0,   204,   697,   698,     0,   205,   206,
     207,   699,   700,   701,     0,     0,     0,     0,   702,   210,
     703,     0,     0,  3432,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,   705,     0,   236,
     237,   238,   706,   707,   239,   240,     0,   241,   242,   243,
     708,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   709,   251,   710,   253,     0,   254,
       0,   711,     0,   255,   256,   257,     0,   258,   712,   713,
       0,   259,   260,     0,     0,     0,   714,   262,   263,   264,
     715,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,   716,   270,   271,   717,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   718,     0,     0,   281,     0,   719,   282,
     283,     0,     0,     0,     0,     0,   720,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,   721,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,   722,
     306,   307,   308,   309,   723,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   724,   317,     0,     0,   725,
     319,   726,   320,     0,   321,   727,   728,   729,   730,   731,
     326,   327,   328,   329,   330,   331,     0,   732,   332,   333,
       0,     0,   334,   335,   336,   337,   733,   734,   735,   338,
     339,     0,   736,   737,     0,   340,   341,   738,     0,   343,
     344,   345,   346,     0,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,   739,   352,
       0,   353,   354,   355,   356,   740,   358,   359,   360,   361,
     741,   742,   364,   743,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   744,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,   745,   746,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,   747,   399,
     400,   401,   402,   403,   748,   405,   406,   407,   408,     0,
     749,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,   750,   751,   434,
     435,     0,   436,   437,   752,   439,   440,   441,   753,   754,
     442,   443,   444,   445,   755,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,   756,   453,   454,     0,   757,
     758,   759,   760,     0,     0,     0,     0,     0,   459,   460,
     461,     0,   761,   762,   763,   463,   464,   465,   764,   466,
     467,   765,   468,   469,     0,   470,   471,     0,     0,   472,
       0,     0,   473,     0,   474,     0,   766,   476,   477,     0,
       0,   767,   768,   769,   770,   478,     0,     0,   479,   771,
       0,   772,   480,   481,   482,   483,   484,   773,     0,     0,
       0,     0,     0,     0,   486,   487,     0,   488,   489,   490,
       0,     0,   774,     0,     0,     0,     0,   775,   776,     0,
       0,     0,     0,   777,   778,     0,     0,   779,   780,     0,
       0,   781,   782,   139,     0,   672,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   673,
       0,   148,   149,   150,   151,   152,   674,   154,     0,   155,
       0,     0,   675,   156,   676,   677,   678,   157,   679,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,   680,   681,   165,   166,     0,   167,   682,   683,   169,
     170,     0,   171,   172,   173,   174,   175,   684,   177,     0,
     685,   179,   686,   687,   688,   689,   690,   691,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   692,   200,     0,   201,   693,   694,
     202,     0,     0,   203,   695,   696,     0,   204,   697,   698,
       0,   205,   206,   207,   699,   700,   701,     0,     0,     0,
       0,   702,   210,   703,     0,     0,   704,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     705,     0,   236,   237,   238,   706,   707,   239,   240,     0,
     241,   242,   243,   708,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   709,   251,   710,
     253,     0,   254,     0,   711,     0,   255,   256,   257,     0,
     258,   712,   713,     0,   259,   260,     0,     0,     0,   714,
     262,   263,   264,   715,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,   716,   270,   271,   717,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   718,     0,     0,   281,
       0,   719,   282,   283,     0,     0,     0,     0,     0,   720,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
     721,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,   722,   306,   307,   308,   309,   723,   310,   311,
    4318,     0,     0,     0,   312,   313,   314,   315,   724,   317,
       0,     0,   725,   319,   726,   320,     0,   321,   727,   728,
     729,   730,   731,   326,   327,   328,   329,   330,   331,     0,
     732,   332,   333,     0,     0,   334,   335,   336,   337,   733,
       0,   735,   338,   339,     0,   736,   737,     0,   340,   341,
     738,     0,   343,   344,   345,   346,     0,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   350,   351,
       0,   739,   352,     0,   353,   354,   355,   356,   740,   358,
     359,   360,   361,   741,   742,   364,   743,     0,   365,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     744,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   390,   391,   392,   745,   746,
     393,     0,   394,     0,   395,   396,     0,   397,   398,     0,
       0,   747,   399,   400,   401,   402,   403,   748,   405,   406,
     407,   408,     0,   749,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     750,   751,   434,   435,     0,   436,   437,   752,   439,   440,
     441,   753,   754,   442,   443,   444,   445,   755,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,   756,   453,
     454,     0,   757,   758,   759,   760,     0,     0,     0,     0,
       0,   459,   460,   461,     0,   761,   762,   763,   463,   464,
     465,   764,   466,   467,   765,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   766,
     476,   477,     0,     0,   767,   768,   769,   770,   478,     0,
       0,   479,   771,     0,   772,   480,   481,   482,   483,   484,
     773,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,     0,   774,     0,     0,     0,     0,
     775,   776,     0,     0,     0,     0,   777,   778,     0,     0,
     779,   780,     0,     0,   781,   782,   139,     0,   672,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   673,     0,   148,   149,   150,   151,   152,   674,
     154,     0,   155,     0,     0,   675,   156,   676,   677,   678,
     157,   679,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,   680,   681,   165,   166,     0,   167,
     682,   683,   169,   170,     0,   171,   172,   173,   174,   175,
     684,   177,     0,   685,   179,   686,   687,   688,   689,   690,
     691,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   692,   200,     0,
     201,   693,   694,   202,     0,     0,   203,   695,   696,     0,
     204,   697,   698,     0,   205,   206,   207,   699,   700,   701,
       0,     0,     0,     0,   702,   210,   703,     0,     0,   704,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   705,     0,   236,   237,   238,   706,   707,
     239,   240,     0,   241,   242,   243,   708,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     709,   251,   710,   253,     0,   254,     0,   711,     0,   255,
     256,   257,     0,   258,   712,   713,     0,   259,   260,     0,
       0,     0,   714,   262,   263,   264,   715,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,   716,   270,
     271,   717,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   718,
       0,     0,   281,     0,   719,   282,   283,     0,     0,     0,
       0,     0,   720,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,   721,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,   722,   306,   307,   308,   309,
     723,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   724,   317,     0,     0,   725,   319,   726,   320,     0,
     321,   727,   728,   729,   730,   731,   326,   327,   328,   329,
     330,   331,     0,   732,   332,   333,     0,     0,   334,   335,
     336,   337,   733,     0,   735,   338,   339,     0,   736,   737,
       0,   340,   341,   738,     0,   343,   344,   345,   346,     0,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,   739,   352,     0,   353,   354,   355,
     356,   740,   358,   359,   360,   361,   741,   742,   364,   743,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   744,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,   745,   746,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,   747,   399,   400,   401,   402,   403,
     748,   405,   406,   407,   408,     0,   749,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,     0,     0,     0,     0,     0,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,   750,   751,   434,   435,     0,   436,   437,
     752,   439,   440,   441,   753,   754,   442,   443,   444,   445,
     755,   446,   447,     0,   448,     0,   449,   450,   451,   452,
       0,   756,   453,   454,     0,   757,   758,   759,   760,     0,
       0,     0,     0,     0,   459,   460,   461,     0,   761,   762,
     763,   463,   464,   465,   764,   466,   467,   765,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   766,   476,   477,     0,     0,   767,   768,   769,
     770,   478,     0,     0,   479,   771,     0,   772,   480,   481,
     482,   483,   484,   773,     0,     0,     0,     0,     0,     0,
     486,   487,     0,   488,   489,   490,     0,     0,   774,     0,
       0,     0,     0,   775,   776,     0,     0,     0,     0,   777,
     778,     0,     0,   779,   780,     0,     0,   781,   782,   139,
       0,   672,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   673,     0,   148,   149,   150,
     151,   152,   674,   154,     0,   155,     0,     0,   675,   156,
     676,   677,   678,   157,   679,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,   680,   681,   165,
     166,     0,   167,   682,   683,   169,   170,     0,   171,   172,
     173,   174,   175,   684,   177,     0,   685,   179,   686,   687,
     688,   689,   690,   691,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     692,   200,     0,   201,   693,   694,   202,     0,     0,   203,
     695,   696,     0,   204,   697,   698,     0,   205,   206,   207,
     699,   700,   701,     0,     0,     0,     0,   702,   210,   703,
       0,     0,   704,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   705,     0,   236,   237,
     238,   706,   707,   239,   240,     0,   241,   242,   243,   708,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   709,   251,   710,   253,     0,   254,     0,
     711,     0,   255,   256,   257,     0,   258,   712,   713,     0,
     259,   260,     0,     0,     0,   714,   262,   263,   264,   715,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,   716,   270,   271,  1728,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   718,     0,     0,   281,     0,   719,   282,   283,
       0,     0,     0,     0,     0,   720,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,   721,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,   722,   306,
     307,   308,   309,   723,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   724,   317,     0,     0,   725,   319,
     726,   320,     0,   321,   727,   728,   729,   730,   731,   326,
     327,   328,   329,   330,   331,     0,   732,   332,   333,     0,
       0,   334,   335,   336,   337,   733,     0,   735,   338,   339,
       0,   736,   737,     0,   340,   341,   738,     0,   343,   344,
     345,   346,     0,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,   739,   352,     0,
     353,   354,   355,   356,   740,   358,   359,   360,   361,   741,
     742,   364,   743,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   744,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,   745,   746,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,   747,   399,   400,
     401,   402,   403,   748,   405,   406,   407,   408,     0,   749,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   750,   751,   434,   435,
       0,   436,   437,   752,   439,   440,   441,   753,   754,   442,
     443,   444,   445,   755,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,   756,   453,   454,     0,   757,   758,
     759,   760,     0,     0,     0,     0,     0,   459,   460,   461,
       0,   761,   762,   763,   463,   464,   465,   764,   466,   467,
     765,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   766,   476,   477,     0,     0,
     767,   768,   769,   770,   478,     0,     0,   479,   771,     0,
     772,   480,   481,   482,   483,   484,   773,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
       0,   774,     0,     0,     0,     0,   775,   776,     0,     0,
       0,     0,   777,   778,     0,     0,   779,   780,     0,     0,
     781,   782,   139,     0,   672,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   673,     0,
     148,   149,   150,   151,   152,   674,   154,     0,   155,     0,
       0,   675,   156,   676,   677,   678,   157,   679,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
     680,   681,   165,   166,     0,   167,   682,   683,   169,   170,
       0,   171,   172,   173,   174,   175,   684,   177,     0,   685,
     179,   686,   687,   688,   689,   690,   691,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   692,   200,     0,   201,   693,   694,   202,
       0,     0,   203,   695,   696,     0,   204,   697,   698,     0,
     205,   206,   207,   699,   700,   701,     0,     0,     0,     0,
     702,   210,   703,     0,     0,   704,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,   705,
       0,   236,   237,   238,   706,   707,   239,   240,     0,   241,
     242,   243,   708,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   709,   251,   710,   253,
       0,   254,     0,   711,     0,   255,   256,   257,     0,   258,
     712,   713,     0,   259,   260,     0,     0,     0,   714,   262,
     263,   264,   715,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,   716,   270,   271,  1730,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   718,     0,     0,   281,     0,
     719,   282,   283,     0,     0,     0,     0,     0,   720,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,   721,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,   722,   306,   307,   308,   309,   723,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   724,   317,     0,
       0,   725,   319,   726,   320,     0,   321,   727,   728,   729,
     730,   731,   326,   327,   328,   329,   330,   331,     0,   732,
     332,   333,     0,     0,   334,   335,   336,   337,   733,     0,
     735,   338,   339,     0,   736,   737,     0,   340,   341,   738,
       0,   343,   344,   345,   346,     0,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
     739,   352,     0,   353,   354,   355,   356,   740,   358,   359,
     360,   361,   741,   742,   364,   743,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   744,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,   745,   746,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
     747,   399,   400,   401,   402,   403,   748,   405,   406,   407,
     408,     0,   749,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,     0,     0,     0,     0,     0,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   750,
     751,   434,   435,     0,   436,   437,   752,   439,   440,   441,
     753,   754,   442,   443,   444,   445,   755,   446,   447,     0,
     448,     0,   449,   450,   451,   452,     0,   756,   453,   454,
       0,   757,   758,   759,   760,     0,     0,     0,     0,     0,
     459,   460,   461,     0,   761,   762,   763,   463,   464,   465,
     764,   466,   467,   765,   468,   469,     0,   470,   471,     0,
       0,   472,     0,     0,   473,     0,   474,     0,   766,   476,
     477,     0,     0,   767,   768,   769,   770,   478,     0,     0,
     479,   771,     0,   772,   480,   481,   482,   483,   484,   773,
       0,     0,     0,     0,     0,     0,   486,   487,     0,   488,
     489,   490,     0,     0,   774,     0,     0,     0,     0,   775,
     776,     0,     0,     0,     0,   777,   778,     0,     0,   779,
     780,     0,     0,   781,   782,   139,     0,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,   676,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,  2342,     0,
       0,     0,     0,   209,   210,   703,     0,     0,     0,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,   707,   239,
     240,     0,   241,   242,   243,   708,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,   712,   713,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   721,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   732,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,   736,   737,     0,
     340,   341,   342,     0,   343,   344,   345,   346,     0,   347,
     348,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,   351,     0,     0,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,     0,   368,     0,   369,   370,   371,   372,
     373,     0,   374,   375,   376,     0,     0,   377,     0,     0,
       0,   378,   379,   380,   381,   382,     0,     0,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,   394,     0,   395,   396,     0,   397,
     398,     0,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
     756,   453,   454,     0,  2343,   456,   457,  2344,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,   762,   462,
     463,   464,   465,   764,   466,   467,   765,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,     0,   491,     0,     0,
       0,     0,   139,     0,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,   781,   782,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,  2457,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,   505,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,  2038,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,  2039,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,  3017,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,     0,     0,
       0,   338,   339,     0,     0,     0,     0,   340,   341,   342,
       0,   343,   344,   345,   346,     0,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
       0,   352,     0,   353,   354,   355,  3018,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,  -439,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,   508,     0,     0,     0,     0,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,     0,
       0,   434,   435,     0,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,     0,   446,   447,     0,
     448,     0,   449,   450,   451,   452,     0,     0,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,   461,     0,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,   469,     0,   470,   471,     0,
       0,   472,     0,     0,   473,     0,   474,     0,   475,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,   485,
       0,     0,     0,     0,     0,     0,   486,   487,     0,   488,
     489,   490,     0,     0,   491,     0,     0,   139,     0,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,  2524,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,  2457,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,   210,     0,     0,     0,
       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,   505,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
     255,   256,   257,     0,   258,     0,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,  2038,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,  2039,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,   338,   339,     0,     0,
       0,     0,   340,   341,   342,     0,   343,   344,   345,   346,
       0,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,   349,   350,   351,     0,     0,   352,     0,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   374,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   390,
     391,   392,     0,     0,   393,     0,   394,     0,   395,   396,
       0,   397,   398,     0,     0,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,   508,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,     0,     0,   434,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,     0,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,   462,   463,   464,   465,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,     0,   491,
       0,     0,   139,     0,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,  2524,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,     0,     0,
       0,   338,   339,     0,     0,     0,     0,   340,   341,   342,
       0,   343,   344,   345,   346,     0,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
       0,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,  2333,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,     0,     0,     0,     0,     0,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,     0,
       0,   434,   435,     0,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,     0,   446,   447,     0,
     448,     0,   449,   450,   451,   452,     0,     0,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,   461,     0,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,   469,     0,   470,   471,     0,
       0,   472,     0,     0,   473,     0,   474,     0,   475,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,   485,
       0,     0,     0,     0,     0,     0,   486,   487,     0,   488,
     489,   490,     0,     0,   491,     0,     0,   139,     0,   140,
     141,   142,   143,   144,     0,     0,   145,  2766,     0,     0,
     146,     0,     0,   147,   782,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,   210,     0,     0,     0,
       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
     255,   256,   257,     0,   258,     0,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,   338,   339,     0,     0,
       0,     0,   340,   341,   342,     0,   343,   344,   345,   346,
       0,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,   349,   350,   351,     0,     0,   352,     0,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   374,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   390,
     391,   392,     0,     0,   393,     0,   394,     0,   395,   396,
       0,   397,   398,     0,     0,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,     0,     0,   434,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,     0,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,   462,   463,   464,   465,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,     0,   491,
       0,     0,     0,     0,   139,     0,   140,   141,   142,   143,
     144,     0,  4450,   145,     0,     0,     0,   146,  4451,   782,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,   338,   339,     0,     0,     0,     0,   340,
     341,   342,     0,   343,   344,   345,   346,     0,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,     0,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,     0,     0,   434,   435,     0,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,     0,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,   469,     0,   470,
     471,     0,     0,   472,     0,     0,   473,     0,   474,     0,
     475,   476,   477,     0,     0,     0,     0,     0,     0,   478,
       0,     0,   479,     0,     0,     0,   480,   481,   482,   483,
     484,   485,     0,     0,     0,     0,     0,     0,   486,   487,
       0,   488,   489,   490,     0,     0,   491,     0,     0,     0,
       0,   139,     0,   140,   141,   142,   143,   144,  1129,     0,
     145,     0,     0,     0,   146,     0,   782,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,  1334,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,     0,     0,     0,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   350,   351,     0,     0,
     352,     0,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,     0,
     368,     0,   369,   370,   371,   372,   373,     0,   374,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
     394,     0,   395,   396,     0,   397,   398,     0,     0,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,     0,   491,     0,     0,   139,     0,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,   539,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,   332,   333,     0,     0,   334,   335,
     336,   337,     0,     0,     0,   338,   339,     0,     0,     0,
       0,   340,   341,   342,     0,   343,   344,   345,   346,     0,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,     0,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   374,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,     0,     0,     0,     0,     0,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,     0,     0,   434,   435,     0,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
       0,   446,   447,     0,   448,     0,   449,   450,   451,   452,
       0,     0,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,   461,     0,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   475,   476,   477,     0,     0,     0,     0,     0,
       0,   478,     0,     0,   479,     0,     0,     0,   480,   481,
     482,   483,   484,   485,     0,     0,     0,     0,     0,     0,
     486,   487,     0,   488,   489,   490,     0,     0,   491,     0,
       0,     0,     0,     0,   139,  2280,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,   539,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,   338,   339,     0,     0,     0,     0,   340,
     341,   342,     0,   343,   344,   345,   346,     0,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,     0,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,     0,     0,   434,   435,     0,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,     0,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,   469,     0,   470,
     471,     0,     0,   472,     0,     0,   473,     0,   474,     0,
     475,   476,   477,     0,     0,     0,     0,     0,     0,   478,
       0,     0,   479,     0,     0,     0,   480,   481,   482,   483,
     484,   485,     0,     0,     0,     0,     0,     0,   486,   487,
       0,   488,   489,   490,     0,     0,   491,     0,     0,     0,
       0,   139,     0,   140,   141,   142,   143,   144,  2523,     0,
     145,     0,     0,     0,   146,     0,  2524,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,     0,     0,     0,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   350,   351,     0,     0,
     352,     0,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,     0,
     368,     0,   369,   370,   371,   372,   373,     0,   374,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
     394,     0,   395,   396,     0,   397,   398,     0,     0,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,     0,   491,     0,     0,     0,     0,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,  4451,   782,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,     0,     0,   340,   341,   342,     0,   343,   344,   345,
     346,     0,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,     0,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,     0,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,     0,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,   461,     0,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   475,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,   485,     0,     0,     0,     0,
       0,     0,   486,   487,     0,   488,   489,   490,     0,     0,
     491,     0,     0,   139,     0,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
     539,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,   210,     0,     0,     0,     0,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   606,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,     0,   340,   341,
     342,     0,   343,   344,   345,   346,     0,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   350,   351,
       0,     0,   352,     0,   353,   354,   607,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     374,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,   394,     0,   395,   396,     0,   397,   398,     0,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,     0,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,   462,   463,   464,
     465,     0,   466,   467,     0,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,     0,   491,     0,     0,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,   539,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,     0,     0,   340,   341,   342,     0,   343,   344,   345,
     346,     0,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,     0,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,     0,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,     0,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,   461,     0,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   475,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,   485,     0,     0,     0,     0,
       0,     0,   486,   487,     0,   488,   489,   490,     0,     0,
     491,     0,     0,   139,     0,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
     782,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,   210,     0,     0,     0,     0,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,     0,   340,   341,
     342,     0,   343,   344,   345,   346,     0,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   350,   351,
       0,     0,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     374,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,   394,     0,   395,   396,     0,   397,   398,     0,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,     0,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,   462,   463,   464,
     465,     0,   466,   467,     0,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,     0,   491,     0,     0,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,  2524,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,   618,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,     0,     0,   340,   341,   342,     0,   343,   344,   345,
     346,     0,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,     0,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,     0,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,   136,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,   461,     0,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   475,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,   485,     0,     0,     0,     0,
       0,     0,   486,   487,     0,   488,   489,   490,     0,     0,
     491,     0,   139,     0,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,  1700,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,   618,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,     0,     0,
       0,   338,   339,     0,     0,     0,     0,   340,   341,   342,
       0,   343,   344,   345,   346,     0,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
       0,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,     0,     0,     0,     0,     0,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,     0,
       0,   434,   435,     0,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,     0,   446,   447,     0,
     448,     0,   449,   450,   451,   452,     0,   136,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,   461,     0,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,   469,     0,   470,   471,     0,
       0,   472,     0,     0,   473,     0,   474,     0,   475,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,   485,
       0,     0,     0,     0,     0,     0,   486,   487,     0,   488,
     489,   490,     0,     0,   491,     0,   139,     0,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,  2806,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,   618,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,   332,   333,     0,     0,   334,   335,
     336,   337,     0,     0,     0,   338,   339,     0,     0,     0,
       0,   340,   341,   342,     0,   343,   344,   345,   346,     0,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,     0,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   374,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,     0,     0,     0,     0,     0,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,     0,     0,   434,   435,     0,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
       0,   446,   447,     0,   448,     0,   449,   450,   451,   452,
       0,   136,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,   461,     0,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   475,   476,   477,     0,     0,     0,     0,     0,
       0,   478,     0,     0,   479,     0,     0,     0,   480,   481,
     482,   483,   484,   485,     0,     0,     0,     0,     0,     0,
     486,   487,     0,   488,   489,   490,     0,     0,   491,     0,
     139,     0,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,     0,  3464,   148,   149,
     150,   151,   152,   153,     0,     0,  -329,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,     0,     0,     0,     0,   164,  3902,     0,
     165,   166,     0,   167,     0,     0,     0,     0,     0,   171,
     172,   173,   174,  3903,   176,   177,     0,   178,   179,     0,
       0,     0,     0,     0,     0,     0,   186,     0,   188,     0,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,     0,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,     0,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,     0,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
       0,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,     0,     0,     0,     0,   236,
     237,   238,     0,     0,   239,   240,  3904,   241,   242,   243,
       0,     0,     0,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,     0,   256,   257,     0,     0,     0,     0,
       0,     0,   260,     0,     0,     0,   261,   262,   263,   264,
    3905,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,     0,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,  3906,     0,     0,   277,     0,
       0,     0,   279,   280,     0,     0,   281,  3907,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,  -284,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,     0,
     339,     0,     0,     0,     0,   340,   341,   342,     0,   343,
     344,   345,  3908,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   350,   351,     0,     0,     0,
       0,   353,   354,   355,     0,   357,   358,   359,   360,   361,
     362,   363,     0,     0,     0,     0,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   374,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
       0,     0,   390,     0,   392,  -284,     0,   393,     0,     0,
       0,   395,     0,     0,   397,   398,  3909,     0,     0,     0,
     400,   401,   402,   403,   404,   405,     0,   407,   408,     0,
     409,     0,     0,     0,     0,   411,   412,   413,     0,     0,
       0,     0,   415,     0,     0,     0,   416,     0,     0,   418,
       0,   420,     0,   421,     0,   423,     0,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,     0,   433,     0,     0,     0,
     435,     0,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,     0,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
     461,     0,     0,     0,     0,   463,   464,   465,     0,   466,
     467,     0,   468,   469,     0,     0,     0,     0,     0,   472,
       0,     0,   473,     0,     0,     0,   475,   476,   477,     0,
       0,     0,     0,     0,     0,   478,     0,     0,   479,     0,
       0,     0,   480,   481,   482,   483,   484,   485,     0,     0,
    -284,     0,     0,     0,   486,     0,     0,   488,     0,   490,
       0,   139,   491,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,  4457,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,   995,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,   618,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,     0,     0,     0,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   350,   351,     0,     0,
     352,     0,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,     0,
     368,     0,   369,   370,   371,   372,   373,     0,   374,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
     394,     0,   395,   396,     0,   397,   398,     0,     0,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,   136,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,     0,   491,   139,     0,   140,   141,   142,   143,
     144,     0,     0,   145,     0,  1175,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,   338,   339,     0,     0,     0,     0,   340,
     341,   342,     0,   343,   344,   345,   346,     0,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,     0,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,     0,     0,   434,   435,     0,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,     0,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,   469,     0,   470,
     471,     0,     0,   472,     0,     0,   473,     0,   474,     0,
     475,   476,   477,     0,     0,     0,     0,     0,     0,   478,
       0,     0,   479,     0,     0,     0,   480,   481,   482,   483,
     484,   485,     0,     0,     0,     0,     0,     0,   486,   487,
       0,   488,   489,   490,     0,   139,   491,   140,   141,   142,
     143,   144,     0,  2112,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,   210,     0,     0,     0,     0,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,     0,
     340,   341,   342,     0,   343,   344,   345,   346,     0,   347,
     348,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,   351,     0,     0,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,     0,   368,     0,   369,   370,   371,   372,
     373,     0,   374,   375,   376,     0,     0,   377,     0,     0,
       0,   378,   379,   380,   381,   382,     0,     0,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,   394,     0,   395,   396,     0,   397,
     398,     0,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
       0,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,   139,   491,   140,   141,
     142,   143,   144,     0,  2794,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,   332,   333,     0,     0,   334,   335,
     336,   337,     0,     0,     0,   338,   339,     0,     0,     0,
       0,   340,   341,   342,     0,   343,   344,   345,   346,     0,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,     0,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   374,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,     0,     0,     0,     0,     0,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,     0,     0,   434,   435,     0,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
       0,   446,   447,     0,   448,     0,   449,   450,   451,   452,
       0,     0,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,   461,     0,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   475,   476,   477,     0,     0,     0,     0,     0,
       0,   478,     0,     0,   479,     0,     0,     0,   480,   481,
     482,   483,   484,   485,     0,     0,     0,     0,     0,     0,
     486,   487,     0,   488,   489,   490,     0,   139,   491,   140,
     141,   142,   143,   144,     0,  3124,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,   210,     0,     0,     0,
       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
     255,   256,   257,     0,   258,     0,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,   338,   339,     0,     0,
       0,     0,   340,   341,   342,     0,   343,   344,   345,   346,
       0,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,   349,   350,   351,     0,     0,   352,     0,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   374,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   390,
     391,   392,     0,     0,   393,     0,   394,     0,   395,   396,
       0,   397,   398,     0,     0,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,     0,     0,   434,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,     0,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,   462,   463,   464,   465,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,   139,   491,
     140,   141,   142,   143,   144,     0,  3469,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,  2436,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,  2437,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,  2438,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,  2439,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,  1038,  1039,     0,   338,   339,     0,
       0,  2440,     0,   340,   341,   342,     0,   343,   344,   345,
     346,     0,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,     0,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,     0,     0,  4437,
     564,  4438,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,     0,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,     0,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,   461,     0,
       0,     0,   462,   463,   464,   465,  2441,   466,   467,     0,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   475,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,   485,     0,     0,     0,     0,
       0,     0,   486,   487,     0,   488,   489,   490,     0,   139,
     491,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,   210,  1588,
       0,     0,  2965,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,  1589,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,  2860,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,  2861,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,  2862,     0,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,     0,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   374,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,   136,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,   462,   463,   464,   465,  2863,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
     139,   491,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
    1588,     0,     0,  3896,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
    1589,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,  2860,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,  2861,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,   338,
     339,     0,     0,  2862,     0,   340,   341,   342,     0,   343,
     344,   345,   346,     0,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,     0,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   374,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,     0,     0,   434,
     435,     0,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,     0,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,   136,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
     461,     0,     0,     0,   462,   463,   464,   465,  2863,   466,
     467,     0,   468,   469,     0,   470,   471,     0,     0,   472,
       0,     0,   473,     0,   474,     0,   475,   476,   477,     0,
       0,     0,     0,     0,     0,   478,     0,     0,   479,     0,
       0,     0,   480,   481,   482,   483,   484,   485,     0,     0,
       0,     0,     0,     0,   486,   487,     0,   488,   489,   490,
       0,   139,   491,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,  1588,     0,     0,  4180,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,  1589,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,  2860,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,  2861,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,     0,  2862,     0,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   350,   351,     0,     0,
     352,     0,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,     0,
     368,     0,   369,   370,   371,   372,   373,     0,   374,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
     394,     0,   395,   396,     0,   397,   398,     0,     0,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,   136,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,  2863,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,   139,   491,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,  2636,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,  2800,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,  2262,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,   618,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,     0,     0,
       0,   338,   339,     0,     0,     0,     0,   340,   341,   342,
       0,   343,   344,   345,   346,     0,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
       0,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,  2263,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,     0,     0,     0,     0,     0,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,     0,
       0,   434,   435,     0,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,     0,   446,   447,     0,
     448,     0,   449,   450,   451,   452,     0,   136,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,   461,     0,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,   469,     0,   470,   471,     0,
       0,   472,     0,     0,   473,     0,   474,     0,   475,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,   485,
       0,     0,     0,     0,     0,     0,   486,   487,     0,   488,
     489,   490,     0,   139,   491,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,   972,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,   210,     0,     0,     0,     0,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,   973,   974,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,     0,   340,   341,
     342,     0,   343,   344,   345,   346,     0,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   350,   351,
       0,     0,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     374,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,   394,     0,   395,   396,     0,   397,   398,     0,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,   975,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,   462,   463,   464,
     465,     0,   466,   467,     0,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,   139,   491,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,  1865,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,   338,   339,     0,     0,  1866,     0,   340,
     341,   342,     0,   343,   344,   345,   346,     0,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,   739,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,     0,   399,   400,   401,  1867,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,     0,     0,   434,   435,     0,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,     0,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,   461,     0,     0,     0,   462,   463,
     464,   465,  1868,   466,   467,     0,   468,   469,     0,   470,
     471,     0,     0,   472,     0,     0,   473,     0,   474,     0,
     475,   476,   477,     0,     0,     0,     0,     0,     0,   478,
       0,     0,   479,     0,     0,     0,   480,   481,   482,   483,
     484,   485,     0,     0,     0,     0,     0,     0,   486,   487,
       0,   488,   489,   490,     0,   139,   491,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,  2808,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,   210,     0,     0,     0,  2809,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,   618,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,     0,
     340,   341,   342,     0,   343,   344,   345,   346,     0,   347,
     348,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,   351,     0,     0,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,     0,   368,     0,   369,   370,   371,   372,
     373,     0,   374,   375,   376,     0,     0,   377,     0,     0,
       0,   378,   379,   380,   381,   382,     0,     0,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,   394,     0,   395,   396,     0,   397,
     398,     0,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
     136,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,   139,   491,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,  1865,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,   332,   333,     0,     0,   334,   335,
     336,   337,     0,     0,     0,   338,   339,     0,     0,  1866,
       0,   340,   341,   342,     0,   343,   344,   345,   346,     0,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,   739,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   374,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,     0,     0,     0,     0,     0,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,     0,     0,   434,   435,     0,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
       0,   446,   447,     0,   448,     0,   449,   450,   451,   452,
       0,     0,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,   461,     0,     0,     0,
     462,   463,   464,   465,  1868,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   475,   476,   477,     0,     0,     0,     0,     0,
       0,   478,     0,     0,   479,     0,     0,     0,   480,   481,
     482,   483,   484,   485,     0,     0,     0,     0,     0,     0,
     486,   487,     0,   488,   489,   490,     0,   139,   491,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,  2636,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,   210,     0,     0,     0,
    2800,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
     255,   256,   257,     0,   258,     0,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,   618,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,   338,   339,     0,     0,
       0,     0,   340,   341,   342,     0,   343,   344,   345,   346,
       0,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,   349,   350,   351,     0,     0,   352,     0,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   374,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   390,
     391,   392,     0,     0,   393,     0,   394,     0,   395,   396,
       0,   397,   398,     0,     0,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,     0,     0,   434,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,   136,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,   462,   463,   464,   465,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,   139,   491,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,  1865,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,  1866,     0,   340,   341,   342,     0,   343,   344,   345,
     346,     0,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,   739,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,     0,   399,   400,   401,
    3618,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,     0,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,     0,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,   461,     0,
       0,     0,   462,   463,   464,   465,  1868,   466,   467,     0,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   475,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,   485,     0,     0,     0,     0,
       0,     0,   486,   487,     0,   488,   489,   490,     0,   139,
     491,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,   995,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
       0,     0,     0,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
     618,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,     0,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,     0,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   374,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,   136,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
     139,   491,   140,   141,   142,   143,   144,  1387,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,   618,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,   338,
     339,     0,     0,     0,     0,   340,   341,   342,     0,   343,
     344,   345,   346,     0,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,     0,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   374,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,     0,     0,   434,
     435,     0,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,     0,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,   136,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,   469,     0,   470,   471,     0,     0,   472,
       0,     0,   473,     0,   474,     0,   475,   476,   477,     0,
       0,     0,     0,     0,     0,   478,     0,     0,   479,     0,
       0,     0,   480,   481,   482,   483,   484,   485,     0,     0,
       0,     0,     0,     0,   486,   487,     0,   488,   489,   490,
       0,   139,   491,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
    2636,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,   618,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,     0,     0,     0,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   350,   351,     0,     0,
     352,     0,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,     0,
     368,     0,   369,   370,   371,   372,   373,     0,   374,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
     394,     0,   395,   396,     0,   397,   398,     0,     0,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,   136,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,   139,   491,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,  2851,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,   618,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,     0,     0,
       0,   338,   339,     0,     0,     0,     0,   340,   341,   342,
       0,   343,   344,   345,   346,     0,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
       0,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,     0,     0,     0,     0,     0,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,     0,
       0,   434,   435,     0,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,     0,   446,   447,     0,
     448,     0,   449,   450,   451,   452,     0,   136,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,   461,     0,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,   469,     0,   470,   471,     0,
       0,   472,     0,     0,   473,     0,   474,     0,   475,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,   485,
       0,     0,     0,     0,     0,     0,   486,   487,     0,   488,
     489,   490,     0,   139,   491,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,   210,     0,     0,     0,     0,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,   618,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,     0,   340,   341,
     342,     0,   343,   344,   345,   346,     0,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   350,   351,
       0,     0,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     374,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,   394,     0,   395,   396,     0,   397,   398,     0,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,   136,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,   462,   463,   464,
     465,     0,   466,   467,     0,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,   139,   491,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,  2790,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,   338,   339,     0,     0,     0,     0,   340,
     341,   342,     0,   343,   344,   345,   346,     0,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,     0,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,     0,     0,   434,   435,     0,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,     0,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,   136,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,   469,     0,   470,
     471,     0,     0,   472,     0,     0,   473,     0,   474,     0,
     475,   476,   477,     0,     0,     0,     0,     0,     0,   478,
       0,     0,   479,     0,     0,     0,   480,   481,   482,   483,
     484,   485,     0,     0,     0,     0,     0,     0,   486,   487,
       0,   488,   489,   490,     0,   139,   491,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,  4352,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,   210,     0,     0,     0,     0,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,  4353,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,     0,
     340,   341,   342,     0,   343,   344,   345,   346,     0,   347,
     348,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,   351,     0,     0,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,     0,   368,     0,   369,   370,   371,   372,
     373,     0,   374,   375,   376,     0,     0,   377,     0,     0,
       0,   378,   379,   380,   381,   382,     0,     0,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,   394,     0,   395,   396,     0,   397,
     398,     0,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
       0,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,   139,   491,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,   332,   333,     0,     0,   334,   335,
     336,   337,     0,     0,     0,   338,   339,     0,     0,     0,
       0,   340,   341,   342,     0,   343,   344,   345,   346,     0,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,     0,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   374,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,     0,     0,     0,   564,     0,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,     0,     0,   434,   435,     0,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
       0,   446,   447,     0,   448,     0,   449,   450,   451,   452,
       0,     0,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,   461,     0,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   475,   476,   477,     0,     0,     0,     0,     0,
       0,   478,     0,     0,   479,     0,     0,     0,   480,   481,
     482,   483,   484,   485,     0,     0,     0,     0,     0,     0,
     486,   487,     0,   488,   489,   490,     0,   139,   491,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,   210,     0,     0,     0,
       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,  1074,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
     255,   256,   257,     0,   258,     0,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,   338,   339,     0,     0,
       0,     0,   340,   341,   342,     0,   343,   344,   345,   346,
       0,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,   349,   350,   351,     0,     0,   352,     0,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   374,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   390,
     391,   392,     0,     0,   393,     0,   394,     0,   395,   396,
       0,   397,   398,     0,     0,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,     0,     0,   434,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,     0,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,   462,   463,   464,   465,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,   139,   491,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,  2031,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,     0,     0,   340,   341,   342,     0,   343,   344,   345,
     346,     0,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,     0,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,     0,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,     0,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,   461,     0,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   475,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,   485,     0,     0,     0,     0,
       0,     0,   486,   487,     0,   488,   489,   490,     0,   139,
     491,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
       0,     0,  2367,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,     0,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,     0,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   374,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,     0,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,  2368,   460,   461,
       0,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
     139,   491,   140,   141,   142,   143,   144,  2894,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,   338,
     339,     0,     0,     0,     0,   340,   341,   342,     0,   343,
     344,   345,   346,     0,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,     0,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   374,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,     0,     0,   434,
     435,     0,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,     0,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,   469,     0,   470,   471,     0,     0,   472,
       0,     0,   473,     0,   474,     0,   475,   476,   477,     0,
       0,     0,     0,     0,     0,   478,     0,     0,   479,     0,
       0,     0,   480,   481,   482,   483,   484,   485,     0,     0,
       0,     0,     0,     0,   486,   487,     0,   488,   489,   490,
       0,   139,   491,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,     0,     0,     0,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   350,   351,     0,     0,
     352,     0,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,  2981,
     368,     0,   369,   370,   371,   372,   373,     0,   374,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
     394,     0,   395,   396,     0,   397,   398,     0,     0,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,   139,   491,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,     0,     0,
       0,   338,   339,     0,     0,     0,     0,   340,   341,   342,
       0,   343,   344,   345,   346,     0,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
       0,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,     0,     0,     0,     0,     0,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,     0,
       0,   434,   435,     0,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,     0,   446,   447,     0,
     448,     0,   449,   450,   451,   452,     0,   136,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,   461,     0,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,   469,     0,   470,   471,     0,
       0,   472,     0,     0,   473,     0,   474,     0,   475,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,   485,
       0,     0,     0,     0,     0,     0,   486,   487,     0,   488,
     489,   490,     0,   139,   491,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,   210,     0,     0,     0,  2367,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,     0,   340,   341,
     342,     0,   343,   344,   345,   346,     0,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   350,   351,
       0,     0,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     374,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,   394,     0,   395,   396,     0,   397,   398,     0,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,     0,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,   462,   463,   464,
     465,     0,   466,   467,     0,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,   139,   491,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,   338,   339,     0,     0,     0,     0,   340,
     341,   342,     0,   343,   344,   345,   346,     0,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,     0,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,     0,     0,   434,   435,     0,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,     0,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,   469,     0,   470,
     471,     0,     0,   472,     0,     0,   473,     0,   474,     0,
     475,   476,   477,     0,     0,     0,     0,     0,     0,   478,
       0,     0,   479,     0,     0,     0,   480,   481,   482,   483,
     484,   485,     0,     0,     0,     0,     0,     0,   486,   487,
       0,   488,   489,   490,     0,   139,   491,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,   210,     0,     0,     0,     0,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,  1781,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,  1782,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,     0,
     340,   341,   342,     0,   343,   344,   345,   346,     0,   347,
     348,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,   351,     0,     0,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,     0,   368,     0,   369,   370,   371,   372,
     373,     0,   374,   375,   376,     0,     0,   377,     0,     0,
       0,   378,   379,   380,   381,   382,     0,     0,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,   394,     0,   395,   396,     0,   397,
     398,     0,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
       0,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,   139,   491,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,     0,     0,   148,   149,   150,   151,   152,   153,
       0,     0,  -329,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,     0,
       0,     0,     0,   164,  3902,     0,   165,   166,     0,   167,
       0,     0,     0,     0,     0,   171,   172,   173,   174,  3903,
     176,   177,     0,   178,   179,     0,     0,     0,     0,     0,
       0,     0,   186,     0,   188,     0,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,     0,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,     0,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,     0,     0,     0,   219,   220,
     221,     0,  -299,  -299,   222,     0,  -299,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,     0,     0,     0,     0,   236,   237,   238,     0,     0,
     239,   240,  3904,   241,   242,   243,     0,     0,     0,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,     0,
     256,   257,     0,     0,     0,     0,     0,     0,   260,     0,
       0,     0,   261,   262,   263,   264,  3905,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
       0,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,  3906,     0,     0,   277,     0,     0,     0,   279,   280,
       0,     0,   281,  3907,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,  -284,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,   332,   333,     0,     0,   334,   335,
     336,   337,     0,     0,     0,     0,   339,     0,     0,     0,
       0,   340,   341,   342,     0,   343,   344,   345,  3908,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   350,   351,     0,     0,     0,     0,   353,   354,   355,
       0,   357,   358,   359,   360,   361,   362,   363,     0,     0,
       0,     0,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   374,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,     0,     0,   390,     0,
     392,  -284,     0,   393,     0,     0,     0,   395,     0,     0,
     397,   398,  3909,     0,     0,     0,   400,   401,   402,   403,
     404,   405,     0,   407,   408,     0,   409,     0,     0,     0,
       0,   411,   412,   413,     0,     0,     0,     0,   415,     0,
       0,     0,   416,     0,     0,   418,     0,   420,     0,   421,
       0,   423,     0,   425,   426,     0,     0,     0,     0,     0,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,     0,   433,     0,     0,     0,   435,     0,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
       0,   446,   447,     0,   448,     0,   449,   450,   451,   452,
       0,     0,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,   461,     0,     0,     0,
       0,   463,   464,   465,     0,   466,   467,     0,   468,   469,
       0,     0,     0,     0,     0,   472,     0,     0,   473,     0,
       0,     0,   475,   476,   477,     0,     0,     0,     0,     0,
       0,   478,     0,     0,   479,     0,     0,     0,   480,   481,
     482,   483,   484,   485,     0,     0,  -284,     0,     0,     0,
     486,     0,     0,   488,     0,   490,     0,   139,   491,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,     0,     0,   148,   149,   150,   151,   152,
     153,     0,     0,  -329,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
       0,     0,     0,     0,   164,  3902,     0,   165,   166,     0,
     167,     0,     0,     0,     0,     0,   171,   172,   173,   174,
    3903,   176,   177,     0,   178,   179,     0,     0,     0,     0,
       0,     0,     0,   186,     0,   188,     0,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,     0,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,     0,     0,     0,     0,
       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,     0,     0,     0,   219,
     220,   221,     0,  -320,     0,   222,     0,  -320,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,     0,     0,     0,     0,   236,   237,   238,     0,
       0,   239,   240,  3904,   241,   242,   243,     0,     0,     0,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
       0,   256,   257,     0,     0,     0,     0,     0,     0,   260,
       0,     0,     0,   261,   262,   263,   264,  3905,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,     0,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,  3906,     0,     0,   277,     0,     0,     0,   279,
     280,     0,     0,   281,  3907,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,  -284,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,     0,   339,     0,     0,
       0,     0,   340,   341,   342,     0,   343,   344,   345,  3908,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   350,   351,     0,     0,     0,     0,   353,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,     0,
       0,     0,     0,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   374,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,     0,     0,   390,
       0,   392,  -284,     0,   393,     0,     0,     0,   395,     0,
       0,   397,   398,  3909,     0,     0,     0,   400,   401,   402,
     403,   404,   405,     0,   407,   408,     0,   409,     0,     0,
       0,     0,   411,   412,   413,     0,     0,     0,     0,   415,
       0,     0,     0,   416,     0,     0,   418,     0,   420,     0,
     421,     0,   423,     0,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,     0,   433,     0,     0,     0,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,     0,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,     0,   463,   464,   465,     0,   466,   467,     0,   468,
     469,     0,     0,     0,     0,     0,   472,     0,     0,   473,
       0,     0,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,  -320,     0,  -284,     0,     0,
       0,   486,     0,     0,   488,     0,   490,     0,   139,   491,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,     0,     0,   148,   149,   150,   151,
     152,   153,     0,     0,  -329,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,     0,     0,     0,     0,   164,  3902,     0,   165,   166,
       0,   167,     0,     0,     0,     0,     0,   171,   172,   173,
     174,  3903,   176,   177,     0,   178,   179,     0,     0,     0,
       0,     0,     0,     0,   186,     0,   188,     0,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,     0,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,     0,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,     0,     0,     0,
     219,   220,   221,     0,  -317,     0,   222,     0,  -317,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,     0,     0,     0,     0,   236,   237,   238,
       0,     0,   239,   240,  3904,   241,   242,   243,     0,     0,
       0,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,     0,   256,   257,     0,     0,     0,     0,     0,     0,
     260,     0,     0,     0,   261,   262,   263,   264,  3905,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,     0,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,  3906,     0,     0,   277,     0,     0,     0,
     279,   280,     0,     0,   281,  3907,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,  -284,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,     0,   339,     0,
       0,     0,     0,   340,   341,   342,     0,   343,   344,   345,
    3908,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   350,   351,     0,     0,     0,     0,   353,
     354,   355,     0,   357,   358,   359,   360,   361,   362,   363,
       0,     0,     0,     0,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,     0,     0,
     390,     0,   392,  -284,     0,   393,     0,     0,     0,   395,
       0,     0,   397,   398,  3909,     0,     0,     0,   400,   401,
     402,   403,   404,   405,     0,   407,   408,     0,   409,     0,
       0,     0,     0,   411,   412,   413,     0,     0,     0,     0,
     415,     0,     0,     0,   416,     0,     0,   418,     0,   420,
       0,   421,     0,   423,     0,   425,   426,     0,     0,     0,
       0,     0,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,     0,   433,     0,     0,     0,   435,     0,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,     0,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,     0,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,   461,     0,
       0,     0,     0,   463,   464,   465,     0,   466,   467,     0,
     468,   469,     0,     0,     0,     0,     0,   472,     0,     0,
     473,     0,     0,     0,   475,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,   485,  -317,     0,  -284,     0,
       0,     0,   486,     0,     0,   488,     0,   490,     0,   139,
     491,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,     0,     0,   148,   149,   150,
     151,   152,   153,     0,     0,  -329,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,     0,     0,     0,     0,   164,  3902,     0,   165,
     166,     0,   167,     0,     0,     0,     0,     0,   171,   172,
     173,   174,  3903,   176,   177,     0,   178,   179,     0,     0,
       0,     0,     0,     0,     0,   186,     0,   188,     0,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
       0,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,     0,     0,
       0,     0,     0,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,     0,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,  4242,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,     0,     0,     0,     0,   236,   237,
     238,     0,     0,   239,   240,  3904,   241,   242,   243,     0,
       0,     0,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,     0,   256,   257,     0,     0,     0,     0,     0,
       0,   260,     0,     0,     0,   261,   262,   263,   264,  3905,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,     0,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,  3906,     0,     0,   277,     0,     0,
       0,   279,   280,     0,     0,   281,  3907,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,  -284,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,     0,   339,
       0,     0,     0,     0,   340,   341,   342,     0,   343,   344,
     345,  3908,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   350,   351,     0,     0,     0,     0,
     353,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,     0,     0,     0,     0,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   374,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,     0,
       0,   390,     0,   392,  -284,     0,   393,     0,     0,     0,
     395,     0,     0,   397,   398,  3909,     0,     0,     0,   400,
     401,   402,   403,   404,   405,     0,   407,   408,     0,   409,
       0,     0,     0,     0,   411,   412,   413,     0,     0,     0,
       0,   415,     0,     0,     0,   416,     0,     0,   418,     0,
     420,     0,   421,     0,   423,     0,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,     0,   433,     0,     0,     0,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,     0,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,     0,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,     0,     0,     0,     0,   472,     0,
       0,   473,     0,     0,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,  -284,
       0,     0,     0,   486,     0,     0,   488,     0,   490,     0,
     139,   491,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,     0,     0,   148,   149,
     150,   151,   152,   153,     0,     0,  -329,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,     0,     0,     0,     0,   164,  3902,     0,
     165,   166,     0,   167,     0,     0,     0,     0,     0,   171,
     172,   173,   174,  3903,   176,   177,     0,   178,   179,     0,
       0,     0,     0,     0,     0,     0,   186,     0,   188,     0,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,     0,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,     0,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,     0,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
    -322,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,     0,     0,     0,     0,   236,
     237,   238,     0,     0,   239,   240,  3904,   241,   242,   243,
       0,     0,     0,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,     0,   256,   257,     0,     0,     0,     0,
       0,     0,   260,     0,     0,     0,   261,   262,   263,   264,
    3905,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,     0,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,  3906,     0,     0,   277,     0,
       0,     0,   279,   280,     0,     0,   281,  3907,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,  -284,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,     0,
     339,     0,     0,     0,     0,   340,   341,   342,     0,   343,
     344,   345,  3908,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   350,   351,     0,     0,     0,
       0,   353,   354,   355,     0,   357,   358,   359,   360,   361,
     362,   363,     0,     0,     0,     0,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   374,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
       0,     0,   390,     0,   392,  -284,     0,   393,     0,     0,
       0,   395,     0,     0,   397,   398,  3909,     0,     0,     0,
     400,   401,   402,   403,   404,   405,     0,   407,   408,     0,
     409,     0,     0,     0,     0,   411,   412,   413,     0,     0,
       0,     0,   415,     0,     0,     0,   416,     0,     0,   418,
       0,   420,     0,   421,     0,   423,     0,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,     0,   433,     0,     0,     0,
     435,     0,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,     0,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
     461,     0,     0,     0,     0,   463,   464,   465,     0,   466,
     467,     0,   468,   469,     0,     0,     0,     0,     0,   472,
       0,     0,   473,     0,     0,     0,   475,   476,   477,     0,
       0,     0,     0,     0,     0,   478,     0,     0,   479,     0,
       0,     0,   480,   481,   482,   483,   484,   485,     0,     0,
    -284,     0,     0,     0,   486,     0,     0,   488,     0,   490,
       0,   139,   491,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,     0,     0,   148,
     149,   150,   151,   152,   153,     0,     0,  -329,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,     0,     0,     0,     0,   164,  3902,
       0,   165,   166,     0,   167,     0,     0,     0,     0,     0,
     171,   172,   173,   174,  3903,   176,   177,     0,   178,   179,
       0,     0,     0,     0,     0,     0,     0,   186,     0,   188,
       0,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,     0,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
       0,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
       0,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,  4357,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,     0,     0,     0,     0,
     236,   237,   238,     0,     0,   239,   240,  3904,   241,   242,
     243,     0,     0,     0,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,     0,   256,   257,     0,     0,     0,
       0,     0,     0,   260,     0,     0,     0,   261,   262,   263,
     264,  3905,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,     0,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,  3906,     0,     0,   277,
       0,     0,     0,   279,   280,     0,     0,   281,  3907,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
    -284,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
       0,   339,     0,     0,     0,     0,   340,   341,   342,     0,
     343,   344,   345,  3908,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   350,   351,     0,     0,
       0,     0,   353,   354,   355,     0,   357,   358,   359,   360,
     361,   362,   363,     0,     0,     0,     0,   366,   367,     0,
     368,     0,   369,   370,   371,   372,   373,     0,   374,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,     0,     0,   390,     0,   392,  -284,     0,   393,     0,
       0,     0,   395,     0,     0,   397,   398,  3909,     0,     0,
       0,   400,   401,   402,   403,   404,   405,     0,   407,   408,
       0,   409,     0,     0,     0,     0,   411,   412,   413,     0,
       0,     0,     0,   415,     0,     0,     0,   416,     0,     0,
     418,     0,   420,     0,   421,     0,   423,     0,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,     0,   433,     0,     0,
       0,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,     0,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,     0,     0,     0,     0,
     472,     0,     0,   473,     0,     0,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,  -284,     0,     0,     0,   486,     0,     0,   488,     0,
     490,     0,   139,   491,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,     0,     0,
     148,   149,   150,   151,   152,   153,     0,     0,  -329,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,     0,     0,     0,     0,   164,
    3902,     0,   165,   166,     0,   167,     0,     0,     0,     0,
       0,   171,   172,   173,   174,  3903,   176,   177,     0,   178,
     179,     0,     0,     0,     0,     0,     0,     0,   186,     0,
     188,     0,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,     0,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,     0,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,     0,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,  4406,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,     0,     0,     0,
       0,   236,   237,   238,     0,     0,   239,   240,  3904,   241,
     242,   243,     0,     0,     0,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,     0,   256,   257,     0,     0,
       0,     0,     0,     0,   260,     0,     0,     0,   261,   262,
     263,   264,  3905,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,     0,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,  3906,     0,     0,
     277,     0,     0,     0,   279,   280,     0,     0,   281,  3907,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,  -284,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,     0,     0,
       0,     0,   339,     0,     0,     0,     0,   340,   341,   342,
       0,   343,   344,   345,  3908,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   350,   351,     0,
       0,     0,     0,   353,   354,   355,     0,   357,   358,   359,
     360,   361,   362,   363,     0,     0,     0,     0,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,     0,     0,   390,     0,   392,  -284,     0,   393,
       0,     0,     0,   395,     0,     0,   397,   398,  3909,     0,
       0,     0,   400,   401,   402,   403,   404,   405,     0,   407,
     408,     0,   409,     0,     0,     0,     0,   411,   412,   413,
       0,     0,     0,     0,   415,     0,     0,     0,   416,     0,
       0,   418,     0,   420,     0,   421,     0,   423,     0,   425,
     426,     0,     0,     0,     0,     0,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,     0,   433,     0,
       0,     0,   435,     0,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,     0,   446,   447,     0,
     448,     0,   449,   450,   451,   452,     0,     0,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,   461,     0,     0,     0,     0,   463,   464,   465,
       0,   466,   467,     0,   468,   469,     0,     0,     0,     0,
       0,   472,     0,     0,   473,     0,     0,     0,   475,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,   485,
       0,     0,  -284,     0,     0,     0,   486,     0,     0,   488,
       0,   490,     0,   139,   491,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,     0,
       0,   148,   149,   150,   151,   152,   153,     0,     0,  -329,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,     0,     0,     0,     0,
     164,  3902,     0,   165,   166,     0,   167,     0,     0,     0,
       0,     0,   171,   172,   173,   174,  3903,   176,   177,     0,
     178,   179,     0,     0,     0,     0,     0,     0,     0,   186,
       0,   188,     0,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,     0,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,     0,     0,     0,     0,     0,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,     0,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,  -303,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,     0,     0,
       0,     0,   236,   237,   238,     0,     0,   239,   240,  3904,
     241,   242,   243,     0,     0,     0,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,     0,   256,   257,     0,
       0,     0,     0,     0,     0,   260,     0,     0,     0,   261,
     262,   263,   264,  3905,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,     0,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,  3906,     0,
       0,   277,     0,     0,     0,   279,   280,     0,     0,   281,
    3907,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,  -284,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,     0,   339,     0,     0,     0,     0,   340,   341,
     342,     0,   343,   344,   345,  3908,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   350,   351,
       0,     0,     0,     0,   353,   354,   355,     0,   357,   358,
     359,   360,   361,   362,   363,     0,     0,     0,     0,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     374,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,     0,     0,   390,     0,   392,  -284,     0,
     393,     0,     0,     0,   395,     0,     0,   397,   398,  3909,
       0,     0,     0,   400,   401,   402,   403,   404,   405,     0,
     407,   408,     0,   409,     0,     0,     0,     0,   411,   412,
     413,     0,     0,     0,     0,   415,     0,     0,     0,   416,
       0,     0,   418,     0,   420,     0,   421,     0,   423,     0,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,     0,   433,
       0,     0,     0,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,     0,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,     0,   463,   464,
     465,     0,   466,   467,     0,   468,   469,     0,     0,     0,
       0,     0,   472,     0,     0,   473,     0,     0,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,     0,     0,  -284,     0,     0,     0,   486,     0,     0,
     488,     0,   490,     0,   139,   491,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
       0,     0,   148,   149,   150,   151,   152,   153,     0,     0,
    -329,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,     0,     0,     0,
       0,   164,  3902,     0,   165,   166,     0,   167,     0,     0,
       0,     0,     0,   171,   172,   173,   174,  3903,   176,   177,
       0,   178,   179,     0,     0,     0,     0,     0,     0,     0,
     186,     0,   188,     0,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,     0,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,     0,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,     0,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,     0,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,     0,
       0,     0,     0,   236,   237,   238,     0,     0,   239,   240,
    3904,   241,   242,   243,     0,     0,     0,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,     0,   256,   257,
       0,     0,     0,     0,     0,     0,   260,     0,     0,     0,
     261,   262,   263,   264,  3905,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,     0,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,  3906,
       0,     0,   277,     0,     0,     0,   279,   280,     0,     0,
     281,  3907,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,  -284,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,     0,   339,     0,     0,     0,     0,   340,
     341,   342,     0,   343,   344,   345,  3908,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   350,
     351,     0,     0,     0,     0,   353,   354,   355,     0,   357,
     358,   359,   360,   361,   362,   363,     0,     0,     0,     0,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,     0,     0,   390,     0,   392,  -284,
       0,   393,     0,     0,     0,   395,     0,     0,   397,   398,
    3909,     0,     0,     0,   400,   401,   402,   403,   404,   405,
       0,   407,   408,     0,   409,     0,     0,     0,     0,   411,
     412,   413,     0,     0,     0,     0,   415,     0,     0,     0,
     416,     0,     0,   418,     0,   420,     0,   421,     0,   423,
       0,   425,   426,     0,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,     0,
     433,     0,     0,     0,   435,     0,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,     0,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,   461,     0,     0,     0,     0,   463,
     464,   465,     0,   466,   467,     0,   468,   469,     0,     0,
       0,     0,     0,   472,     0,     0,   473,     0,     0,     0,
     475,   476,   477,     0,     0,     0,     0,     0,     0,   478,
       0,     0,   479,     0,     0,     0,   480,   481,   482,   483,
     484,   485,     0,     0,  -284,     0,     0,     0,   486,     0,
       0,   488,     0,   490,     0,   139,   491,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,     0,     0,   148,   149,   150,   151,   152,   153,     0,
       0,  -329,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,     0,     0,
       0,     0,   164,  3902,     0,   165,   166,     0,   167,     0,
       0,     0,     0,     0,   171,   172,   173,   174,  3903,   176,
     177,     0,   178,   179,     0,     0,     0,     0,     0,     0,
       0,   186,     0,   188,     0,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,     0,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,     0,     0,     0,     0,     0,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,     0,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,     0,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
       0,     0,     0,     0,   236,   237,   238,     0,     0,   239,
     240,  3904,   241,   242,   243,     0,     0,     0,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,     0,   256,
     257,     0,     0,     0,     0,     0,     0,   260,     0,     0,
       0,   261,   262,   263,   264,  3905,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,     0,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
    3906,     0,     0,   277,     0,     0,     0,   279,   280,     0,
       0,   281,  3907,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,  -284,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,     0,   339,     0,     0,     0,     0,
     340,   341,   342,     0,   343,   344,   345,  3908,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     350,   351,     0,     0,     0,     0,   353,   354,   355,     0,
     357,   358,   359,   360,   361,   362,   363,     0,     0,     0,
       0,   366,   367,     0,   368,     0,   369,   370,   371,   372,
     373,     0,   374,   375,   376,     0,     0,   377,     0,     0,
       0,   378,   379,   380,   381,   382,     0,     0,   383,   384,
     385,   386,   387,     0,   388,     0,     0,   390,     0,   392,
    -284,     0,   393,     0,     0,     0,   395,     0,     0,   397,
     398,  3909,     0,     0,     0,   400,   401,   402,   403,   404,
     405,     0,   407,   408,     0,   409,     0,     0,     0,     0,
     411,   412,   413,     0,     0,     0,     0,   415,     0,     0,
       0,   416,     0,     0,   418,     0,   420,     0,   421,     0,
     423,     0,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
       0,   433,     0,     0,     0,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
       0,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,     0,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
       0,     0,     0,     0,   472,     0,     0,  4245,     0,     0,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,  -284,     0,     0,     0,   486,
       0,     0,   488,     0,   490,     0,   139,   491,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,     0,     0,   148,   149,   150,   151,   152,   153,
       0,     0,     0,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,     0,
       0,     0,     0,   164,     0,     0,   165,   166,     0,   167,
       0,     0,     0,     0,     0,   171,   172,   173,   174,     0,
     176,   177,     0,   178,   179,     0,     0,     0,     0,     0,
       0,     0,   186,     0,   188,     0,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,     0,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,     0,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,     0,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,     0,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,     0,     0,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,     0,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,     0,
     256,   257,     0,     0,     0,     0,     0,     0,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
       0,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,     0,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,   332,   333,     0,     0,   334,   335,
     336,   337,     0,     0,     0,     0,   339,     0,     0,     0,
       0,   340,   341,   342,     0,   343,   344,   345,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   350,   351,     0,     0,     0,     0,   353,   354,   355,
       0,   357,   358,   359,   360,   361,   362,   363,     0,     0,
       0,     0,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   374,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,     0,     0,   390,     0,
     392,     0,     0,   393,     0,     0,     0,   395,     0,     0,
     397,   398,     0,     0,     0,     0,   400,   401,   402,   403,
     404,   405,     0,   407,   408,     0,   409,     0,     0,     0,
       0,   411,   412,   413,     0,     0,     0,     0,   415,     0,
       0,     0,   416,     0,     0,   418,     0,   420,     0,   421,
       0,   423,     0,   425,   426,     0,     0,     0,     0,     0,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,     0,   433,     0,     0,     0,   435,     0,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
       0,   446,   447,     0,   448,     0,   449,   450,   451,   452,
       0,     0,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,   461,     0,     0,     0,
       0,   463,   464,   465,     0,   466,   467,     0,   468,   469,
       0,     0,     0,     0,     0,   472,     0,     0,   473,     0,
       0,     0,   475,   476,   477,     0,     0,     0,     0,     0,
       0,   478,     0,     0,   479,     0,     0,     0,   480,   481,
     482,   483,   484,   485,     0,     0,     0,     0,     0,     0,
     486,     0,     0,   488,     0,   490,     0,     0,   491
};

static const yytype_int16 yycheck[] =
{
       6,   648,   577,   989,   988,   577,  1179,   696,   600,   899,
     701,  1106,  1697,    19,     4,   124,    22,   554,  1836,  1837,
    1078,  1179,  1149,     6,   675,  1125,    32,  1804,  1489,   722,
    2024,  1311,   813,    39,  1072,  1073,    42,  1390,  2488,  1947,
      46,   614,  1390,   926,   951,    20,  1824,  2529,    54,   522,
    2059,  2337,  1487,  3218,    29,  1201,  2418,  2128,  1242,  2597,
    2298,    36,  1208,  2828,  2773,   993,   757,  2107,   951,   760,
    2141,   642,  2611,  2406,   645,  1116,  1478,  1319,   767,   993,
    1966,    22,  1209,  1210,  2227,  1470,  1213,  1214,  1215,  1216,
      96,  1218,  1219,  1220,  1221,  1222,  1223,  1224,  1225,  1824,
    2142,  1964,  1964,  1895,   662,  2086,  2973,  2086,  2399,  2628,
    2483,  1919,  1920,   119,  2350,   121,  2407,   123,   124,   125,
     657,   658,  2360,  3454,   775,   776,   777,  1460,  1936,  1967,
    2270,  2021,  3224,  1971,    19,    17,   787,  2045,   121,   786,
     123,    25,  2050,    34,  1982,  1953,  1954,  1532,  2056,  2057,
      16,    17,    10,  2061,  1992,    96,  3242,    51,    30,  3106,
    3501,  1969,  1970,   882,  1972,    19,  1835,  1975,  1976,    59,
      60,  1979,    16,    17,  2447,  2448,  1984,  1401,   924,   131,
    1988,  1989,  1990,  1991,    17,   112,  2221,  1995,  1996,    60,
    1998,    83,    16,    17,    63,  1419,  2004,    19,  2599,  2007,
    2008,    28,  2010,  1427,  1428,   175,   952,  2111,    35,    47,
     175,    21,  1910,  2625,  2626,    68,  3281,  3282,  2573,  2631,
    3285,  2633,    73,  2086,  2086,   128,    16,    17,    21,   151,
      19,  2405,   128,   195,   192,   161,   195,    58,   175,  3304,
      86,    34,   815,  2075,    51,    90,  3311,   953,   967,    59,
      60,    63,  2688,  2884,   157,    48,  1938,    71,  3047,    82,
      56,   157,  2070,  2071,  2072,  2073,    59,    60,   128,    16,
      17,  2462,   157,    71,   209,   157,   161,   373,    21,    16,
      17,    16,    17,   267,    36,  3450,  1470,   312,    82,   114,
     226,    34,  2565,  2566,   279,   358,   145,   157,   285,   147,
     251,  3511,   157,  1956,   877,    48,   995,   134,   217,   128,
      40,    36,   362,   183,   192,   391,    59,    60,    21,    88,
     189,    16,    17,   467,   423,   130,   226,   129,  3393,    16,
      17,    34,   405,   301,    34,    16,    17,    20,  2963,   161,
     390,   540,  2760,    16,    17,    48,  4025,   354,  1532,   233,
     335,  2391,   166,   129,   175,   485,    59,    60,   179,   282,
     394,    16,    17,   572,   268,   157,    16,    17,   192,   190,
    3938,   226,   161,   418,    16,    17,  2370,  2371,  2372,   352,
     151,   164,  3686,   192,   168,   508,   623,   257,   192,   540,
     168,   509,   151,   630,   439,  2451,   607,   608,   507,   222,
    1286,   224,    64,  1289,   132,   230,  1292,   210,    16,    17,
     215,   195,   530,    70,    16,    17,   539,   195,  3722,    70,
     631,   630,  1115,   553,   308,   470,   433,   132,   401,  2847,
     253,   418,   505,   190,   543,   358,  1129,   636,   157,  2465,
     244,   243,  4121,   405,   414,   413,   405,  1018,   338,   414,
     133,   254,  2356,   190,  1440,    16,    17,   491,  1239,   268,
    1031,   213,   214,   142,    16,    17,   366,   243,   567,   373,
     348,    66,  3803,  3538,    16,    17,   268,   414,    16,    17,
     285,   188,  3547,   556,   354,   629,    16,    17,   213,   214,
     540,  2766,    16,    17,   115,   316,   285,   118,   449,  4067,
     390,   507,  2835,   509,  2412,   441,  3571,    16,    17,   237,
      19,  3576,  3677,  1050,  1051,  1052,   285,   485,   146,   226,
     526,  1982,  3614,   599,   530,   598,   511,  3316,   372,   377,
    3740,   375,  1460,   539,   403,   631,   188,   543,   357,   545,
    2902,  2777,  2778,  2779,   657,   658,  1460,   405,   372,   268,
     476,   375,   558,  1938,   448,   490,   546,  1204,   354,   622,
     374,  1212,  2470,  1747,  2472,   418,    16,    17,   413,  1452,
    2279,  2479,   534,  2613,   226,   534,   374,  2467,  1229,  1964,
     586,  2471,   372,  1302,  2492,   375,   441,   249,  2451,  2451,
    2498,  2499,  2573,   414,  2573,  2485,  2486,   587,  1725,   605,
    3231,   301,   511,  1531,   629,  2495,  2514,  2515,   614,  1736,
     616,  2013,  1739,   583,   426,  1334,   462,  1531,  1091,  1092,
     604,   627,  3247,  3024,   611,   372,   475,   633,   375,   418,
    2538,  3723,   638,  2523,   640,   372,   642,   372,   375,   645,
     375,   448,  2997,   649,   650,  1118,   583,   505,   654,  1395,
     633,   330,  1398,  1126,  2689,  1128,  3421,  1403,   664,   665,
     666,   631,  2836,  2837,   670,  1889,   631,  1140,  1141,  1142,
    2478,   598,   564,   631,   501,  1148,  1247,   372,  1719,   551,
     375,   603,  2490,  1429,  1430,   372,   627,  4028,   375,  1470,
    2075,   372,  2883,  2362,   375,  2886,  2887,   638,   556,   372,
    2398,  2086,   375,   812,   573,  2595,  2610,   659,   535,  1804,
    2573,  2573,  1285,  3149,  2905,  3801,   722,   372,   551,  1425,
     375,   592,   372,  2996,   606,   375,   553,  3819,  4059,   551,
     372,   585,   635,   375,  3020,  2567,  2069,   631,   629,   635,
     598,  2781,  2782,  1314,  3263,  3264,   636,   631,  2430,   615,
     635,  1532,  3271,   635,  1938,  3274,  3275,  3849,  3705,   597,
     570,   588,  1333,  2571,   372,    16,    17,   375,   606,  2909,
     372,   615,  3291,   375,   780,   635,   782,   570,   629,   573,
     635,    64,   512,   606,  1357,  3221,  3305,  2564,   540,   614,
     634,   615,  3311,  3312,  3313,  3314,  2449,  1516,   591,   592,
     806,   807,   808,   533,   810,   811,   812,   631,   814,   815,
     631,   372,   604,  2807,   375,   540,   925,  2873,   601,  4387,
     372,  1379,   611,   375,   807,   615,  1399,   570,   811,   559,
     372,   814,   603,   375,   372,    16,    17,   375,   585,   467,
     630,   631,   372,   635,   603,   375,   852,  4178,   372,  2843,
     578,   375,   595,  3265,   511,  2881,    19,  3269,   520,   865,
     511,    16,    17,   372,  3956,  3384,   375,   570,   615,  3155,
    2305,   877,   878,   578,   631,  3208,   882,   584,   615,  3212,
     615,   871,  3255,  3158,   631,   604,   629,  3299,  3300,  3301,
     485,  2075,  1464,   630,  2712,  3307,   631,    16,    17,    16,
      17,    46,  2086,  3315,  1017,    16,    17,    25,   388,    16,
      17,   355,   270,    73,    43,  3498,   635,  3208,   230,   925,
     615,  3212,   372,   544,   865,   375,   547,  3163,   615,  3167,
    2748,  3798,   584,   367,   615,   630,   631,   878,   361,   178,
      23,   104,   615,   630,   631,   624,   625,   626,   627,   630,
     631,   318,  1645,   389,  3493,  1068,   125,   630,   631,   301,
     615,   967,    16,    17,    51,   615,   249,  4032,   125,  4034,
    3382,   161,  4031,   615,   467,   630,   631,  2754,  1885,  3391,
     630,   631,  1540,   989,    16,    17,    16,    17,  4080,   631,
    3030,   443,   819,  4063,   157,     8,  2774,   235,   161,   435,
     190,   629,  1885,  2464,  2465,   633,   244,   615,  1915,  2516,
    2873,  2873,  1018,   615,  4106,   450,  2997,  3059,  2997,  2728,
    2729,  2730,  4187,   631,  3055,  1031,   193,   190,  2381,   631,
    2383,  2384,  1915,   226,  2826,  2383,  2384,  3228,  4192,  2166,
      32,  4195,   205,    11,   609,  2430,    16,    17,   211,  2774,
     233,    25,   879,   192,   615,  2113,    16,    17,   126,  3642,
    3203,  2947,     8,   615,  1070,   210,  2451,   350,  1074,   630,
     631,   234,   154,   615,   629,  2317,   513,   615,   241,   631,
      16,    17,  1191,   165,    30,   615,   169,  1738,   251,   631,
     202,   615,   285,   631,   650,  2241,   244,    16,    17,   457,
     263,   631,   241,    16,    17,   268,   615,   631,  3691,  1115,
    2948,   140,   467,   282,   277,   233,   264,  2519,   357,  1228,
     390,   372,  2899,  1129,   375,   282,    16,    17,   341,  1070,
    2410,  1824,  1878,  1074,  2997,  2997,   629,   461,    16,    17,
     378,  2069,  1888,  2828,   284,  1891,  1892,  2247,  2248,   629,
     363,    80,  3485,  3486,  3693,  2069,   600,  1938,  3152,    16,
      17,   129,   274,  4317,  2337,   615,    16,    17,  2392,   370,
     183,   538,   355,  1179,   242,    16,    17,  3217,   341,   631,
    1753,   631,  2567,    31,  1755,  1191,  2313,   268,  2573,   358,
     308,   372,   230,   467,   375,   631,    82,  3191,   565,  2240,
     363,   358,   637,   637,    16,    17,  1743,   623,   631,  2250,
     373,   483,   341,  1322,   630,  1788,   254,   372,     6,   386,
     375,   414,  1228,   660,   507,    16,    17,  1233,  4287,  4288,
      16,    17,  1238,    52,   373,  2408,    84,   520,  3947,  1812,
    1813,  1247,   405,  4313,    63,  1816,  2430,   407,  4013,   467,
    2408,  3282,   244,   372,   810,   372,   375,   190,   375,   233,
     189,   372,  1799,   467,   375,   372,  3804,   354,   375,    57,
     540,    16,    17,  1845,   629,   267,    16,    17,   797,  1285,
    3906,  3907,    16,    17,   111,   467,   476,   485,   317,   371,
     453,  1297,   373,  1299,  2075,  3777,  1302,  1238,    16,    17,
     440,   230,  2737,  3374,   576,  2086,  4471,   155,  1314,    16,
      17,    12,   475,  1303,   192,   460,  1322,   484,   372,   558,
     534,   375,    16,    17,  2497,   254,  3612,  1333,  1334,   612,
      16,    17,   515,   104,   308,   574,   222,   467,   224,  2497,
     372,   168,   372,   375,   277,   375,   618,   251,  3238,    16,
      17,  1357,   420,   516,  1360,   629,   432,   145,  1467,   263,
     472,   448,  1368,     0,   615,   467,   467,   253,   195,  3259,
     530,   890,   585,   342,  1380,  1381,  1382,  1383,  1384,  1385,
     631,   355,  2889,  2567,  1390,  1375,  3969,   130,   475,  2573,
    1396,  1397,   630,  1399,   563,   555,  1402,  1380,  1381,  1382,
      12,  1384,   372,    16,    17,   375,   563,   375,   268,   572,
     157,   629,   372,  2920,  1397,   375,  1422,   600,    12,  1402,
    2881,   400,   585,  4006,  2931,   629,  3334,  2934,   561,   633,
     506,    16,    17,   125,   615,   427,   372,    16,    17,   375,
     141,   604,  1383,   606,  1385,   202,   394,   629,   161,   517,
     631,   125,   585,   372,   128,   274,   375,   539,   192,   372,
     615,  1467,   375,   234,   606,   605,  2819,   630,   631,  2564,
     161,   634,   635,  2980,   403,  1481,   631,   125,  1484,  1485,
     251,  1422,   372,  1473,  3478,   375,   205,  2948,  2873,   631,
    3852,   572,   263,   185,   372,   534,   615,   375,   615,   629,
     269,    16,    17,   272,   615,    16,    17,   125,   615,   274,
    1516,   185,   631,   373,   631,   372,    82,   274,   375,  3805,
     631,   213,   372,   511,   631,   375,   168,   629,   629,   141,
    1536,   372,  1538,  1539,   375,  1541,  1542,   185,    12,   213,
    1481,   515,   285,   491,  1485,    16,    17,   141,  1554,   453,
    1556,    12,   400,   129,  2612,  1538,  1539,  3628,    16,    17,
     372,   615,  2708,   375,   352,   213,   637,   185,    82,    39,
     341,   540,    12,   551,   422,  3569,    46,   631,   405,    16,
      17,   372,    96,   615,   375,   615,   372,   138,  2761,   375,
     282,   356,  4074,  2244,  1113,   213,    41,   566,   222,   631,
     224,   631,   153,  2761,   342,   593,   454,   364,   282,    82,
      16,    17,  2997,  3851,    16,    17,  4098,  4099,    16,    17,
      16,    17,  4248,  4249,    16,    17,   600,   372,    17,   417,
     375,   419,   372,   225,   282,   375,    16,    17,   372,  1645,
    1646,   375,    16,    17,  1163,   615,   415,  1756,  1167,  2430,
      89,  2342,  2343,  2344,   372,   615,   222,   375,   224,  2754,
     629,   631,   510,  2136,   282,   372,   358,   141,   375,   108,
    2143,   631,    16,    17,  3574,   561,   235,  3577,   372,   615,
     141,   375,   453,  2156,   358,   244,   372,   253,   205,   375,
     135,    16,    17,    16,    17,   631,   615,  1703,  3133,   585,
     205,   141,   615,   629,   210,   372,   534,   534,   375,   629,
     358,   637,   631,    16,    17,   472,  2189,   637,   631,   537,
     530,    16,    17,  3500,   534,   615,  3735,  3736,   205,   556,
    3630,   543,  3510,   230,    16,    17,  3421,   615,   125,  1745,
     358,   631,   256,  1005,  1006,   516,   251,  1753,   254,  1755,
    1756,  4015,   630,  4017,   585,    16,    17,  4207,   615,   372,
     233,  1767,   375,  1769,   230,   615,   230,    16,    17,  1775,
    1776,   598,  1778,   630,   615,    16,    17,  2350,  3556,   585,
     630,   585,  1788,  1045,  2257,  1791,  2567,   372,   598,  1795,
     375,   225,  2573,   372,    16,    17,   375,   530,   185,   630,
     631,   534,   540,   615,  2899,   497,  1812,  1813,  1814,  1815,
    1816,    16,    17,  2997,   328,    16,    17,   367,  1824,   378,
    1810,  1827,  1828,  1829,   615,   631,   159,   631,   566,   615,
    2377,   637,   510,   637,  1775,  1776,   514,  1778,  1844,   630,
     354,    16,    17,   592,   630,   192,   595,  1853,   289,   290,
    1791,    16,    17,    47,  1795,    16,    17,   372,  1848,   735,
     375,   372,   530,   634,   375,   178,   534,   590,   373,   241,
     615,   563,   125,  1814,  1815,   615,   349,    16,    17,   755,
     475,   615,   355,  2773,  1890,   630,  1827,  1828,  1829,   563,
     630,    58,   768,   769,   606,   282,  1902,   615,   467,   285,
     233,   372,   416,  1909,   375,  2477,   475,  2814,   615,   123,
      16,    17,   630,   630,   372,   563,  2823,   375,   351,   352,
     635,   615,  2469,   630,  3204,  3833,  3834,  3835,   637,   615,
     598,  2814,   185,  1923,  3034,   372,   630,   369,   375,   579,
    2823,   505,  1932,  1933,   630,   563,  2493,  2494,   615,  1890,
     629,   424,   189,  1943,  1944,  1945,  1946,     6,  1948,  1949,
     213,  3955,   631,   630,  3064,  3065,   372,    11,  1909,   375,
     372,   358,   441,   375,   372,  2084,   372,   375,   629,   375,
     372,  2090,   630,   375,   629,  3085,  3159,    16,    17,   430,
     431,   505,   372,    16,    17,   375,   580,   581,   372,   583,
    2006,   375,   615,   629,    16,    17,   629,   221,   175,  3362,
     629,   125,   179,   629,  3362,  2021,   540,   630,   629,  2128,
     589,   590,   355,   190,    16,    17,   629,   192,   372,   282,
     615,   375,  2141,   630,   631,  3787,   615,   637,   351,   352,
     629,    25,   515,  3216,   357,   630,   629,   372,   629,   372,
     375,   630,   375,   192,    59,    60,  2046,  2047,  3216,  2049,
     629,  2051,  2052,  2053,  2054,  2055,    71,   629,  2058,   372,
    2060,   185,   375,   629,    16,    17,  3249,   372,  2084,  2825,
     375,  2774,    16,    17,  2090,    19,  2092,    17,   629,  2095,
     372,  3249,  4086,   375,   629,   568,  2102,  2103,  2104,  2105,
     615,   629,  2108,   629,   615,   358,   320,    16,    17,   530,
     324,   372,  2095,   534,   375,   630,   629,   331,   515,   630,
     630,   631,  2128,   372,  2233,   629,   375,   600,   630,   631,
     629,   372,  3811,  3812,   375,  2141,    16,    17,   629,    19,
     342,  3949,   630,   631,   615,   630,   631,    16,    17,   316,
     372,   630,   631,   375,  3906,  3907,  2265,   615,   125,   630,
     581,  2102,  2103,  2104,  4072,   172,  3984,   372,   282,   629,
     375,   372,   630,   629,   375,   159,   563,  2714,   615,    16,
      17,   629,   515,  2756,  3992,  3993,    16,    17,  3996,  3997,
    3998,  3999,   585,   630,   629,  3233,  3234,   372,   412,   629,
     375,   630,   631,   629,  2777,  2778,  2779,   372,  3985,   615,
     375,   372,   142,   615,   375,   629,  2997,   615,   185,   615,
    3320,   630,   631,   615,   630,   630,   631,  2233,   630,   363,
    2703,  2804,   630,   372,   630,   615,   375,    17,   630,    25,
     404,   615,   630,   631,   358,   558,   213,   414,   203,   233,
     630,   465,  2258,    16,    17,   370,   630,  3718,  3719,  2265,
     629,   574,  2371,   629,  2373,  2374,   372,   600,   629,   375,
     342,   615,   629,  2279,   524,   525,  3449,   629,   528,   529,
     629,  3960,   532,   629,   534,  3964,   630,   629,  4096,  4097,
     615,  3449,   615,   630,   631,   629,    82,  4105,   631,    12,
    4052,  4053,  3360,   630,   631,   630,  2312,   630,  2417,  2418,
     563,   629,   615,   467,   144,   282,    32,   629,   155,   629,
     615,   630,   631,  4100,   308,    59,    60,   630,  4013,   630,
     631,  2337,   456,   615,   111,   630,   593,   594,   540,   596,
     629,   598,   629,   372,  2350,  1776,   375,  1778,   630,   372,
     305,   306,   375,   629,   615,   310,   311,  2363,   125,  2365,
     372,   128,   142,   375,   566,  2371,   615,  2373,  2374,   630,
     629,   355,   363,  2363,   615,  2381,   456,  2383,  2384,  2488,
     372,   630,   104,   375,   629,    82,    25,   629,   602,   630,
     176,   358,   530,   615,  4146,   629,  1827,  1828,  1829,   629,
     330,   629,  2408,   617,   629,  3500,   629,   531,   630,  4161,
     615,  2417,  2418,   537,   615,  3401,   151,   152,   185,   630,
     631,   629,  4174,   630,   631,   630,   142,   629,   141,   630,
     372,    80,   629,   375,   629,   589,   590,   629,   372,   216,
     615,   375,   629,    82,  4123,  4124,   213,   233,   629,   563,
     615,  2457,   630,   631,   615,   630,  2462,   581,    11,   630,
     631,  2467,   159,   372,   363,  2471,   375,  2473,   540,   630,
     629,  4465,   630,   631,   598,   629,   615,  2483,   629,  2485,
    2486,   629,  2488,  2458,  4236,  2475,  2476,   630,   631,  2495,
     631,  2497,   372,  2468,   566,   375,  4248,  4249,   629,  2474,
     629,  2507,   215,   372,   630,   631,   375,   630,   631,   615,
    2516,  2501,   234,   630,   631,   282,   629,  2523,  2524,   629,
     159,  2496,   308,  2529,   630,   630,   631,  2502,   244,   251,
    2536,   515,  3183,  2508,  2509,   372,   233,   176,   375,  2529,
     189,   263,   372,   629,  4296,   375,   630,   631,   478,   479,
     330,   267,   630,   631,  4306,   630,   631,   629,   111,   630,
     631,   630,   631,   349,   630,   631,  2507,   817,   629,   355,
     630,   631,    55,  2563,    12,   629,   129,   630,   631,  4397,
     226,   230,    65,   630,   631,   491,   615,   629,  2594,  2595,
    3163,   358,   615,   629,   233,   629,   563,  4349,    81,  4351,
    3073,   630,   379,   615,    42,   254,    49,   630,    12,  4361,
      93,    94,    95,   390,   330,   168,   600,   630,   630,   341,
     397,   630,   631,   615,  3532,  3533,   109,   629,  4380,   629,
    4382,   629,  4384,   629,   543,   351,   352,  3545,   630,  4391,
    3113,   363,   195,   279,  3552,   125,    49,   631,   630,   631,
    4402,   631,   349,  2594,  4472,   630,   631,  3271,   355,    97,
    3274,  3275,   630,   631,   102,   363,  4418,  4419,   363,   308,
    3578,  3579,    26,   615,   543,  3657,  3658,  3291,   630,   631,
     461,   615,  4434,  4435,    63,   630,   631,  4439,   630,   624,
     620,   621,   622,   623,   624,   625,   626,   627,   478,   479,
     167,    80,   630,   631,   572,   185,   615,   630,   631,   475,
     349,   427,   489,    92,   629,  3842,   355,    71,  2724,   630,
     631,  2727,  2728,  2729,  2730,   278,   268,   424,    82,   515,
    2736,   453,   190,   213,   530,   615,   511,   141,  3358,  3359,
     389,   167,   222,   511,   224,   142,   615,   630,   631,  2755,
    2756,   630,   631,   279,   403,  2761,   630,   631,   630,   631,
     630,   631,   478,   479,  1164,  1165,  4053,   158,  2774,  3755,
    3384,  2777,  2778,  2779,   128,  3761,   492,    91,   615,  3169,
    3170,  3126,  3127,   631,  2790,   615,   499,   500,   365,   502,
    2796,   504,  2798,  2902,   516,  2736,   563,   104,  2804,  3371,
    2790,   526,   282,   516,   581,  3342,  3430,  3431,   246,  3982,
     189,   215,   630,  2819,   600,   194,   157,   128,   515,  1084,
    1085,  1086,   114,   636,  3982,     6,   629,     4,   113,   466,
     244,   631,   389,   598,   104,    56,   319,  1102,   142,   433,
     620,   621,   622,   623,   624,   625,   626,   627,   172,   114,
     223,   230,   405,   631,   337,   631,   142,    71,   637,    12,
     603,   630,   540,   141,     9,   637,   630,    34,   222,  1134,
     224,   568,  1137,   631,   630,   254,   515,  2883,   358,   317,
    2886,  2887,   630,  2889,   637,   629,  3506,   267,   637,   631,
    3985,  1156,  1157,    60,   279,  1160,  2902,   159,    19,  2905,
     254,   279,   279,   600,   620,   621,   622,   623,   624,   625,
     626,   627,   636,  2903,  2920,  1180,  1181,   279,    49,   279,
     473,  2911,   279,    19,   631,  2931,   530,   234,  2934,   629,
      26,   274,   631,   330,   631,   388,   551,   631,   631,   142,
     551,    12,   631,   381,   251,   161,   631,   631,   115,  4236,
    2956,   118,   505,  2959,   631,   244,   263,   624,  2964,   126,
     528,   600,   245,   180,   234,   190,   631,   577,  2974,   631,
     488,   392,  2978,   137,  2980,    71,   143,   363,   531,   631,
     463,   251,   630,   104,   631,   161,    82,   161,   161,  2995,
     161,  2974,   631,   263,   579,   161,   161,   351,   352,   161,
     161,   161,   161,   357,  3010,  4100,   161,   161,    63,   363,
     389,  3017,  3002,  4186,   161,   161,   195,   161,  2959,   161,
     161,   161,   631,  3029,   403,    80,   330,   610,  4186,   584,
     363,   363,   128,   363,   341,   518,   157,    92,   631,   630,
     161,  3732,  3733,  3734,   330,   598,   630,  4033,   630,   403,
     630,   630,   624,   536,   192,   493,   363,  3947,   192,   630,
     630,   630,  4349,  3172,  4351,   631,   629,   188,   630,   190,
     630,   341,   623,   631,   630,   242,  3017,  3766,   630,  3188,
     630,   478,   479,   563,   205,   631,   630,   630,   572,   527,
     211,   630,   476,  4380,   629,   499,   500,   501,   502,   503,
     504,  3107,   198,   627,   629,   226,   629,  3727,  3728,  3115,
    3730,  3731,   516,   234,   630,   494,   631,   471,   551,   604,
     241,   232,  3694,   629,   522,  3115,   222,   330,   224,    11,
     251,  4418,  4419,  3139,   189,   203,   192,   637,  4265,   194,
     192,   630,   263,  3680,   170,   457,   453,   268,   475,   413,
     631,   190,   631,  3159,  3160,    47,   277,  3163,   254,   339,
     505,   505,    80,    82,   466,   505,  3172,   505,   505,   389,
     389,    90,  3178,   137,   389,   230,   343,   551,   252,   531,
     252,   531,  3188,   453,   137,   389,    47,   389,   387,   389,
    3196,   389,   478,   479,   573,   114,   389,   436,  3790,   254,
     629,   629,   278,   579,  3893,   629,   637,   630,   155,   516,
    3216,   630,   240,   585,   630,   142,   240,   637,   630,   573,
     341,   630,  3228,   620,   621,   622,   623,   624,   625,   626,
     627,   630,  3238,   551,  3240,   637,   637,   637,  4365,   631,
     159,   630,   363,  3249,   637,   551,   516,   630,   111,  3255,
     637,  3257,   373,  3259,   551,   351,   352,   274,   540,  4432,
     631,   357,   611,    88,    47,  3374,   629,   363,   629,    26,
      27,  3846,   161,   629,  4432,   478,   479,   551,   629,   370,
     161,   192,  4455,   192,   405,   192,    16,    17,   192,  4462,
    4276,  4277,   241,  4279,   248,  4468,  1561,  4455,   637,   170,
     358,   637,    59,    60,  4462,    62,   631,   403,   251,   251,
    4468,   230,   376,   321,    71,   114,   483,   244,   622,   623,
     624,   625,   626,   627,   114,    82,  3332,   161,   162,   254,
     254,   194,   453,    90,   637,  3325,   622,   623,   624,   625,
     626,   627,  4328,   551,  4330,  4331,   369,   205,   403,   629,
     629,  3357,  3358,  3359,   475,  3464,  3362,   114,  3348,   161,
     450,   629,   196,   373,   389,   540,   637,   230,  3374,   624,
     629,   128,   629,   207,   131,   471,   242,   242,   630,   630,
     547,   183,  1647,   630,   630,   630,  1651,   637,   307,   119,
     120,   121,   122,   123,   196,   516,   630,   630,   630,   606,
     624,   629,   159,   330,    60,   207,   325,  4393,  1673,   576,
     226,   363,   630,   247,   269,   278,  4063,   389,   621,   622,
     623,   624,   625,   626,   627,   259,  4001,   637,   336,   630,
     349,   192,   244,    85,   631,    87,   631,   265,  3444,   494,
      71,   578,   251,  3449,   251,  3554,  4430,   363,   631,   254,
     254,   572,   286,   631,    82,   257,   401,   259,  3464,   115,
     629,   631,   118,   584,   585,   222,   629,   224,   363,   363,
     126,    36,   630,   230,   631,    19,   128,   573,   630,   629,
     631,   238,   491,   604,   286,   606,   363,   143,   218,   219,
     220,   221,    47,   363,   467,   630,   253,   149,   268,  4036,
    3506,   629,   629,   629,   629,    47,   630,   469,   630,   630,
     631,   345,  4146,   634,   635,  4087,   418,  3523,   573,  3628,
     606,   203,     6,   148,   261,   630,   630,  4161,  4065,    13,
     186,    15,   184,   631,   205,   629,   477,    36,   251,   251,
    4174,  3516,    26,    27,   629,   111,   348,   631,  3554,   629,
     307,   478,   479,   118,   128,   128,   629,   399,   637,    86,
     125,   144,   485,   630,   462,  3555,   631,   630,   325,   491,
     630,   630,    19,    57,  3580,    34,   630,   630,    62,    63,
     630,  3587,   630,    34,   358,    69,   242,  3696,    60,   242,
     320,   327,   322,   323,   324,   630,   515,   630,    82,  3605,
     402,   331,   168,   630,  3594,   256,    90,   413,   630,   277,
     473,   370,   531,   178,   606,   241,   100,   629,   631,   118,
     185,   637,  3628,   380,   630,   382,   125,    47,   631,   195,
     114,   494,   211,   390,   327,   540,   418,   540,   629,    12,
      13,   585,   372,   629,   128,   375,   585,   131,   213,   214,
     629,   629,   629,    82,   138,   139,   630,   304,   629,   595,
     595,   145,  4296,   142,   230,    14,  4313,    96,   531,   153,
     629,   534,  4306,   157,   537,   159,   128,   578,   254,   178,
      19,   357,   412,   254,   340,   631,   185,   343,    34,   629,
    3696,   457,   630,   620,   621,   622,   623,   624,   625,   626,
     627,   458,   170,   358,   188,   631,   327,   136,  3714,   174,
     573,    17,   278,   540,   213,   214,   540,   282,   581,   540,
     254,  3727,  3728,   534,  3730,  3731,   585,  4361,   585,   381,
     103,   630,   629,   589,   464,   465,   241,   630,   222,   363,
     224,   353,   590,  3852,   228,   509,   230,  4322,  4382,   450,
    4384,   358,   606,   170,   238,   630,   138,  4391,   515,   132,
      13,   370,   631,   578,   420,   244,   521,   629,  4402,   253,
     156,  3777,   145,   425,   531,   190,  4423,   342,   535,   629,
     629,   603,   629,   282,    31,   638,   630,  3777,  4325,   190,
    3796,  3797,   357,   358,   630,   168,   384,   554,   171,   630,
    4434,  4435,  3808,    61,   542,  4439,   137,   137,   159,   182,
    4457,   629,   405,    73,   603,   572,   426,   192,    31,    63,
     370,    63,   630,   307,   522,   270,    47,   256,   631,   629,
     203,    47,   629,   629,   400,  3841,     5,   363,  3844,   405,
     363,   325,   630,   342,   241,   329,  3852,    12,    13,   635,
     103,   330,   155,   370,   353,   370,  3797,   230,   357,   358,
     136,   144,  4399,    47,   237,   522,   629,    47,   154,    47,
     578,   132,   602,   155,   631,   603,  3882,   225,   284,   132,
     638,   635,   127,   150,   368,   615,   616,   617,   457,   373,
     629,   547,   145,    47,    47,    47,   380,  3903,   382,   328,
    3841,   630,  3908,    53,   277,   389,   390,   473,   635,   223,
     459,   631,   630,   254,   155,   168,   543,   631,   171,   208,
     576,   631,   351,   352,   635,   354,    47,   630,   630,   182,
      53,   631,  4469,   440,   190,   190,   190,   421,   103,   226,
     543,   605,   128,   629,   358,   475,   631,  3913,   191,  3334,
     203,   435,   436,   437,   438,  2272,  3335,  2446,  3948,  2062,
    3603,   658,  3940,  4066,  4255,   531,  1002,   132,  4256,  3601,
    3605,   537,  4457,  4410,   458,   540,  3982,   230,  3795,   544,
     145,    46,   547,   578,   237,  2774,  3787,   416,  1823,  4420,
     556,  4293,  4101,   558,  4139,  4293,  3787,  4249,   563,   478,
     479,   566,  3787,   168,  4165,  3787,   171,  3787,  3787,  4015,
    3787,  4017,  3787,  4019,  3787,   581,  4164,   182,   675,  3787,
    3787,  3787,  3787,   680,   277,  1043,  1476,  1747,  3945,  1478,
    2020,   515,   598,   406,  1486,  2929,  2750,   410,   203,  4045,
    3443,   540,  3139,  1319,  2755,   544,  3446,   531,   547,  4091,
    4190,   535,  4365,   426,  3842,  4273,  4322,   622,   623,   558,
     717,   434,  4001,  1531,   563,   230,  3610,   566,  4074,   442,
     554,   517,   237,  2013,  2595,   559,   505,   734,  3003,  3259,
    2021,  3247,  2526,  4340,  4074,  4091,  3238,  4036,   572,  3055,
    3282,  3316,  3753,  3565,   467,  4101,  4087,  3554,  4207,  3188,
      11,  4107,  4023,    11,  4094,  4095,  4123,   480,   481,  4124,
    1545,  3951,   277,  3960,  3964,  2100,  3808,  3761,   775,   776,
     777,   778,  2020,   622,   623,  3240,   971,   631,  2519,  3520,
     787,  1436,  2332,  3239,  1814,  1897,  2305,    34,  1485,  1527,
    2736,   620,   621,   622,   623,   624,   625,   626,   627,  3134,
    2354,   635,   525,   406,  3115,  2223,  3789,   599,   911,  1834,
    2132,  2135,  4271,  1129,  3206,  2714,  2409,  2222,  3867,  4222,
      67,  3721,  4223,   426,  3332,  2251,  3249,  1452,  2819,  3715,
    4186,   434,  1102,   556,   119,   120,   121,   122,   123,   442,
    3696,  2515,  4399,  2359,  1302,  2105,  2336,  2299,  1334,  3449,
    3154,  4207,  3153,  1886,  3216,   578,  4186,   580,  4198,  4199,
     589,   868,  1554,   671,   467,   577,  4222,  4223,  1887,  1766,
    1388,  3257,  1416,  1340,  4315,  3137,  4214,   480,   481,  4363,
    4462,  4283,  4468,  3556,  1839,  3159,  1368,  3196,   135,  2806,
    3475,   406,  3704,  1358,   569,   410,  1795,   893,  1294,  3831,
    3837,   570,  1536,   898,   513,   658,  2724,    -1,   658,   658,
      -1,   426,   159,   513,    -1,  4271,   163,    -1,    -1,   434,
      -1,    -1,   525,    -1,    -1,    -1,    -1,   442,    -1,    -1,
      -1,    -1,    -1,   218,   219,   220,   221,    -1,    -1,    -1,
      -1,    -1,  4298,    -1,    -1,    -1,    -1,    -1,    -1,  4305,
     197,    -1,   467,   556,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,    -1,    -1,    -1,
     217,    -1,    -1,    -1,    -1,   578,    -1,   580,    -1,    -1,
      -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4451,    -1,    -1,    -1,    -1,  4337,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     525,    -1,    -1,    -1,    -1,    -1,    -1,  1024,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4381,    -1,    -1,    -1,    -1,
    4386,    -1,   279,    -1,    -1,   320,    -1,   322,   323,   324,
      -1,   556,    -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   301,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   578,    -1,   580,    -1,  4423,    -1,    -1,
      -1,    -1,    -1,  1080,  1081,    -1,  4432,    -1,    -1,    -1,
      -1,    -1,  1089,  1090,  1091,  1092,  1093,  1094,  1095,  1096,
    1097,  1098,  1099,  1100,  1101,  4451,    -1,    -1,    -1,  4455,
      -1,  4457,  1109,  1110,    -1,  1112,  4462,  1114,    -1,    -1,
      -1,  1118,  4468,    -1,  1121,  1122,  1123,  1124,    -1,  1126,
    1127,  1128,    -1,    -1,    -1,    -1,    -1,   412,  1135,  1136,
      -1,  1138,  1139,  1140,  1141,  1142,    -1,    -1,  1145,  1146,
    1147,  1148,  1149,  1150,  1151,  1152,  1153,  1154,  1155,    -1,
      -1,  1158,  1159,    -1,    -1,  1162,    -1,   404,    -1,  1166,
      -1,  1168,  1169,    -1,    -1,    -1,   413,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1182,  1183,    -1,    -1,   464,
     465,   428,   227,  1190,    -1,    -1,    -1,    -1,    -1,    -1,
    1197,  1198,  1199,    -1,  1201,    -1,    -1,    -1,    -1,   446,
      -1,  1208,  1209,  1210,    -1,  1212,  1213,  1214,  1215,  1216,
      -1,  1218,  1219,  1220,  1221,  1222,  1223,  1224,  1225,    -1,
      -1,    -1,  1229,  1230,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   485,   486,
      -1,    -1,   287,   288,   289,   290,   291,   292,    -1,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,    -1,
      -1,    24,    -1,    -1,   511,    -1,    -1,    -1,    -1,    -1,
      -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   530,    -1,    -1,   533,   534,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    59,    60,    -1,  1306,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   602,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   680,    -1,    -1,    -1,    -1,
      -1,   616,   617,    -1,    -1,   582,    99,    -1,   101,    -1,
     103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1368,   717,    -1,    -1,    -1,    -1,    -1,    -1,  1376,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   734,
      -1,    -1,    -1,    -1,    -1,   430,   431,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   158,   159,    -1,    -1,    -1,
      -1,   164,    -1,    -1,   167,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   778,    -1,    -1,    -1,    -1,    -1,    -1,
     193,    -1,   195,    13,    -1,    15,    -1,    -1,    -1,   202,
      -1,   204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   229,   230,   231,    49,
      50,  1478,    -1,    -1,    -1,    -1,    -1,    57,    -1,    -1,
      -1,    -1,    62,    63,    -1,    -1,    -1,    -1,    -1,   252,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,
      -1,   274,    -1,   868,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   103,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   301,    -1,
      -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   132,   133,   134,    -1,    -1,    -1,    -1,    -1,
    1567,    -1,    -1,    -1,   144,   145,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   157,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   367,    -1,    -1,   187,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   203,    -1,    -1,    -1,    -1,   208,    -1,
     393,    -1,   212,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   404,   405,    -1,    -1,   408,   409,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,   239,
      -1,    -1,    -1,    -1,    -1,    -1,   429,    -1,    -1,  1024,
      -1,    -1,  1679,  1680,  1681,   255,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1693,    -1,    -1,    -1,
      -1,    -1,    -1,   273,    -1,    -1,    -1,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   472,
      -1,    -1,  1719,    -1,    -1,    -1,    -1,    -1,  1725,    -1,
      -1,  1728,   485,  1730,    -1,  1080,  1081,    -1,    -1,  1736,
      -1,  1738,  1739,    -1,  1089,  1090,    -1,    -1,  1093,  1094,
    1095,  1096,  1097,  1098,  1099,  1100,  1101,    -1,   511,    -1,
      -1,    -1,   515,    -1,  1109,  1110,    -1,  1112,    -1,  1114,
      -1,    -1,    -1,    -1,    -1,    -1,  1121,  1122,  1123,  1124,
     533,   534,  1127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1135,  1136,    -1,  1138,  1139,    -1,    -1,    -1,   368,    -1,
    1145,  1146,  1147,    -1,    -1,  1150,  1151,  1152,  1153,  1154,
    1155,    -1,  1809,  1158,  1159,   385,    -1,  1162,    -1,   389,
      -1,  1166,    -1,  1168,  1169,    -1,    -1,    -1,    -1,   582,
     400,    -1,    -1,    -1,    -1,    -1,    -1,  1182,  1183,    -1,
     593,   411,    -1,    -1,    -1,  1190,    -1,    -1,   601,    -1,
      -1,    -1,  1197,  1198,  1199,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   433,    -1,    -1,   436,    -1,   438,    -1,
      -1,   441,    -1,    -1,   444,   445,    -1,    -1,    -1,    -1,
      -1,    -1,   452,    -1,   454,  1230,    -1,    -1,    67,    -1,
      -1,   461,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   475,    -1,    -1,    -1,    -1,
     480,    -1,   482,    -1,    -1,   485,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     510,    -1,    -1,    -1,   514,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
      -1,  1306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     159,    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,   559,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   571,    -1,    -1,    -1,   575,    -1,    -1,   578,    -1,
      -1,    -1,    -1,    -1,   584,    -1,  2013,    -1,   197,    -1,
      -1,    -1,    -1,  1368,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1376,    -1,    -1,    -1,    -1,    -1,    -1,   217,    -1,
      -1,    -1,    -1,   613,    -1,    -1,  2043,    -1,    -1,   619,
      -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,   629,
      -1,    -1,    13,    -1,    15,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    49,    50,
     279,  2098,    -1,    -1,    -1,    -1,    57,    -1,    -1,    -1,
      -1,    62,    63,    -1,    -1,    -1,    -1,  2114,    -1,    -1,
      -1,  2118,   301,    -1,    -1,    -1,  2123,  2124,    -1,    -1,
      -1,    -1,    -1,    84,    -1,  2132,  2133,    -1,  2135,  2136,
    2137,  2138,    -1,  2140,    -1,    -1,  2143,    -1,    -1,    -1,
      -1,    -1,   103,    -1,    -1,    -1,  2153,    -1,  2155,  2156,
      -1,  2158,  2159,  2160,  2161,    -1,  2163,    -1,    -1,  2166,
      -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,  2175,    -1,
      -1,   132,   133,   134,    -1,  2182,    -1,  2184,    -1,  2186,
    2187,  2188,  2189,   144,   145,    -1,  2193,  2194,  2195,    -1,
      -1,    -1,  2199,  2200,  2201,    -1,  2203,    -1,  2205,    -1,
    2207,    -1,  2209,    -1,  2211,    -1,    -1,    -1,    -1,  2216,
     171,    -1,  1567,    -1,    -1,   404,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   413,    -1,   187,  2234,    -1,    -1,
      -1,    -1,    -1,    -1,  2241,    -1,    -1,  2244,    -1,   428,
      -1,    -1,   203,  2250,    -1,    -1,  2253,   208,    -1,    -1,
    2257,   212,    -1,    -1,    -1,    -1,    -1,   446,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,   239,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   255,    -1,   485,   486,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2313,    -1,    -1,    -1,
      -1,    -1,   273,    26,    27,    -1,   277,    -1,    -1,    -1,
      -1,    -1,   511,    -1,  1679,  1680,  1681,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   533,    -1,    59,    60,    -1,    62,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,
      -1,    -1,    -1,    -1,  1719,    -1,    -1,    -1,    -1,    82,
      -1,    -1,    -1,  1728,    -1,  1730,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   582,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   114,    -1,    -1,    -1,    -1,    -1,   368,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   128,    -1,    -1,   131,    -1,
      -1,    -1,  2429,    -1,   385,    -1,    -1,    -1,   389,    -1,
      26,    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,
    2447,  2448,    -1,    -1,    -1,    -1,   159,    -1,    -1,    -1,
     411,    -1,    -1,    -1,  1809,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,
      -1,    -1,   433,    -1,    -1,   436,    -1,   438,    -1,    -1,
     441,    -1,    -1,   444,   445,    -1,    82,    -1,    -1,    -1,
      -1,   452,    -1,   454,    90,    -1,    -1,    -1,    -1,    -1,
     461,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,   222,
      -1,   224,  2519,    -1,   475,    -1,    -1,   230,   114,   480,
      -1,   482,    -1,    -1,   485,   238,    -1,    -1,    -1,    -1,
      -1,    -1,   128,    -1,    -1,   131,    -1,    -1,    -1,    -1,
     253,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   510,
      -1,    -1,    -1,   514,   267,    -1,    -1,    -1,  2565,  2566,
      -1,    -1,    -1,   159,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2599,    -1,   307,    -1,    -1,    -1,   559,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2616,
     571,    -1,   325,  2620,   575,    -1,    -1,   578,    -1,    -1,
      -1,    -1,    -1,   584,    -1,    -1,   222,    -1,   224,    -1,
      -1,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   238,  2650,  2651,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,    -1,    -1,   253,   619,    -1,
      -1,    -1,    -1,  2670,    -1,    -1,    -1,   380,   629,   382,
      -1,    -1,  2679,    -1,  2681,    -1,  2683,   390,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2043,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2703,    -1,    -1,    -1,
      -1,  2708,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2732,    -1,    -1,    -1,   325,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   458,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2114,
      -1,    -1,    -1,  2118,    -1,    -1,    -1,    -1,  2123,  2124,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2132,  2133,    -1,
    2135,    -1,  2137,  2138,   380,  2140,   382,    -1,    -1,    -1,
      -1,    -1,  2799,    -1,   390,    -1,  2803,    -1,  2153,    -1,
    2155,    -1,   515,  2158,  2159,  2160,  2161,    -1,  2163,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   531,    -1,
    2175,    -1,   535,    -1,    -1,    -1,    -1,  2182,    -1,  2184,
      -1,  2186,  2187,  2188,    -1,    -1,    -1,    -1,  2193,  2194,
    2195,   554,    -1,  2850,  2199,  2200,  2201,    -1,  2203,    -1,
    2205,    -1,  2207,    -1,  2209,    -1,  2211,    -1,    -1,   572,
      -1,  2216,   458,    -1,    -1,    -1,    -1,    33,    34,    -1,
      -1,    -1,    -1,    39,    -1,    41,    -1,    43,    44,  2234,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,  2250,    -1,    -1,  2253,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   629,    -1,    -1,   515,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   531,    -1,    -1,    -1,   535,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,   554,    -1,
     126,    -1,    -1,    -1,  2971,  2972,    -1,    -1,    -1,    -1,
      -1,     6,    -1,    -1,    -1,    -1,   572,   143,    13,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2996,
      -1,    26,    27,    -1,   160,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3024,   184,    -1,
     186,    -1,    57,    -1,    -1,    -1,    -1,    62,    -1,    -1,
    3037,    -1,    -1,   199,   200,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3070,  3071,   100,  3073,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3082,   242,    -1,    -1,   114,
    3087,    -1,    -1,  3090,    -1,  3092,  3093,    -1,    -1,    -1,
      -1,    -1,    -1,   128,    -1,    -1,   131,    -1,    -1,    -1,
      -1,    -1,    -1,   138,    -1,   271,  3113,    -1,    -1,    -1,
     145,    -1,    -1,    -1,   280,   281,    -1,   283,   153,    -1,
      -1,  3128,    -1,    -1,   159,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3153,   313,   314,   315,
      -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   332,   333,   334,    -1,
      -1,    -1,    -1,    -1,   340,    -1,  3183,   343,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,    -1,   224,
    3197,    -1,    -1,   359,   360,   230,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   238,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3218,    -1,    -1,    -1,    -1,    -1,    -1,   253,    -1,
    3227,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,
     396,    -1,    -1,    -1,    -1,    26,    27,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   420,    -1,    -1,    -1,    -1,    -1,
      -1,  2616,    -1,    -1,    -1,  2620,    -1,    -1,    59,    60,
      -1,    62,   307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     325,    82,    -1,    -1,   329,  2650,  2651,    -1,    -1,    90,
      -1,    -1,  3309,    -1,    -1,   471,    -1,    -1,    -1,   475,
      -1,    -1,    -1,    -1,    -1,  2670,    -1,    -1,    -1,    -1,
      -1,   487,    -1,   114,  2679,    -1,  2681,    -1,  2683,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,   373,    -1,
     131,    -1,    -1,    -1,    -1,   380,    -1,   382,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   390,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   159,    -1,
      -1,    -1,    -1,    -1,    -1,   541,    -1,  2732,   544,    -1,
      -1,   547,   548,   549,   550,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   436,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   458,    -1,   591,   592,    -1,    -1,    -1,
      -1,   222,    -1,   224,    -1,    -1,    -1,    -1,    -1,   230,
      -1,    -1,    -1,  3450,  2799,    -1,    -1,   238,  2803,    -1,
      -1,   617,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   253,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     515,    -1,  3489,  3490,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3498,    -1,    -1,    -1,  2850,   531,    -1,    -1,    -1,
     535,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   307,    -1,    -1,   554,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   325,    -1,    -1,   572,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3565,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
      -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,
      -1,    -1,    -1,  3610,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2971,  2972,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3642,    -1,    -1,    -1,  3646,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   458,    -1,    -1,
    3677,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3037,    -1,  3691,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3704,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3070,  3071,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   515,    -1,    -1,  3082,    -1,    -1,
      -1,    -1,  3087,    -1,    -1,  3090,    -1,  3092,  3093,    -1,
     531,    -1,    -1,    -1,   535,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   554,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3128,    -1,    -1,    -1,    -1,    -1,    -1,
    3787,   572,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3153,    -1,
    3807,    -1,    -1,    -1,  3811,  3812,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3842,    -1,    -1,    -1,    -1,
      -1,    -1,  3197,  3850,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3859,    -1,  3861,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3218,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3227,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3900,    -1,    -1,    -1,    -1,    -1,  3906,
    3907,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3951,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3960,    -1,    -1,    -1,  3964,    -1,    -1,
      -1,    -1,  3969,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4006,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4025,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4038,    -1,  4040,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4050,    -1,  4052,  4053,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4077,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3450,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4121,    -1,  4123,  4124,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3489,  3490,    -1,  4144,    -1,  4146,
      -1,    -1,    -1,  3498,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4161,  4162,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4174,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4235,  4236,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4248,  4249,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4265,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3642,    -1,  4296,
      -1,  3646,    -1,    -1,    -1,    -1,  4303,    -1,    -1,  4306,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3677,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4342,  3691,    -1,    -1,    -1,
      -1,    -1,  4349,    -1,  4351,    -1,    -1,    -1,    -1,  3704,
      -1,    -1,    -1,    -1,  4361,    -1,    -1,    -1,  4365,    -1,
      -1,  4368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4380,    -1,  4382,    -1,  4384,    -1,    -1,
      -1,    -1,    -1,    -1,  4391,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4402,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4418,  4419,    -1,    -1,    -1,    -1,  4424,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4434,  4435,    -1,
      -1,    -1,  4439,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4471,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3850,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3859,    -1,  3861,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3900,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3969,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4006,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4038,    -1,  4040,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4050,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4144,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4162,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4303,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4342,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4368,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    43,    44,    45,    46,    -1,
      48,    49,    -1,    -1,    52,    53,    54,    55,    56,  4424,
      58,    59,    60,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,    -1,  4471,   105,   106,   107,
      -1,   109,   110,   111,    -1,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,
     128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,   206,    -1,
     208,   209,   210,    -1,   212,   213,   214,    -1,   216,   217,
      -1,    -1,    -1,   221,   222,   223,   224,   225,    -1,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,   237,
     238,   239,   240,    -1,    -1,   243,    -1,   245,   246,    -1,
     248,   249,    -1,    -1,    -1,   253,    -1,    -1,   256,   257,
     258,    -1,   260,   261,    -1,   263,   264,   265,    -1,    -1,
      -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,
     278,   279,    -1,    -1,   282,    -1,    -1,    -1,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,    -1,    -1,    -1,   316,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,    -1,   342,   343,   344,    -1,    -1,   347,
     348,   349,   350,   351,   352,   353,   354,   355,    -1,   357,
     358,    -1,   360,   361,   362,    -1,   364,   365,   366,   367,
      -1,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   379,   380,   381,    -1,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,    -1,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,   465,   466,    -1,
      -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,
      -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,    -1,
     488,   489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,
      -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,
      -1,   509,   510,   511,   512,   513,   514,   515,    -1,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,    -1,   533,    -1,   535,   536,   537,
     538,    -1,   540,   541,   542,    -1,   544,   545,   546,   547,
      -1,    -1,    -1,    -1,   552,   553,   554,   555,    -1,   557,
     558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
     568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,
      -1,   579,    -1,   581,   582,   583,    -1,    -1,   586,   587,
     588,   589,   590,    -1,    -1,   593,   594,    -1,   596,   597,
     598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,
      -1,   609,   610,    -1,   612,   613,   614,    -1,    -1,   617,
      -1,    -1,    -1,    -1,   622,   623,    -1,    -1,    -1,    -1,
     628,   629,    -1,    -1,   632,   633,    -1,    -1,   636,   637,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,    -1,    -1,
     105,   106,   107,    -1,   109,   110,   111,    -1,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,   124,
     125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,    -1,   208,   209,   210,    -1,   212,   213,   214,
      -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,   224,
     225,    -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,
      -1,    -1,   237,   238,   239,   240,    -1,    -1,   243,    -1,
     245,   246,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,
      -1,   256,   257,   258,    -1,    -1,   261,    -1,   263,   264,
     265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,
      -1,   276,    -1,   278,   279,    -1,    -1,   282,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,    -1,    -1,
      -1,   316,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,   342,   343,   344,
      -1,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,    -1,   357,   358,    -1,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,    -1,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
     465,   466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,
      -1,   506,    -1,    -1,   509,   510,   511,   512,   513,   514,
     515,    -1,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,    -1,   533,    -1,
     535,   536,   537,   538,    -1,   540,   541,   542,    -1,   544,
     545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,
     555,    -1,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,    -1,   570,   571,    -1,    -1,   574,
      -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,
      -1,   586,   587,   588,   589,   590,    -1,    -1,   593,   594,
      -1,   596,   597,   598,   599,   600,   601,   602,    -1,    -1,
      -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,
      -1,    -1,   617,    -1,    -1,    -1,    -1,   622,   623,    -1,
      -1,    -1,    -1,   628,   629,    -1,    -1,   632,   633,    -1,
      -1,   636,   637,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,    -1,    -1,   105,   106,   107,    -1,   109,   110,   111,
      -1,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,   123,   124,   125,    -1,    -1,   128,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
     192,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,   206,    -1,   208,   209,   210,    -1,
     212,   213,   214,    -1,   216,   217,    -1,    -1,    -1,   221,
     222,   223,   224,   225,    -1,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,    -1,   237,   238,   239,   240,    -1,
      -1,   243,    -1,   245,   246,    -1,   248,   249,    -1,    -1,
      -1,   253,    -1,    -1,   256,   257,   258,    -1,    -1,   261,
      -1,   263,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,
     272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,
     282,    -1,    -1,    -1,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,    -1,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,    -1,
     342,   343,   344,    -1,    -1,   347,   348,   349,   350,   351,
     352,   353,   354,   355,    -1,   357,   358,    -1,   360,   361,
     362,    -1,   364,   365,   366,   367,    -1,   369,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,
      -1,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
     402,    -1,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,
     422,   423,   424,   425,    -1,    -1,   428,   429,   430,   431,
     432,    -1,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,    -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,
     472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,
      -1,   483,   484,   485,   486,    -1,   488,   489,   490,   491,
     492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,
      -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,
     512,   513,   514,   515,    -1,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
      -1,   533,    -1,   535,   536,   537,   538,    -1,   540,   541,
     542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,
      -1,   553,   554,   555,    -1,   557,   558,   559,   560,   561,
     562,   563,   564,   565,   566,   567,   568,    -1,   570,   571,
      -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,
     582,   583,    -1,    -1,   586,   587,   588,   589,   590,    -1,
      -1,   593,   594,    -1,   596,   597,   598,   599,   600,   601,
     602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,
     612,   613,   614,    -1,    -1,   617,    -1,    -1,    -1,    -1,
     622,   623,    -1,    -1,    -1,    -1,   628,   629,    -1,    -1,
     632,   633,    -1,    -1,   636,   637,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,    -1,
     109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,    -1,   208,
     209,   210,    -1,   212,   213,   214,    -1,   216,   217,    -1,
      -1,    -1,   221,   222,   223,   224,   225,    -1,   227,   228,
     229,    -1,   231,    -1,   233,    -1,    -1,    -1,   237,   238,
     239,   240,    -1,    -1,   243,    -1,   245,   246,    -1,   248,
     249,    -1,    -1,    -1,   253,    -1,    -1,   256,   257,   258,
      -1,    -1,   261,    -1,   263,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,   282,    -1,    -1,    -1,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,   342,   343,   344,    -1,    -1,   347,   348,
     349,   350,   351,   352,   353,   354,   355,    -1,   357,   358,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
     369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,    -1,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,   465,   466,    -1,    -1,
      -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,
     509,   510,   511,   512,   513,   514,   515,    -1,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,    -1,   533,    -1,   535,   536,   537,   538,
      -1,   540,   541,   542,    -1,   544,   545,   546,   547,    -1,
      -1,    -1,    -1,    -1,   553,   554,   555,    -1,   557,   558,
     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
      -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,
     579,    -1,   581,   582,   583,    -1,    -1,   586,   587,   588,
     589,   590,    -1,    -1,   593,   594,    -1,   596,   597,   598,
     599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,
     609,   610,    -1,   612,   613,   614,    -1,    -1,   617,    -1,
      -1,    -1,    -1,   622,   623,    -1,    -1,    -1,    -1,   628,
     629,    -1,    -1,   632,   633,    -1,    -1,   636,   637,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,    -1,    -1,   105,
     106,   107,    -1,   109,   110,   111,    -1,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,   123,   124,   125,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,   192,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
     206,    -1,   208,   209,   210,    -1,   212,   213,   214,    -1,
     216,   217,    -1,    -1,    -1,   221,   222,   223,   224,   225,
      -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
      -1,   237,   238,   239,   240,    -1,    -1,   243,    -1,   245,
     246,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,    -1,
     256,   257,   258,    -1,    -1,   261,    -1,   263,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,   282,    -1,    -1,    -1,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,    -1,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,    -1,    -1,    -1,
     316,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,    -1,   342,   343,   344,    -1,
      -1,   347,   348,   349,   350,   351,   352,   353,   354,   355,
      -1,   357,   358,    -1,   360,   361,   362,    -1,   364,   365,
     366,   367,    -1,   369,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   379,   380,   381,    -1,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,   402,    -1,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,    -1,
      -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,   425,
      -1,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,    -1,   444,    -1,
     446,   447,    -1,   449,   450,    -1,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,   465,
     466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,
      -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,    -1,    -1,
      -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,
     506,    -1,    -1,   509,   510,   511,   512,   513,   514,   515,
      -1,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,    -1,   533,    -1,   535,
     536,   537,   538,    -1,   540,   541,   542,    -1,   544,   545,
     546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,
      -1,   557,   558,   559,   560,   561,   562,   563,   564,   565,
     566,   567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,
      -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,
     586,   587,   588,   589,   590,    -1,    -1,   593,   594,    -1,
     596,   597,   598,   599,   600,   601,   602,    -1,    -1,    -1,
      -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,
      -1,   617,    -1,    -1,    -1,    -1,   622,   623,    -1,    -1,
      -1,    -1,   628,   629,    -1,    -1,   632,   633,    -1,    -1,
     636,   637,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
      -1,    -1,   105,   106,   107,    -1,   109,   110,   111,    -1,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,    -1,   208,   209,   210,    -1,   212,
     213,   214,    -1,   216,   217,    -1,    -1,    -1,   221,   222,
     223,   224,   225,    -1,   227,   228,   229,    -1,   231,    -1,
     233,    -1,    -1,    -1,   237,   238,   239,   240,    -1,    -1,
     243,    -1,   245,   246,    -1,   248,   249,    -1,    -1,    -1,
     253,    -1,    -1,   256,   257,   258,    -1,    -1,   261,    -1,
     263,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,
      -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,   282,
      -1,    -1,    -1,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
      -1,    -1,    -1,   316,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,   342,
     343,   344,    -1,    -1,   347,   348,   349,   350,   351,   352,
     353,   354,   355,    -1,   357,   358,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,   369,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,    -1,   488,   489,   490,   491,   492,
     493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,
     503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,   512,
     513,   514,   515,    -1,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,    -1,
     533,    -1,   535,   536,   537,   538,    -1,   540,   541,   542,
      -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,
     553,   554,   555,    -1,   557,   558,   559,   560,   561,   562,
     563,   564,   565,   566,   567,   568,    -1,   570,   571,    -1,
      -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,
     583,    -1,    -1,   586,   587,   588,   589,   590,    -1,    -1,
     593,   594,    -1,   596,   597,   598,   599,   600,   601,   602,
      -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,
     613,   614,    -1,    -1,   617,    -1,    -1,    -1,    -1,   622,
     623,    -1,    -1,    -1,    -1,   628,   629,    -1,    -1,   632,
     633,    -1,    -1,   636,   637,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,    -1,    -1,   105,   106,   107,    -1,   109,
     110,   111,    -1,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,   206,    -1,   208,   209,
     210,    -1,   212,   213,   214,    -1,   216,   217,    -1,    -1,
      -1,   221,   222,   223,   224,   225,    -1,   227,   228,   229,
      -1,   231,    -1,   233,    -1,    -1,    -1,   237,   238,   239,
     240,    -1,    -1,   243,    -1,   245,   246,    -1,   248,   249,
      -1,    -1,    -1,   253,    -1,    -1,   256,   257,   258,    -1,
      -1,   261,    -1,   263,   264,   265,    -1,    -1,    -1,    -1,
      -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,   279,
      -1,    -1,   282,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
      -1,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,   342,   343,   344,    -1,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,    -1,   357,   358,    -1,
     360,   361,   362,    -1,   364,   365,   366,   367,    -1,   369,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
     380,   381,    -1,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
     400,   401,   402,    -1,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,
      -1,   421,   422,   423,   424,   425,    -1,    -1,   428,   429,
     430,   431,   432,    -1,   434,   435,    -1,   437,   438,   439,
     440,   441,   442,    -1,   444,    -1,   446,   447,    -1,   449,
     450,    -1,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,
     470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,
      -1,   481,    -1,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,
     510,   511,   512,   513,   514,   515,    -1,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,    -1,   533,    -1,   535,   536,   537,   538,    -1,
     540,   541,   542,    -1,   544,   545,   546,   547,    -1,    -1,
      -1,    -1,    -1,   553,   554,   555,    -1,   557,   558,   559,
     560,   561,   562,   563,   564,   565,   566,   567,   568,    -1,
     570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,
      -1,   581,   582,   583,    -1,    -1,   586,   587,   588,   589,
     590,    -1,    -1,   593,   594,    -1,   596,   597,   598,   599,
     600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,
     610,    -1,   612,   613,   614,    -1,    -1,   617,    -1,    -1,
      -1,    -1,   622,   623,    -1,    -1,    -1,    -1,   628,   629,
      -1,    -1,   632,   633,    -1,    -1,   636,   637,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,    -1,    -1,   105,   106,
     107,    -1,   109,   110,   111,    -1,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,
      -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
      -1,   208,   209,   210,    -1,   212,   213,   214,    -1,   216,
     217,    -1,    -1,    -1,   221,   222,   223,   224,   225,    -1,
     227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,
     237,   238,   239,   240,    -1,    -1,   243,    -1,   245,   246,
      -1,   248,   249,    -1,    -1,    -1,   253,    -1,    -1,   256,
     257,   258,    -1,    -1,   261,    -1,   263,   264,   265,    -1,
      -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,
      -1,   278,   279,    -1,    -1,   282,    -1,    -1,    -1,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,    -1,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,    -1,    -1,    -1,   316,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,   342,   343,   344,    -1,    -1,
     347,   348,   349,   350,   351,    -1,   353,   354,   355,    -1,
     357,   358,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,    -1,    -1,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,   465,   466,
      -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,
      -1,   488,   489,   490,   491,   492,   493,    -1,    -1,    -1,
      -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,
      -1,    -1,   509,   510,   511,   512,   513,   514,   515,    -1,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,    -1,   533,    -1,   535,   536,
     537,   538,    -1,   540,   541,   542,    -1,   544,   545,   546,
     547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,
     557,   558,   559,   560,   561,   562,   563,   564,   565,   566,
     567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,
     577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,   586,
     587,   588,   589,   590,    -1,    -1,   593,   594,    -1,   596,
     597,   598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,
      -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,    -1,
     617,    -1,    -1,    -1,    -1,   622,   623,    -1,    -1,    -1,
      -1,   628,   629,    -1,    -1,   632,   633,    -1,    -1,   636,
     637,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,    -1,
      -1,   105,   106,   107,    -1,   109,   110,   111,    -1,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,
     124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,    -1,   208,   209,   210,    -1,   212,   213,
     214,    -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,
     224,   225,    -1,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,    -1,   237,   238,   239,   240,    -1,    -1,   243,
      -1,   245,   246,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,    -1,   256,   257,   258,    -1,    -1,   261,    -1,   263,
     264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,
     274,    -1,   276,    -1,   278,   279,    -1,    -1,   282,    -1,
      -1,    -1,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,    -1,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,    -1,
      -1,    -1,   316,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,    -1,   342,   343,
     344,    -1,    -1,   347,   348,   349,   350,   351,   352,   353,
     354,   355,    -1,   357,   358,    -1,   360,   361,   362,    -1,
     364,   365,   366,   367,    -1,   369,   370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,   400,   401,   402,    -1,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,
     424,   425,    -1,    -1,   428,   429,   430,   431,   432,    -1,
     434,   435,    -1,   437,   438,   439,   440,   441,   442,    -1,
     444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,   473,
      -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
      -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,
      -1,    -1,   506,    -1,    -1,   509,   510,   511,   512,   513,
     514,   515,    -1,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,    -1,   533,
      -1,   535,   536,   537,   538,    -1,   540,   541,   542,    -1,
     544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,
     554,   555,    -1,   557,   558,   559,   560,   561,   562,   563,
     564,   565,   566,   567,   568,    -1,   570,   571,    -1,    -1,
     574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,
      -1,    -1,   586,   587,   588,   589,   590,    -1,    -1,   593,
     594,    -1,   596,   597,   598,   599,   600,   601,   602,    -1,
      -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,
     614,    -1,    -1,   617,    -1,    -1,    -1,    -1,   622,   623,
      -1,    -1,    -1,    -1,   628,   629,    -1,    -1,   632,   633,
      -1,    -1,   636,   637,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,    -1,    -1,   105,   106,   107,    -1,   109,   110,
     111,    -1,   113,   114,   115,   116,   117,   118,    -1,    -1,
      -1,    -1,   123,   124,   125,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,    -1,   208,   209,   210,
      -1,   212,   213,   214,    -1,   216,   217,    -1,    -1,    -1,
     221,   222,   223,   224,   225,    -1,   227,   228,   229,    -1,
     231,    -1,   233,    -1,    -1,    -1,   237,   238,   239,   240,
      -1,    -1,   243,    -1,   245,   246,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,    -1,   256,   257,   258,    -1,    -1,
     261,    -1,   263,   264,   265,    -1,    -1,    -1,    -1,    -1,
     271,   272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,
      -1,   282,    -1,    -1,    -1,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,   342,   343,   344,    -1,    -1,   347,   348,   349,   350,
     351,   352,   353,   354,   355,    -1,   357,   358,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,   369,   370,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
      -1,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,
     471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,
     501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,
     511,   512,   513,   514,   515,    -1,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,    -1,   533,    -1,   535,   536,   537,   538,    -1,   540,
     541,   542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,
      -1,    -1,   553,   554,   555,    -1,   557,   558,   559,   560,
     561,   562,   563,   564,   565,   566,   567,   568,    -1,   570,
     571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,
     581,   582,   583,    -1,    -1,   586,   587,   588,   589,   590,
      -1,    -1,   593,   594,    -1,   596,   597,   598,   599,   600,
     601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,
      -1,   612,   613,   614,    -1,    -1,   617,    -1,    -1,    -1,
      -1,   622,   623,    -1,    -1,    -1,    -1,   628,   629,    -1,
      -1,   632,   633,    -1,    -1,   636,   637,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,    -1,    -1,   105,   106,   107,
      -1,   109,   110,   111,    -1,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,
     128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,   206,    -1,
     208,   209,   210,    -1,   212,   213,   214,    -1,   216,   217,
      -1,    -1,    -1,   221,   222,   223,   224,   225,    -1,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,   237,
     238,   239,   240,    -1,    -1,   243,    -1,   245,   246,    -1,
     248,   249,    -1,    -1,    -1,   253,    -1,    -1,   256,   257,
     258,    -1,    -1,   261,    -1,   263,   264,   265,    -1,    -1,
      -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,
     278,   279,    -1,    -1,   282,    -1,    -1,    -1,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,    -1,    -1,    -1,   316,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,    -1,   342,   343,   344,    -1,    -1,   347,
     348,   349,   350,   351,   352,   353,   354,   355,    -1,   357,
     358,    -1,   360,   361,   362,    -1,   364,   365,   366,   367,
      -1,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   379,   380,   381,    -1,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,   440,   441,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,    -1,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,   465,   466,    -1,
      -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,
      -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,    -1,
     488,   489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,
      -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,
      -1,   509,   510,   511,   512,   513,   514,   515,    -1,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,    -1,   533,    -1,   535,   536,   537,
     538,    -1,   540,   541,   542,    -1,   544,   545,   546,   547,
      -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,   557,
     558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
     568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,
      -1,   579,    -1,   581,   582,   583,    -1,    -1,   586,   587,
     588,   589,   590,    -1,    -1,   593,   594,    -1,   596,   597,
     598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,
      -1,   609,   610,    -1,   612,   613,   614,    -1,    -1,   617,
      -1,    -1,    -1,    -1,   622,   623,    -1,    -1,    -1,    -1,
     628,   629,    -1,    -1,   632,   633,    -1,    -1,   636,   637,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,    -1,    -1,
     105,   106,   107,    -1,   109,   110,   111,    -1,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,   124,
     125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,    -1,   208,   209,   210,    -1,   212,   213,   214,
      -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,   224,
     225,    -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,
      -1,    -1,   237,   238,   239,   240,    -1,    -1,   243,    -1,
     245,   246,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,
      -1,   256,   257,   258,    -1,    -1,   261,    -1,   263,   264,
     265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,
      -1,   276,    -1,   278,   279,    -1,    -1,   282,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,    -1,    -1,
      -1,   316,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,   342,   343,   344,
      -1,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,    -1,   357,   358,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,   369,   370,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,    -1,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
     465,   466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,
      -1,   506,    -1,    -1,   509,   510,   511,   512,   513,   514,
     515,    -1,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,    -1,   533,    -1,
     535,   536,   537,   538,    -1,   540,   541,   542,    -1,   544,
     545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,
     555,    -1,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,    -1,   570,   571,    -1,    -1,   574,
      -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,
      -1,   586,   587,   588,   589,   590,    -1,    -1,   593,   594,
      -1,   596,   597,   598,   599,   600,   601,   602,    -1,    -1,
      -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,
      -1,    -1,   617,    -1,    -1,    -1,    -1,   622,   623,    -1,
      -1,    -1,    -1,   628,   629,    -1,    -1,   632,   633,    -1,
      -1,   636,   637,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,    -1,    -1,   105,   106,   107,    -1,   109,   110,   111,
      -1,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,   123,   124,   125,    -1,    -1,   128,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,   206,    -1,   208,   209,   210,    -1,
     212,   213,   214,    -1,   216,   217,    -1,    -1,    -1,   221,
     222,   223,   224,   225,    -1,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,    -1,   237,   238,   239,   240,    -1,
      -1,   243,    -1,   245,   246,    -1,   248,   249,    -1,    -1,
      -1,   253,    -1,    -1,   256,   257,   258,    -1,    -1,   261,
      -1,   263,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,
     272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,
     282,    -1,    -1,    -1,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,    -1,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,    -1,    -1,    -1,   316,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,    -1,
     342,   343,   344,    -1,    -1,   347,   348,   349,   350,   351,
      -1,   353,   354,   355,    -1,   357,   358,    -1,   360,   361,
     362,    -1,   364,   365,   366,   367,    -1,   369,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,
      -1,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
     402,    -1,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,
     422,   423,   424,   425,    -1,    -1,   428,   429,   430,   431,
     432,    -1,   434,   435,    -1,   437,   438,   439,   440,   441,
     442,    -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,
     472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,
      -1,   483,   484,   485,   486,    -1,   488,   489,   490,   491,
     492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,
      -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,
     512,   513,   514,   515,    -1,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
      -1,   533,    -1,   535,   536,   537,   538,    -1,   540,   541,
     542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,
      -1,   553,   554,   555,    -1,   557,   558,   559,   560,   561,
     562,   563,   564,   565,   566,   567,   568,    -1,   570,   571,
      -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,
     582,   583,    -1,    -1,   586,   587,   588,   589,   590,    -1,
      -1,   593,   594,    -1,   596,   597,   598,   599,   600,   601,
     602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,
     612,   613,   614,    -1,    -1,   617,    -1,    -1,    -1,    -1,
     622,   623,    -1,    -1,    -1,    -1,   628,   629,    -1,    -1,
     632,   633,    -1,    -1,   636,   637,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,    -1,
     109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,    -1,   208,
     209,   210,    -1,   212,   213,   214,    -1,   216,   217,    -1,
      -1,    -1,   221,   222,   223,   224,   225,    -1,   227,   228,
     229,    -1,   231,    -1,   233,    -1,    -1,    -1,   237,   238,
     239,   240,    -1,    -1,   243,    -1,   245,   246,    -1,   248,
     249,    -1,    -1,    -1,   253,    -1,    -1,   256,   257,   258,
      -1,    -1,   261,    -1,   263,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,   282,    -1,    -1,    -1,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,   342,   343,   344,    -1,    -1,   347,   348,
     349,   350,   351,    -1,   353,   354,   355,    -1,   357,   358,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
     369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,    -1,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,   465,   466,    -1,    -1,
      -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,
     509,   510,   511,   512,   513,   514,   515,    -1,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,    -1,   533,    -1,   535,   536,   537,   538,
      -1,   540,   541,   542,    -1,   544,   545,   546,   547,    -1,
      -1,    -1,    -1,    -1,   553,   554,   555,    -1,   557,   558,
     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
      -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,
     579,    -1,   581,   582,   583,    -1,    -1,   586,   587,   588,
     589,   590,    -1,    -1,   593,   594,    -1,   596,   597,   598,
     599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,
     609,   610,    -1,   612,   613,   614,    -1,    -1,   617,    -1,
      -1,    -1,    -1,   622,   623,    -1,    -1,    -1,    -1,   628,
     629,    -1,    -1,   632,   633,    -1,    -1,   636,   637,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,    -1,    -1,   105,
     106,   107,    -1,   109,   110,   111,    -1,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,   123,   124,   125,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
     206,    -1,   208,   209,   210,    -1,   212,   213,   214,    -1,
     216,   217,    -1,    -1,    -1,   221,   222,   223,   224,   225,
      -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
      -1,   237,   238,   239,   240,    -1,    -1,   243,    -1,   245,
     246,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,    -1,
     256,   257,   258,    -1,    -1,   261,    -1,   263,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,   282,    -1,    -1,    -1,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,    -1,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,    -1,    -1,    -1,
     316,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,    -1,   342,   343,   344,    -1,
      -1,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
      -1,   357,   358,    -1,   360,   361,   362,    -1,   364,   365,
     366,   367,    -1,   369,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   379,   380,   381,    -1,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,   400,   401,   402,    -1,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,    -1,
      -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,   425,
      -1,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
      -1,   437,   438,   439,   440,   441,   442,    -1,   444,    -1,
     446,   447,    -1,   449,   450,    -1,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,   465,
     466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,
      -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,    -1,    -1,
      -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,
     506,    -1,    -1,   509,   510,   511,   512,   513,   514,   515,
      -1,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,    -1,   533,    -1,   535,
     536,   537,   538,    -1,   540,   541,   542,    -1,   544,   545,
     546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,
      -1,   557,   558,   559,   560,   561,   562,   563,   564,   565,
     566,   567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,
      -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,
     586,   587,   588,   589,   590,    -1,    -1,   593,   594,    -1,
     596,   597,   598,   599,   600,   601,   602,    -1,    -1,    -1,
      -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,
      -1,   617,    -1,    -1,    -1,    -1,   622,   623,    -1,    -1,
      -1,    -1,   628,   629,    -1,    -1,   632,   633,    -1,    -1,
     636,   637,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
      -1,    -1,   105,   106,   107,    -1,   109,   110,   111,    -1,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,    -1,   208,   209,   210,    -1,   212,
     213,   214,    -1,   216,   217,    -1,    -1,    -1,   221,   222,
     223,   224,   225,    -1,   227,   228,   229,    -1,   231,    -1,
     233,    -1,    -1,    -1,   237,   238,   239,   240,    -1,    -1,
     243,    -1,   245,   246,    -1,   248,   249,    -1,    -1,    -1,
     253,    -1,    -1,   256,   257,   258,    -1,    -1,   261,    -1,
     263,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,
      -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,   282,
      -1,    -1,    -1,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
      -1,    -1,    -1,   316,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,   342,
     343,   344,    -1,    -1,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,    -1,   357,   358,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,   369,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,    -1,   488,   489,   490,   491,   492,
     493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,
     503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,   512,
     513,   514,   515,    -1,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,    -1,
     533,    -1,   535,   536,   537,   538,    -1,   540,   541,   542,
      -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,
     553,   554,   555,    -1,   557,   558,   559,   560,   561,   562,
     563,   564,   565,   566,   567,   568,    -1,   570,   571,    -1,
      -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,
     583,    -1,    -1,   586,   587,   588,   589,   590,    -1,    -1,
     593,   594,    -1,   596,   597,   598,   599,   600,   601,   602,
      -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,
     613,   614,    -1,    -1,   617,    -1,    -1,    -1,    -1,   622,
     623,    -1,    -1,    -1,    -1,   628,   629,    -1,    -1,   632,
     633,    -1,    -1,   636,   637,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    36,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,    -1,   174,   175,   176,    -1,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
     210,    -1,   212,   213,   214,    -1,   216,   217,    -1,    -1,
      -1,   221,   222,   223,   224,    -1,    -1,   227,   228,   229,
      -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,
      -1,    -1,    -1,   243,    -1,   245,   246,    -1,   248,   249,
      -1,    -1,    -1,   253,    -1,    -1,   256,   257,   258,    -1,
      -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,    -1,
      -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,   279,
      -1,    -1,   282,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
      -1,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,
      -1,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,   342,   343,   344,    -1,    -1,   347,   348,   349,
     350,    -1,    -1,    -1,   354,   355,    -1,   357,   358,    -1,
     360,   361,   362,    -1,   364,   365,   366,   367,    -1,   369,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
     380,   381,    -1,    -1,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,    -1,    -1,
     400,   401,   402,    -1,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,
      -1,   421,   422,   423,   424,   425,    -1,    -1,   428,   429,
     430,   431,   432,    -1,   434,   435,    -1,   437,   438,   439,
      -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,
     450,    -1,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,
     470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,
      -1,   481,    -1,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,
     510,   511,    -1,    -1,   514,   515,    -1,   517,   518,   519,
     520,   521,   522,    -1,    -1,   525,   526,   527,   528,    -1,
     530,   531,    -1,   533,    -1,   535,   536,   537,   538,    -1,
     540,   541,   542,    -1,   544,   545,   546,   547,    -1,    -1,
      -1,    -1,    -1,   553,   554,   555,    -1,    -1,   558,   559,
     560,   561,   562,   563,   564,   565,   566,   567,   568,    -1,
     570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,
      -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,
     590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,
     600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,
     610,    -1,   612,   613,   614,    -1,    -1,   617,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,   636,   637,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,   230,   231,    -1,
     233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,
     243,    -1,   245,   246,    -1,   248,   249,    -1,    -1,    -1,
     253,   254,    -1,   256,   257,   258,    -1,    -1,   261,    -1,
      -1,   264,   265,    -1,   267,    -1,    -1,    -1,   271,   272,
      -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,    -1,   305,   306,   307,   308,    -1,   310,   311,    -1,
      -1,    -1,    -1,   316,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,   369,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
      -1,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,   467,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,    -1,   488,   489,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,
     503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,
      -1,   514,   515,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,   527,   528,    -1,   530,   531,    -1,
     533,    -1,   535,   536,   537,   538,    -1,    -1,   541,   542,
      -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,
     553,   554,   555,    -1,    -1,    -1,   559,   560,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,   570,   571,    -1,
      -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,
     583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,
     593,    -1,    -1,    -1,   597,   598,   599,   600,   601,   602,
      -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,
     613,   614,    -1,    -1,   617,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,   637,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
      -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,   187,
      -1,    -1,    -1,   191,    -1,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,   230,   231,    -1,   233,    -1,    -1,    -1,    -1,
     238,   239,    -1,    -1,    -1,   243,    -1,   245,   246,    -1,
     248,   249,    -1,    -1,    -1,   253,   254,    -1,   256,   257,
     258,    -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,
     278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,    -1,   305,   306,   307,
     308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,    -1,   327,
      -1,   329,    -1,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,
     348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,
      -1,    -1,   360,   361,   362,    -1,   364,   365,   366,   367,
      -1,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   379,   380,   381,    -1,    -1,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,   465,   466,    -1,
      -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,
      -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,    -1,
     488,   489,   490,   491,   492,   493,   494,    -1,    -1,    -1,
      -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,
      -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,   517,
     518,   519,   520,   521,   522,    -1,    -1,   525,   526,   527,
     528,    -1,   530,   531,    -1,   533,    -1,   535,   536,   537,
     538,    -1,    -1,   541,   542,    -1,   544,   545,   546,   547,
      -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,
      -1,   559,   560,   561,   562,    -1,   564,   565,    -1,   567,
     568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,
      -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,
      -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,
     598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,
      -1,   609,   610,    -1,   612,   613,   614,    -1,    -1,   617,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,   637,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,
     233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,
     243,    -1,   245,   246,    -1,   248,   249,    -1,    -1,    -1,
     253,    -1,    -1,   256,   257,   258,    -1,    -1,   261,    -1,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,
      -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,    -1,   305,   306,   307,   308,    -1,   310,   311,    -1,
      -1,    -1,    -1,   316,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,   369,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
      -1,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,   467,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,    -1,   488,   489,   490,   491,   492,
     493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,
     503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,
      -1,   514,   515,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,   527,   528,    -1,   530,   531,    -1,
     533,    -1,   535,   536,   537,   538,    -1,    -1,   541,   542,
      -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,
     553,   554,   555,    -1,    -1,    -1,   559,   560,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,   570,   571,    -1,
      -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,
     583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,
     593,    -1,    -1,    -1,   597,   598,   599,   600,   601,   602,
      -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,
     613,   614,    -1,    -1,   617,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,   630,    -1,    -1,
      18,    -1,    -1,    21,   637,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
      -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,   187,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,
     238,   239,    -1,    -1,    -1,   243,    -1,   245,   246,    -1,
     248,   249,    -1,    -1,    -1,   253,    -1,    -1,   256,   257,
     258,    -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,
     278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,    -1,   305,   306,   307,
     308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,    -1,   327,
      -1,   329,    -1,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,
     348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,
      -1,    -1,   360,   361,   362,    -1,   364,   365,   366,   367,
      -1,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   379,   380,   381,    -1,    -1,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,   465,   466,    -1,
      -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,
      -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,    -1,
     488,   489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,
      -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,
      -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,   517,
     518,   519,   520,   521,   522,    -1,    -1,   525,   526,   527,
     528,    -1,   530,   531,    -1,   533,    -1,   535,   536,   537,
     538,    -1,    -1,   541,   542,    -1,   544,   545,   546,   547,
      -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,
      -1,   559,   560,   561,   562,    -1,   564,   565,    -1,   567,
     568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,
      -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,
      -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,
     598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,
      -1,   609,   610,    -1,   612,   613,   614,    -1,    -1,   617,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,   630,    14,    -1,    -1,    -1,    18,   636,   637,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,    -1,
     231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,
      -1,    -1,   243,    -1,   245,   246,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,    -1,   256,   257,   258,    -1,    -1,
     261,    -1,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
     271,   272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,   369,   370,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,    -1,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    -1,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,
     471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,
     501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,
     511,    -1,    -1,   514,   515,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,   527,   528,    -1,   530,
     531,    -1,   533,    -1,   535,   536,   537,   538,    -1,    -1,
     541,   542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,
      -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,
     561,   562,    -1,   564,   565,    -1,   567,   568,    -1,   570,
     571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,
     581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,
      -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,
     601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,
      -1,   612,   613,   614,    -1,    -1,   617,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,   629,    -1,
      14,    -1,    -1,    -1,    18,    -1,   637,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,    -1,    -1,   238,   239,    -1,   241,    -1,   243,
      -1,   245,   246,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,    -1,   256,   257,   258,    -1,    -1,   261,    -1,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,
     274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,    -1,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,    -1,    -1,
      -1,    -1,   316,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,    -1,   327,    -1,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,
     354,   355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,
     364,   365,   366,   367,    -1,   369,   370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,    -1,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,    -1,   400,   401,   402,    -1,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,
     424,   425,    -1,    -1,   428,   429,   430,   431,   432,    -1,
     434,   435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,
     444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,   473,
      -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
      -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,
      -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,
     514,   515,    -1,   517,   518,   519,   520,   521,   522,    -1,
      -1,   525,   526,   527,   528,    -1,   530,   531,    -1,   533,
      -1,   535,   536,   537,   538,    -1,    -1,   541,   542,    -1,
     544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,
     554,   555,    -1,    -1,    -1,   559,   560,   561,   562,    -1,
     564,   565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,
     574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,
      -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,
      -1,    -1,    -1,   597,   598,   599,   600,   601,   602,    -1,
      -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,
     614,    -1,    -1,   617,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,   637,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,
     239,    -1,    -1,    -1,   243,    -1,   245,   246,    -1,   248,
     249,    -1,    -1,    -1,   253,    -1,    -1,   256,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,    -1,   305,   306,   307,   308,
      -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
     369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,    -1,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,   465,   466,    -1,    -1,
      -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,
     509,   510,   511,    -1,    -1,   514,   515,    -1,   517,   518,
     519,   520,   521,   522,    -1,    -1,   525,   526,   527,   528,
      -1,   530,   531,    -1,   533,    -1,   535,   536,   537,   538,
      -1,    -1,   541,   542,    -1,   544,   545,   546,   547,    -1,
      -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,    -1,   567,   568,
      -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,
     579,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,
      -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,
     599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,
     609,   610,    -1,   612,   613,   614,    -1,    -1,   617,    -1,
      -1,    -1,    -1,    -1,     5,   624,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,   637,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,    -1,
     231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,
      -1,    -1,   243,    -1,   245,   246,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,    -1,   256,   257,   258,    -1,    -1,
     261,    -1,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
     271,   272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,   369,   370,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,    -1,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    -1,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,
     471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,
     501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,
     511,    -1,    -1,   514,   515,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,   527,   528,    -1,   530,
     531,    -1,   533,    -1,   535,   536,   537,   538,    -1,    -1,
     541,   542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,
      -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,
     561,   562,    -1,   564,   565,    -1,   567,   568,    -1,   570,
     571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,
     581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,
      -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,
     601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,
      -1,   612,   613,   614,    -1,    -1,   617,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,   629,    -1,
      14,    -1,    -1,    -1,    18,    -1,   637,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,   243,
      -1,   245,   246,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,    -1,   256,   257,   258,    -1,    -1,   261,    -1,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,
     274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,    -1,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,    -1,    -1,
      -1,    -1,   316,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,    -1,   327,    -1,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,
     354,   355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,
     364,   365,   366,   367,    -1,   369,   370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,    -1,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,    -1,   400,   401,   402,    -1,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,
     424,   425,    -1,    -1,   428,   429,   430,   431,   432,    -1,
     434,   435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,
     444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,   473,
      -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
      -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,
      -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,
     514,   515,    -1,   517,   518,   519,   520,   521,   522,    -1,
      -1,   525,   526,   527,   528,    -1,   530,   531,    -1,   533,
      -1,   535,   536,   537,   538,    -1,    -1,   541,   542,    -1,
     544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,
     554,   555,    -1,    -1,    -1,   559,   560,   561,   562,    -1,
     564,   565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,
     574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,
      -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,
      -1,    -1,    -1,   597,   598,   599,   600,   601,   602,    -1,
      -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,
     614,    -1,    -1,   617,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,   636,   637,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,
     227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,
      -1,   238,   239,    -1,    -1,    -1,   243,    -1,   245,   246,
      -1,   248,   249,    -1,    -1,    -1,   253,    -1,    -1,   256,
     257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,
      -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,    -1,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,    -1,
     327,    -1,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,
      -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,    -1,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,   465,   466,
      -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,
      -1,   488,   489,   490,   491,   492,   493,    -1,    -1,    -1,
      -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,
      -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
     527,   528,    -1,   530,   531,    -1,   533,    -1,   535,   536,
     537,   538,    -1,    -1,   541,   542,    -1,   544,   545,   546,
     547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,
      -1,    -1,   559,   560,   561,   562,    -1,   564,   565,    -1,
     567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,
     577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,
      -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,
     597,   598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,
      -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,    -1,
     617,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
     637,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
     222,   223,   224,    -1,    -1,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,
      -1,   243,    -1,   245,   246,    -1,   248,   249,    -1,    -1,
      -1,   253,    -1,    -1,   256,   257,   258,    -1,    -1,   261,
      -1,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,
     272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,    -1,   301,
     302,   303,    -1,   305,   306,   307,   308,    -1,   310,   311,
      -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,    -1,
      -1,   343,   344,    -1,    -1,   347,   348,   349,   350,    -1,
      -1,    -1,   354,   355,    -1,    -1,    -1,    -1,   360,   361,
     362,    -1,   364,   365,   366,   367,    -1,   369,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,
      -1,    -1,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,    -1,   400,   401,
     402,    -1,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,
     422,   423,   424,   425,    -1,    -1,   428,   429,   430,   431,
     432,    -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,
     442,    -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,
     472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,
      -1,   483,   484,   485,   486,    -1,   488,   489,   490,   491,
     492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,
      -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,
      -1,    -1,   514,   515,    -1,   517,   518,   519,   520,   521,
     522,    -1,    -1,   525,   526,   527,   528,    -1,   530,   531,
      -1,   533,    -1,   535,   536,   537,   538,    -1,    -1,   541,
     542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,
      -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,   561,
     562,    -1,   564,   565,    -1,   567,   568,    -1,   570,   571,
      -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,
     582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,
      -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,   601,
     602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,
     612,   613,   614,    -1,    -1,   617,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   637,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,
     227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,
      -1,   238,   239,    -1,    -1,    -1,   243,    -1,   245,   246,
      -1,   248,   249,    -1,    -1,    -1,   253,    -1,    -1,   256,
     257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,
      -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,    -1,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,    -1,
     327,    -1,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,
      -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,    -1,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,   465,   466,
      -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,
      -1,   488,   489,   490,   491,   492,   493,    -1,    -1,    -1,
      -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,
      -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
     527,   528,    -1,   530,   531,    -1,   533,    -1,   535,   536,
     537,   538,    -1,    -1,   541,   542,    -1,   544,   545,   546,
     547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,
      -1,    -1,   559,   560,   561,   562,    -1,   564,   565,    -1,
     567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,
     577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,
      -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,
     597,   598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,
      -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,    -1,
     617,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
     637,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
     222,   223,   224,    -1,    -1,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,
      -1,   243,    -1,   245,   246,    -1,   248,   249,    -1,    -1,
      -1,   253,    -1,    -1,   256,   257,   258,    -1,    -1,   261,
      -1,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,
     272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,    -1,   301,
     302,   303,    -1,   305,   306,   307,   308,    -1,   310,   311,
      -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,    -1,
      -1,   343,   344,    -1,    -1,   347,   348,   349,   350,    -1,
      -1,    -1,   354,   355,    -1,    -1,    -1,    -1,   360,   361,
     362,    -1,   364,   365,   366,   367,    -1,   369,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,
      -1,    -1,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,    -1,   400,   401,
     402,    -1,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,
     422,   423,   424,   425,    -1,    -1,   428,   429,   430,   431,
     432,    -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,
     442,    -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,
     472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,
      -1,   483,   484,   485,   486,    -1,   488,   489,   490,   491,
     492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,
      -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,
      -1,    -1,   514,   515,    -1,   517,   518,   519,   520,   521,
     522,    -1,    -1,   525,   526,   527,   528,    -1,   530,   531,
      -1,   533,    -1,   535,   536,   537,   538,    -1,    -1,   541,
     542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,
      -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,   561,
     562,    -1,   564,   565,    -1,   567,   568,    -1,   570,   571,
      -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,
     582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,
      -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,   601,
     602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,
     612,   613,   614,    -1,    -1,   617,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   637,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,
     227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,
      -1,   238,   239,    -1,    -1,    -1,   243,    -1,   245,   246,
      -1,   248,   249,    -1,    -1,    -1,   253,    -1,    -1,   256,
     257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,   266,
      -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,
      -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,    -1,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,    -1,
     327,    -1,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,
      -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,    -1,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,   465,   466,
      -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,
      -1,   488,   489,   490,   491,   492,   493,    -1,    -1,    -1,
      -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,
      -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
     527,   528,    -1,   530,   531,    -1,   533,    -1,   535,   536,
     537,   538,    -1,   540,   541,   542,    -1,   544,   545,   546,
     547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,
      -1,    -1,   559,   560,   561,   562,    -1,   564,   565,    -1,
     567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,
     577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,
      -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,
     597,   598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,
      -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,    -1,
     617,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,   636,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,
     233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,
     243,    -1,   245,   246,    -1,   248,   249,    -1,    -1,    -1,
     253,    -1,    -1,   256,   257,   258,    -1,    -1,   261,    -1,
      -1,   264,   265,   266,    -1,    -1,    -1,    -1,   271,   272,
      -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,    -1,   305,   306,   307,   308,    -1,   310,   311,    -1,
      -1,    -1,    -1,   316,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,   369,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
      -1,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,    -1,   488,   489,   490,   491,   492,
     493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,
     503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,
      -1,   514,   515,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,   527,   528,    -1,   530,   531,    -1,
     533,    -1,   535,   536,   537,   538,    -1,   540,   541,   542,
      -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,
     553,   554,   555,    -1,    -1,    -1,   559,   560,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,   570,   571,    -1,
      -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,
     583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,
     593,    -1,    -1,    -1,   597,   598,   599,   600,   601,   602,
      -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,
     613,   614,    -1,    -1,   617,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,   636,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,
     239,    -1,    -1,    -1,   243,    -1,   245,   246,    -1,   248,
     249,    -1,    -1,    -1,   253,    -1,    -1,   256,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,    -1,   305,   306,   307,   308,
      -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
     369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,    -1,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,   465,   466,    -1,    -1,
      -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,
     509,   510,   511,    -1,    -1,   514,   515,    -1,   517,   518,
     519,   520,   521,   522,    -1,    -1,   525,   526,   527,   528,
      -1,   530,   531,    -1,   533,    -1,   535,   536,   537,   538,
      -1,   540,   541,   542,    -1,   544,   545,   546,   547,    -1,
      -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,    -1,   567,   568,
      -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,
     579,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,
      -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,
     599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,
     609,   610,    -1,   612,   613,   614,    -1,    -1,   617,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    -1,   636,    23,    24,
      25,    26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,
      55,    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    83,    -1,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    -1,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,    -1,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
      -1,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,    -1,    -1,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,   181,   182,   183,   184,
      -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,    -1,   209,   210,    -1,    -1,    -1,    -1,
      -1,    -1,   217,    -1,    -1,    -1,   221,   222,   223,   224,
     225,    -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,
      -1,    -1,    -1,   238,    -1,    -1,    -1,    -1,   243,    -1,
     245,   246,    -1,   248,   249,   250,    -1,    -1,   253,    -1,
      -1,    -1,   257,   258,    -1,    -1,   261,   262,    -1,   264,
     265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,
      -1,   276,    -1,   278,   279,    -1,    -1,    -1,    -1,   284,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,    -1,
     305,   306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,
      -1,   316,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,    -1,   327,    -1,   329,    -1,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,    -1,
     355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   380,   381,    -1,    -1,    -1,
      -1,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,    -1,    -1,    -1,    -1,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
      -1,    -1,   437,    -1,   439,   440,    -1,   442,    -1,    -1,
      -1,   446,    -1,    -1,   449,   450,   451,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,    -1,
     465,    -1,    -1,    -1,    -1,   470,   471,   472,    -1,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,
      -1,   486,    -1,   488,    -1,   490,    -1,   492,   493,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,
      -1,   506,    -1,    -1,   509,    -1,   511,    -1,    -1,    -1,
     515,    -1,   517,   518,   519,   520,   521,   522,    -1,    -1,
     525,   526,   527,   528,    -1,   530,   531,    -1,   533,    -1,
     535,   536,   537,   538,    -1,    -1,   541,   542,    -1,   544,
     545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,
     555,    -1,    -1,    -1,    -1,   560,   561,   562,    -1,   564,
     565,    -1,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,
      -1,    -1,   577,    -1,    -1,    -1,   581,   582,   583,    -1,
      -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,
      -1,    -1,   597,   598,   599,   600,   601,   602,    -1,    -1,
     605,    -1,    -1,    -1,   609,    -1,    -1,   612,    -1,   614,
      -1,     5,   617,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,   631,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,   107,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,   243,
      -1,   245,   246,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,    -1,   256,   257,   258,    -1,    -1,   261,    -1,    -1,
     264,   265,   266,    -1,    -1,    -1,    -1,   271,   272,    -1,
     274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,    -1,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,    -1,    -1,
      -1,    -1,   316,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,    -1,   327,    -1,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,
     354,   355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,
     364,   365,   366,   367,    -1,   369,   370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,    -1,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,    -1,   400,   401,   402,    -1,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,
     424,   425,    -1,    -1,   428,   429,   430,   431,   432,    -1,
     434,   435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,
     444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,   473,
      -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
      -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,
      -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,
     514,   515,    -1,   517,   518,   519,   520,   521,   522,    -1,
      -1,   525,   526,   527,   528,    -1,   530,   531,    -1,   533,
      -1,   535,   536,   537,   538,    -1,   540,   541,   542,    -1,
     544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,
     554,   555,    -1,    -1,    -1,   559,   560,   561,   562,    -1,
     564,   565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,
     574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,
      -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,
      -1,    -1,    -1,   597,   598,   599,   600,   601,   602,    -1,
      -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,
     614,    -1,    -1,   617,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,   629,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,    -1,
     231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,
      -1,    -1,   243,    -1,   245,   246,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,    -1,   256,   257,   258,    -1,    -1,
     261,    -1,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
     271,   272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,   369,   370,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,    -1,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    -1,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,
     471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,
     501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,
     511,    -1,    -1,   514,   515,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,   527,   528,    -1,   530,
     531,    -1,   533,    -1,   535,   536,   537,   538,    -1,    -1,
     541,   542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,
      -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,
     561,   562,    -1,   564,   565,    -1,   567,   568,    -1,   570,
     571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,
     581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,
      -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,
     601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,
      -1,   612,   613,   614,    -1,     5,   617,     7,     8,     9,
      10,    11,    -1,   624,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,   222,   223,   224,    -1,    -1,   227,   228,   229,
      -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,
      -1,    -1,    -1,   243,    -1,   245,   246,    -1,   248,   249,
      -1,    -1,    -1,   253,    -1,    -1,   256,   257,   258,    -1,
      -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,    -1,
      -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,   279,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
      -1,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,
      -1,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,
     350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,    -1,
     360,   361,   362,    -1,   364,   365,   366,   367,    -1,   369,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
     380,   381,    -1,    -1,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,    -1,    -1,
     400,   401,   402,    -1,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,
      -1,   421,   422,   423,   424,   425,    -1,    -1,   428,   429,
     430,   431,   432,    -1,   434,   435,    -1,   437,   438,   439,
      -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,
     450,    -1,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,
     470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,
      -1,   481,    -1,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,
     510,   511,    -1,    -1,   514,   515,    -1,   517,   518,   519,
     520,   521,   522,    -1,    -1,   525,   526,   527,   528,    -1,
     530,   531,    -1,   533,    -1,   535,   536,   537,   538,    -1,
      -1,   541,   542,    -1,   544,   545,   546,   547,    -1,    -1,
      -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,
     560,   561,   562,    -1,   564,   565,    -1,   567,   568,    -1,
     570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,
      -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,
     590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,
     600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,
     610,    -1,   612,   613,   614,    -1,     5,   617,     7,     8,
       9,    10,    11,    -1,   624,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,
     239,    -1,    -1,    -1,   243,    -1,   245,   246,    -1,   248,
     249,    -1,    -1,    -1,   253,    -1,    -1,   256,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,    -1,   305,   306,   307,   308,
      -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
     369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,    -1,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,   465,   466,    -1,    -1,
      -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,
     509,   510,   511,    -1,    -1,   514,   515,    -1,   517,   518,
     519,   520,   521,   522,    -1,    -1,   525,   526,   527,   528,
      -1,   530,   531,    -1,   533,    -1,   535,   536,   537,   538,
      -1,    -1,   541,   542,    -1,   544,   545,   546,   547,    -1,
      -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,    -1,   567,   568,
      -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,
     579,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,
      -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,
     599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,
     609,   610,    -1,   612,   613,   614,    -1,     5,   617,     7,
       8,     9,    10,    11,    -1,   624,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
      -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,   187,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,
     238,   239,    -1,    -1,    -1,   243,    -1,   245,   246,    -1,
     248,   249,    -1,    -1,    -1,   253,    -1,    -1,   256,   257,
     258,    -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,
     278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,    -1,   305,   306,   307,
     308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,    -1,   327,
      -1,   329,    -1,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,
     348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,
      -1,    -1,   360,   361,   362,    -1,   364,   365,   366,   367,
      -1,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   379,   380,   381,    -1,    -1,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,   465,   466,    -1,
      -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,
      -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,    -1,
     488,   489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,
      -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,
      -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,   517,
     518,   519,   520,   521,   522,    -1,    -1,   525,   526,   527,
     528,    -1,   530,   531,    -1,   533,    -1,   535,   536,   537,
     538,    -1,    -1,   541,   542,    -1,   544,   545,   546,   547,
      -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,
      -1,   559,   560,   561,   562,    -1,   564,   565,    -1,   567,
     568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,
      -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,
      -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,
     598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,
      -1,   609,   610,    -1,   612,   613,   614,    -1,     5,   617,
       7,     8,     9,    10,    11,    -1,   624,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,   213,    -1,    -1,   216,
     217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,
     227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,
      -1,   238,   239,    -1,    -1,    -1,   243,    -1,   245,   246,
      -1,   248,   249,    -1,    -1,    -1,   253,    -1,    -1,   256,
     257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,
      -1,   278,   279,    -1,    -1,   282,    -1,    -1,    -1,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,    -1,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,    -1,
     327,    -1,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,    -1,
      -1,   358,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,    -1,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,   465,   466,
      -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,
      -1,   488,   489,   490,   491,   492,   493,    -1,    -1,   496,
     497,   498,    -1,   500,   501,    -1,   503,    -1,    -1,   506,
      -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
     527,   528,    -1,   530,   531,    -1,   533,    -1,   535,   536,
     537,   538,    -1,    -1,   541,   542,    -1,   544,   545,   546,
     547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,
      -1,    -1,   559,   560,   561,   562,   563,   564,   565,    -1,
     567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,
     577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,
      -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,
     597,   598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,
      -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,     5,
     617,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,   125,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,   210,    -1,   212,   213,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,
      -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
      -1,    -1,   238,   239,    -1,    -1,    -1,   243,    -1,   245,
     246,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,    -1,
     256,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,   282,    -1,    -1,    -1,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,    -1,   301,   302,   303,    -1,   305,
     306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,
     316,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
      -1,   327,    -1,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,    -1,    -1,   343,   344,    -1,
      -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,   355,
      -1,    -1,   358,    -1,   360,   361,   362,    -1,   364,   365,
     366,   367,    -1,   369,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   379,   380,   381,    -1,    -1,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,    -1,
      -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,   425,
      -1,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
      -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,
     446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,   465,
     466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,
      -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,    -1,    -1,
      -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,
     506,    -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,
      -1,   517,   518,   519,   520,   521,   522,    -1,    -1,   525,
     526,   527,   528,    -1,   530,   531,    -1,   533,    -1,   535,
     536,   537,   538,    -1,   540,   541,   542,    -1,   544,   545,
     546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,
      -1,    -1,    -1,   559,   560,   561,   562,   563,   564,   565,
      -1,   567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,
      -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,
      -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,
      -1,   597,   598,   599,   600,   601,   602,    -1,    -1,    -1,
      -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,
       5,   617,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
     125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,   213,    -1,
      -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,   224,
      -1,    -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,
      -1,    -1,    -1,   238,   239,    -1,    -1,    -1,   243,    -1,
     245,   246,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,
      -1,   256,   257,   258,    -1,    -1,   261,    -1,    -1,   264,
     265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,
      -1,   276,    -1,   278,   279,    -1,    -1,   282,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,    -1,
     305,   306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,
      -1,   316,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,    -1,   327,    -1,   329,    -1,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,   358,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,   369,   370,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,    -1,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,    -1,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
     465,   466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,
      -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,   514,
     515,    -1,   517,   518,   519,   520,   521,   522,    -1,    -1,
     525,   526,   527,   528,    -1,   530,   531,    -1,   533,    -1,
     535,   536,   537,   538,    -1,   540,   541,   542,    -1,   544,
     545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,
     555,    -1,    -1,    -1,   559,   560,   561,   562,   563,   564,
     565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,   574,
      -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,
      -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,
      -1,    -1,   597,   598,   599,   600,   601,   602,    -1,    -1,
      -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,
      -1,     5,   617,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,   213,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,   243,
      -1,   245,   246,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,    -1,   256,   257,   258,    -1,    -1,   261,    -1,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,
     274,    -1,   276,    -1,   278,   279,    -1,    -1,   282,    -1,
      -1,    -1,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,    -1,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,    -1,    -1,
      -1,    -1,   316,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,    -1,   327,    -1,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,
     354,   355,    -1,    -1,   358,    -1,   360,   361,   362,    -1,
     364,   365,   366,   367,    -1,   369,   370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,    -1,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,    -1,   400,   401,   402,    -1,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,
     424,   425,    -1,    -1,   428,   429,   430,   431,   432,    -1,
     434,   435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,
     444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,   473,
      -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
      -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,
      -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,
     514,   515,    -1,   517,   518,   519,   520,   521,   522,    -1,
      -1,   525,   526,   527,   528,    -1,   530,   531,    -1,   533,
      -1,   535,   536,   537,   538,    -1,   540,   541,   542,    -1,
     544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,
     554,   555,    -1,    -1,    -1,   559,   560,   561,   562,   563,
     564,   565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,
     574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,
      -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,
      -1,    -1,    -1,   597,   598,   599,   600,   601,   602,    -1,
      -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,
     614,    -1,     5,   617,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,   128,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,
     233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,
     243,    -1,   245,   246,    -1,   248,   249,    -1,    -1,    -1,
     253,    -1,    -1,   256,   257,   258,    -1,    -1,   261,    -1,
      -1,   264,   265,   266,    -1,    -1,    -1,    -1,   271,   272,
      -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,    -1,   305,   306,   307,   308,    -1,   310,   311,    -1,
      -1,    -1,    -1,   316,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,   369,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
      -1,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,   476,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,    -1,   488,   489,   490,   491,   492,
     493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,
     503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,
      -1,   514,   515,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,   527,   528,    -1,   530,   531,    -1,
     533,    -1,   535,   536,   537,   538,    -1,   540,   541,   542,
      -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,
     553,   554,   555,    -1,    -1,    -1,   559,   560,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,   570,   571,    -1,
      -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,
     583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,
     593,    -1,    -1,    -1,   597,   598,   599,   600,   601,   602,
      -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,
     613,   614,    -1,     5,   617,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    36,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,
     212,   213,   214,    -1,   216,   217,    -1,    -1,    -1,   221,
     222,   223,   224,    -1,    -1,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,
      -1,   243,    -1,   245,   246,    -1,   248,   249,    -1,    -1,
      -1,   253,    -1,    -1,   256,   257,   258,    -1,    -1,   261,
      -1,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,
     272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,    -1,   301,
     302,   303,    -1,   305,   306,   307,   308,    -1,   310,   311,
      -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,    -1,
      -1,   343,   344,    -1,    -1,   347,   348,   349,   350,    -1,
      -1,    -1,   354,   355,    -1,    -1,    -1,    -1,   360,   361,
     362,    -1,   364,   365,   366,   367,    -1,   369,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,
      -1,    -1,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,    -1,   400,   401,
     402,    -1,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,
     422,   423,   424,   425,    -1,    -1,   428,   429,   430,   431,
     432,    -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,
     442,    -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,
     472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,
      -1,   483,   484,   485,   486,    -1,   488,   489,   490,   491,
     492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,
      -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,
      -1,    -1,   514,   515,    -1,   517,   518,   519,   520,   521,
     522,    -1,    -1,   525,   526,   527,   528,    -1,   530,   531,
      -1,   533,    -1,   535,   536,   537,   538,    -1,   540,   541,
     542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,
      -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,   561,
     562,    -1,   564,   565,    -1,   567,   568,    -1,   570,   571,
      -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,
     582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,
      -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,   601,
     602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,
     612,   613,   614,    -1,     5,   617,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,    -1,
     231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,
      -1,    -1,   243,    -1,   245,   246,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,    -1,   256,   257,   258,    -1,    -1,
     261,    -1,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
     271,   272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,
      -1,   282,    -1,    -1,    -1,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,   358,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,   369,   370,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    -1,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,
     471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,
     501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,
     511,    -1,    -1,   514,   515,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,   527,   528,    -1,   530,
     531,    -1,   533,    -1,   535,   536,   537,   538,    -1,    -1,
     541,   542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,
      -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,
     561,   562,   563,   564,   565,    -1,   567,   568,    -1,   570,
     571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,
     581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,
      -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,
     601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,
      -1,   612,   613,   614,    -1,     5,   617,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    34,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,    -1,   128,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,   222,   223,   224,    -1,    -1,   227,   228,   229,
      -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,
      -1,    -1,    -1,   243,    -1,   245,   246,    -1,   248,   249,
      -1,    -1,    -1,   253,    -1,    -1,   256,   257,   258,    -1,
      -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,    -1,
      -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,   279,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
      -1,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,
      -1,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,
     350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,    -1,
     360,   361,   362,    -1,   364,   365,   366,   367,    -1,   369,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
     380,   381,    -1,    -1,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,    -1,    -1,
     400,   401,   402,    -1,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,
      -1,   421,   422,   423,   424,   425,    -1,    -1,   428,   429,
     430,   431,   432,    -1,   434,   435,    -1,   437,   438,   439,
      -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,
     450,    -1,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,
     470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,
      -1,   481,    -1,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,
     510,   511,    -1,    -1,   514,   515,    -1,   517,   518,   519,
     520,   521,   522,    -1,    -1,   525,   526,   527,   528,    -1,
     530,   531,    -1,   533,    -1,   535,   536,   537,   538,    -1,
     540,   541,   542,    -1,   544,   545,   546,   547,    -1,    -1,
      -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,
     560,   561,   562,    -1,   564,   565,    -1,   567,   568,    -1,
     570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,
      -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,
     590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,
     600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,
     610,    -1,   612,   613,   614,    -1,     5,   617,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,
     239,    -1,    -1,    -1,   243,    -1,   245,   246,    -1,   248,
     249,    -1,    -1,    -1,   253,    -1,    -1,   256,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,   282,    -1,    -1,    -1,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,    -1,   305,   306,   307,   308,
      -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,   358,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
     369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,   465,   466,    -1,    -1,
      -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,
     509,   510,   511,    -1,    -1,   514,   515,    -1,   517,   518,
     519,   520,   521,   522,    -1,    -1,   525,   526,   527,   528,
      -1,   530,   531,    -1,   533,    -1,   535,   536,   537,   538,
      -1,    -1,   541,   542,    -1,   544,   545,   546,   547,    -1,
      -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,
     559,   560,   561,   562,   563,   564,   565,    -1,   567,   568,
      -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,
     579,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,
      -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,
     599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,
     609,   610,    -1,   612,   613,   614,    -1,     5,   617,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
     128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,   187,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,
     238,   239,    -1,    -1,    -1,   243,    -1,   245,   246,    -1,
     248,   249,    -1,    -1,    -1,   253,    -1,    -1,   256,   257,
     258,    -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,
      -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,
     278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,    -1,   305,   306,   307,
     308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,    -1,   327,
      -1,   329,    -1,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,
     348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,
      -1,    -1,   360,   361,   362,    -1,   364,   365,   366,   367,
      -1,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   379,   380,   381,    -1,    -1,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,   465,   466,    -1,
      -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,
      -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,    -1,
     488,   489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,
      -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,
      -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,   517,
     518,   519,   520,   521,   522,    -1,    -1,   525,   526,   527,
     528,    -1,   530,   531,    -1,   533,    -1,   535,   536,   537,
     538,    -1,   540,   541,   542,    -1,   544,   545,   546,   547,
      -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,
      -1,   559,   560,   561,   562,    -1,   564,   565,    -1,   567,
     568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,
      -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,
      -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,
     598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,
      -1,   609,   610,    -1,   612,   613,   614,    -1,     5,   617,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,
     227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,
      -1,   238,   239,    -1,    -1,    -1,   243,    -1,   245,   246,
      -1,   248,   249,    -1,    -1,    -1,   253,    -1,    -1,   256,
     257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,
      -1,   278,   279,    -1,    -1,   282,    -1,    -1,    -1,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,    -1,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,    -1,
     327,    -1,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,
      -1,   358,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,   465,   466,
      -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,
      -1,   488,   489,   490,   491,   492,   493,    -1,    -1,    -1,
      -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,
      -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
     527,   528,    -1,   530,   531,    -1,   533,    -1,   535,   536,
     537,   538,    -1,    -1,   541,   542,    -1,   544,   545,   546,
     547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,
      -1,    -1,   559,   560,   561,   562,   563,   564,   565,    -1,
     567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,
     577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,
      -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,
     597,   598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,
      -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,     5,
     617,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,   107,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,
      -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,
      -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
      -1,    -1,   238,   239,    -1,    -1,    -1,   243,    -1,   245,
     246,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,    -1,
     256,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,    -1,   301,   302,   303,    -1,   305,
     306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,
     316,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
      -1,   327,    -1,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,    -1,    -1,   343,   344,    -1,
      -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,   355,
      -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,
     366,   367,    -1,   369,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   379,   380,   381,    -1,    -1,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,    -1,
      -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,   425,
      -1,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
      -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,
     446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,   465,
     466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,
      -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,    -1,    -1,
      -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,
     506,    -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,
      -1,   517,   518,   519,   520,   521,   522,    -1,    -1,   525,
     526,   527,   528,    -1,   530,   531,    -1,   533,    -1,   535,
     536,   537,   538,    -1,   540,   541,   542,    -1,   544,   545,
     546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,
      -1,    -1,    -1,   559,   560,   561,   562,    -1,   564,   565,
      -1,   567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,
      -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,
      -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,
      -1,   597,   598,   599,   600,   601,   602,    -1,    -1,    -1,
      -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,
       5,   617,     7,     8,     9,    10,    11,    12,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,   224,
      -1,    -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,
      -1,    -1,    -1,   238,   239,    -1,    -1,    -1,   243,    -1,
     245,   246,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,
      -1,   256,   257,   258,    -1,    -1,   261,    -1,    -1,   264,
     265,   266,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,
      -1,   276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,    -1,
     305,   306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,
      -1,   316,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,    -1,   327,    -1,   329,    -1,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,   369,   370,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,    -1,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,    -1,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
     465,   466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,
      -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,   514,
     515,    -1,   517,   518,   519,   520,   521,   522,    -1,    -1,
     525,   526,   527,   528,    -1,   530,   531,    -1,   533,    -1,
     535,   536,   537,   538,    -1,   540,   541,   542,    -1,   544,
     545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,
     555,    -1,    -1,    -1,   559,   560,   561,   562,    -1,   564,
     565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,   574,
      -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,
      -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,
      -1,    -1,   597,   598,   599,   600,   601,   602,    -1,    -1,
      -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,
      -1,     5,   617,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,   243,
      -1,   245,   246,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,    -1,   256,   257,   258,    -1,    -1,   261,    -1,    -1,
     264,   265,   266,    -1,    -1,    -1,    -1,   271,   272,    -1,
     274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,    -1,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,    -1,    -1,
      -1,    -1,   316,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,    -1,   327,    -1,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,
     354,   355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,
     364,   365,   366,   367,    -1,   369,   370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,    -1,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,    -1,   400,   401,   402,    -1,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,
     424,   425,    -1,    -1,   428,   429,   430,   431,   432,    -1,
     434,   435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,
     444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,   473,
      -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
      -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,
      -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,
     514,   515,    -1,   517,   518,   519,   520,   521,   522,    -1,
      -1,   525,   526,   527,   528,    -1,   530,   531,    -1,   533,
      -1,   535,   536,   537,   538,    -1,   540,   541,   542,    -1,
     544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,
     554,   555,    -1,    -1,    -1,   559,   560,   561,   562,    -1,
     564,   565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,
     574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,
      -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,
      -1,    -1,    -1,   597,   598,   599,   600,   601,   602,    -1,
      -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,
     614,    -1,     5,   617,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,   128,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,
     233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,
     243,    -1,   245,   246,    -1,   248,   249,    -1,    -1,    -1,
     253,    -1,    -1,   256,   257,   258,    -1,    -1,   261,    -1,
      -1,   264,   265,   266,    -1,    -1,    -1,    -1,   271,   272,
      -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,    -1,   305,   306,   307,   308,    -1,   310,   311,    -1,
      -1,    -1,    -1,   316,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,   369,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
      -1,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,    -1,   488,   489,   490,   491,   492,
     493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,
     503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,
      -1,   514,   515,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,   527,   528,    -1,   530,   531,    -1,
     533,    -1,   535,   536,   537,   538,    -1,   540,   541,   542,
      -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,
     553,   554,   555,    -1,    -1,    -1,   559,   560,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,   570,   571,    -1,
      -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,
     583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,
     593,    -1,    -1,    -1,   597,   598,   599,   600,   601,   602,
      -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,
     613,   614,    -1,     5,   617,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
     222,   223,   224,    -1,    -1,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,
      -1,   243,    -1,   245,   246,    -1,   248,   249,    -1,    -1,
      -1,   253,    -1,    -1,   256,   257,   258,    -1,    -1,   261,
      -1,    -1,   264,   265,   266,    -1,    -1,    -1,    -1,   271,
     272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,    -1,   301,
     302,   303,    -1,   305,   306,   307,   308,    -1,   310,   311,
      -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,    -1,
      -1,   343,   344,    -1,    -1,   347,   348,   349,   350,    -1,
      -1,    -1,   354,   355,    -1,    -1,    -1,    -1,   360,   361,
     362,    -1,   364,   365,   366,   367,    -1,   369,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,
      -1,    -1,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,    -1,   400,   401,
     402,    -1,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,
     422,   423,   424,   425,    -1,    -1,   428,   429,   430,   431,
     432,    -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,
     442,    -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,
     472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,
      -1,   483,   484,   485,   486,    -1,   488,   489,   490,   491,
     492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,
      -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,
      -1,    -1,   514,   515,    -1,   517,   518,   519,   520,   521,
     522,    -1,    -1,   525,   526,   527,   528,    -1,   530,   531,
      -1,   533,    -1,   535,   536,   537,   538,    -1,   540,   541,
     542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,
      -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,   561,
     562,    -1,   564,   565,    -1,   567,   568,    -1,   570,   571,
      -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,
     582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,
      -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,   601,
     602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,
     612,   613,   614,    -1,     5,   617,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,    -1,
     231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,
      -1,    -1,   243,    -1,   245,   246,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,    -1,   256,   257,   258,    -1,    -1,
     261,    -1,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
     271,   272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,   369,   370,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,    -1,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    -1,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,
     471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,
     501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,
     511,    -1,    -1,   514,   515,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,   527,   528,    -1,   530,
     531,    -1,   533,    -1,   535,   536,   537,   538,    -1,   540,
     541,   542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,
      -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,
     561,   562,    -1,   564,   565,    -1,   567,   568,    -1,   570,
     571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,
     581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,
      -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,
     601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,
      -1,   612,   613,   614,    -1,     5,   617,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,   173,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,   222,   223,   224,    -1,    -1,   227,   228,   229,
      -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,
      -1,    -1,    -1,   243,    -1,   245,   246,    -1,   248,   249,
      -1,    -1,    -1,   253,    -1,    -1,   256,   257,   258,    -1,
      -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,    -1,
      -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,   279,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
      -1,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,
      -1,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,
     350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,    -1,
     360,   361,   362,    -1,   364,   365,   366,   367,    -1,   369,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
     380,   381,    -1,    -1,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,    -1,    -1,
     400,   401,   402,    -1,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,
      -1,   421,   422,   423,   424,   425,    -1,    -1,   428,   429,
     430,   431,   432,    -1,   434,   435,    -1,   437,   438,   439,
      -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,
     450,    -1,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,
     470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,
      -1,   481,    -1,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,
     510,   511,    -1,    -1,   514,   515,    -1,   517,   518,   519,
     520,   521,   522,    -1,    -1,   525,   526,   527,   528,    -1,
     530,   531,    -1,   533,    -1,   535,   536,   537,   538,    -1,
      -1,   541,   542,    -1,   544,   545,   546,   547,    -1,    -1,
      -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,
     560,   561,   562,    -1,   564,   565,    -1,   567,   568,    -1,
     570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,
      -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,
     590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,
     600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,
     610,    -1,   612,   613,   614,    -1,     5,   617,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,
     239,    -1,    -1,    -1,   243,    -1,   245,   246,    -1,   248,
     249,    -1,    -1,    -1,   253,    -1,    -1,   256,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,    -1,   305,   306,   307,   308,
      -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
     369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,    -1,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,   465,   466,    -1,    -1,
      -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,    -1,    -1,    -1,   497,    -1,
      -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,
     509,   510,   511,    -1,    -1,   514,   515,    -1,   517,   518,
     519,   520,   521,   522,    -1,    -1,   525,   526,   527,   528,
      -1,   530,   531,    -1,   533,    -1,   535,   536,   537,   538,
      -1,    -1,   541,   542,    -1,   544,   545,   546,   547,    -1,
      -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,    -1,   567,   568,
      -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,
     579,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,
      -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,
     599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,
     609,   610,    -1,   612,   613,   614,    -1,     5,   617,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
      -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,   187,
      -1,    -1,    -1,   191,   192,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,
     238,   239,    -1,    -1,    -1,   243,    -1,   245,   246,    -1,
     248,   249,    -1,    -1,    -1,   253,    -1,    -1,   256,   257,
     258,    -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,
     278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,    -1,   305,   306,   307,
     308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,    -1,   327,
      -1,   329,    -1,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,
     348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,
      -1,    -1,   360,   361,   362,    -1,   364,   365,   366,   367,
      -1,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   379,   380,   381,    -1,    -1,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,   465,   466,    -1,
      -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,
      -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,    -1,
     488,   489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,
      -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,
      -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,   517,
     518,   519,   520,   521,   522,    -1,    -1,   525,   526,   527,
     528,    -1,   530,   531,    -1,   533,    -1,   535,   536,   537,
     538,    -1,    -1,   541,   542,    -1,   544,   545,   546,   547,
      -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,
      -1,   559,   560,   561,   562,    -1,   564,   565,    -1,   567,
     568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,
      -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,
      -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,
     598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,
      -1,   609,   610,    -1,   612,   613,   614,    -1,     5,   617,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,    -1,
     227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,
      -1,   238,   239,    -1,    -1,    -1,   243,    -1,   245,   246,
      -1,   248,   249,    -1,    -1,    -1,   253,    -1,    -1,   256,
     257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,
      -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,    -1,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,    -1,
     327,    -1,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,
      -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,    -1,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,   465,   466,
      -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,
      -1,   488,   489,   490,   491,   492,   493,    -1,    -1,    -1,
      -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,
      -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
     527,   528,    -1,   530,   531,    -1,   533,    -1,   535,   536,
     537,   538,    -1,    -1,   541,   542,    -1,   544,   545,   546,
     547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,
      -1,    -1,   559,   560,   561,   562,    -1,   564,   565,    -1,
     567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,
     577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,
      -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,
     597,   598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,
      -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,     5,
     617,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,   222,   223,   224,    -1,
      -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
      -1,    -1,   238,   239,    -1,    -1,    -1,   243,    -1,   245,
     246,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,    -1,
     256,   257,   258,    -1,    -1,   261,    -1,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,    -1,   301,   302,   303,    -1,   305,
     306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,
     316,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
      -1,   327,    -1,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,    -1,    -1,   343,   344,    -1,
      -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,   355,
      -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,
     366,   367,    -1,   369,   370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   379,   380,   381,    -1,    -1,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,    -1,
      -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,   425,
      -1,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
      -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,
     446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,   465,
     466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,
      -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,    -1,    -1,
      -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,
     506,    -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,
      -1,   517,   518,   519,   520,   521,   522,    -1,    -1,   525,
     526,   527,   528,    -1,   530,   531,    -1,   533,    -1,   535,
     536,   537,   538,    -1,    -1,   541,   542,    -1,   544,   545,
     546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,
      -1,    -1,    -1,   559,   560,   561,   562,    -1,   564,   565,
      -1,   567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,
      -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,
      -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,
      -1,   597,   598,   599,   600,   601,   602,    -1,    -1,    -1,
      -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,
       5,   617,     7,     8,     9,    10,    11,    12,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,   224,
      -1,    -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,
      -1,    -1,    -1,   238,   239,    -1,    -1,    -1,   243,    -1,
     245,   246,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,
      -1,   256,   257,   258,    -1,    -1,   261,    -1,    -1,   264,
     265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,
      -1,   276,    -1,   278,   279,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,    -1,
     305,   306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,
      -1,   316,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,    -1,   327,    -1,   329,    -1,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,   369,   370,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,    -1,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,    -1,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
     465,   466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,
      -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,   514,
     515,    -1,   517,   518,   519,   520,   521,   522,    -1,    -1,
     525,   526,   527,   528,    -1,   530,   531,    -1,   533,    -1,
     535,   536,   537,   538,    -1,    -1,   541,   542,    -1,   544,
     545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,
     555,    -1,    -1,    -1,   559,   560,   561,   562,    -1,   564,
     565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,   574,
      -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,
      -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,
      -1,    -1,   597,   598,   599,   600,   601,   602,    -1,    -1,
      -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,
      -1,     5,   617,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,   223,
     224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,   243,
      -1,   245,   246,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,    -1,   256,   257,   258,    -1,    -1,   261,    -1,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,
     274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,    -1,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,    -1,    -1,
      -1,    -1,   316,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,    -1,   327,    -1,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,
     354,   355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,
     364,   365,   366,   367,    -1,   369,   370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,    -1,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,    -1,   400,   401,   402,   403,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,
     424,   425,    -1,    -1,   428,   429,   430,   431,   432,    -1,
     434,   435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,
     444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,   473,
      -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
      -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,
      -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,
     514,   515,    -1,   517,   518,   519,   520,   521,   522,    -1,
      -1,   525,   526,   527,   528,    -1,   530,   531,    -1,   533,
      -1,   535,   536,   537,   538,    -1,    -1,   541,   542,    -1,
     544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,
     554,   555,    -1,    -1,    -1,   559,   560,   561,   562,    -1,
     564,   565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,
     574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,
      -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,
      -1,    -1,    -1,   597,   598,   599,   600,   601,   602,    -1,
      -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,
     614,    -1,     5,   617,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,   222,
     223,   224,    -1,    -1,   227,   228,   229,    -1,   231,    -1,
     233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,    -1,
     243,    -1,   245,   246,    -1,   248,   249,    -1,    -1,    -1,
     253,    -1,    -1,   256,   257,   258,    -1,    -1,   261,    -1,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,
      -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,    -1,   305,   306,   307,   308,    -1,   310,   311,    -1,
      -1,    -1,    -1,   316,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,   369,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
      -1,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,    -1,   488,   489,   490,   491,   492,
     493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,
     503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,
      -1,   514,   515,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,   527,   528,    -1,   530,   531,    -1,
     533,    -1,   535,   536,   537,   538,    -1,   540,   541,   542,
      -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,
     553,   554,   555,    -1,    -1,    -1,   559,   560,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,   570,   571,    -1,
      -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,
     583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,
     593,    -1,    -1,    -1,   597,   598,   599,   600,   601,   602,
      -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,
     613,   614,    -1,     5,   617,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,   124,    -1,    -1,    -1,   128,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
     222,   223,   224,    -1,    -1,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,    -1,
      -1,   243,    -1,   245,   246,    -1,   248,   249,    -1,    -1,
      -1,   253,    -1,    -1,   256,   257,   258,    -1,    -1,   261,
      -1,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,
     272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,    -1,   301,
     302,   303,    -1,   305,   306,   307,   308,    -1,   310,   311,
      -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,    -1,
      -1,   343,   344,    -1,    -1,   347,   348,   349,   350,    -1,
      -1,    -1,   354,   355,    -1,    -1,    -1,    -1,   360,   361,
     362,    -1,   364,   365,   366,   367,    -1,   369,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,
      -1,    -1,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,    -1,   400,   401,
     402,    -1,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,
     422,   423,   424,   425,    -1,    -1,   428,   429,   430,   431,
     432,    -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,
     442,    -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,
     472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,
      -1,   483,   484,   485,   486,    -1,   488,   489,   490,   491,
     492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,
      -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,
      -1,    -1,   514,   515,    -1,   517,   518,   519,   520,   521,
     522,    -1,    -1,   525,   526,   527,   528,    -1,   530,   531,
      -1,   533,    -1,   535,   536,   537,   538,    -1,    -1,   541,
     542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,
      -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,   561,
     562,    -1,   564,   565,    -1,   567,   568,    -1,   570,   571,
      -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,
     582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,
      -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,   601,
     602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,
     612,   613,   614,    -1,     5,   617,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,   222,   223,   224,    -1,    -1,   227,   228,   229,    -1,
     231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,    -1,
      -1,    -1,   243,    -1,   245,   246,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,    -1,   256,   257,   258,    -1,    -1,
     261,    -1,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
     271,   272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,   369,   370,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,    -1,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    -1,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,
     471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,
     501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,
     511,    -1,    -1,   514,   515,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,   527,   528,    -1,   530,
     531,    -1,   533,    -1,   535,   536,   537,   538,    -1,    -1,
     541,   542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,
      -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,
     561,   562,    -1,   564,   565,    -1,   567,   568,    -1,   570,
     571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,
     581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,
      -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,
     601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,
      -1,   612,   613,   614,    -1,     5,   617,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,   222,   223,   224,    -1,    -1,   227,   228,   229,
      -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,   239,
      -1,    -1,    -1,   243,    -1,   245,   246,    -1,   248,   249,
      -1,    -1,    -1,   253,    -1,    -1,   256,   257,   258,    -1,
      -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,    -1,
      -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,   279,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
      -1,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,
      -1,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,
     350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,    -1,
     360,   361,   362,    -1,   364,   365,   366,   367,    -1,   369,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
     380,   381,    -1,    -1,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,    -1,    -1,
     400,   401,   402,    -1,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,
      -1,   421,   422,   423,   424,   425,    -1,    -1,   428,   429,
     430,   431,   432,    -1,   434,   435,    -1,   437,   438,   439,
      -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,
     450,    -1,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,
     470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,
      -1,   481,    -1,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,
     510,   511,    -1,    -1,   514,   515,    -1,   517,   518,   519,
     520,   521,   522,    -1,    -1,   525,   526,   527,   528,    -1,
     530,   531,    -1,   533,    -1,   535,   536,   537,   538,    -1,
      -1,   541,   542,    -1,   544,   545,   546,   547,    -1,    -1,
      -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,
     560,   561,   562,    -1,   564,   565,    -1,   567,   568,    -1,
     570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,
      -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,
     590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,
     600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,
     610,    -1,   612,   613,   614,    -1,     5,   617,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,
      -1,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    81,    -1,    83,    -1,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    -1,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,
     149,    -1,   151,   152,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,    -1,    -1,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,    -1,
     209,   210,    -1,    -1,    -1,    -1,    -1,    -1,   217,    -1,
      -1,    -1,   221,   222,   223,   224,   225,    -1,   227,   228,
     229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,
      -1,    -1,    -1,    -1,   243,    -1,   245,   246,    -1,   248,
     249,   250,    -1,    -1,   253,    -1,    -1,    -1,   257,   258,
      -1,    -1,   261,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,    -1,   305,   306,   307,   308,
      -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,    -1,    -1,    -1,    -1,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,    -1,    -1,
      -1,    -1,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,    -1,    -1,   437,    -1,
     439,   440,    -1,   442,    -1,    -1,    -1,   446,    -1,    -1,
     449,   450,   451,    -1,    -1,    -1,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,    -1,   465,    -1,    -1,    -1,
      -1,   470,   471,   472,    -1,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,    -1,   484,    -1,   486,    -1,   488,
      -1,   490,    -1,   492,   493,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,
     509,    -1,   511,    -1,    -1,    -1,   515,    -1,   517,   518,
     519,   520,   521,   522,    -1,    -1,   525,   526,   527,   528,
      -1,   530,   531,    -1,   533,    -1,   535,   536,   537,   538,
      -1,    -1,   541,   542,    -1,   544,   545,   546,   547,    -1,
      -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,
      -1,   560,   561,   562,    -1,   564,   565,    -1,   567,   568,
      -1,    -1,    -1,    -1,    -1,   574,    -1,    -1,   577,    -1,
      -1,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,
      -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,
     599,   600,   601,   602,    -1,    -1,   605,    -1,    -1,    -1,
     609,    -1,    -1,   612,    -1,   614,    -1,     5,   617,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,
      58,    -1,    -1,    -1,    -1,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    81,    -1,    83,    -1,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    -1,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,
      -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,    -1,    -1,    -1,   147,
     148,   149,    -1,   151,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,    -1,    -1,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,   181,   182,   183,   184,    -1,    -1,    -1,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
      -1,   209,   210,    -1,    -1,    -1,    -1,    -1,    -1,   217,
      -1,    -1,    -1,   221,   222,   223,   224,   225,    -1,   227,
     228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,
     238,    -1,    -1,    -1,    -1,   243,    -1,   245,   246,    -1,
     248,   249,   250,    -1,    -1,   253,    -1,    -1,    -1,   257,
     258,    -1,    -1,   261,   262,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,
     278,   279,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,    -1,   305,   306,   307,
     308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,    -1,   327,
      -1,   329,    -1,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,
     348,   349,   350,    -1,    -1,    -1,    -1,   355,    -1,    -1,
      -1,    -1,   360,   361,   362,    -1,   364,   365,   366,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,   381,    -1,    -1,    -1,    -1,   386,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,    -1,    -1,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,    -1,    -1,   437,
      -1,   439,   440,    -1,   442,    -1,    -1,    -1,   446,    -1,
      -1,   449,   450,   451,    -1,    -1,    -1,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,    -1,   465,    -1,    -1,
      -1,    -1,   470,   471,   472,    -1,    -1,    -1,    -1,   477,
      -1,    -1,    -1,   481,    -1,    -1,   484,    -1,   486,    -1,
     488,    -1,   490,    -1,   492,   493,    -1,    -1,    -1,    -1,
      -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,
      -1,   509,    -1,   511,    -1,    -1,    -1,   515,    -1,   517,
     518,   519,   520,   521,   522,    -1,    -1,   525,   526,   527,
     528,    -1,   530,   531,    -1,   533,    -1,   535,   536,   537,
     538,    -1,    -1,   541,   542,    -1,   544,   545,   546,   547,
      -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,
      -1,    -1,   560,   561,   562,    -1,   564,   565,    -1,   567,
     568,    -1,    -1,    -1,    -1,    -1,   574,    -1,    -1,   577,
      -1,    -1,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,
      -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,
     598,   599,   600,   601,   602,   603,    -1,   605,    -1,    -1,
      -1,   609,    -1,    -1,   612,    -1,   614,    -1,     5,   617,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,
      -1,    58,    -1,    -1,    -1,    -1,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    81,    -1,    83,    -1,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    -1,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,    -1,
     147,   148,   149,    -1,   151,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,    -1,    -1,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,   181,   182,   183,   184,    -1,    -1,
      -1,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,    -1,   209,   210,    -1,    -1,    -1,    -1,    -1,    -1,
     217,    -1,    -1,    -1,   221,   222,   223,   224,   225,    -1,
     227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,    -1,
      -1,   238,    -1,    -1,    -1,    -1,   243,    -1,   245,   246,
      -1,   248,   249,   250,    -1,    -1,   253,    -1,    -1,    -1,
     257,   258,    -1,    -1,   261,   262,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,   276,
      -1,   278,   279,    -1,    -1,    -1,    -1,   284,    -1,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,    -1,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,    -1,
     327,    -1,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,    -1,   355,    -1,
      -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,    -1,    -1,    -1,    -1,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
      -1,    -1,    -1,    -1,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,    -1,    -1,
     437,    -1,   439,   440,    -1,   442,    -1,    -1,    -1,   446,
      -1,    -1,   449,   450,   451,    -1,    -1,    -1,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,    -1,   465,    -1,
      -1,    -1,    -1,   470,   471,   472,    -1,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,    -1,   484,    -1,   486,
      -1,   488,    -1,   490,    -1,   492,   493,    -1,    -1,    -1,
      -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,
      -1,    -1,   509,    -1,   511,    -1,    -1,    -1,   515,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
     527,   528,    -1,   530,   531,    -1,   533,    -1,   535,   536,
     537,   538,    -1,    -1,   541,   542,    -1,   544,   545,   546,
     547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,
      -1,    -1,    -1,   560,   561,   562,    -1,   564,   565,    -1,
     567,   568,    -1,    -1,    -1,    -1,    -1,   574,    -1,    -1,
     577,    -1,    -1,    -1,   581,   582,   583,    -1,    -1,    -1,
      -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,
     597,   598,   599,   600,   601,   602,   603,    -1,   605,    -1,
      -1,    -1,   609,    -1,    -1,   612,    -1,   614,    -1,     5,
     617,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,
      56,    -1,    58,    -1,    -1,    -1,    -1,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    81,    -1,    83,    -1,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      -1,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,    -1,    -1,
      -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,    -1,    -1,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,   184,    -1,
      -1,    -1,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,    -1,   209,   210,    -1,    -1,    -1,    -1,    -1,
      -1,   217,    -1,    -1,    -1,   221,   222,   223,   224,   225,
      -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,    -1,
      -1,    -1,   238,    -1,    -1,    -1,    -1,   243,    -1,   245,
     246,    -1,   248,   249,   250,    -1,    -1,   253,    -1,    -1,
      -1,   257,   258,    -1,    -1,   261,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,    -1,
     276,    -1,   278,   279,    -1,    -1,    -1,    -1,   284,    -1,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,    -1,   301,   302,   303,    -1,   305,
     306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,
     316,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
      -1,   327,    -1,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,    -1,    -1,   343,   344,    -1,
      -1,   347,   348,   349,   350,    -1,    -1,    -1,    -1,   355,
      -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,
     366,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,   381,    -1,    -1,    -1,    -1,
     386,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,    -1,    -1,   401,   402,    -1,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,    -1,
      -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,   425,
      -1,    -1,   428,   429,   430,   431,   432,    -1,   434,    -1,
      -1,   437,    -1,   439,   440,    -1,   442,    -1,    -1,    -1,
     446,    -1,    -1,   449,   450,   451,    -1,    -1,    -1,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,    -1,   465,
      -1,    -1,    -1,    -1,   470,   471,   472,    -1,    -1,    -1,
      -1,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,    -1,
     486,    -1,   488,    -1,   490,    -1,   492,   493,    -1,    -1,
      -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,
     506,    -1,    -1,   509,    -1,   511,    -1,    -1,    -1,   515,
      -1,   517,   518,   519,   520,   521,   522,    -1,    -1,   525,
     526,   527,   528,    -1,   530,   531,    -1,   533,    -1,   535,
     536,   537,   538,    -1,    -1,   541,   542,    -1,   544,   545,
     546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,
      -1,    -1,    -1,    -1,   560,   561,   562,    -1,   564,   565,
      -1,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,    -1,
      -1,   577,    -1,    -1,    -1,   581,   582,   583,    -1,    -1,
      -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,
      -1,   597,   598,   599,   600,   601,   602,    -1,    -1,   605,
      -1,    -1,    -1,   609,    -1,    -1,   612,    -1,   614,    -1,
       5,   617,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,
      55,    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    83,    -1,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    -1,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,    -1,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,    -1,    -1,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,   181,   182,   183,   184,
      -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,    -1,   209,   210,    -1,    -1,    -1,    -1,
      -1,    -1,   217,    -1,    -1,    -1,   221,   222,   223,   224,
     225,    -1,   227,   228,   229,    -1,   231,    -1,   233,    -1,
      -1,    -1,    -1,   238,    -1,    -1,    -1,    -1,   243,    -1,
     245,   246,    -1,   248,   249,   250,    -1,    -1,   253,    -1,
      -1,    -1,   257,   258,    -1,    -1,   261,   262,    -1,   264,
     265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,   274,
      -1,   276,    -1,   278,   279,    -1,    -1,    -1,    -1,   284,
      -1,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,    -1,
     305,   306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,
      -1,   316,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,    -1,   327,    -1,   329,    -1,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,    -1,
     355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   380,   381,    -1,    -1,    -1,
      -1,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,    -1,    -1,    -1,    -1,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
      -1,    -1,   437,    -1,   439,   440,    -1,   442,    -1,    -1,
      -1,   446,    -1,    -1,   449,   450,   451,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,    -1,
     465,    -1,    -1,    -1,    -1,   470,   471,   472,    -1,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,
      -1,   486,    -1,   488,    -1,   490,    -1,   492,   493,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,
      -1,   506,    -1,    -1,   509,    -1,   511,    -1,    -1,    -1,
     515,    -1,   517,   518,   519,   520,   521,   522,    -1,    -1,
     525,   526,   527,   528,    -1,   530,   531,    -1,   533,    -1,
     535,   536,   537,   538,    -1,    -1,   541,   542,    -1,   544,
     545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,
     555,    -1,    -1,    -1,    -1,   560,   561,   562,    -1,   564,
     565,    -1,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,
      -1,    -1,   577,    -1,    -1,    -1,   581,   582,   583,    -1,
      -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,
      -1,    -1,   597,   598,   599,   600,   601,   602,    -1,    -1,
     605,    -1,    -1,    -1,   609,    -1,    -1,   612,    -1,   614,
      -1,     5,   617,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    -1,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    53,
      -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    83,
      -1,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    -1,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
      -1,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
      -1,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,   181,   182,   183,
     184,    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,    -1,   209,   210,    -1,    -1,    -1,
      -1,    -1,    -1,   217,    -1,    -1,    -1,   221,   222,   223,
     224,   225,    -1,   227,   228,   229,    -1,   231,    -1,   233,
      -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,    -1,   243,
      -1,   245,   246,    -1,   248,   249,   250,    -1,    -1,   253,
      -1,    -1,    -1,   257,   258,    -1,    -1,   261,   262,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,    -1,
     274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,    -1,
     284,    -1,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,    -1,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,    -1,    -1,
      -1,    -1,   316,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,    -1,   327,    -1,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,
      -1,   355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,
     364,   365,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,    -1,    -1,
      -1,    -1,   386,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,    -1,    -1,   401,   402,    -1,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,
     424,   425,    -1,    -1,   428,   429,   430,   431,   432,    -1,
     434,    -1,    -1,   437,    -1,   439,   440,    -1,   442,    -1,
      -1,    -1,   446,    -1,    -1,   449,   450,   451,    -1,    -1,
      -1,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
      -1,   465,    -1,    -1,    -1,    -1,   470,   471,   472,    -1,
      -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,    -1,
     484,    -1,   486,    -1,   488,    -1,   490,    -1,   492,   493,
      -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,
      -1,    -1,   506,    -1,    -1,   509,    -1,   511,    -1,    -1,
      -1,   515,    -1,   517,   518,   519,   520,   521,   522,    -1,
      -1,   525,   526,   527,   528,    -1,   530,   531,    -1,   533,
      -1,   535,   536,   537,   538,    -1,    -1,   541,   542,    -1,
     544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,
     554,   555,    -1,    -1,    -1,    -1,   560,   561,   562,    -1,
     564,   565,    -1,   567,   568,    -1,    -1,    -1,    -1,    -1,
     574,    -1,    -1,   577,    -1,    -1,    -1,   581,   582,   583,
      -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,
      -1,    -1,    -1,   597,   598,   599,   600,   601,   602,    -1,
      -1,   605,    -1,    -1,    -1,   609,    -1,    -1,   612,    -1,
     614,    -1,     5,   617,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    -1,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,
      53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,
      83,    -1,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    -1,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,    -1,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,    -1,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,    -1,    -1,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,   181,   182,
     183,   184,    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,    -1,   209,   210,    -1,    -1,
      -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,   221,   222,
     223,   224,   225,    -1,   227,   228,   229,    -1,   231,    -1,
     233,    -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,    -1,
     243,    -1,   245,   246,    -1,   248,   249,   250,    -1,    -1,
     253,    -1,    -1,    -1,   257,   258,    -1,    -1,   261,   262,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,   272,
      -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,    -1,
      -1,   284,    -1,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,    -1,   305,   306,   307,   308,    -1,   310,   311,    -1,
      -1,    -1,    -1,   316,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,    -1,   355,    -1,    -1,    -1,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,    -1,
      -1,    -1,    -1,   386,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,    -1,    -1,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,    -1,    -1,   437,    -1,   439,   440,    -1,   442,
      -1,    -1,    -1,   446,    -1,    -1,   449,   450,   451,    -1,
      -1,    -1,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,    -1,   465,    -1,    -1,    -1,    -1,   470,   471,   472,
      -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
      -1,   484,    -1,   486,    -1,   488,    -1,   490,    -1,   492,
     493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,
     503,    -1,    -1,   506,    -1,    -1,   509,    -1,   511,    -1,
      -1,    -1,   515,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,   527,   528,    -1,   530,   531,    -1,
     533,    -1,   535,   536,   537,   538,    -1,    -1,   541,   542,
      -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,
     553,   554,   555,    -1,    -1,    -1,    -1,   560,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,    -1,    -1,    -1,
      -1,   574,    -1,    -1,   577,    -1,    -1,    -1,   581,   582,
     583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,
     593,    -1,    -1,    -1,   597,   598,   599,   600,   601,   602,
      -1,    -1,   605,    -1,    -1,    -1,   609,    -1,    -1,   612,
      -1,   614,    -1,     5,   617,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    -1,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      52,    53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,
      -1,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
      -1,    83,    -1,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    -1,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,    -1,    -1,    -1,    -1,    -1,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,    -1,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,    -1,    -1,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,   181,
     182,   183,   184,    -1,    -1,    -1,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,    -1,   209,   210,    -1,
      -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,   221,
     222,   223,   224,   225,    -1,   227,   228,   229,    -1,   231,
      -1,   233,    -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,
      -1,   243,    -1,   245,   246,    -1,   248,   249,   250,    -1,
      -1,   253,    -1,    -1,    -1,   257,   258,    -1,    -1,   261,
     262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,   271,
     272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,    -1,
      -1,    -1,   284,    -1,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,    -1,   301,
     302,   303,    -1,   305,   306,   307,   308,    -1,   310,   311,
      -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,    -1,
      -1,   343,   344,    -1,    -1,   347,   348,   349,   350,    -1,
      -1,    -1,    -1,   355,    -1,    -1,    -1,    -1,   360,   361,
     362,    -1,   364,   365,   366,   367,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
      -1,    -1,    -1,    -1,   386,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,    -1,    -1,   401,
     402,    -1,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,
     422,   423,   424,   425,    -1,    -1,   428,   429,   430,   431,
     432,    -1,   434,    -1,    -1,   437,    -1,   439,   440,    -1,
     442,    -1,    -1,    -1,   446,    -1,    -1,   449,   450,   451,
      -1,    -1,    -1,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,    -1,   465,    -1,    -1,    -1,    -1,   470,   471,
     472,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,
      -1,    -1,   484,    -1,   486,    -1,   488,    -1,   490,    -1,
     492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,
      -1,   503,    -1,    -1,   506,    -1,    -1,   509,    -1,   511,
      -1,    -1,    -1,   515,    -1,   517,   518,   519,   520,   521,
     522,    -1,    -1,   525,   526,   527,   528,    -1,   530,   531,
      -1,   533,    -1,   535,   536,   537,   538,    -1,    -1,   541,
     542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,
      -1,   553,   554,   555,    -1,    -1,    -1,    -1,   560,   561,
     562,    -1,   564,   565,    -1,   567,   568,    -1,    -1,    -1,
      -1,    -1,   574,    -1,    -1,   577,    -1,    -1,    -1,   581,
     582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,
      -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,   601,
     602,    -1,    -1,   605,    -1,    -1,    -1,   609,    -1,    -1,
     612,    -1,   614,    -1,     5,   617,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    -1,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    52,    53,    -1,    55,    56,    -1,    58,    -1,    -1,
      -1,    -1,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      81,    -1,    83,    -1,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    -1,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,    -1,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,    -1,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,    -1,
      -1,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,   183,   184,    -1,    -1,    -1,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,    -1,   209,   210,
      -1,    -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,
     221,   222,   223,   224,   225,    -1,   227,   228,   229,    -1,
     231,    -1,   233,    -1,    -1,    -1,    -1,   238,    -1,    -1,
      -1,    -1,   243,    -1,   245,   246,    -1,   248,   249,   250,
      -1,    -1,   253,    -1,    -1,    -1,   257,   258,    -1,    -1,
     261,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
     271,   272,    -1,   274,    -1,   276,    -1,   278,   279,    -1,
      -1,    -1,    -1,   284,    -1,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
     381,    -1,    -1,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,    -1,    -1,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,    -1,    -1,   437,    -1,   439,   440,
      -1,   442,    -1,    -1,    -1,   446,    -1,    -1,   449,   450,
     451,    -1,    -1,    -1,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,    -1,   465,    -1,    -1,    -1,    -1,   470,
     471,   472,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,    -1,   484,    -1,   486,    -1,   488,    -1,   490,
      -1,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,
     501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,    -1,
     511,    -1,    -1,    -1,   515,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,   527,   528,    -1,   530,
     531,    -1,   533,    -1,   535,   536,   537,   538,    -1,    -1,
     541,   542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,
      -1,    -1,   553,   554,   555,    -1,    -1,    -1,    -1,   560,
     561,   562,    -1,   564,   565,    -1,   567,   568,    -1,    -1,
      -1,    -1,    -1,   574,    -1,    -1,   577,    -1,    -1,    -1,
     581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,
      -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,
     601,   602,    -1,    -1,   605,    -1,    -1,    -1,   609,    -1,
      -1,   612,    -1,   614,    -1,     5,   617,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    -1,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,
      -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,    -1,
      -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    81,    -1,    83,    -1,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    -1,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,    -1,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
      -1,    -1,    -1,    -1,   174,   175,   176,    -1,    -1,   179,
     180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,    -1,   209,
     210,    -1,    -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,
      -1,   221,   222,   223,   224,   225,    -1,   227,   228,   229,
      -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,    -1,
      -1,    -1,    -1,   243,    -1,   245,   246,    -1,   248,   249,
     250,    -1,    -1,   253,    -1,    -1,    -1,   257,   258,    -1,
      -1,   261,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,
      -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,   279,
      -1,    -1,    -1,    -1,   284,    -1,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
      -1,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,
      -1,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,
     350,    -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,    -1,
     360,   361,   362,    -1,   364,   365,   366,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,   381,    -1,    -1,    -1,    -1,   386,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,    -1,
      -1,   401,   402,    -1,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,
      -1,   421,   422,   423,   424,   425,    -1,    -1,   428,   429,
     430,   431,   432,    -1,   434,    -1,    -1,   437,    -1,   439,
     440,    -1,   442,    -1,    -1,    -1,   446,    -1,    -1,   449,
     450,   451,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,    -1,   465,    -1,    -1,    -1,    -1,
     470,   471,   472,    -1,    -1,    -1,    -1,   477,    -1,    -1,
      -1,   481,    -1,    -1,   484,    -1,   486,    -1,   488,    -1,
     490,    -1,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,
      -1,   511,    -1,    -1,    -1,   515,    -1,   517,   518,   519,
     520,   521,   522,    -1,    -1,   525,   526,   527,   528,    -1,
     530,   531,    -1,   533,    -1,   535,   536,   537,   538,    -1,
      -1,   541,   542,    -1,   544,   545,   546,   547,    -1,    -1,
      -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,    -1,
     560,   561,   562,    -1,   564,   565,    -1,   567,   568,    -1,
      -1,    -1,    -1,    -1,   574,    -1,    -1,   577,    -1,    -1,
      -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,
     590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,
     600,   601,   602,    -1,    -1,   605,    -1,    -1,    -1,   609,
      -1,    -1,   612,    -1,   614,    -1,     5,   617,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      -1,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    81,    -1,    83,    -1,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    -1,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,    -1,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,    -1,    -1,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,    -1,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,    -1,
     209,   210,    -1,    -1,    -1,    -1,    -1,    -1,   217,    -1,
      -1,    -1,   221,   222,   223,   224,    -1,    -1,   227,   228,
     229,    -1,   231,    -1,   233,    -1,    -1,    -1,    -1,   238,
      -1,    -1,    -1,    -1,   243,    -1,   245,   246,    -1,   248,
     249,    -1,    -1,    -1,   253,    -1,    -1,    -1,   257,   258,
      -1,    -1,   261,    -1,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,   271,   272,    -1,   274,    -1,   276,    -1,   278,
     279,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,    -1,   305,   306,   307,   308,
      -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,
      -1,   360,   361,   362,    -1,   364,   365,   366,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,    -1,    -1,    -1,    -1,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,    -1,    -1,
      -1,    -1,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,    -1,    -1,   437,    -1,
     439,    -1,    -1,   442,    -1,    -1,    -1,   446,    -1,    -1,
     449,   450,    -1,    -1,    -1,    -1,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,    -1,   465,    -1,    -1,    -1,
      -1,   470,   471,   472,    -1,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,    -1,   484,    -1,   486,    -1,   488,
      -1,   490,    -1,   492,   493,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,
     509,    -1,   511,    -1,    -1,    -1,   515,    -1,   517,   518,
     519,   520,   521,   522,    -1,    -1,   525,   526,   527,   528,
      -1,   530,   531,    -1,   533,    -1,   535,   536,   537,   538,
      -1,    -1,   541,   542,    -1,   544,   545,   546,   547,    -1,
      -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,
      -1,   560,   561,   562,    -1,   564,   565,    -1,   567,   568,
      -1,    -1,    -1,    -1,    -1,   574,    -1,    -1,   577,    -1,
      -1,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,
      -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,
     599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,
     609,    -1,    -1,   612,    -1,   614,    -1,    -1,   617
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    15,    31,    35,    49,    50,    57,    62,    63,
      84,   103,   124,   132,   133,   134,   144,   145,   157,   171,
     187,   203,   208,   212,   237,   239,   255,   273,   277,   368,
     385,   389,   400,   411,   433,   436,   438,   441,   444,   445,
     452,   454,   461,   467,   475,   480,   482,   485,   510,   514,
     559,   571,   575,   578,   584,   613,   619,   629,   640,   643,
     644,   645,   646,   647,   649,   654,   656,   663,   693,   721,
     728,   837,   928,  1002,  1045,  1048,  1056,  1061,  1067,  1069,
    1072,  1078,  1081,  1086,  1093,  1105,  1106,  1272,  1274,  1284,
    1287,  1312,  1320,  1331,  1338,  1352,  1355,  1358,  1368,  1374,
    1378,  1383,  1384,  1434,  1451,  1457,  1459,  1466,  1468,  1496,
    1502,  1503,  1504,  1505,  1558,  1566,  1567,  1568,    11,   111,
     129,   195,   278,   405,   473,   531,  1037,  1038,  1527,  1528,
    1529,  1532,   274,   356,  1080,  1497,   540,  1425,   230,     5,
       7,     8,     9,    10,    11,    14,    18,    21,    23,    24,
      25,    26,    27,    28,    29,    31,    35,    39,    42,    43,
      44,    46,    48,    49,    52,    55,    56,    58,    59,    61,
      62,    64,    65,    66,    67,    68,    69,    70,    72,    73,
      74,    75,    76,    77,    78,    79,    81,    82,    83,    84,
      85,    86,    87,    88,    90,    91,    93,    94,    95,    96,
      97,    99,   102,   105,   109,   113,   114,   115,   118,   123,
     124,   129,   131,   135,   137,   138,   139,   140,   144,   147,
     148,   149,   153,   155,   156,   158,   159,   160,   163,   164,
     166,   167,   168,   169,   170,   171,   174,   175,   176,   179,
     180,   182,   183,   184,   187,   191,   193,   195,   197,   198,
     199,   200,   201,   202,   204,   208,   209,   210,   212,   216,
     217,   221,   222,   223,   224,   227,   228,   229,   231,   233,
     238,   239,   243,   245,   246,   248,   249,   253,   256,   257,
     258,   261,   264,   265,   271,   272,   274,   276,   278,   279,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   301,   302,   303,   305,   306,   307,   308,
     310,   311,   316,   317,   318,   319,   320,   321,   324,   325,
     327,   329,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   343,   344,   347,   348,   349,   350,   354,   355,
     360,   361,   362,   364,   365,   366,   367,   369,   370,   379,
     380,   381,   384,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   400,   401,   402,   404,   406,
     407,   408,   409,   410,   412,   413,   414,   417,   421,   422,
     423,   424,   425,   428,   429,   430,   431,   432,   434,   435,
     437,   438,   439,   442,   444,   446,   447,   449,   450,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   465,
     466,   470,   471,   472,   473,   477,   481,   483,   484,   485,
     486,   488,   489,   490,   491,   492,   493,   500,   501,   503,
     506,   509,   510,   511,   514,   515,   517,   518,   519,   520,
     521,   522,   525,   526,   527,   528,   530,   531,   533,   535,
     536,   537,   538,   541,   542,   544,   545,   546,   547,   553,
     554,   555,   559,   560,   561,   562,   564,   565,   567,   568,
     570,   571,   574,   577,   579,   581,   582,   583,   590,   593,
     597,   598,   599,   600,   601,   602,   609,   610,   612,   613,
     614,   617,   687,  1424,  1428,  1432,  1433,   301,   530,   534,
    1453,  1073,   609,  1498,   111,   194,   278,   473,   494,   531,
     537,   573,   581,   669,   670,   889,   890,   891,   980,   981,
     982,  1321,  1273,   111,   168,   195,   230,   278,   405,   473,
     531,   537,   556,   581,   598,  1283,  1428,  1080,   686,   637,
    1421,  1423,  1428,   655,  1285,   394,   491,  1379,   114,   230,
     614,  1389,  1453,  1080,   629,   838,  1428,  1375,   461,   581,
    1453,  1080,  1288,  1369,   497,   718,   722,   723,  1428,   686,
    1498,  1428,  1109,  1111,  1112,   370,  1436,  1339,   722,   510,
     514,   485,   553,   485,   534,  1333,   394,   491,  1458,  1313,
    1428,    31,    84,   155,   400,   422,   454,   510,  1560,   467,
     629,  1107,     0,   157,   641,   400,   175,   388,  1356,  1421,
    1428,   161,  1013,  1428,   161,   687,   205,   687,   266,  1425,
    1428,  1430,   783,   784,   787,   810,  1428,   534,   226,   366,
    1039,  1040,  1041,   168,  1008,  1527,  1453,  1498,  1087,   694,
     637,   551,  1057,   598,  1070,  1453,    17,  1499,   225,   892,
     205,  1430,   785,   810,   686,   375,  1524,  1528,  1529,  1530,
    1531,  1532,   534,   890,   230,   230,   230,   226,   285,   414,
    1329,  1330,     7,    21,    28,    34,    36,    37,    38,    40,
      53,    54,    59,    60,    69,    72,    74,    75,    76,    77,
      78,    79,    96,   100,   101,   106,   107,   110,   111,   116,
     117,   118,   123,   125,   128,   172,   177,   178,   185,   199,
     201,   206,   213,   214,   221,   225,   237,   240,   258,   263,
     271,   282,   304,   309,   320,   324,   326,   330,   331,   332,
     333,   334,   342,   351,   352,   353,   357,   358,   362,   383,
     390,   395,   396,   398,   412,   440,   441,   453,   459,   465,
     512,   513,   519,   523,   524,   529,   540,   544,   545,   546,
     547,   557,   558,   559,   563,   566,   581,   586,   587,   588,
     589,   594,   596,   602,   617,   622,   623,   628,   629,   632,
     633,   636,   637,  1127,  1128,  1129,  1130,  1134,  1141,  1142,
    1143,  1144,  1145,  1146,  1154,  1158,  1171,  1408,  1410,  1412,
    1413,  1417,  1419,  1424,  1428,   225,  1282,  1282,  1282,  1428,
     205,  1282,  1282,   810,  1282,   686,  1282,  1453,   650,  1359,
      12,    13,   103,   132,   145,   168,   171,   182,   203,   230,
     237,   277,   406,   410,   426,   434,   442,   467,   480,   481,
     525,   556,   578,   580,  1469,  1471,  1473,  1474,  1428,   367,
      68,   418,   637,  1430,   130,   215,   285,  1290,  1428,  1425,
     209,   490,  1380,   241,  1385,  1452,  1453,   929,  1122,    47,
     839,   192,    34,   301,  1344,  1376,  1428,   686,  1082,  1062,
     130,   285,  1291,  1319,   301,   413,   485,  1370,  1371,   590,
     719,   475,   724,    12,   410,  1467,  1471,   551,  1499,  1110,
      12,   141,   215,   499,   500,   501,   502,   503,   504,   516,
    1116,  1117,  1118,  1523,  1435,    24,    35,    59,    60,    67,
      72,    99,   101,   103,   112,   159,   164,   167,   193,   195,
     202,   204,   229,   230,   231,   252,   274,   301,   367,   393,
     404,   405,   408,   409,   429,   472,   485,   515,   533,   534,
     582,   601,   954,   979,  1340,  1344,  1345,  1347,  1442,   724,
    1050,  1051,  1050,  1050,   606,  1049,  1050,  1332,  1428,  1425,
    1453,  1319,    36,   213,   214,   540,  1409,  1426,  1559,  1559,
    1559,  1559,  1559,  1111,  1107,   630,   635,  1428,  1354,  1353,
     318,   538,   565,  1004,   579,   107,  1430,  1431,  1006,   789,
     811,  1428,  1005,   369,     6,    57,   145,   352,   417,   419,
     812,  1421,  1041,   687,   505,  1533,  1534,  1007,  1068,  1088,
    1089,  1090,  1091,  1421,   629,   695,  1428,   657,  1278,  1279,
    1421,  1071,  1278,    56,   354,   354,   433,  1500,   351,   352,
    1133,  1428,   788,   811,   189,     6,  1431,  1484,  1487,   441,
      10,   405,   556,   673,  1122,  1526,  1534,  1542,  1546,  1547,
    1553,   673,  1122,  1525,  1534,  1542,  1547,  1553,  1527,  1532,
     892,  1428,  1428,  1428,   192,  1322,  1326,  1327,  1428,  1329,
     629,   629,   629,  1141,   629,   629,   629,  1127,  1174,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,  1126,  1126,   629,  1125,   629,   629,
     629,   566,   629,  1408,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,  1127,   629,   629,   629,   629,
    1172,  1173,  1417,  1428,   629,   629,   629,   629,   629,   629,
     629,   629,   629,  1127,  1125,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,  1125,   629,  1408,   629,   629,   629,  1408,   629,   629,
      36,   213,   214,   540,   953,   629,  1126,  1125,  1125,   629,
     629,   629,   629,   629,  1141,  1141,  1141,  1127,  1518,  1519,
    1428,  1159,  1428,    16,    17,   372,   375,   615,  1131,  1132,
     161,   162,   196,   207,   247,   259,   286,   345,  1135,    32,
     142,   244,   267,   330,   427,   478,   479,   492,   620,   621,
     622,   623,   624,   625,   626,   627,  1133,  1141,    71,   374,
     631,  1426,   629,   637,   172,  1428,   687,  1428,   363,   811,
     687,  1430,   821,  1345,   687,  1431,  1483,  1277,  1282,   585,
     651,    34,    67,   135,   159,   163,   197,   217,   231,   279,
     301,   404,   413,   428,   446,   485,   486,   511,   533,   582,
    1360,  1364,  1365,  1453,   404,  1472,   456,   456,   531,   537,
     581,   598,   370,  1476,   530,   363,  1478,    66,   485,  1475,
     112,   598,  1477,   363,   631,    19,   161,  1224,  1225,  1460,
    1428,   226,  1036,   491,    90,   413,  1381,    49,    88,   285,
    1391,  1421,  1454,  1455,  1079,   630,  1127,   269,   272,   415,
     840,   842,   636,   648,  1425,   279,  1083,  1431,  1084,  1085,
    1421,   598,  1059,  1453,   241,  1279,  1292,  1293,    49,  1372,
     631,  1426,    55,    65,    81,    93,    94,    95,   109,   319,
     337,   463,   518,   536,   725,   727,  1472,   363,   363,   461,
    1501,  1500,   572,  1506,  1507,   624,  1120,  1121,  1122,  1118,
    1437,  1438,  1439,   167,   475,   267,   604,  1351,   629,   111,
     168,   195,   405,   534,   556,   598,  1351,    12,   901,  1430,
     268,  1243,  1245,   192,   244,  1346,  1348,    70,   511,   190,
     511,   530,    70,   511,    12,    42,    97,   102,   246,   317,
     381,   493,   527,  1334,  1335,  1336,   167,   217,   511,   511,
    1243,  1351,  1348,   279,   158,    73,   407,   530,   555,   511,
     593,  1047,   432,   506,  1052,  1053,  1046,    91,  1279,  1036,
     631,   365,  1562,   526,  1563,   251,   449,  1561,   630,  1507,
    1509,  1511,  1512,   157,   642,  1105,  1357,  1409,  1428,   128,
     887,   888,   898,   899,   963,   114,  1126,   636,   688,     6,
     790,   688,   629,   113,   807,   807,   807,     4,  1003,  1009,
     466,   598,  1534,  1278,   244,   631,   389,  1099,  1101,  1102,
     696,   697,  1127,   227,   287,   288,   289,   290,   291,   292,
     294,   295,   296,   297,   298,   299,   300,   302,   303,   430,
     431,   658,   659,   662,   175,   414,   631,  1058,  1278,    58,
     175,   179,   190,   316,   414,  1074,  1075,  1076,    56,   433,
     172,   668,   790,   114,   807,   223,   631,  1122,  1122,  1122,
     168,   195,   195,  1534,  1421,   983,   984,   983,   983,  1280,
    1281,  1421,  1422,  1428,   631,  1324,   637,  1328,  1127,  1127,
      12,   141,  1166,  1226,  1166,  1166,  1166,   603,  1176,  1127,
    1127,  1171,  1171,  1127,  1127,  1127,  1139,  1140,  1127,  1127,
    1127,  1127,  1127,  1127,   141,  1166,  1226,   630,   125,   185,
     213,   282,   358,   563,   630,  1252,  1255,  1256,   630,  1127,
    1127,  1127,  1127,  1417,  1518,   119,   120,   121,   122,   123,
     218,   219,   220,   221,   320,   322,   323,   324,   331,   412,
     464,   465,   602,   616,   617,  1221,  1222,  1171,   115,   118,
     544,   547,  1223,   141,  1161,  1127,  1127,  1127,  1127,  1221,
    1171,  1127,  1171,  1173,     9,   631,   637,   141,  1166,  1127,
    1127,   141,  1166,  1127,  1127,  1171,  1171,  1171,  1127,  1127,
    1127,  1171,  1130,  1127,  1127,  1127,  1127,  1127,  1127,  1166,
    1166,  1127,  1127,   141,  1166,  1127,  1222,  1222,  1127,    45,
     260,   552,  1127,  1127,   630,  1418,  1419,  1428,  1166,  1166,
    1127,  1127,   630,   631,   630,   467,   629,  1515,  1516,  1127,
     636,  1160,  1430,   637,  1127,  1127,  1127,  1129,   178,   357,
     558,   574,  1133,    12,    18,  1129,  1136,  1130,  1130,   629,
    1141,  1130,  1130,  1130,  1130,   267,  1130,  1130,   240,  1130,
     240,  1130,  1130,  1130,  1130,  1130,    32,   244,   267,   427,
    1430,  1141,  1127,  1147,  1428,   637,  1421,   821,   355,   600,
     822,   823,   159,   631,  1278,  1275,   636,   652,   653,   279,
     279,   279,   279,    49,   279,   279,   631,  1361,   530,   629,
    1488,  1431,  1488,  1488,  1488,   195,   405,   534,  1470,  1474,
    1428,   183,   348,  1428,  1461,  1462,  1292,  1425,   581,  1127,
    1382,  1094,   274,  1390,  1225,   631,  1278,  1123,    73,   629,
     847,   848,   847,   848,   388,   850,   210,   254,  1430,    30,
     551,  1377,   631,   551,   631,   551,  1060,  1278,  1293,  1289,
      12,  1373,  1371,   631,   161,   631,  1431,   195,   405,  1470,
    1428,    12,   141,  1514,   631,  1113,  1127,  1415,  1428,   631,
     202,   274,   364,   472,  1440,  1441,  1444,  1445,   244,  1349,
    1425,  1127,   624,   892,   687,   687,   687,  1421,   687,  1421,
     279,   335,   511,  1343,  1343,   282,   358,   457,   563,  1246,
    1247,  1410,  1428,  1351,  1428,   687,  1351,  1431,  1346,   687,
    1351,   245,   528,   180,   190,  1337,   631,  1349,  1346,  1421,
    1348,  1346,  1346,  1351,  1351,   577,  1054,   631,  1054,   488,
     467,   629,   633,  1177,  1178,  1179,  1180,  1181,  1190,  1191,
    1205,  1409,   392,  1564,   373,  1239,  1245,  1513,   888,    71,
     954,   137,  1430,    82,    96,   256,   328,   354,   416,   505,
     690,   692,   423,   567,   808,   809,   233,   804,   805,   806,
     813,   821,   823,   111,   216,   379,   390,   397,   489,   581,
     671,   672,  1425,    25,   308,   798,   799,   800,   813,   814,
     815,   821,   823,   791,   792,   798,     6,    13,    15,    26,
      27,    57,    62,    63,    69,    82,    90,   100,   114,   131,
     138,   139,   145,   153,   159,   188,   228,   230,   238,   253,
     307,   325,   329,   368,   373,   380,   382,   389,   390,   421,
     435,   436,   437,   438,   458,   515,   531,   535,   554,   559,
     572,   834,   894,   896,   898,   899,  1014,  1018,  1020,  1023,
    1029,  1030,  1031,  1235,  1424,   363,   681,  1010,   129,   243,
    1421,   128,  1092,  1428,  1090,  1421,   836,  1101,   230,   254,
     977,  1103,   630,   631,   161,   161,   161,   161,   161,   161,
     161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
     161,   161,   631,  1279,   190,  1077,   579,  1075,   886,   887,
      82,   349,   424,   568,   801,   802,   803,   813,   817,   818,
     819,   820,   821,   823,   610,   584,   786,    47,   597,   606,
    1485,  1487,   195,   687,   687,   892,   687,  1428,   664,   561,
     585,   991,   363,   363,   363,   631,  1325,  1323,   637,  1328,
    1327,   192,   624,  1428,   631,   630,  1166,   630,  1167,   630,
     630,   630,  1127,   151,   603,  1175,    19,   630,   585,   630,
     630,   630,   631,   631,   630,   631,   631,   631,   631,   630,
     631,   585,   631,  1155,   630,   624,   630,   631,   631,   630,
     630,   630,   630,   192,   630,   631,  1157,   630,   631,   631,
     631,   623,   630,   631,   630,   630,   629,  1417,  1428,  1166,
     630,   630,   630,  1166,   630,   631,   630,   630,   630,   630,
     630,   630,   631,   630,   244,   630,   631,   631,   631,   631,
     630,   630,   630,   631,   192,   631,  1166,   630,   630,   631,
     631,   631,   630,   192,  1127,   192,  1127,   192,  1127,   192,
     630,   631,   630,   630,   630,   630,   631,   630,  1171,  1195,
    1196,  1197,   467,   629,  1108,  1510,  1511,   572,  1520,   634,
     202,   274,   472,  1443,   476,  1428,   178,   357,   558,   574,
     629,    17,  1127,  1518,   166,  1231,  1130,  1127,  1127,  1130,
     629,  1141,  1130,  1122,  1151,  1152,  1153,   629,   637,  1428,
    1276,   822,   161,   476,  1303,  1304,  1431,    51,   448,  1042,
    1278,  1430,   631,  1365,  1278,  1366,  1428,  1489,  1490,   551,
     624,  1421,  1428,  1482,  1482,  1482,   161,   183,   196,   207,
     257,   259,   286,   348,   402,  1463,  1465,   604,  1227,  1286,
    1431,  1095,  1096,  1097,  1098,  1421,   232,   285,   418,   611,
    1456,  1455,   629,  1122,  1252,   522,   851,   841,    11,   843,
    1127,  1425,  1431,  1431,  1085,  1421,  1278,   175,   414,   583,
    1063,  1064,  1065,   467,   475,   589,   590,   629,   882,  1294,
    1297,   727,   118,   544,   547,   726,  1158,  1412,  1417,   203,
     192,  1482,  1482,  1482,  1508,  1121,   192,   241,  1114,  1115,
    1238,  1239,  1267,  1123,  1123,   637,  1438,   128,   553,  1428,
    1447,   338,   390,   636,   954,  1446,  1425,   192,  1350,   630,
    1428,   170,   457,   361,   631,  1351,   413,  1243,  1336,  1350,
    1351,  1346,  1421,  1351,  1351,   662,  1055,  1053,  1204,  1428,
     104,   234,   251,   263,   341,   453,   516,  1189,   475,   631,
    1421,  1204,   631,   190,  1565,    47,  1243,  1304,  1304,   339,
    1425,   505,   505,   505,   505,   505,   466,  1425,  1425,  1304,
     631,   806,  1425,  1425,  1425,  1425,   125,   185,   213,   282,
     358,   563,  1251,  1425,  1425,   630,   631,  1304,  1304,   631,
     800,   793,   794,   813,   814,   815,    80,    92,   389,   910,
     917,   918,   975,   977,   981,   982,  1035,  1035,   389,  1304,
    1304,  1035,  1304,   389,   389,  1304,  1304,   551,   137,  1304,
     252,   531,   189,   389,   403,   977,  1035,   252,  1304,   531,
     137,  1304,  1304,  1304,  1304,  1035,   389,    47,  1304,  1304,
     836,  1304,   389,   387,    19,   161,   551,  1044,   389,   389,
    1304,   140,   317,  1428,  1304,  1304,   389,  1304,   894,   631,
     833,   834,  1018,   629,   637,   909,   919,  1420,  1428,  1303,
      86,   462,   436,  1011,  1535,  1100,   629,  1127,   629,  1251,
    1425,  1425,   125,   185,   282,   358,   563,  1253,  1425,  1251,
    1425,  1425,  1425,  1425,  1425,  1251,  1251,  1425,  1413,  1425,
    1251,   659,   579,  1304,  1304,  1304,  1304,   631,   803,  1430,
     278,   176,   795,   796,   797,   813,   814,   815,   816,   819,
     820,   821,   823,   390,   540,  1430,  1428,  1554,     8,    30,
     781,   687,   629,   450,   267,   629,   825,   893,   895,   896,
      46,   210,   460,   996,   996,  1421,  1421,  1421,  1281,  1428,
     585,  1227,  1428,  1178,   637,  1328,   240,  1127,   630,  1127,
     543,  1127,  1127,   155,    34,    60,   115,   118,   126,   143,
     242,   343,   483,   547,   576,  1168,    34,   955,  1430,  1140,
    1127,  1139,  1171,  1127,  1127,  1127,   955,  1168,  1171,   630,
     240,   240,  1127,  1127,  1171,  1127,  1127,  1127,  1127,  1127,
    1130,   630,   630,  1127,  1127,  1127,  1127,  1127,  1127,  1171,
     240,  1127,  1127,  1127,   630,  1127,  1127,  1127,  1127,   192,
    1127,   192,  1127,   192,  1127,  1127,  1127,   630,  1521,  1522,
    1523,  1196,  1108,   630,  1514,   637,   637,   637,  1430,  1127,
    1518,  1129,   630,   631,   630,  1141,  1221,  1221,    17,  1127,
    1518,  1231,  1127,   630,   631,  1170,  1171,  1428,   900,  1430,
    1042,   653,  1362,   630,   631,  1484,   637,   637,   551,   551,
     551,  1464,  1228,  1244,  1245,  1294,   631,  1099,  1101,   540,
    1427,   611,   274,    88,   844,   845,   846,  1428,   856,  1130,
      47,   629,   858,   848,   161,   629,   551,   192,  1066,  1064,
     883,  1295,   629,  1300,  1305,  1300,   630,   882,  1296,  1414,
    1415,  1418,  1428,  1298,   161,   370,  1483,   192,   192,   192,
    1106,   146,  1178,  1268,   190,   277,  1119,  1267,  1244,  1115,
      19,  1124,  1425,  1428,   624,  1428,   637,   248,   637,  1303,
     128,   955,   956,  1303,   190,  1303,   636,  1430,    34,   128,
     958,   959,  1430,  1253,  1341,   164,   601,  1247,  1248,   170,
    1247,  1247,   358,  1342,  1227,  1346,   631,  1192,  1199,  1204,
    1177,   251,   251,   376,  1206,   251,   263,   453,  1206,  1190,
    1177,  1315,  1316,  1418,  1179,  1225,  1201,  1202,  1251,   321,
    1240,   128,   960,   962,  1430,   956,   114,   114,   129,   243,
     213,   282,   358,   563,   824,  1254,  1255,  1424,   806,   672,
     824,   824,   800,   631,   794,   999,  1420,  1080,    63,   189,
     403,   573,   916,   976,   999,   977,   978,   978,  1420,  1080,
    1253,  1251,  1420,  1251,    12,  1019,  1027,  1028,  1428,  1080,
    1425,  1425,   954,  1304,  1251,   254,  1027,   254,  1420,  1420,
     900,  1304,   183,   257,   354,   903,  1251,  1253,  1253,  1420,
    1080,  1236,  1237,  1418,   128,  1251,   128,  1251,  1257,   835,
    1425,  1080,  1421,  1080,  1080,    85,    87,   128,   149,   184,
     381,   425,   902,  1251,  1257,  1019,   897,     6,   145,  1031,
     906,   907,   908,   909,   910,  1428,     8,   183,  1043,   426,
     915,   916,   969,   920,   637,   128,  1254,  1425,  1428,   352,
     401,    23,   169,   675,   551,   138,   153,   677,   629,  1536,
     629,   403,  1217,  1218,  1219,  1428,   660,   661,  1251,  1425,
    1252,   824,   824,   803,   369,   205,  1304,   631,   797,   540,
      19,   585,  1486,   450,   629,   132,   237,   578,   782,   674,
    1548,   126,   242,   420,   517,   905,  1421,   267,   389,   826,
     832,   833,   906,   832,   631,   895,   665,   666,   667,   637,
    1178,  1238,  1328,  1227,  1127,   630,  1127,   543,   629,   945,
     946,   946,   946,   629,   940,   941,   945,  1169,   946,   242,
     946,   242,   630,   630,   630,    19,  1137,   630,   630,    19,
     630,   630,   630,  1156,  1127,  1127,   630,   630,   373,  1163,
     631,   631,   630,   631,   630,   244,  1148,  1149,   630,   630,
     630,   630,   631,   630,   630,  1127,   630,   190,   630,   630,
     631,   630,   631,   631,   630,  1127,   630,  1127,   630,  1127,
     630,   630,   630,  1120,  1523,   630,  1517,   637,  1000,   630,
    1171,  1129,   630,   631,   630,  1123,  1153,   630,   606,  1363,
    1490,   606,  1493,   624,   624,  1484,  1484,  1484,   629,  1127,
     363,  1310,  1097,  1421,  1101,   226,  1104,  1386,   630,   631,
    1123,   842,   389,   859,   860,  1252,   844,  1431,   336,  1116,
    1301,  1302,  1418,  1306,   631,   629,  1297,   630,   630,   631,
     637,  1506,   726,   192,  1483,  1483,  1483,  1227,  1227,   147,
     377,  1263,  1264,  1269,   578,   244,  1425,  1428,   637,  1428,
     265,  1428,    12,    34,   128,   363,  1127,  1450,    71,   961,
    1127,  1431,   362,   390,   540,  1449,  1443,  1303,  1243,  1248,
    1243,  1351,   662,   572,   630,  1510,  1200,   634,   251,  1190,
    1206,  1206,   251,   363,   363,   585,   631,  1314,  1303,  1215,
    1216,  1116,  1127,  1241,  1416,   794,  1021,   629,   254,   254,
     978,   999,   984,   999,   999,   145,   475,  1019,  1032,  1016,
     631,  1252,   956,  1425,   999,  1042,  1425,  1033,  1019,   631,
      20,   133,  1242,   839,  1019,  1024,  1019,   629,   630,   631,
    1428,  1421,    33,    34,    39,    41,    43,    44,    60,   115,
     118,   126,   143,   160,   184,   186,   199,   200,   242,   271,
     280,   281,   283,   313,   314,   315,   332,   333,   334,   340,
     343,   359,   360,   395,   396,   420,   471,   475,   487,   541,
     544,   547,   548,   549,   550,   591,   592,   617,   921,   930,
     933,   934,   935,   936,   937,   938,   939,  1428,   401,  1127,
    1127,   363,   681,   687,   363,    82,   682,  1428,  1537,    19,
    1019,   630,   631,   630,   631,   629,  1428,   824,   797,  1425,
     905,  1555,   363,   363,   698,   699,   701,  1428,   491,  1421,
     882,   630,   226,   441,   829,  1392,   895,   629,   629,   629,
    1428,  1227,   268,  1249,  1221,  1127,   125,   282,   358,   563,
      21,    34,    48,   570,   954,   964,   965,   966,   358,   629,
     941,   947,   115,   118,   126,   143,   186,   242,   340,   343,
     420,   547,   576,   934,   935,  1138,  1168,   630,  1221,  1221,
      47,   469,  1162,  1127,  1127,  1171,    43,   341,   630,   606,
    1150,  1127,  1221,  1127,  1127,  1127,  1127,   630,   630,   630,
    1198,  1515,  1428,   630,  1171,  1124,   418,   203,   443,  1491,
    1491,  1491,   128,  1127,  1308,  1309,   148,  1104,   261,  1392,
     846,   630,   210,   254,   861,   630,   631,   630,  1120,   631,
    1303,  1307,  1308,  1305,  1299,  1297,  1414,  1428,  1483,  1244,
     205,  1232,  1427,  1427,   636,  1265,  1266,  1430,   477,   624,
     418,   439,   470,  1448,   962,  1303,   629,   629,  1447,  1127,
    1514,  1225,  1180,  1177,  1190,   251,   251,  1177,  1190,  1183,
    1182,  1184,  1316,  1227,  1309,  1213,  1214,  1120,   631,  1242,
     388,   629,  1022,  1127,   999,   984,   629,   983,   983,   128,
     128,   919,  1074,  1028,   961,   921,  1015,  1237,  1025,  1027,
    1017,  1366,   908,   629,   970,   945,   945,   946,   946,   940,
     399,   931,   940,   940,   966,    60,   591,   934,   936,   966,
     966,    60,   592,   592,   595,   940,   932,   946,   946,   946,
     966,   945,   946,    26,    71,    82,   128,   198,   357,   363,
     403,   471,   573,   923,   948,   949,   950,   968,  1133,  1424,
     595,   945,   966,    34,   945,   967,   945,   945,   946,   947,
     637,  1221,   485,  1425,   144,  1012,   630,   631,  1538,  1539,
     630,  1218,   661,   671,   491,   235,   244,   378,   702,   703,
     704,   705,  1122,   462,   630,   631,   700,  1425,   630,   630,
     827,    19,   885,   997,   998,  1428,   997,   997,   457,  1247,
     630,   630,   630,   630,   630,    34,    21,   570,   954,    34,
     955,   631,   358,   946,   940,    60,   946,   242,   966,   630,
     630,   630,  1164,  1409,   630,   630,   631,   630,   327,   256,
     413,   630,   630,   630,   630,   630,   630,   904,  1115,  1244,
    1510,   630,   277,   370,    64,   249,   350,   507,   520,   612,
    1480,  1481,   606,  1492,  1492,  1492,   630,   631,  1311,   241,
     629,   849,   843,   862,  1428,   860,   884,  1302,  1309,   630,
    1509,    47,   211,  1229,  1270,  1430,   631,   327,    83,   564,
     418,  1449,   540,   540,  1303,  1193,   363,  1186,  1190,  1190,
     363,  1188,  1127,  1127,   629,  1238,   188,   226,   584,  1208,
    1209,  1212,  1203,  1416,  1252,   859,   630,   629,   629,   997,
     629,   629,   118,   544,   547,   622,   623,  1411,  1412,  1043,
    1034,  1080,  1026,  1063,   630,   971,  1428,   304,   972,   483,
     576,   618,   942,   943,   944,   629,   942,   942,   966,   595,
     942,   629,   966,   942,   960,  1425,   353,   952,  1411,    14,
     578,   128,   254,    19,   950,   254,   357,  1303,   966,   967,
     966,   967,   942,   942,  1428,   676,   683,   684,  1428,   467,
     629,  1540,   630,  1425,   630,   631,   700,  1543,   675,  1549,
     701,   930,   951,   828,   893,   629,   882,   630,   631,  1242,
     629,   630,   630,   170,   457,   955,   967,   358,  1165,  1416,
    1127,   327,   174,  1119,  1119,    17,  1367,   540,   540,   540,
      17,  1479,   203,   305,   306,   310,   311,  1494,  1495,  1309,
     254,   534,  1122,   852,   629,   589,   863,   904,  1233,  1416,
    1230,  1238,   954,   957,  1266,   630,   630,  1450,  1515,  1185,
     585,  1187,   585,  1220,  1428,  1249,   977,   977,  1209,   904,
    1242,   630,   997,   997,   630,   997,   997,  1413,  1413,  1043,
     241,   630,   631,   193,   386,   484,   363,   973,   944,  1001,
    1409,  1001,  1126,   353,   590,   922,   128,  1254,  1425,  1428,
     509,   678,    53,    68,   181,   225,   250,   262,   367,   451,
     685,   732,   734,   735,   736,   738,   739,   740,   741,   742,
     743,   745,   753,   754,   757,   768,   771,   773,   774,  1424,
    1429,  1433,  1109,  1107,   606,  1541,  1556,   704,  1428,  1421,
     680,   681,   450,   961,  1509,   832,   882,   830,    82,   253,
     985,   988,   991,   992,   993,  1424,   998,   358,   606,   986,
     990,   992,   995,   987,   989,   992,   994,   170,   630,   631,
    1242,   630,   138,  1480,   370,  1251,  1251,  1251,   358,   622,
    1250,  1495,   578,  1421,   856,   521,   857,   854,   855,  1428,
     244,   264,    82,    90,   114,   230,   307,   325,   349,   531,
     879,   880,   881,  1345,   607,   608,   631,  1234,  1242,  1127,
    1244,   956,  1271,  1194,  1127,   629,  1127,   629,   630,   631,
     190,  1207,  1207,   630,   630,   911,   630,   630,   629,  1428,
     132,   578,   630,   631,   630,  1126,   629,  1127,   156,   679,
     755,   758,  1428,   192,   348,   746,   733,  1429,  1429,  1428,
     737,   644,   284,   440,   605,   777,    31,   775,   638,   630,
      52,    63,   274,   689,   951,   190,   677,  1550,   829,   630,
    1506,  1425,  1304,   993,  1303,  1242,   630,   384,   995,   994,
    1416,    61,   282,   358,  1317,  1318,  1418,  1387,  1123,  1252,
     630,   631,   865,   542,  1304,  1304,   137,   137,  1304,  1304,
    1304,  1304,   629,   874,   881,   159,  1416,   405,  1258,    73,
    1393,  1510,  1220,  1220,  1428,   205,   251,   373,  1211,  1210,
     969,   914,   985,   912,   913,   859,    51,   354,   448,   475,
     974,   974,   966,  1409,   966,   929,  1127,  1127,   603,   760,
     764,   192,  1428,   748,   749,  1127,   707,   731,   732,   734,
     736,   738,   740,   741,   742,   743,   745,   753,   768,   771,
     773,   707,   778,   776,   769,   772,  1509,    63,   370,    63,
     136,   690,   691,  1133,  1557,  1122,   682,   951,   831,  1251,
     128,  1254,  1425,  1428,  1424,  1242,   631,  1303,   957,   630,
     853,   855,   629,   867,   869,   864,  1425,  1425,  1304,  1304,
    1254,  1254,  1252,  1430,   522,   875,   876,  1304,  1242,  1428,
     154,   165,   371,   539,  1394,  1395,   270,  1396,   630,   630,
      47,    47,   629,   629,   985,   986,   987,   630,     5,   128,
     357,   363,   363,   630,   756,   765,   151,   764,   767,   241,
     155,  1127,   155,   731,   635,   577,  1127,   708,   777,   775,
     370,   370,   136,   731,  1544,   144,  1551,  1509,  1318,  1309,
    1388,   857,   629,   868,   869,   870,   312,   866,   869,  1425,
    1425,   877,   630,   631,   900,  1259,    47,    47,   154,    47,
    1395,   508,   539,  1397,  1398,  1217,  1219,   578,   132,   391,
     599,   924,   603,   759,   761,  1127,   707,   155,   744,   225,
     543,   284,   635,   780,   144,   127,   706,   709,   770,  1429,
     770,   150,   683,   689,   457,  1399,   630,   631,   312,   872,
     873,  1130,   878,  1430,   876,   629,  1409,  1409,    47,  1409,
      47,    47,  1398,   630,   630,   974,   974,    82,   573,   925,
     926,   927,   762,   761,   767,   766,    53,   747,  1428,   750,
    1127,   779,    98,   173,   714,   729,  1428,   155,   731,   635,
     459,  1552,   223,  1393,   869,   631,   871,   879,  1122,  1260,
    1261,  1262,  1409,  1409,  1409,  1425,   254,   927,  1127,   155,
     543,   631,   707,   155,   707,   208,   631,   710,    89,   108,
     635,  1545,   731,    47,  1396,   873,   630,  1127,   630,   631,
     763,    53,   707,  1428,   751,   440,   155,   190,  1428,   951,
     190,   190,   731,  1409,   226,  1400,  1123,  1262,   543,   151,
     152,   752,   605,   711,   128,   730,   717,   718,  1251,   712,
     713,   358,   629,  1402,   707,   707,   748,   496,   498,   715,
     716,   717,   720,  1133,  1428,  1127,  1105,   270,   457,  1401,
     630,   636,  1403,  1404,  1418,   475,  1405,   631,   731,   191,
    1430,   630,   631,  1406,  1407,  1418,   716,  1404,   631,  1303,
    1407,  1122,  1309,  1123
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (thd, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, thd)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, thd); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    THD *thd;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (thd);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, thd)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    THD *thd;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, THD *thd)
#else
static void
yy_reduce_print (yyvsp, yyrule, thd)
    YYSTYPE *yyvsp;
    int yyrule;
    THD *thd;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , thd);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, thd); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, THD *thd)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, thd)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    THD *thd;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (thd);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (THD *thd);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (THD *thd)
#else
int
yyparse (thd)
    THD *thd;
#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1711 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1722 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((thd->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 1747 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 63:

/* Line 1455 of yacc.c  */
#line 1822 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 66:

/* Line 1455 of yacc.c  */
#line 1836 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 1845 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 1851 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 1860 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 1866 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 1881 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 1893 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 1901 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 1912 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 1916 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 1926 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 1930 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 1934 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 1938 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 1942 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 1946 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 1951 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 1955 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 1959 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 1963 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 1967 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 1971 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 1977 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(thd, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(thd, MYSQL_ERROR::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2008 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 100:

/* Line 1455 of yacc.c  */
#line 2023 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 101:

/* Line 1455 of yacc.c  */
#line 2029 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 102:

/* Line 1455 of yacc.c  */
#line 2033 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 103:

/* Line 1455 of yacc.c  */
#line 2049 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 2053 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 2064 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            /*
              For CREATE TABLE, an non-existing table is not an error.
              Instruct open_tables() to just take an MDL lock if the
              table does not exist.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_IF_EXISTS;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 2088 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(thd);
              push_warning_printf(thd, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  hton_name(lex->create_info.db_type)->str,
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 2104 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 2109 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 2115 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 2120 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 2126 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 2131 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 2136 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 2141 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 2148 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2154 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 2156 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 2160 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 2164 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2168 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2179 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2193 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 2197 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 2201 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 2205 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 2209 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 2213 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 130:

/* Line 1455 of yacc.c  */
#line 2217 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 131:

/* Line 1455 of yacc.c  */
#line 2224 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 2243 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2254 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2261 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 2267 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 2269 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2275 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 2281 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2290 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2297 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 2305 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2311 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2317 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 147:

/* Line 1455 of yacc.c  */
#line 2323 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 148:

/* Line 1455 of yacc.c  */
#line 2331 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2333 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 150:

/* Line 1455 of yacc.c  */
#line 2340 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 151:

/* Line 1455 of yacc.c  */
#line 2382 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 165:

/* Line 1455 of yacc.c  */
#line 2413 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 166:

/* Line 1455 of yacc.c  */
#line 2428 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 167:

/* Line 1455 of yacc.c  */
#line 2444 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 168:

/* Line 1455 of yacc.c  */
#line 2461 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 169:

/* Line 1455 of yacc.c  */
#line 2462 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 170:

/* Line 1455 of yacc.c  */
#line 2466 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 171:

/* Line 1455 of yacc.c  */
#line 2467 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 172:

/* Line 1455 of yacc.c  */
#line 2473 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 2475 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 2477 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 2479 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 2481 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 2483 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 2485 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2490 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2491 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2492 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2497 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2501 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2508 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, thd, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2516 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2532 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2536 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 196:

/* Line 1455 of yacc.c  */
#line 2554 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 197:

/* Line 1455 of yacc.c  */
#line 2575 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(1) - (3)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(3) - (3)].num),
                                                     sp_param_in);

            if (lex->sphead->fill_field_definition(thd, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 202:

/* Line 1455 of yacc.c  */
#line 2612 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(3) - (4)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(4) - (4)].num),
                                                     (sp_param_mode_t)(yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(thd, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 203:

/* Line 1455 of yacc.c  */
#line 2637 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 2638 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 2639 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_out; }
    break;

  case 206:

/* Line 1455 of yacc.c  */
#line 2640 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_inout; }
    break;

  case 207:

/* Line 1455 of yacc.c  */
#line 2644 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 209:

/* Line 1455 of yacc.c  */
#line 2649 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 2655 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 2659 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 213:

/* Line 1455 of yacc.c  */
#line 2685 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(thd);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 214:

/* Line 1455 of yacc.c  */
#line 2693 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable_t *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->dflt= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(thd, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 215:

/* Line 1455 of yacc.c  */
#line 2749 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_cond(&(yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(thd->lex->spcont->push_cond(&(yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondtype)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 216:

/* Line 1455 of yacc.c  */
#line 2764 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->spcont= lex->spcont->push_context(LABEL_HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, (yyvsp[(2) - (4)].num),
                                      ctx->current_var_count());
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == SP_HANDLER_CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(empty_c_string, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 2786 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == SP_HANDLER_CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx,
                                      ctx->current_var_count());
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx, 0);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= (yyvsp[(6) - (7)].num);
            lex->spcont->add_handlers((yyvsp[(6) - (7)].num));
          }
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 2818 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor(&(yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
            if (i == NULL ||
                sp->add_instr(i) ||
                ctx->push_cursor(&(yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 2843 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd);
          }
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 2847 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 2866 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_EXIT; }
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 2867 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_CONTINUE; }
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 2873 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 2875 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 2880 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->find_handler((yyvsp[(1) - (1)].spcondtype)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondtype));
              ctx->push_handler((yyvsp[(1) - (1)].spcondtype));
            }
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 2903 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *) thd->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::number;
            (yyval.spcondtype)->mysqlerr= (yyvsp[(1) - (1)].ulong_num);
          }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 2920 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* SQLSTATE */
            if (!sp_cond_check(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *) thd->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::state;
            memcpy((yyval.spcondtype)->sqlstate, (yyvsp[(3) - (3)].lex_str).str, SQLSTATE_LENGTH);
            (yyval.spcondtype)->sqlstate[SQLSTATE_LENGTH]= '\0';
          }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 2936 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 2937 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 2942 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype);
          }
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 2946 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= Lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if ((yyval.spcondtype) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 2955 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *) thd->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::warning;
          }
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 2962 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *) thd->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::notfound;
          }
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 2969 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *) thd->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::exception;
          }
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 2979 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_stmt= new (thd->mem_root) Signal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 2993 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_cond_type_t *cond;
            if (lex->spcont == NULL)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            cond= lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if (cond == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_cond_type_t::state)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= cond;
          }
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 3016 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 3021 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spcondtype)= NULL; }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 3023 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 3028 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            thd->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3036 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3045 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3064 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 3066 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 3084 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 3090 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 3092 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 3094 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3096 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 3098 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3100 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3102 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3104 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 256:

/* Line 1455 of yacc.c  */
#line 3106 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3108 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 3110 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 3112 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3117 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_stmt= new (thd->mem_root) Resignal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3131 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(1) - (1)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= 1;
          }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3146 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(3) - (3)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3163 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3164 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 3185 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 3187 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 3191 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 3199 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 3246 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3248 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 3274 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label((char *)"", lex->sphead->instructions());
          }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3280 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3289 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == SP_LAB_BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3342 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab || lab->type != SP_LAB_ITER)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3385 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3405 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(3) - (4)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3422 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3427 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3453 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3473 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(3) - (3)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3495 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3497 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 3513 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
          }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3525 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 306:

/* Line 1455 of yacc.c  */
#line 3545 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 307:

/* Line 1455 of yacc.c  */
#line 3551 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 308:

/* Line 1455 of yacc.c  */
#line 3564 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 309:

/* Line 1455 of yacc.c  */
#line 3572 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 310:

/* Line 1455 of yacc.c  */
#line 3580 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 315:

/* Line 1455 of yacc.c  */
#line 3598 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 316:

/* Line 1455 of yacc.c  */
#line 3602 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 317:

/* Line 1455 of yacc.c  */
#line 3614 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 318:

/* Line 1455 of yacc.c  */
#line 3623 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 319:

/* Line 1455 of yacc.c  */
#line 3627 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 320:

/* Line 1455 of yacc.c  */
#line 3637 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 3646 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 3661 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                           lex->sphead->instructions());
              lab->type= SP_LAB_ITER;
            }
          }
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 3679 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 3696 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 3697 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 3702 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                         lex->sphead->instructions());
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 3718 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 329:

/* Line 1455 of yacc.c  */
#line 3734 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->push_label((char *)"", ip);
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 330:

/* Line 1455 of yacc.c  */
#line 3741 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 331:

/* Line 1455 of yacc.c  */
#line 3749 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(LABEL_DEFAULT_SCOPE);
          }
    break;

  case 332:

/* Line 1455 of yacc.c  */
#line 3758 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 3786 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 3796 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 335:

/* Line 1455 of yacc.c  */
#line 3798 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 336:

/* Line 1455 of yacc.c  */
#line 3814 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 337:

/* Line 1455 of yacc.c  */
#line 3825 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 338:

/* Line 1455 of yacc.c  */
#line 3827 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 339:

/* Line 1455 of yacc.c  */
#line 3846 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 340:

/* Line 1455 of yacc.c  */
#line 3848 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 341:

/* Line 1455 of yacc.c  */
#line 3853 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 342:

/* Line 1455 of yacc.c  */
#line 3855 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 343:

/* Line 1455 of yacc.c  */
#line 3857 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 347:

/* Line 1455 of yacc.c  */
#line 3891 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 348:

/* Line 1455 of yacc.c  */
#line 3893 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 349:

/* Line 1455 of yacc.c  */
#line 3903 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 350:

/* Line 1455 of yacc.c  */
#line 3909 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 355:

/* Line 1455 of yacc.c  */
#line 3932 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 402:

/* Line 1455 of yacc.c  */
#line 4026 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 403:

/* Line 1455 of yacc.c  */
#line 4034 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 404:

/* Line 1455 of yacc.c  */
#line 4042 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 405:

/* Line 1455 of yacc.c  */
#line 4050 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 406:

/* Line 1455 of yacc.c  */
#line 4062 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 407:

/* Line 1455 of yacc.c  */
#line 4074 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 408:

/* Line 1455 of yacc.c  */
#line 4079 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 409:

/* Line 1455 of yacc.c  */
#line 4084 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 410:

/* Line 1455 of yacc.c  */
#line 4092 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 411:

/* Line 1455 of yacc.c  */
#line 4100 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 412:

/* Line 1455 of yacc.c  */
#line 4108 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 413:

/* Line 1455 of yacc.c  */
#line 4116 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 414:

/* Line 1455 of yacc.c  */
#line 4124 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 415:

/* Line 1455 of yacc.c  */
#line 4132 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 416:

/* Line 1455 of yacc.c  */
#line 4140 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 417:

/* Line 1455 of yacc.c  */
#line 4153 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 418:

/* Line 1455 of yacc.c  */
#line 4166 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 421:

/* Line 1455 of yacc.c  */
#line 4185 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 422:

/* Line 1455 of yacc.c  */
#line 4190 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 423:

/* Line 1455 of yacc.c  */
#line 4202 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulonglong_number);}
    break;

  case 424:

/* Line 1455 of yacc.c  */
#line 4204 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 425:

/* Line 1455 of yacc.c  */
#line 4254 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 426:

/* Line 1455 of yacc.c  */
#line 4257 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 427:

/* Line 1455 of yacc.c  */
#line 4259 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 428:

/* Line 1455 of yacc.c  */
#line 4273 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 429:

/* Line 1455 of yacc.c  */
#line 4290 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.option_list= NULL;
          }
    break;

  case 430:

/* Line 1455 of yacc.c  */
#line 4295 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 431:

/* Line 1455 of yacc.c  */
#line 4298 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 432:

/* Line 1455 of yacc.c  */
#line 4299 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 433:

/* Line 1455 of yacc.c  */
#line 4303 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 434:

/* Line 1455 of yacc.c  */
#line 4305 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 435:

/* Line 1455 of yacc.c  */
#line 4306 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 436:

/* Line 1455 of yacc.c  */
#line 4308 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 437:

/* Line 1455 of yacc.c  */
#line 4309 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 438:

/* Line 1455 of yacc.c  */
#line 4314 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 439:

/* Line 1455 of yacc.c  */
#line 4350 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 441:

/* Line 1455 of yacc.c  */
#line 4356 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= ALTER_PARTITION;
            }
          }
    break;

  case 443:

/* Line 1455 of yacc.c  */
#line 4374 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 444:

/* Line 1455 of yacc.c  */
#line 4393 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 4405 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 447:

/* Line 1455 of yacc.c  */
#line 4414 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 448:

/* Line 1455 of yacc.c  */
#line 4421 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 4422 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 4424 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 4426 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 4428 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 4430 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 4434 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 4436 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 4441 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 4443 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            switch ((yyvsp[(3) - (3)].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 4459 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 4460 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 4464 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 4465 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 4470 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 4489 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 4499 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 4510 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 4518 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 4520 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 4535 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 4537 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 4538 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 4541 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 4546 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 4550 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 4551 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 4556 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 4574 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 4589 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 4591 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 4606 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 4622 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 4643 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 4644 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 4649 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 4668 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 485:

/* Line 1455 of yacc.c  */
#line 4673 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 4682 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 4704 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 4719 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 4721 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 4736 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 4741 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 4762 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 4767 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 4796 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 4807 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 4808 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 497:

/* Line 1455 of yacc.c  */
#line 4813 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 4824 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 4826 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 4849 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 4850 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 4855 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 4868 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(thd, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 4888 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 4902 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 4927 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 4928 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 4933 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 4965 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 4970 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 4974 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 4975 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 4979 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 4980 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 4985 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 4987 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 4993 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
          }
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 4999 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 5001 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 5003 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 5005 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 5007 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 5009 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 5018 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 5033 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 5037 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 5047 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 5048 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 5052 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 5053 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 5057 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 5058 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 5062 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 5063 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 5067 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 5068 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 5072 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 5073 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 5077 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 5081 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 5082 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 5103 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 5108 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 5113 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 5118 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 5123 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 5128 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 5133 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 5138 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 5153 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 5159 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 5164 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 5169 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 5174 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 5179 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 5184 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 5188 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5212 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 5217 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 5222 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 5227 "/home/buildbot/git/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5229 "/home/buildbot/git/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5231 "/home/buildbot/git/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 5233 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 5239 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5244 "/home/buildbot/git/sql/sql_yacc.yy"
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5249 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5255 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 5261 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 5267 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 5276 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 5294 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 5311 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (thd->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(thd, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 583:

/* Line 1455 of yacc.c  */
#line 5334 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 584:

/* Line 1455 of yacc.c  */
#line 5347 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 585:

/* Line 1455 of yacc.c  */
#line 5348 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 5349 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 5350 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 5351 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 5352 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 5353 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_PAGE; }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 5357 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 5358 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 5359 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 5363 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 5368 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 5369 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 5370 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 5371 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 5377 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 5395 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 5402 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 608:

/* Line 1455 of yacc.c  */
#line 5404 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(2) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 5410 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 5412 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 5418 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 5420 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 5426 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 5428 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (9)].key_type), (yyvsp[(3) - (9)].lex_str).str ? (yyvsp[(3) - (9)].lex_str) : (yyvsp[(1) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 5433 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table),
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->option_list= NULL;
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= ALTER_FOREIGN_KEY;
          }
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 5452 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 5467 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 5468 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 5472 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 5477 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 5488 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_type).type,
                                  (yyvsp[(3) - (3)].lex_type).length, (yyvsp[(3) - (3)].lex_type).dec, lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change, &lex->interval_list, (yyvsp[(3) - (3)].lex_type).charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 5503 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_type).set((yyvsp[(1) - (2)].num), Lex->length, Lex->dec, Lex->charset); }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 5505 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_type).set((yyvsp[(1) - (3)].num), Lex->length, Lex->dec, Lex->charset); }
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 5507 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_type)= (yyvsp[(4) - (9)].lex_type);
            Lex->vcol_info->set_field_type((yyval.lex_type).type);
            (yyval.lex_type).type= (enum enum_field_types)MYSQL_TYPE_VIRTUAL;
          }
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 5516 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 5521 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 5525 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 5529 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(TRUE);
          }
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 5535 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 5536 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 5540 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 5546 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 5552 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 5557 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 5562 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            if (!Lex->parse_vcol_expr)
            {
              my_message(ER_SYNTAX_ERROR, ER(ER_SYNTAX_ERROR), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 641:

/* Line 1455 of yacc.c  */
#line 5578 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->vcol_info= new Virtual_column_info();
            if (!Lex->vcol_info)
            {
              mem_alloc_error(sizeof(Virtual_column_info));
              MYSQL_YYABORT;
            }
            uint expr_len= (uint)((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)) - 1;
            Lex->vcol_info->expr_str.str= (char* ) sql_memdup((yyvsp[(1) - (3)].simple_string) + 1, expr_len);
            Lex->vcol_info->expr_str.length= expr_len;
            Lex->vcol_info->expr_item= (yyvsp[(2) - (3)].item);
          }
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 5593 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 5594 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 5595 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 5597 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 5602 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 5606 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 5611 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 5616 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 650:

/* Line 1455 of yacc.c  */
#line 5620 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 651:

/* Line 1455 of yacc.c  */
#line 5625 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 652:

/* Line 1455 of yacc.c  */
#line 5630 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 5636 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 5641 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 5647 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 5651 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 5656 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 5661 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(thd, MYSQL_ERROR::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER(ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 5679 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 5681 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 5683 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 5696 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 5698 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 5703 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 5708 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 5720 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 5725 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 5730 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 5735 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 5737 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 5739 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 5741 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 5743 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 5745 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 5747 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 5749 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 5751 "/home/buildbot/git/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 5753 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 5755 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 5757 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 5759 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 5761 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 5769 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 5770 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 5772 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= const_cast<char*>(STRINGIFY_ARG
                                           (MAX_LEN_GEOM_POINT_FIELD));
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 5777 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 5778 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 5779 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 5780 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 5781 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 5785 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 5789 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 5790 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 5794 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 5795 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 5799 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 5800 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 5801 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 5802 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 5803 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 5807 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 5808 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 5809 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 5810 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 5811 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 5816 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= thd->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 5821 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 5823 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 5828 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 5830 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 5832 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 5837 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 5845 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 5846 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 5850 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 5851 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 5855 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 5856 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 5857 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 5861 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 5862 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 5863 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 5864 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 5867 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 5868 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 5872 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 5873 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 5877 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 5878 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 5882 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 5887 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 5888 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 5889 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 5891 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_now_local(6);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 5897 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 5899 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 5905 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 5911 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 5917 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX; 
          }
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 5922 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 5924 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 5937 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 5943 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 5949 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 5955 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 5964 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 5985 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local(6);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 5991 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 5995 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 5996 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 6000 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 6001 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6006 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 6013 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6017 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 6018 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 6022 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6023 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6028 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 6036 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 6040 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6041 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 6046 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6056 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6057 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 6061 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6062 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6066 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 6067 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 6072 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 6074 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 6078 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 6085 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6094 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 6102 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 6112 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 6115 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 6116 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 6118 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 6123 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 6130 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 6131 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 6146 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6153 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 6159 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 6166 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 6178 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 6180 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 6182 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 6184 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 6189 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 6195 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 6201 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 6208 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 6215 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 6223 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 6224 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 6225 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6226 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 6227 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 6231 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 6235 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 6236 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 6240 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 6241 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 6245 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 6250 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 6251 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 6252 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 6256 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 6257 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 6261 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 6266 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 6278 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 824:

/* Line 1455 of yacc.c  */
#line 6295 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 6300 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 828:

/* Line 1455 of yacc.c  */
#line 6305 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 6325 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 6326 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 6331 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 6332 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 6334 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 6340 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 6346 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 6352 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 6370 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 6382 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 6383 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 6384 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 6388 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 6389 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 854:

/* Line 1455 of yacc.c  */
#line 6394 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 6400 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 6413 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 6414 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 6418 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 6419 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 6423 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 6424 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 6432 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_stmt);
          }
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 6457 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (!lex->m_stmt)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_stmt= new (thd->mem_root) Alter_table_statement(lex);
              if (lex->m_stmt == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 6468 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 6473 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 6482 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 6493 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 6504 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 6511 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 6522 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 6529 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 872:

/* Line 1455 of yacc.c  */
#line 6540 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 873:

/* Line 1455 of yacc.c  */
#line 6547 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_INHERIT;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 6559 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 6561 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 6581 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 6594 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 6599 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 6604 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 880:

/* Line 1455 of yacc.c  */
#line 6609 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 881:

/* Line 1455 of yacc.c  */
#line 6614 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 882:

/* Line 1455 of yacc.c  */
#line 6623 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 6624 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 6625 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 6626 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 6630 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 6632 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 6643 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 6644 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 890:

/* Line 1455 of yacc.c  */
#line 6648 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 891:

/* Line 1455 of yacc.c  */
#line 6649 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 893:

/* Line 1455 of yacc.c  */
#line 6654 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= DISCARD_TABLESPACE; }
    break;

  case 894:

/* Line 1455 of yacc.c  */
#line 6655 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= IMPORT_TABLESPACE; }
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 6672 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_PARTITION;
          }
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 6677 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 6684 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_optimize_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 6697 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_analyze_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 6708 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_check_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 6720 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_repair_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 6732 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 6739 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_truncate_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 6753 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 6760 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ALL_PARTITION;
          }
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 6768 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 916:

/* Line 1455 of yacc.c  */
#line 6780 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 6786 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 6791 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 6798 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 6813 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_TABLE_REORG;
          }
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 6817 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 6821 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 6828 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 6829 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 6834 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 6854 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= ALTER_ADD_COLUMN;
          }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 6863 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 6867 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 6872 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
          }
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 6876 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
            lex->option_list= NULL;
          }
    break;

  case 935:

/* Line 1455 of yacc.c  */
#line 6883 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 936:

/* Line 1455 of yacc.c  */
#line 6887 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 6898 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (5)].lex_str),
                                  (yyvsp[(5) - (5)].lex_type).type,
                                  (yyvsp[(5) - (5)].lex_type).length, (yyvsp[(5) - (5)].lex_type).dec, lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (5)].lex_str).str, &lex->interval_list, (yyvsp[(5) - (5)].lex_type).charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 6911 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 939:

/* Line 1455 of yacc.c  */
#line 6915 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_COLUMN;
          }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 6924 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_INDEX | ALTER_FOREIGN_KEY;
          }
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 6928 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 6937 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 943:

/* Line 1455 of yacc.c  */
#line 6946 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= DISABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 6952 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= ENABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 945:

/* Line 1455 of yacc.c  */
#line 6958 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 946:

/* Line 1455 of yacc.c  */
#line 6967 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 6976 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= ALTER_RENAME;
          }
    break;

  case 948:

/* Line 1455 of yacc.c  */
#line 6995 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= ALTER_CONVERT;
          }
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 7015 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 950:

/* Line 1455 of yacc.c  */
#line 7025 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_RECREATE;
          }
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 7029 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_ORDER;
          }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 7036 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 953:

/* Line 1455 of yacc.c  */
#line 7037 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 7041 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 955:

/* Line 1455 of yacc.c  */
#line 7042 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 956:

/* Line 1455 of yacc.c  */
#line 7046 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= Lex->online= 0;}
    break;

  case 962:

/* Line 1455 of yacc.c  */
#line 7060 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 963:

/* Line 1455 of yacc.c  */
#line 7061 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->online= 1;}
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 7065 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 965:

/* Line 1455 of yacc.c  */
#line 7066 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 7067 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 967:

/* Line 1455 of yacc.c  */
#line 7071 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 968:

/* Line 1455 of yacc.c  */
#line 7072 "/home/buildbot/git/sql/sql_yacc.yy"
    { store_position_for_column((yyvsp[(2) - (2)].lex_str).str); }
    break;

  case 969:

/* Line 1455 of yacc.c  */
#line 7073 "/home/buildbot/git/sql/sql_yacc.yy"
    { store_position_for_column(first_keyword); }
    break;

  case 970:

/* Line 1455 of yacc.c  */
#line 7077 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 7078 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 7079 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 7080 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 7089 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 7096 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 7098 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 7105 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
          }
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 7111 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 979:

/* Line 1455 of yacc.c  */
#line 7113 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
          }
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 7122 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 981:

/* Line 1455 of yacc.c  */
#line 7130 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 7132 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 7138 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 7140 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 7149 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 7150 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 7151 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 7155 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 991:

/* Line 1455 of yacc.c  */
#line 7157 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 994:

/* Line 1455 of yacc.c  */
#line 7178 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 995:

/* Line 1455 of yacc.c  */
#line 7185 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 996:

/* Line 1455 of yacc.c  */
#line 7189 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 7190 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 7191 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1000:

/* Line 1455 of yacc.c  */
#line 7196 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->only_view= TRUE; }
    break;

  case 1002:

/* Line 1455 of yacc.c  */
#line 7201 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1003:

/* Line 1455 of yacc.c  */
#line 7211 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Repair_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 7221 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 7222 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 7226 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 7227 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 7231 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 7232 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 7233 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 7237 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 7238 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FROM_MYSQL; }
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 7243 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 7253 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Analyze_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 7264 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 7272 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->only_view= TRUE; }
    break;

  case 1019:

/* Line 1455 of yacc.c  */
#line 7276 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 7286 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Check_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 7301 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 7302 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1023:

/* Line 1455 of yacc.c  */
#line 7306 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 7307 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 7311 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1026:

/* Line 1455 of yacc.c  */
#line 7312 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1027:

/* Line 1455 of yacc.c  */
#line 7313 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1028:

/* Line 1455 of yacc.c  */
#line 7314 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1029:

/* Line 1455 of yacc.c  */
#line 7315 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 7316 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 7320 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 7321 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 7326 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 7336 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Optimize_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 7346 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1036:

/* Line 1455 of yacc.c  */
#line 7347 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 7348 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1038:

/* Line 1455 of yacc.c  */
#line 7353 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1039:

/* Line 1455 of yacc.c  */
#line 7357 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 7359 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1041:

/* Line 1455 of yacc.c  */
#line 7366 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1042:

/* Line 1455 of yacc.c  */
#line 7371 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1045:

/* Line 1455 of yacc.c  */
#line 7384 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1046:

/* Line 1455 of yacc.c  */
#line 7397 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 7401 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 7420 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 7430 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 7439 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 7440 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1056:

/* Line 1455 of yacc.c  */
#line 7445 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1057:

/* Line 1455 of yacc.c  */
#line 7451 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1062:

/* Line 1455 of yacc.c  */
#line 7466 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1063:

/* Line 1455 of yacc.c  */
#line 7476 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 7486 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
          }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 7493 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(thd);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1068:

/* Line 1455 of yacc.c  */
#line 7502 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 7508 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1071:

/* Line 1455 of yacc.c  */
#line 7509 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1072:

/* Line 1455 of yacc.c  */
#line 7519 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 7533 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1077:

/* Line 1455 of yacc.c  */
#line 7543 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1079:

/* Line 1455 of yacc.c  */
#line 7552 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1081:

/* Line 1455 of yacc.c  */
#line 7571 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 7579 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 7586 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1089:

/* Line 1455 of yacc.c  */
#line 7596 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 7611 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1096:

/* Line 1455 of yacc.c  */
#line 7628 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1097:

/* Line 1455 of yacc.c  */
#line 7656 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 7688 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 7694 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1103:

/* Line 1455 of yacc.c  */
#line 7706 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1104:

/* Line 1455 of yacc.c  */
#line 7720 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1105:

/* Line 1455 of yacc.c  */
#line 7725 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1106:

/* Line 1455 of yacc.c  */
#line 7749 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1107:

/* Line 1455 of yacc.c  */
#line 7755 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1108:

/* Line 1455 of yacc.c  */
#line 7761 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1109:

/* Line 1455 of yacc.c  */
#line 7762 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1110:

/* Line 1455 of yacc.c  */
#line 7763 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1111:

/* Line 1455 of yacc.c  */
#line 7764 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1112:

/* Line 1455 of yacc.c  */
#line 7765 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1113:

/* Line 1455 of yacc.c  */
#line 7769 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1114:

/* Line 1455 of yacc.c  */
#line 7770 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1115:

/* Line 1455 of yacc.c  */
#line 7771 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1116:

/* Line 1455 of yacc.c  */
#line 7775 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 7776 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1118:

/* Line 1455 of yacc.c  */
#line 7782 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (thd->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1119:

/* Line 1455 of yacc.c  */
#line 7833 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (thd->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1120:

/* Line 1455 of yacc.c  */
#line 7840 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (thd->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1121:

/* Line 1455 of yacc.c  */
#line 7883 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1122:

/* Line 1455 of yacc.c  */
#line 7889 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1123:

/* Line 1455 of yacc.c  */
#line 7895 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1124:

/* Line 1455 of yacc.c  */
#line 7901 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 7907 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1126:

/* Line 1455 of yacc.c  */
#line 7913 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1127:

/* Line 1455 of yacc.c  */
#line 7919 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1129:

/* Line 1455 of yacc.c  */
#line 7929 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 7935 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 7941 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 7947 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1133:

/* Line 1455 of yacc.c  */
#line 7953 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1135:

/* Line 1455 of yacc.c  */
#line 7963 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1136:

/* Line 1455 of yacc.c  */
#line 7969 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1137:

/* Line 1455 of yacc.c  */
#line 7978 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 7984 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (thd->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 7992 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1140:

/* Line 1455 of yacc.c  */
#line 7998 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (thd->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1141:

/* Line 1455 of yacc.c  */
#line 8008 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1142:

/* Line 1455 of yacc.c  */
#line 8014 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (thd->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1143:

/* Line 1455 of yacc.c  */
#line 8023 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item1= new (thd->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (thd->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 8033 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1145:

/* Line 1455 of yacc.c  */
#line 8039 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1146:

/* Line 1455 of yacc.c  */
#line 8049 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 8055 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1149:

/* Line 1455 of yacc.c  */
#line 8068 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1150:

/* Line 1455 of yacc.c  */
#line 8074 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 8080 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1152:

/* Line 1455 of yacc.c  */
#line 8086 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1153:

/* Line 1455 of yacc.c  */
#line 8092 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1154:

/* Line 1455 of yacc.c  */
#line 8098 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1155:

/* Line 1455 of yacc.c  */
#line 8104 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1156:

/* Line 1455 of yacc.c  */
#line 8110 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 8116 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1158:

/* Line 1455 of yacc.c  */
#line 8122 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1159:

/* Line 1455 of yacc.c  */
#line 8128 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 8134 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 8140 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 8146 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 8175 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 8176 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 8177 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1175:

/* Line 1455 of yacc.c  */
#line 8178 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 8179 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 8180 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1178:

/* Line 1455 of yacc.c  */
#line 8184 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 8185 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 8190 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
	    (yyval.num)= DYN_COL_NULL; /* automatic type */
            lex->charset= NULL;
            lex->length= lex->dec= 0;
	  }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 8196 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (2)].num); }
    break;

  case 1182:

/* Line 1455 of yacc.c  */
#line 8201 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_INT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 8208 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_UINT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 8215 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1185:

/* Line 1455 of yacc.c  */
#line 8222 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1186:

/* Line 1455 of yacc.c  */
#line 8229 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 8236 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= DYN_COL_DECIMAL;
            Lex->charset= NULL;
          }
    break;

  case 1188:

/* Line 1455 of yacc.c  */
#line 8241 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->length= lex->dec= 0;
          }
    break;

  case 1189:

/* Line 1455 of yacc.c  */
#line 8247 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->charset= national_charset_info;
            lex->length= lex->dec= 0;
          }
    break;

  case 1190:

/* Line 1455 of yacc.c  */
#line 8254 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1191:

/* Line 1455 of yacc.c  */
#line 8261 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_TIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1192:

/* Line 1455 of yacc.c  */
#line 8269 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATETIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1193:

/* Line 1455 of yacc.c  */
#line 8280 "/home/buildbot/git/sql/sql_yacc.yy"
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(thd->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->num= (yyvsp[(1) - (4)].item);
     (yyval.dyncol_def)->value= (yyvsp[(3) - (4)].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[(4) - (4)].num);
     (yyval.dyncol_def)->cs= lex->charset;
     if (lex->length)
       (yyval.dyncol_def)->len= strtoul(lex->length, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if (lex->dec)
       (yyval.dyncol_def)->frac= strtoul(lex->dec, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
    break;

  case 1194:

/* Line 1455 of yacc.c  */
#line 8302 "/home/buildbot/git/sql/sql_yacc.yy"
    {
         (yyval.dyncol_def_list)= new (thd->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[(1) - (1)].dyncol_def));
       }
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 8309 "/home/buildbot/git/sql/sql_yacc.yy"
    {
         (yyvsp[(1) - (3)].dyncol_def_list)->push_back((yyvsp[(3) - (3)].dyncol_def));
         (yyval.dyncol_def_list)= (yyvsp[(1) - (3)].dyncol_def_list);
       }
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 8322 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 8337 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1207:

/* Line 1455 of yacc.c  */
#line 8343 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1208:

/* Line 1455 of yacc.c  */
#line 8347 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 8353 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 8359 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 8365 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (thd->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 8371 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 8373 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (thd->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 8380 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (thd->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 8387 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 8393 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(3) - (4)].item); }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 8395 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (thd->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 8404 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 8411 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1220:

/* Line 1455 of yacc.c  */
#line 8419 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1221:

/* Line 1455 of yacc.c  */
#line 8425 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1222:

/* Line 1455 of yacc.c  */
#line 8432 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1223:

/* Line 1455 of yacc.c  */
#line 8438 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1224:

/* Line 1455 of yacc.c  */
#line 8452 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1225:

/* Line 1455 of yacc.c  */
#line 8460 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1226:

/* Line 1455 of yacc.c  */
#line 8475 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1227:

/* Line 1455 of yacc.c  */
#line 8481 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1228:

/* Line 1455 of yacc.c  */
#line 8487 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 8495 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 8501 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 8507 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 8513 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 8519 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 8533 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 8544 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1236:

/* Line 1455 of yacc.c  */
#line 8550 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 8556 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 8562 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 8568 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:

/* Line 1455 of yacc.c  */
#line 8574 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:

/* Line 1455 of yacc.c  */
#line 8580 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 8586 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:

/* Line 1455 of yacc.c  */
#line 8592 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:

/* Line 1455 of yacc.c  */
#line 8598 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 8604 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 8610 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 8616 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 8622 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 8628 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 8634 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 8640 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 8648 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 8669 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 8676 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 8682 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 8689 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 8697 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 8704 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 8710 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 8716 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 8722 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 8729 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 8735 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 8742 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 8748 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 8754 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 8760 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 8766 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 8772 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (thd->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].num));
            else
              (yyval.item)= new (thd->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 8790 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 8796 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 8802 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1273:

/* Line 1455 of yacc.c  */
#line 8809 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 8816 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 8824 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_add(thd, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 8831 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_delete(thd, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 8838 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dyncol_exists((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 8845 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dyncol_list((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1279:

/* Line 1455 of yacc.c  */
#line 8852 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_create(thd, *(yyvsp[(3) - (4)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 8859 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].cast_type),
                                        lex->length, lex->dec,
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 8876 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 8882 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 8888 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 8894 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1285:

/* Line 1455 of yacc.c  */
#line 8900 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 8907 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 8913 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_last_value(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 8919 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 8925 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 8931 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 8937 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 8948 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 8954 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 8960 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 8966 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 8972 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 8983 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 8989 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 9005 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1300:

/* Line 1455 of yacc.c  */
#line 9011 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 9018 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 9025 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 9032 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 9039 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 9046 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 9050 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 9069 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 9088 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 9141 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 9182 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 9184 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 9188 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 9189 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 9193 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 9194 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 9198 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 9199 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 9204 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 9211 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 9219 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM &&
                     (yyvsp[(2) - (4)].item)->type() != Item::REF_ITEM /* For HAVING */ )
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 9246 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 9252 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 9258 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 9264 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 9270 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 9276 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 9285 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 9291 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 9293 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 9295 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 9301 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 9312 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 9318 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 9324 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 9330 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 9336 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 9342 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 9348 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 9354 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 9360 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 9366 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 9370 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (thd->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 9385 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 9393 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 9400 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (thd->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 9410 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 9418 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(thd, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 9433 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 9434 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 9439 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.string)= new (thd->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 9444 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 9450 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 9467 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_gorder_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 9469 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_gorder_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1357:

/* Line 1455 of yacc.c  */
#line 9474 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 9483 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 9491 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 9493 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 9495 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 9497 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 9499 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 9501 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 9503 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 9505 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 9507 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 9509 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_TIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 9515 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_DATETIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 9521 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 9523 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->charset= NULL; Lex->length= Lex->dec= 0;}
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 9525 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DOUBLE; }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 9528 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 9529 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 9534 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 9541 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 9548 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 9549 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 9554 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 9561 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 9568 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 9569 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 9573 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 9574 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 9579 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 9587 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 9597 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 9599 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 9610 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 9621 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 9622 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 9628 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 9630 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 9650 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 9652 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 9655 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 9663 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 9670 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 9678 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 9686 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 9690 "/home/buildbot/git/sql/sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1402:

/* Line 1455 of yacc.c  */
#line 9692 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 9700 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 9708 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 9716 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 9720 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1407:

/* Line 1455 of yacc.c  */
#line 9726 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 9736 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 9744 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 9753 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 9757 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 9764 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 9774 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 9775 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 9776 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 9788 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 9793 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(thd, (yyvsp[(2) - (4)].table), (yyvsp[(3) - (4)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints())))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 9803 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 9843 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               new Table_ident(unit), (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            /*else if (($3->select_lex &&
                      $3->select_lex->master_unit()->is_union() &&
                      ($3->select_lex->master_unit()->first_select() ==
                       $3->select_lex || !$3->lifted)) || $5)*/
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 9919 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list) && (yyvsp[(2) - (2)].is_not_empty))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 9929 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 9934 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 9942 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (7)].table_list) != NULL)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 9954 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 9973 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 9981 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 9990 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 9996 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 10012 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 10029 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 10036 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 10041 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 10066 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 10067 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 10072 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= thd->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 10075 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1439:

/* Line 1455 of yacc.c  */
#line 10076 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1440:

/* Line 1455 of yacc.c  */
#line 10077 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1441:

/* Line 1455 of yacc.c  */
#line 10081 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1442:

/* Line 1455 of yacc.c  */
#line 10082 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1443:

/* Line 1455 of yacc.c  */
#line 10087 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 10092 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 10105 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->alloc_index_hints(thd); }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 10109 "/home/buildbot/git/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 10114 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, NULL, 0); }
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 10115 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 10120 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 10122 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, (char *)"PRIMARY", 7); }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 10132 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (thd->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 10143 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            String *s= new (thd->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 10155 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 10156 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 10157 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 10158 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 10159 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 10160 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 10161 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1469:

/* Line 1455 of yacc.c  */
#line 10162 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1470:

/* Line 1455 of yacc.c  */
#line 10163 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 10164 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 10165 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 10166 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 10170 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 10171 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 10172 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1477:

/* Line 1455 of yacc.c  */
#line 10173 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 10174 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1479:

/* Line 1455 of yacc.c  */
#line 10175 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 10176 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 10177 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 10178 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 10182 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 10183 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1485:

/* Line 1455 of yacc.c  */
#line 10184 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 10185 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 10195 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 10197 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 10210 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 10212 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 10216 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond((yyvsp[(3) - (3)].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 10228 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 10232 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond((yyvsp[(3) - (3)].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 10243 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 10248 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 10269 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_group_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 10271 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_group_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 10275 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 10277 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 10297 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 10331 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 10349 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 10384 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_order_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 10386 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_order_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 10390 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 10391 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 10392 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 10397 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
	    lex->limit_rows_examined= 0;
          }
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 10404 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 10408 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 10409 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 10414 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1527:

/* Line 1455 of yacc.c  */
#line 10418 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1528:

/* Line 1455 of yacc.c  */
#line 10422 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1529:

/* Line 1455 of yacc.c  */
#line 10429 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1530:

/* Line 1455 of yacc.c  */
#line 10436 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1531:

/* Line 1455 of yacc.c  */
#line 10443 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1532:

/* Line 1455 of yacc.c  */
#line 10453 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Item_splocal *splocal;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable_t *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
          {
            splocal= new (thd->mem_root)
              Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
          {
            my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
            MYSQL_YYABORT;
          }
          if (splocal->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
    break;

  case 1533:

/* Line 1455 of yacc.c  */
#line 10486 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 10490 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 10496 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1536:

/* Line 1455 of yacc.c  */
#line 10502 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1537:

/* Line 1455 of yacc.c  */
#line 10511 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[(1) - (1)].item);
          }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 10518 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1539:

/* Line 1455 of yacc.c  */
#line 10523 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 10529 "/home/buildbot/git/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 10530 "/home/buildbot/git/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 10534 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 10535 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 10536 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 10540 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 10541 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 10542 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 10543 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 10544 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 10545 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 10549 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 10550 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 10551 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 10552 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 10553 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 10557 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 10558 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 10559 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 10560 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 10561 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 10565 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 10566 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 10567 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= strtoull((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 10568 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 10569 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 10574 "/home/buildbot/git/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 10583 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.choice)= (yyvsp[(1) - (1)].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
    break;

  case 1570:

/* Line 1455 of yacc.c  */
#line 10584 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.choice)= HA_CHOICE_UNDEF; }
    break;

  case 1572:

/* Line 1455 of yacc.c  */
#line 10590 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (thd->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);

            /*
              PROCEDURE CLAUSE cannot handle subquery as one of its parameter,
              so set expr_allows_subselect as false to disallow any subqueries
              further. Reset expr_allows_subselect back to true once the
              parameters are reduced.
            */
            Lex->expr_allows_subselect= false;
          }
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 10625 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Subqueries are allowed from now.*/
            Lex->expr_allows_subselect= true;
          }
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 10632 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 10633 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 10643 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 10652 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 10658 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 10663 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 10668 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 10687 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable_t *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 10719 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 10731 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 10739 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 10742 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 10754 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1592:

/* Line 1455 of yacc.c  */
#line 10765 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1593:

/* Line 1455 of yacc.c  */
#line 10771 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1594:

/* Line 1455 of yacc.c  */
#line 10782 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->drop_if_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1595:

/* Line 1455 of yacc.c  */
#line 10791 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1596:

/* Line 1455 of yacc.c  */
#line 10792 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1597:

/* Line 1455 of yacc.c  */
#line 10793 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 10809 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1599:

/* Line 1455 of yacc.c  */
#line 10816 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 10838 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1601:

/* Line 1455 of yacc.c  */
#line 10858 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1602:

/* Line 1455 of yacc.c  */
#line 10870 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1603:

/* Line 1455 of yacc.c  */
#line 10874 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1604:

/* Line 1455 of yacc.c  */
#line 10882 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 10884 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 10890 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 10897 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1608:

/* Line 1455 of yacc.c  */
#line 10902 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1609:

/* Line 1455 of yacc.c  */
#line 10907 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 10922 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1615:

/* Line 1455 of yacc.c  */
#line 10938 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 10948 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 10949 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 10953 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1619:

/* Line 1455 of yacc.c  */
#line 10954 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 10962 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 10970 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1622:

/* Line 1455 of yacc.c  */
#line 10975 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1623:

/* Line 1455 of yacc.c  */
#line 10980 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 10987 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 10992 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 10997 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 11005 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 11007 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 11014 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 11018 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 11020 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1632:

/* Line 1455 of yacc.c  */
#line 11030 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1633:

/* Line 1455 of yacc.c  */
#line 11031 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 11036 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 11044 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 11045 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1637:

/* Line 1455 of yacc.c  */
#line 11046 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1638:

/* Line 1455 of yacc.c  */
#line 11048 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 11058 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 11059 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 11063 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 11064 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 11066 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 11067 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 11069 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 11070 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 11085 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 11094 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1654:

/* Line 1455 of yacc.c  */
#line 11095 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 11099 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 11100 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1657:

/* Line 1455 of yacc.c  */
#line 11105 "/home/buildbot/git/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 11110 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 11118 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 11124 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 11129 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 11136 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 11138 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 11147 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 11155 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1669:

/* Line 1455 of yacc.c  */
#line 11163 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1670:

/* Line 1455 of yacc.c  */
#line 11181 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 11191 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_item_to_list(thd, (yyvsp[(1) - (3)].item)) || add_value_to_list(thd, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 11204 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1677:

/* Line 1455 of yacc.c  */
#line 11213 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1678:

/* Line 1455 of yacc.c  */
#line 11214 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1679:

/* Line 1455 of yacc.c  */
#line 11221 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 11236 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1682:

/* Line 1455 of yacc.c  */
#line 11245 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1683:

/* Line 1455 of yacc.c  */
#line 11247 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1684:

/* Line 1455 of yacc.c  */
#line 11253 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1685:

/* Line 1455 of yacc.c  */
#line 11258 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1686:

/* Line 1455 of yacc.c  */
#line 11264 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 11277 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1690:

/* Line 1455 of yacc.c  */
#line 11290 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(thd, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1691:

/* Line 1455 of yacc.c  */
#line 11305 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1692:

/* Line 1455 of yacc.c  */
#line 11306 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1693:

/* Line 1455 of yacc.c  */
#line 11310 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 11311 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1695:

/* Line 1455 of yacc.c  */
#line 11315 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1696:

/* Line 1455 of yacc.c  */
#line 11316 "/home/buildbot/git/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 11317 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1698:

/* Line 1455 of yacc.c  */
#line 11322 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1699:

/* Line 1455 of yacc.c  */
#line 11333 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Truncate_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1706:

/* Line 1455 of yacc.c  */
#line 11357 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 11361 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 11365 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 11369 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 11373 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 11377 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 11381 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 11385 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 11389 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 11396 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 11400 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 11409 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1718:

/* Line 1455 of yacc.c  */
#line 11417 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1719:

/* Line 1455 of yacc.c  */
#line 11424 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(thd, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1720:

/* Line 1455 of yacc.c  */
#line 11431 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1721:

/* Line 1455 of yacc.c  */
#line 11439 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1722:

/* Line 1455 of yacc.c  */
#line 11447 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1723:

/* Line 1455 of yacc.c  */
#line 11455 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 11463 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(thd, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 11471 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 11478 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 11480 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 11482 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 11491 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 11495 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 11499 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1733:

/* Line 1455 of yacc.c  */
#line 11504 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 11509 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 11518 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(thd, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 11525 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
            push_warning_printf(thd, MYSQL_ERROR::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                "SHOW AUTHORS");
          }
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 11534 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
            push_warning_printf(thd, MYSQL_ERROR::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                "SHOW CONTRIBUTORS");
          }
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 11543 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 11548 "/home/buildbot/git/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 11550 "/home/buildbot/git/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 11552 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 11554 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 11556 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 11558 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(thd, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 11565 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 11573 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 11575 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 11583 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(thd, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 11590 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(thd, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 11597 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1752:

/* Line 1455 of yacc.c  */
#line 11607 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 11614 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 11620 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 11628 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 11636 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1757:

/* Line 1455 of yacc.c  */
#line 11640 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 11644 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SHOW_CLIENT_STATS;
           if (prepare_schema_table(thd, lex, 0, SCH_CLIENT_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 11651 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_USER_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_USER_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 11658 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 11665 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_INDEX_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_INDEX_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 11672 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 11679 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 11686 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 11692 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 11699 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 11706 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 11711 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 11716 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 11724 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 11726 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 11728 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1777:

/* Line 1455 of yacc.c  */
#line 11742 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 11743 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1779:

/* Line 1455 of yacc.c  */
#line 11747 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 11748 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 11757 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 11758 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 11762 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 11763 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 11769 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->wild= new (thd->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 11776 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->where= normalize_cond((yyvsp[(2) - (2)].item));
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 11786 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(thd, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 11797 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1792:

/* Line 1455 of yacc.c  */
#line 11801 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 11803 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 11815 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1797:

/* Line 1455 of yacc.c  */
#line 11816 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 11817 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 11821 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 11822 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 11824 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->wild= new (thd->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 11838 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1803:

/* Line 1455 of yacc.c  */
#line 11845 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1804:

/* Line 1455 of yacc.c  */
#line 11850 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1805:

/* Line 1455 of yacc.c  */
#line 11859 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1806:

/* Line 1455 of yacc.c  */
#line 11860 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 11865 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 11867 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK | (yyvsp[(4) - (4)].num);
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1811:

/* Line 1455 of yacc.c  */
#line 11882 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1812:

/* Line 1455 of yacc.c  */
#line 11887 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1813:

/* Line 1455 of yacc.c  */
#line 11889 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1814:

/* Line 1455 of yacc.c  */
#line 11891 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1815:

/* Line 1455 of yacc.c  */
#line 11893 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1816:

/* Line 1455 of yacc.c  */
#line 11895 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 11897 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_RELAY_LOG; }
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 11899 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 11901 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 11903 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 11905 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 11907 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 11909 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            Lex->type|= REFRESH_SLAVE;
            Lex->reset_slave_info.all= false;
          }
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 11914 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_CLIENT_STATS; }
    break;

  case 1825:

/* Line 1455 of yacc.c  */
#line 11916 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_STATS; }
    break;

  case 1826:

/* Line 1455 of yacc.c  */
#line 11918 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_TABLE_STATS; }
    break;

  case 1827:

/* Line 1455 of yacc.c  */
#line 11920 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_INDEX_STATS; }
    break;

  case 1828:

/* Line 1455 of yacc.c  */
#line 11922 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 11924 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 11926 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 11930 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 11931 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 11935 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num)= 0;}
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 11936 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num)= REFRESH_CHECKPOINT; }
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 11940 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 11945 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 11954 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 11955 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 11956 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 11957 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 11961 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 11962 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 11967 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 11973 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 11982 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 11986 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 11998 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 12005 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->kill_signal= (killed_state) ((yyvsp[(3) - (5)].num) | (yyvsp[(4) - (5)].num));
          }
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 12011 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 12012 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 12013 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 12016 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 12017 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 12018 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_QUERY; }
    break;

  case 1858:

/* Line 1455 of yacc.c  */
#line 12023 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->value_list.push_front((yyval.item));
          Lex->kill_type= KILL_TYPE_ID;
         }
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 12028 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->users_list.push_back((yyvsp[(2) - (2)].lex_user));
            Lex->kill_type= KILL_TYPE_USER;
          }
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 12038 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 12049 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 12060 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 12070 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(thd, (yyvsp[(12) - (12)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (12)].lock_type), MDL_SHARED_WRITE))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 12080 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(14) - (14)].charset); }
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 12084 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 12088 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 12089 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1868:

/* Line 1455 of yacc.c  */
#line 12093 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1869:

/* Line 1455 of yacc.c  */
#line 12094 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 12098 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 12100 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 12107 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 12111 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 12112 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 12113 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 12128 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 12133 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 12140 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 12145 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 12163 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 12168 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 12175 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 12177 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 12182 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1894:

/* Line 1455 of yacc.c  */
#line 12189 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 12191 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 12195 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 12196 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 12197 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 12202 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 12204 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1901:

/* Line 1455 of yacc.c  */
#line 12208 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1902:

/* Line 1455 of yacc.c  */
#line 12210 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1903:

/* Line 1455 of yacc.c  */
#line 12218 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 12219 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1907:

/* Line 1455 of yacc.c  */
#line 12229 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item)))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name_no_truncate((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), thd->charset());
          }
    break;

  case 1908:

/* Line 1455 of yacc.c  */
#line 12242 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1909:

/* Line 1455 of yacc.c  */
#line 12265 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (thd->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1910:

/* Line 1455 of yacc.c  */
#line 12277 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_string *str= new (thd->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1911:

/* Line 1455 of yacc.c  */
#line 12288 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= thd->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 12307 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.string)= new (thd->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             thd->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 12315 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_hybrid((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 12327 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 12335 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1916:

/* Line 1455 of yacc.c  */
#line 12350 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 12369 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 12370 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 12372 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 12379 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 12380 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 12382 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 12389 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 12395 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 12401 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_hex_hybrid((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 12407 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 12413 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 12419 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (thd->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 12448 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (thd->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1930:

/* Line 1455 of yacc.c  */
#line 12475 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1931:

/* Line 1455 of yacc.c  */
#line 12476 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 12477 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 12482 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 12492 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 12502 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 12508 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   thd->charset());
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1937:

/* Line 1455 of yacc.c  */
#line 12517 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 12531 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 12532 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 12537 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 12546 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 12560 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 12565 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable_t *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 12610 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 12615 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 12631 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 12636 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 12714 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 12738 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 12767 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 12769 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 12785 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 12794 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 12799 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 12805 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(thd, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 12811 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 12821 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 12827 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(thd, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 12836 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(thd, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 12845 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 12847 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 12875 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 12889 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 12903 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 12917 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 12919 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 12928 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 12930 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 12939 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 12940 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 12941 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 12946 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 12962 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
          }
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 12983 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 12997 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 12998 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 12999 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 13000 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 13001 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 13002 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 13003 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 13004 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 13005 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 13006 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 13007 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 13008 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 13009 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 13010 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 13011 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 13012 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 13013 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 13014 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 13015 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 13016 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 13017 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 13018 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 13019 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 13020 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 13021 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 13022 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 13023 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 13024 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 13025 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 13026 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 13027 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 13028 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 13029 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 13030 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 13031 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 13032 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 13033 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 13034 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 13035 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 13036 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 13037 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 13038 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 13039 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 13040 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 13041 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 13042 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 13043 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 13044 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 13045 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 13046 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 13047 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 13048 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 13049 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 13050 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 13051 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 13052 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 13053 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 13054 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 13055 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 13065 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 13066 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 13067 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 13068 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 13069 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 13070 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 13071 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 13072 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 13073 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 13074 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 13075 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 13076 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 13077 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 13078 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 13079 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 13080 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 13081 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 13082 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 13083 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 13084 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 13085 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 13086 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 13087 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 13088 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 13089 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 13090 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 13091 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 13092 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 13093 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 13094 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 13095 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 13096 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 13097 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 13098 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 13099 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 13100 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 13101 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 13102 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 13103 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 13104 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 13105 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 13106 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 13107 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 13108 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 13109 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 13110 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 13111 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 13112 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 13113 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 13114 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 13115 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 13116 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 13117 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 13118 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 13119 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 13120 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 13121 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 13122 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 13123 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 13124 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 13125 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 13126 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 13127 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 13128 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 13129 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 13130 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 13131 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 13132 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 13133 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 13134 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 13135 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 13136 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 13137 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 13138 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 13139 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 13140 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 13141 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 13142 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 13143 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 13144 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 13145 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 13146 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 13147 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 13148 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 13149 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 13150 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 13151 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 13152 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 13153 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 13154 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 13155 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 13156 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 13157 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 13158 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 13159 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 13160 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 13161 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 13162 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 13163 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 13164 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 13165 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 13166 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 13167 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 13168 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 13169 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 13170 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 13171 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 13172 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 13173 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 13174 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 13175 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 13176 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 13177 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 13178 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 13179 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 13180 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 13181 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 13182 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 13183 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 13184 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 13185 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 13186 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 13187 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 13188 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 13189 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 13190 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 13191 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 13192 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 13193 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 13194 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 13195 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 13196 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 13197 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 13198 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 13199 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 13200 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 13201 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 13202 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 13203 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 13204 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 13205 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 13206 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 13207 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 13208 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 13209 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 13210 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 13211 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 13212 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 13213 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 13214 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 13215 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 13216 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 13217 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 13218 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 13219 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 13220 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 13221 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 13222 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 13223 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 13224 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 13225 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 13226 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 13227 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 13228 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 13229 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 13230 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 13231 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 13232 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 13233 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 13234 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 13235 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 13236 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 13237 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 13238 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 13239 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 13240 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 13241 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 13242 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 13243 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 13244 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 13245 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 13246 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 13247 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 13248 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 13249 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 13250 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 13251 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 13252 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 13253 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 13254 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 13255 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 13256 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 13257 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 13258 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 13259 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 13260 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 13261 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 13262 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 13263 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 13264 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 13265 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 13266 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 13267 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 13268 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 13269 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 13270 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 13271 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 13272 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 13273 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 13274 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 13275 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 13276 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 13277 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 13278 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 13279 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 13280 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 13281 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 13282 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 13283 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 13284 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 13285 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 13286 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 13287 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 13288 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 13289 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 13290 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 13291 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 13292 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 13293 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 13294 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 13295 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 13296 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 13297 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 13298 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 13299 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 13300 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 13301 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 13302 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 13303 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 13304 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 13305 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 13306 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 13307 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 13308 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 13309 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 13310 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 13311 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 13312 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 13313 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 13314 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 13315 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 13316 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 13317 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 13318 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 13319 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2289:

/* Line 1455 of yacc.c  */
#line 13320 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2290:

/* Line 1455 of yacc.c  */
#line 13321 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 13322 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 13323 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 13324 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 13325 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 13326 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 13327 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 13328 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 13329 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 13330 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 13331 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 13332 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 13333 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 13334 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 13335 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 13336 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 13337 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 13338 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 13339 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 13340 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 13341 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 13342 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 13343 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 13344 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 13345 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 13346 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 13347 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 13348 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 13349 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 13350 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 13351 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 13352 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 13353 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 13354 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 13355 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 13356 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 13357 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 13364 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
          }
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 13374 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 13378 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 13379 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 13388 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              /*
                If we are in SP we want have own LEX for each assignment.
                This is mostly because it is hard for several sp_instr_set
                and sp_instr_set_trigger instructions share one LEX.
                (Well, it is theoretically possible but adds some extra
                overhead on preparation for execution stage and IMO less
                robust).

                QQ: May be we should simply prohibit group assignments in SP?
              */
              lex->sphead->reset_lex(thd);
              lex= thd->lex;

              /* Set new LEX as if we at start of set rule. */
              lex->sql_command= SQLCOM_SET_OPTION;
              mysql_init_select(lex);
              lex->option_type=OPT_SESSION;
              lex->var_list.empty();
              lex->one_shot_set= 0;
              lex->autocommit= 0;
              lex->sphead->m_tmp_query= lip->get_tok_start();
            }
          }
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 13418 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              sp_head *sp= lex->sphead;

              if (!lex->var_list.is_empty())
              {
                /*
                  We have assignment to user or system variable or
                  option setting, so we should construct sp_instr_stmt
                  for it.
                */
                LEX_STRING qbuff;
                sp_instr_stmt *i;

                if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                           lex)))
                  MYSQL_YYABORT;

                /*
                  Extract the query statement from the tokenizer.  The
                  end is either lip->ptr, if there was no lookahead,
                  lip->tok_end otherwise.
                */
                if (yychar == YYEMPTY)
                  qbuff.length= lip->get_ptr() - sp->m_tmp_query;
                else
                  qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

                if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                                    qbuff.length + 5)))
                  MYSQL_YYABORT;

                strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
                        qbuff.length);
                qbuff.length+= 4;
                i->m_query= qbuff;
                if (sp->add_instr(i))
                  MYSQL_YYABORT;
              }
              if (lex->sphead->restore_lex(thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 13468 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 13469 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 13470 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 13471 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 13475 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= OPT_DEFAULT; }
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 13476 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->one_shot_set= 1; (yyval.num)= OPT_SESSION; }
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 13480 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 13481 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 13482 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 13483 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 13487 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 13488 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 13489 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 13490 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 13500 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            LEX_STRING *name= &(yyvsp[(2) - (4)].variable).base_name;

            if ((yyvsp[(2) - (4)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              if (set_trigger_new_row(thd, name, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(2) - (4)].variable).var)
            {
              if ((yyvsp[(1) - (4)].var_type))
                lex->option_type= (yyvsp[(1) - (4)].var_type);

              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(2) - (4)].variable), lex->option_type, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable_t *spv= spc->find_variable(name);

              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 13541 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->option_type= (yyvsp[(1) - (5)].var_type);
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(5) - (5)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 13559 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (thd->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 13570 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 13582 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 13595 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(&names))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2357:

/* Line 1455 of yacc.c  */
#line 13610 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2358:

/* Line 1455 of yacc.c  */
#line 13629 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(&pw))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 13655 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2360:

/* Line 1455 of yacc.c  */
#line 13668 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable_t *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 13694 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(thd, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 13737 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(thd, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 13750 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 13751 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2365:

/* Line 1455 of yacc.c  */
#line 13752 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 13753 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2367:

/* Line 1455 of yacc.c  */
#line 13757 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2368:

/* Line 1455 of yacc.c  */
#line 13759 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? thd->variables.old_passwords ?
              Item_func_old_password::alloc(thd, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(thd, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2369:

/* Line 1455 of yacc.c  */
#line 13768 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::alloc(thd, (yyvsp[(3) - (4)].lex_str).str,
                                                          (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2370:

/* Line 1455 of yacc.c  */
#line 13779 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2371:

/* Line 1455 of yacc.c  */
#line 13780 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 13782 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 13788 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 13794 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 13805 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 13816 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 13820 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 13821 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 13831 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            lock_type == TL_WRITE_CONCURRENT_INSERT ?
                                            MDL_SHARED_WRITE :
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2382:

/* Line 1455 of yacc.c  */
#line 13845 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2383:

/* Line 1455 of yacc.c  */
#line 13846 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2384:

/* Line 1455 of yacc.c  */
#line 13848 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2385:

/* Line 1455 of yacc.c  */
#line 13852 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 13853 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 13858 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 13869 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2389:

/* Line 1455 of yacc.c  */
#line 13878 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2390:

/* Line 1455 of yacc.c  */
#line 13890 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2391:

/* Line 1455 of yacc.c  */
#line 13902 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (thd->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2392:

/* Line 1455 of yacc.c  */
#line 13922 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 13935 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 13936 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2395:

/* Line 1455 of yacc.c  */
#line 13940 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2396:

/* Line 1455 of yacc.c  */
#line 13941 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2397:

/* Line 1455 of yacc.c  */
#line 13945 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2398:

/* Line 1455 of yacc.c  */
#line 13946 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 13947 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 13948 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2401:

/* Line 1455 of yacc.c  */
#line 13950 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 13958 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2403:

/* Line 1455 of yacc.c  */
#line 13962 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2404:

/* Line 1455 of yacc.c  */
#line 13963 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 13964 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 13965 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2407:

/* Line 1455 of yacc.c  */
#line 13966 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2408:

/* Line 1455 of yacc.c  */
#line 13973 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 13978 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2410:

/* Line 1455 of yacc.c  */
#line 13984 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2411:

/* Line 1455 of yacc.c  */
#line 13995 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 14006 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 14010 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 14020 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 14026 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 14033 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2417:

/* Line 1455 of yacc.c  */
#line 14045 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2418:

/* Line 1455 of yacc.c  */
#line 14056 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 14070 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 14072 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 14090 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 14091 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2429:

/* Line 1455 of yacc.c  */
#line 14093 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2430:

/* Line 1455 of yacc.c  */
#line 14094 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2431:

/* Line 1455 of yacc.c  */
#line 14096 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2432:

/* Line 1455 of yacc.c  */
#line 14097 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 14099 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2434:

/* Line 1455 of yacc.c  */
#line 14100 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2435:

/* Line 1455 of yacc.c  */
#line 14101 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2436:

/* Line 1455 of yacc.c  */
#line 14102 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2437:

/* Line 1455 of yacc.c  */
#line 14103 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2438:

/* Line 1455 of yacc.c  */
#line 14104 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2439:

/* Line 1455 of yacc.c  */
#line 14105 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 14106 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2441:

/* Line 1455 of yacc.c  */
#line 14107 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2442:

/* Line 1455 of yacc.c  */
#line 14108 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 14109 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 14110 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2445:

/* Line 1455 of yacc.c  */
#line 14111 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2446:

/* Line 1455 of yacc.c  */
#line 14112 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2447:

/* Line 1455 of yacc.c  */
#line 14113 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2448:

/* Line 1455 of yacc.c  */
#line 14114 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2449:

/* Line 1455 of yacc.c  */
#line 14115 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2450:

/* Line 1455 of yacc.c  */
#line 14116 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2451:

/* Line 1455 of yacc.c  */
#line 14117 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2452:

/* Line 1455 of yacc.c  */
#line 14118 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2453:

/* Line 1455 of yacc.c  */
#line 14119 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2454:

/* Line 1455 of yacc.c  */
#line 14120 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2455:

/* Line 1455 of yacc.c  */
#line 14121 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2456:

/* Line 1455 of yacc.c  */
#line 14122 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2457:

/* Line 1455 of yacc.c  */
#line 14123 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2458:

/* Line 1455 of yacc.c  */
#line 14124 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2459:

/* Line 1455 of yacc.c  */
#line 14125 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2460:

/* Line 1455 of yacc.c  */
#line 14126 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2461:

/* Line 1455 of yacc.c  */
#line 14130 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2462:

/* Line 1455 of yacc.c  */
#line 14131 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2465:

/* Line 1455 of yacc.c  */
#line 14141 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2466:

/* Line 1455 of yacc.c  */
#line 14151 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2467:

/* Line 1455 of yacc.c  */
#line 14161 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2468:

/* Line 1455 of yacc.c  */
#line 14174 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 14189 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2470:

/* Line 1455 of yacc.c  */
#line 14202 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2471:

/* Line 1455 of yacc.c  */
#line 14215 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2472:

/* Line 1455 of yacc.c  */
#line 14227 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2473:

/* Line 1455 of yacc.c  */
#line 14232 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2474:

/* Line 1455 of yacc.c  */
#line 14240 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2475:

/* Line 1455 of yacc.c  */
#line 14245 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2480:

/* Line 1455 of yacc.c  */
#line 14256 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (thd->variables.old_passwords)
              {
                char *buff= 
                  (char *) thd->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) thd->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2481:

/* Line 1455 of yacc.c  */
#line 14283 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
          }
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 14288 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 14294 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 14300 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2485:

/* Line 1455 of yacc.c  */
#line 14305 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2489:

/* Line 1455 of yacc.c  */
#line 14319 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            String *new_str = new (thd->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2491:

/* Line 1455 of yacc.c  */
#line 14348 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2492:

/* Line 1455 of yacc.c  */
#line 14352 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2493:

/* Line 1455 of yacc.c  */
#line 14356 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2494:

/* Line 1455 of yacc.c  */
#line 14360 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2495:

/* Line 1455 of yacc.c  */
#line 14366 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2497:

/* Line 1455 of yacc.c  */
#line 14371 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2498:

/* Line 1455 of yacc.c  */
#line 14372 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2499:

/* Line 1455 of yacc.c  */
#line 14376 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2500:

/* Line 1455 of yacc.c  */
#line 14377 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2501:

/* Line 1455 of yacc.c  */
#line 14381 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2502:

/* Line 1455 of yacc.c  */
#line 14383 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2503:

/* Line 1455 of yacc.c  */
#line 14389 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2504:

/* Line 1455 of yacc.c  */
#line 14395 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2505:

/* Line 1455 of yacc.c  */
#line 14401 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2506:

/* Line 1455 of yacc.c  */
#line 14410 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2507:

/* Line 1455 of yacc.c  */
#line 14415 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2508:

/* Line 1455 of yacc.c  */
#line 14419 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2509:

/* Line 1455 of yacc.c  */
#line 14420 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2510:

/* Line 1455 of yacc.c  */
#line 14425 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2511:

/* Line 1455 of yacc.c  */
#line 14426 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2512:

/* Line 1455 of yacc.c  */
#line 14427 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2513:

/* Line 1455 of yacc.c  */
#line 14432 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2514:

/* Line 1455 of yacc.c  */
#line 14433 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2515:

/* Line 1455 of yacc.c  */
#line 14434 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2516:

/* Line 1455 of yacc.c  */
#line 14438 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2517:

/* Line 1455 of yacc.c  */
#line 14439 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2518:

/* Line 1455 of yacc.c  */
#line 14444 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2519:

/* Line 1455 of yacc.c  */
#line 14456 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2520:

/* Line 1455 of yacc.c  */
#line 14466 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2521:

/* Line 1455 of yacc.c  */
#line 14475 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2522:

/* Line 1455 of yacc.c  */
#line 14484 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2523:

/* Line 1455 of yacc.c  */
#line 14497 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2525:

/* Line 1455 of yacc.c  */
#line 14503 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2526:

/* Line 1455 of yacc.c  */
#line 14508 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2527:

/* Line 1455 of yacc.c  */
#line 14518 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2528:

/* Line 1455 of yacc.c  */
#line 14519 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2529:

/* Line 1455 of yacc.c  */
#line 14520 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2530:

/* Line 1455 of yacc.c  */
#line 14524 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= false; }
    break;

  case 2531:

/* Line 1455 of yacc.c  */
#line 14525 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= true; }
    break;

  case 2532:

/* Line 1455 of yacc.c  */
#line 14529 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2533:

/* Line 1455 of yacc.c  */
#line 14544 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2536:

/* Line 1455 of yacc.c  */
#line 14556 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2537:

/* Line 1455 of yacc.c  */
#line 14557 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2538:

/* Line 1455 of yacc.c  */
#line 14558 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2539:

/* Line 1455 of yacc.c  */
#line 14563 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2540:

/* Line 1455 of yacc.c  */
#line 14567 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2542:

/* Line 1455 of yacc.c  */
#line 14576 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2543:

/* Line 1455 of yacc.c  */
#line 14582 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2544:

/* Line 1455 of yacc.c  */
#line 14591 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2545:

/* Line 1455 of yacc.c  */
#line 14597 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2546:

/* Line 1455 of yacc.c  */
#line 14618 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;

            /*
              Aggregate functions in having clause may add fields to an outer
              select. Count them also.
            */
            lex->current_select->select_n_having_items+=
            child->select_n_having_items;
          }
    break;

  case 2551:

/* Line 1455 of yacc.c  */
#line 14653 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2552:

/* Line 1455 of yacc.c  */
#line 14655 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2553:

/* Line 1455 of yacc.c  */
#line 14662 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2554:

/* Line 1455 of yacc.c  */
#line 14663 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2555:

/* Line 1455 of yacc.c  */
#line 14664 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2556:

/* Line 1455 of yacc.c  */
#line 14666 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2557:

/* Line 1455 of yacc.c  */
#line 14672 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2558:

/* Line 1455 of yacc.c  */
#line 14677 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2559:

/* Line 1455 of yacc.c  */
#line 14688 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2560:

/* Line 1455 of yacc.c  */
#line 14690 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2561:

/* Line 1455 of yacc.c  */
#line 14692 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2575:

/* Line 1455 of yacc.c  */
#line 14725 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            thd->lex->definer= 0;
          }
    break;

  case 2576:

/* Line 1455 of yacc.c  */
#line 14739 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            thd->lex->definer= get_current_user(thd, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2577:

/* Line 1455 of yacc.c  */
#line 14752 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2578:

/* Line 1455 of yacc.c  */
#line 14754 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2579:

/* Line 1455 of yacc.c  */
#line 14756 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2580:

/* Line 1455 of yacc.c  */
#line 14761 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2581:

/* Line 1455 of yacc.c  */
#line 14766 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
    break;

  case 2582:

/* Line 1455 of yacc.c  */
#line 14768 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2583:

/* Line 1455 of yacc.c  */
#line 14770 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2584:

/* Line 1455 of yacc.c  */
#line 14775 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2585:

/* Line 1455 of yacc.c  */
#line 14777 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2586:

/* Line 1455 of yacc.c  */
#line 14779 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2587:

/* Line 1455 of yacc.c  */
#line 14784 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2589:

/* Line 1455 of yacc.c  */
#line 14800 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2591:

/* Line 1455 of yacc.c  */
#line 14806 "/home/buildbot/git/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2592:

/* Line 1455 of yacc.c  */
#line 14811 "/home/buildbot/git/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2593:

/* Line 1455 of yacc.c  */
#line 14818 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2594:

/* Line 1455 of yacc.c  */
#line 14827 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2597:

/* Line 1455 of yacc.c  */
#line 14848 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2598:

/* Line 1455 of yacc.c  */
#line 14850 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2599:

/* Line 1455 of yacc.c  */
#line 14852 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2600:

/* Line 1455 of yacc.c  */
#line 14854 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2601:

/* Line 1455 of yacc.c  */
#line 14871 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2602:

/* Line 1455 of yacc.c  */
#line 14877 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2603:

/* Line 1455 of yacc.c  */
#line 14882 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $15 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2604:

/* Line 1455 of yacc.c  */
#line 14911 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(thd);
            sp->restore_thd_mem_root(thd);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2605:

/* Line 1455 of yacc.c  */
#line 14945 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2606:

/* Line 1455 of yacc.c  */
#line 14962 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2607:

/* Line 1455 of yacc.c  */
#line 14984 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $5 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2608:

/* Line 1455 of yacc.c  */
#line 15015 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2609:

/* Line 1455 of yacc.c  */
#line 15019 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 2610:

/* Line 1455 of yacc.c  */
#line 15028 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(thd, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2611:

/* Line 1455 of yacc.c  */
#line 15051 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $14 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2612:

/* Line 1455 of yacc.c  */
#line 15059 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  MYSQL_ERROR::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2613:

/* Line 1455 of yacc.c  */
#line 15114 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(thd, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2614:

/* Line 1455 of yacc.c  */
#line 15138 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2615:

/* Line 1455 of yacc.c  */
#line 15147 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2616:

/* Line 1455 of yacc.c  */
#line 15154 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2617:

/* Line 1455 of yacc.c  */
#line 15161 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(thd);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2618:

/* Line 1455 of yacc.c  */
#line 15175 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2619:

/* Line 1455 of yacc.c  */
#line 15179 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2620:

/* Line 1455 of yacc.c  */
#line 15183 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2621:

/* Line 1455 of yacc.c  */
#line 15187 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2622:

/* Line 1455 of yacc.c  */
#line 15191 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2623:

/* Line 1455 of yacc.c  */
#line 15195 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2624:

/* Line 1455 of yacc.c  */
#line 15202 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2625:

/* Line 1455 of yacc.c  */
#line 15209 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2626:

/* Line 1455 of yacc.c  */
#line 15216 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2627:

/* Line 1455 of yacc.c  */
#line 15225 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2628:

/* Line 1455 of yacc.c  */
#line 15226 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2629:

/* Line 1455 of yacc.c  */
#line 15230 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2630:

/* Line 1455 of yacc.c  */
#line 15231 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2631:

/* Line 1455 of yacc.c  */
#line 15232 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2632:

/* Line 1455 of yacc.c  */
#line 15236 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2633:

/* Line 1455 of yacc.c  */
#line 15237 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2634:

/* Line 1455 of yacc.c  */
#line 15242 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2635:

/* Line 1455 of yacc.c  */
#line 15244 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2637:

/* Line 1455 of yacc.c  */
#line 15249 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2638:

/* Line 1455 of yacc.c  */
#line 15250 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2639:

/* Line 1455 of yacc.c  */
#line 15255 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2640:

/* Line 1455 of yacc.c  */
#line 15262 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2641:

/* Line 1455 of yacc.c  */
#line 15272 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2642:

/* Line 1455 of yacc.c  */
#line 15278 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2643:

/* Line 1455 of yacc.c  */
#line 15289 "/home/buildbot/git/sql/sql_yacc.yy"
    {
	  YYERROR;
	}
    break;



/* Line 1455 of yacc.c  */
#line 40945 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (thd, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (thd, yymsg);
	  }
	else
	  {
	    yyerror (thd, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, thd);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, thd);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (thd, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, thd);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, thd);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



