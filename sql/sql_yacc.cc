
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 25 "/home/buildbot/git/sql/sql_yacc.yy"

#define YYLIP (& thd->m_parser_state->m_lip)
#define YYPS (& thd->m_parser_state->m_yacc)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (thd->lex)

#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Alter_table*_statement
#include "sql_truncate.h"                      // Truncate_statement
#include "sql_admin.h"                         // Analyze/Check..._table_stmt
#include "sql_partition_admin.h"               // Alter_table_*_partition_stmt
#include "sql_signal.h"
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(thd, (char*) (A));              \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(thd);  \
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext), thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label((char *)"", lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (val && val->type() == Item::FIELD_ITEM &&
      ((Item_field*)val)->table_name)
  {
    my_error(ER_WRONG_TYPE_FOR_VAR, MYF(0), tmp->var->name.str);
    return TRUE;
  }

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable_t *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->dflt)
    it= spv->dflt;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_NO_WRITE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  lex->option_list= NULL;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list, lex->option_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}



/* Line 189 of yacc.c  */
#line 790 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ALWAYS_SYM = 269,
     ANALYZE_SYM = 270,
     AND_AND_SYM = 271,
     AND_SYM = 272,
     ANY_SYM = 273,
     AS = 274,
     ASC = 275,
     ASCII_SYM = 276,
     ASENSITIVE_SYM = 277,
     AT_SYM = 278,
     AUTHORS_SYM = 279,
     AUTOEXTEND_SIZE_SYM = 280,
     AUTO_INC = 281,
     AVG_ROW_LENGTH = 282,
     AVG_SYM = 283,
     BACKUP_SYM = 284,
     BEFORE_SYM = 285,
     BEGIN_SYM = 286,
     BETWEEN_SYM = 287,
     BIGINT = 288,
     BINARY = 289,
     BINLOG_SYM = 290,
     BIN_NUM = 291,
     BIT_AND = 292,
     BIT_OR = 293,
     BIT_SYM = 294,
     BIT_XOR = 295,
     BLOB_SYM = 296,
     BLOCK_SYM = 297,
     BOOLEAN_SYM = 298,
     BOOL_SYM = 299,
     BOTH = 300,
     BTREE_SYM = 301,
     BY = 302,
     BYTE_SYM = 303,
     CACHE_SYM = 304,
     CALL_SYM = 305,
     CASCADE = 306,
     CASCADED = 307,
     CASE_SYM = 308,
     CAST_SYM = 309,
     CATALOG_NAME_SYM = 310,
     CHAIN_SYM = 311,
     CHANGE = 312,
     CHANGED = 313,
     CHARSET = 314,
     CHAR_SYM = 315,
     CHECKPOINT_SYM = 316,
     CHECKSUM_SYM = 317,
     CHECK_SYM = 318,
     CIPHER_SYM = 319,
     CLASS_ORIGIN_SYM = 320,
     CLIENT_SYM = 321,
     CLIENT_STATS_SYM = 322,
     CLOSE_SYM = 323,
     COALESCE = 324,
     CODE_SYM = 325,
     COLLATE_SYM = 326,
     COLLATION_SYM = 327,
     COLUMNS = 328,
     COLUMN_ADD_SYM = 329,
     COLUMN_CREATE_SYM = 330,
     COLUMN_DELETE_SYM = 331,
     COLUMN_EXISTS_SYM = 332,
     COLUMN_GET_SYM = 333,
     COLUMN_LIST_SYM = 334,
     COLUMN_SYM = 335,
     COLUMN_NAME_SYM = 336,
     COMMENT_SYM = 337,
     COMMITTED_SYM = 338,
     COMMIT_SYM = 339,
     COMPACT_SYM = 340,
     COMPLETION_SYM = 341,
     COMPRESSED_SYM = 342,
     CONCURRENT = 343,
     CONDITION_SYM = 344,
     CONNECTION_SYM = 345,
     CONSISTENT_SYM = 346,
     CONSTRAINT = 347,
     CONSTRAINT_CATALOG_SYM = 348,
     CONSTRAINT_NAME_SYM = 349,
     CONSTRAINT_SCHEMA_SYM = 350,
     CONTAINS_SYM = 351,
     CONTEXT_SYM = 352,
     CONTINUE_SYM = 353,
     CONTRIBUTORS_SYM = 354,
     CONVERT_SYM = 355,
     COUNT_SYM = 356,
     CPU_SYM = 357,
     CREATE = 358,
     CROSS = 359,
     CUBE_SYM = 360,
     CURDATE = 361,
     CURRENT_USER = 362,
     CURSOR_SYM = 363,
     CURSOR_NAME_SYM = 364,
     CURTIME = 365,
     DATABASE = 366,
     DATABASES = 367,
     DATAFILE_SYM = 368,
     DATA_SYM = 369,
     DATETIME = 370,
     DATE_ADD_INTERVAL = 371,
     DATE_SUB_INTERVAL = 372,
     DATE_SYM = 373,
     DAY_HOUR_SYM = 374,
     DAY_MICROSECOND_SYM = 375,
     DAY_MINUTE_SYM = 376,
     DAY_SECOND_SYM = 377,
     DAY_SYM = 378,
     DEALLOCATE_SYM = 379,
     DECIMAL_NUM = 380,
     DECIMAL_SYM = 381,
     DECLARE_SYM = 382,
     DEFAULT = 383,
     DEFINER_SYM = 384,
     DELAYED_SYM = 385,
     DELAY_KEY_WRITE_SYM = 386,
     DELETE_SYM = 387,
     DESC = 388,
     DESCRIBE = 389,
     DES_KEY_FILE = 390,
     DETERMINISTIC_SYM = 391,
     DIRECTORY_SYM = 392,
     DISABLE_SYM = 393,
     DISCARD = 394,
     DISK_SYM = 395,
     DISTINCT = 396,
     DIV_SYM = 397,
     DOUBLE_SYM = 398,
     DO_SYM = 399,
     DROP = 400,
     DUAL_SYM = 401,
     DUMPFILE = 402,
     DUPLICATE_SYM = 403,
     DYNAMIC_SYM = 404,
     EACH_SYM = 405,
     ELSE = 406,
     ELSEIF_SYM = 407,
     ENABLE_SYM = 408,
     ENCLOSED = 409,
     END = 410,
     ENDS_SYM = 411,
     END_OF_INPUT = 412,
     ENGINES_SYM = 413,
     ENGINE_SYM = 414,
     ENUM = 415,
     EQUAL_SYM = 416,
     ERROR_SYM = 417,
     ERRORS = 418,
     ESCAPED = 419,
     ESCAPE_SYM = 420,
     EVENTS_SYM = 421,
     EVENT_SYM = 422,
     EVERY_SYM = 423,
     EXAMINED_SYM = 424,
     EXECUTE_SYM = 425,
     EXISTS = 426,
     EXIT_SYM = 427,
     EXPANSION_SYM = 428,
     EXTENDED_SYM = 429,
     EXTENT_SIZE_SYM = 430,
     EXTRACT_SYM = 431,
     FALSE_SYM = 432,
     FAST_SYM = 433,
     FAULTS_SYM = 434,
     FETCH_SYM = 435,
     FILE_SYM = 436,
     FIRST_SYM = 437,
     FIXED_SYM = 438,
     FLOAT_NUM = 439,
     FLOAT_SYM = 440,
     FLUSH_SYM = 441,
     FORCE_SYM = 442,
     FOREIGN = 443,
     FOR_SYM = 444,
     FOUND_SYM = 445,
     FROM = 446,
     FULL = 447,
     FULLTEXT_SYM = 448,
     FUNCTION_SYM = 449,
     GE = 450,
     GENERAL = 451,
     GENERATED_SYM = 452,
     GEOMETRYCOLLECTION = 453,
     GEOMETRY_SYM = 454,
     GET_FORMAT = 455,
     GLOBAL_SYM = 456,
     GRANT = 457,
     GRANTS = 458,
     GROUP_SYM = 459,
     GROUP_CONCAT_SYM = 460,
     HANDLER_SYM = 461,
     HARD_SYM = 462,
     HASH_SYM = 463,
     HAVING = 464,
     HELP_SYM = 465,
     HEX_NUM = 466,
     HEX_STRING = 467,
     HIGH_PRIORITY = 468,
     HOST_SYM = 469,
     HOSTS_SYM = 470,
     HOUR_MICROSECOND_SYM = 471,
     HOUR_MINUTE_SYM = 472,
     HOUR_SECOND_SYM = 473,
     HOUR_SYM = 474,
     IDENT = 475,
     IDENTIFIED_SYM = 476,
     IDENT_QUOTED = 477,
     IF = 478,
     IGNORE_SYM = 479,
     IGNORE_SERVER_IDS_SYM = 480,
     IMPORT = 481,
     INDEXES = 482,
     INDEX_SYM = 483,
     INDEX_STATS_SYM = 484,
     INFILE = 485,
     INITIAL_SIZE_SYM = 486,
     INNER_SYM = 487,
     INOUT_SYM = 488,
     INSENSITIVE_SYM = 489,
     INSERT = 490,
     INSERT_METHOD = 491,
     INSTALL_SYM = 492,
     INTERVAL_SYM = 493,
     INTO = 494,
     INT_SYM = 495,
     INVOKER_SYM = 496,
     IN_SYM = 497,
     IO_SYM = 498,
     IPC_SYM = 499,
     IS = 500,
     ISOLATION = 501,
     ISSUER_SYM = 502,
     ITERATE_SYM = 503,
     JOIN_SYM = 504,
     KEYS = 505,
     KEY_BLOCK_SIZE = 506,
     KEY_SYM = 507,
     KILL_SYM = 508,
     LANGUAGE_SYM = 509,
     LAST_SYM = 510,
     LAST_VALUE = 511,
     LE = 512,
     LEADING = 513,
     LEAVES = 514,
     LEAVE_SYM = 515,
     LEFT = 516,
     LESS_SYM = 517,
     LEVEL_SYM = 518,
     LEX_HOSTNAME = 519,
     LIKE = 520,
     LIMIT = 521,
     LINEAR_SYM = 522,
     LINES = 523,
     LINESTRING = 524,
     LIST_SYM = 525,
     LOAD = 526,
     LOCAL_SYM = 527,
     LOCATOR_SYM = 528,
     LOCKS_SYM = 529,
     LOCK_SYM = 530,
     LOGFILE_SYM = 531,
     LOGS_SYM = 532,
     LONGBLOB = 533,
     LONGTEXT = 534,
     LONG_NUM = 535,
     LONG_SYM = 536,
     LOOP_SYM = 537,
     LOW_PRIORITY = 538,
     MASTER_CONNECT_RETRY_SYM = 539,
     MASTER_HOST_SYM = 540,
     MASTER_LOG_FILE_SYM = 541,
     MASTER_LOG_POS_SYM = 542,
     MASTER_PASSWORD_SYM = 543,
     MASTER_PORT_SYM = 544,
     MASTER_SERVER_ID_SYM = 545,
     MASTER_SSL_CAPATH_SYM = 546,
     MASTER_SSL_CA_SYM = 547,
     MASTER_SSL_CERT_SYM = 548,
     MASTER_SSL_CIPHER_SYM = 549,
     MASTER_SSL_KEY_SYM = 550,
     MASTER_SSL_SYM = 551,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 552,
     MASTER_SYM = 553,
     MASTER_USER_SYM = 554,
     MASTER_HEARTBEAT_PERIOD_SYM = 555,
     MATCH = 556,
     MAX_CONNECTIONS_PER_HOUR = 557,
     MAX_QUERIES_PER_HOUR = 558,
     MAX_ROWS = 559,
     MAX_SIZE_SYM = 560,
     MAX_SYM = 561,
     MAX_UPDATES_PER_HOUR = 562,
     MAX_USER_CONNECTIONS_SYM = 563,
     MAX_VALUE_SYM = 564,
     MEDIUMBLOB = 565,
     MEDIUMINT = 566,
     MEDIUMTEXT = 567,
     MEDIUM_SYM = 568,
     MEMORY_SYM = 569,
     MERGE_SYM = 570,
     MESSAGE_TEXT_SYM = 571,
     MICROSECOND_SYM = 572,
     MIGRATE_SYM = 573,
     MINUTE_MICROSECOND_SYM = 574,
     MINUTE_SECOND_SYM = 575,
     MINUTE_SYM = 576,
     MIN_ROWS = 577,
     MIN_SYM = 578,
     MODE_SYM = 579,
     MODIFIES_SYM = 580,
     MODIFY_SYM = 581,
     MOD_SYM = 582,
     MONTH_SYM = 583,
     MULTILINESTRING = 584,
     MULTIPOINT = 585,
     MULTIPOLYGON = 586,
     MUTEX_SYM = 587,
     MYSQL_SYM = 588,
     MYSQL_ERRNO_SYM = 589,
     NAMES_SYM = 590,
     NAME_SYM = 591,
     NATIONAL_SYM = 592,
     NATURAL = 593,
     NCHAR_STRING = 594,
     NCHAR_SYM = 595,
     NDBCLUSTER_SYM = 596,
     NE = 597,
     NEG = 598,
     NEW_SYM = 599,
     NEXT_SYM = 600,
     NODEGROUP_SYM = 601,
     NONE_SYM = 602,
     NOT2_SYM = 603,
     NOT_SYM = 604,
     NOW_SYM = 605,
     NO_SYM = 606,
     NO_WAIT_SYM = 607,
     NO_WRITE_TO_BINLOG = 608,
     NULL_SYM = 609,
     NUM = 610,
     NUMERIC_SYM = 611,
     NVARCHAR_SYM = 612,
     OFFSET_SYM = 613,
     OLD_PASSWORD = 614,
     ON = 615,
     ONE_SHOT_SYM = 616,
     ONE_SYM = 617,
     ONLINE_SYM = 618,
     OPEN_SYM = 619,
     OPTIMIZE = 620,
     OPTIONS_SYM = 621,
     OPTION = 622,
     OPTIONALLY = 623,
     OR2_SYM = 624,
     ORDER_SYM = 625,
     OR_OR_SYM = 626,
     OR_SYM = 627,
     OUTER = 628,
     OUTFILE = 629,
     OUT_SYM = 630,
     OWNER_SYM = 631,
     PACK_KEYS_SYM = 632,
     PAGE_SYM = 633,
     PAGE_CHECKSUM_SYM = 634,
     PARAM_MARKER = 635,
     PARSER_SYM = 636,
     PARSE_VCOL_EXPR_SYM = 637,
     PARTIAL = 638,
     PARTITIONING_SYM = 639,
     PARTITIONS_SYM = 640,
     PARTITION_SYM = 641,
     PASSWORD = 642,
     PERSISTENT_SYM = 643,
     PHASE_SYM = 644,
     PLUGINS_SYM = 645,
     PLUGIN_SYM = 646,
     POINT_SYM = 647,
     POLYGON = 648,
     PORT_SYM = 649,
     POSITION_SYM = 650,
     PRECISION = 651,
     PREPARE_SYM = 652,
     PRESERVE_SYM = 653,
     PREV_SYM = 654,
     PRIMARY_SYM = 655,
     PRIVILEGES = 656,
     PROCEDURE_SYM = 657,
     PROCESS = 658,
     PROCESSLIST_SYM = 659,
     PROFILE_SYM = 660,
     PROFILES_SYM = 661,
     PROXY_SYM = 662,
     PURGE = 663,
     QUARTER_SYM = 664,
     QUERY_SYM = 665,
     QUICK = 666,
     RANGE_SYM = 667,
     READS_SYM = 668,
     READ_ONLY_SYM = 669,
     READ_SYM = 670,
     READ_WRITE_SYM = 671,
     REAL = 672,
     REBUILD_SYM = 673,
     RECOVER_SYM = 674,
     REDOFILE_SYM = 675,
     REDO_BUFFER_SIZE_SYM = 676,
     REDUNDANT_SYM = 677,
     REFERENCES = 678,
     REGEXP = 679,
     RELAY = 680,
     RELAYLOG_SYM = 681,
     RELAY_LOG_FILE_SYM = 682,
     RELAY_LOG_POS_SYM = 683,
     RELAY_THREAD = 684,
     RELEASE_SYM = 685,
     RELOAD = 686,
     REMOVE_SYM = 687,
     RENAME = 688,
     REORGANIZE_SYM = 689,
     REPAIR = 690,
     REPEATABLE_SYM = 691,
     REPEAT_SYM = 692,
     REPLACE = 693,
     REPLICATION = 694,
     REQUIRE_SYM = 695,
     RESET_SYM = 696,
     RESIGNAL_SYM = 697,
     RESOURCES = 698,
     RESTORE_SYM = 699,
     RESTRICT = 700,
     RESUME_SYM = 701,
     RETURNS_SYM = 702,
     RETURN_SYM = 703,
     REVOKE = 704,
     RIGHT = 705,
     ROLLBACK_SYM = 706,
     ROLLUP_SYM = 707,
     ROUTINE_SYM = 708,
     ROWS_SYM = 709,
     ROW_FORMAT_SYM = 710,
     ROW_SYM = 711,
     RTREE_SYM = 712,
     SAVEPOINT_SYM = 713,
     SCHEDULE_SYM = 714,
     SCHEMA_NAME_SYM = 715,
     SECOND_MICROSECOND_SYM = 716,
     SECOND_SYM = 717,
     SECURITY_SYM = 718,
     SELECT_SYM = 719,
     SENSITIVE_SYM = 720,
     SEPARATOR_SYM = 721,
     SERIALIZABLE_SYM = 722,
     SERIAL_SYM = 723,
     SESSION_SYM = 724,
     SERVER_SYM = 725,
     SERVER_OPTIONS = 726,
     SET = 727,
     SET_VAR = 728,
     SHARE_SYM = 729,
     SHIFT_LEFT = 730,
     SHIFT_RIGHT = 731,
     SHOW = 732,
     SHUTDOWN = 733,
     SIGNAL_SYM = 734,
     SIGNED_SYM = 735,
     SIMPLE_SYM = 736,
     SLAVE = 737,
     SLOW = 738,
     SMALLINT = 739,
     SNAPSHOT_SYM = 740,
     SOCKET_SYM = 741,
     SOFT_SYM = 742,
     SONAME_SYM = 743,
     SOUNDS_SYM = 744,
     SOURCE_SYM = 745,
     SPATIAL_SYM = 746,
     SPECIFIC_SYM = 747,
     SQLEXCEPTION_SYM = 748,
     SQLSTATE_SYM = 749,
     SQLWARNING_SYM = 750,
     SQL_BIG_RESULT = 751,
     SQL_BUFFER_RESULT = 752,
     SQL_CACHE_SYM = 753,
     SQL_CALC_FOUND_ROWS = 754,
     SQL_NO_CACHE_SYM = 755,
     SQL_SMALL_RESULT = 756,
     SQL_SYM = 757,
     SQL_THREAD = 758,
     SSL_SYM = 759,
     STARTING = 760,
     STARTS_SYM = 761,
     START_SYM = 762,
     STATUS_SYM = 763,
     STDDEV_SAMP_SYM = 764,
     STD_SYM = 765,
     STOP_SYM = 766,
     STORAGE_SYM = 767,
     STRAIGHT_JOIN = 768,
     STRING_SYM = 769,
     SUBCLASS_ORIGIN_SYM = 770,
     SUBDATE_SYM = 771,
     SUBJECT_SYM = 772,
     SUBPARTITIONS_SYM = 773,
     SUBPARTITION_SYM = 774,
     SUBSTRING = 775,
     SUM_SYM = 776,
     SUPER_SYM = 777,
     SUSPEND_SYM = 778,
     SWAPS_SYM = 779,
     SWITCHES_SYM = 780,
     SYSDATE = 781,
     TABLES = 782,
     TABLESPACE = 783,
     TABLE_REF_PRIORITY = 784,
     TABLE_STATS_SYM = 785,
     TABLE_SYM = 786,
     TABLE_CHECKSUM_SYM = 787,
     TABLE_NAME_SYM = 788,
     TEMPORARY = 789,
     TEMPTABLE_SYM = 790,
     TERMINATED = 791,
     TEXT_STRING = 792,
     TEXT_SYM = 793,
     THAN_SYM = 794,
     THEN_SYM = 795,
     TIMESTAMP = 796,
     TIMESTAMP_ADD = 797,
     TIMESTAMP_DIFF = 798,
     TIME_SYM = 799,
     TINYBLOB = 800,
     TINYINT = 801,
     TINYTEXT = 802,
     TO_SYM = 803,
     TRAILING = 804,
     TRANSACTION_SYM = 805,
     TRANSACTIONAL_SYM = 806,
     TRIGGERS_SYM = 807,
     TRIGGER_SYM = 808,
     TRIM = 809,
     TRUE_SYM = 810,
     TRUNCATE_SYM = 811,
     TYPES_SYM = 812,
     TYPE_SYM = 813,
     UDF_RETURNS_SYM = 814,
     ULONGLONG_NUM = 815,
     UNCOMMITTED_SYM = 816,
     UNDEFINED_SYM = 817,
     UNDERSCORE_CHARSET = 818,
     UNDOFILE_SYM = 819,
     UNDO_BUFFER_SIZE_SYM = 820,
     UNDO_SYM = 821,
     UNICODE_SYM = 822,
     UNINSTALL_SYM = 823,
     UNION_SYM = 824,
     UNIQUE_SYM = 825,
     UNKNOWN_SYM = 826,
     UNLOCK_SYM = 827,
     UNSIGNED = 828,
     UNTIL_SYM = 829,
     UPDATE_SYM = 830,
     UPGRADE_SYM = 831,
     USAGE = 832,
     USER = 833,
     USER_STATS_SYM = 834,
     USE_FRM = 835,
     USE_SYM = 836,
     USING = 837,
     UTC_DATE_SYM = 838,
     UTC_TIMESTAMP_SYM = 839,
     UTC_TIME_SYM = 840,
     VALUES = 841,
     VALUE_SYM = 842,
     VARBINARY = 843,
     VARCHAR = 844,
     VARIABLES = 845,
     VARIANCE_SYM = 846,
     VARYING = 847,
     VAR_SAMP_SYM = 848,
     VIA_SYM = 849,
     VIEW_SYM = 850,
     VIRTUAL_SYM = 851,
     WAIT_SYM = 852,
     WARNINGS = 853,
     WEEK_SYM = 854,
     WHEN_SYM = 855,
     WHERE = 856,
     WHILE_SYM = 857,
     WITH = 858,
     WITH_CUBE_SYM = 859,
     WITH_ROLLUP_SYM = 860,
     WORK_SYM = 861,
     WRAPPER_SYM = 862,
     WRITE_SYM = 863,
     X509_SYM = 864,
     XA_SYM = 865,
     XML_SYM = 866,
     XOR = 867,
     YEAR_MONTH_SYM = 868,
     YEAR_SYM = 869,
     ZEROFILL = 870,
     IMPOSSIBLE_ACTION = 871
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ALWAYS_SYM 269
#define ANALYZE_SYM 270
#define AND_AND_SYM 271
#define AND_SYM 272
#define ANY_SYM 273
#define AS 274
#define ASC 275
#define ASCII_SYM 276
#define ASENSITIVE_SYM 277
#define AT_SYM 278
#define AUTHORS_SYM 279
#define AUTOEXTEND_SIZE_SYM 280
#define AUTO_INC 281
#define AVG_ROW_LENGTH 282
#define AVG_SYM 283
#define BACKUP_SYM 284
#define BEFORE_SYM 285
#define BEGIN_SYM 286
#define BETWEEN_SYM 287
#define BIGINT 288
#define BINARY 289
#define BINLOG_SYM 290
#define BIN_NUM 291
#define BIT_AND 292
#define BIT_OR 293
#define BIT_SYM 294
#define BIT_XOR 295
#define BLOB_SYM 296
#define BLOCK_SYM 297
#define BOOLEAN_SYM 298
#define BOOL_SYM 299
#define BOTH 300
#define BTREE_SYM 301
#define BY 302
#define BYTE_SYM 303
#define CACHE_SYM 304
#define CALL_SYM 305
#define CASCADE 306
#define CASCADED 307
#define CASE_SYM 308
#define CAST_SYM 309
#define CATALOG_NAME_SYM 310
#define CHAIN_SYM 311
#define CHANGE 312
#define CHANGED 313
#define CHARSET 314
#define CHAR_SYM 315
#define CHECKPOINT_SYM 316
#define CHECKSUM_SYM 317
#define CHECK_SYM 318
#define CIPHER_SYM 319
#define CLASS_ORIGIN_SYM 320
#define CLIENT_SYM 321
#define CLIENT_STATS_SYM 322
#define CLOSE_SYM 323
#define COALESCE 324
#define CODE_SYM 325
#define COLLATE_SYM 326
#define COLLATION_SYM 327
#define COLUMNS 328
#define COLUMN_ADD_SYM 329
#define COLUMN_CREATE_SYM 330
#define COLUMN_DELETE_SYM 331
#define COLUMN_EXISTS_SYM 332
#define COLUMN_GET_SYM 333
#define COLUMN_LIST_SYM 334
#define COLUMN_SYM 335
#define COLUMN_NAME_SYM 336
#define COMMENT_SYM 337
#define COMMITTED_SYM 338
#define COMMIT_SYM 339
#define COMPACT_SYM 340
#define COMPLETION_SYM 341
#define COMPRESSED_SYM 342
#define CONCURRENT 343
#define CONDITION_SYM 344
#define CONNECTION_SYM 345
#define CONSISTENT_SYM 346
#define CONSTRAINT 347
#define CONSTRAINT_CATALOG_SYM 348
#define CONSTRAINT_NAME_SYM 349
#define CONSTRAINT_SCHEMA_SYM 350
#define CONTAINS_SYM 351
#define CONTEXT_SYM 352
#define CONTINUE_SYM 353
#define CONTRIBUTORS_SYM 354
#define CONVERT_SYM 355
#define COUNT_SYM 356
#define CPU_SYM 357
#define CREATE 358
#define CROSS 359
#define CUBE_SYM 360
#define CURDATE 361
#define CURRENT_USER 362
#define CURSOR_SYM 363
#define CURSOR_NAME_SYM 364
#define CURTIME 365
#define DATABASE 366
#define DATABASES 367
#define DATAFILE_SYM 368
#define DATA_SYM 369
#define DATETIME 370
#define DATE_ADD_INTERVAL 371
#define DATE_SUB_INTERVAL 372
#define DATE_SYM 373
#define DAY_HOUR_SYM 374
#define DAY_MICROSECOND_SYM 375
#define DAY_MINUTE_SYM 376
#define DAY_SECOND_SYM 377
#define DAY_SYM 378
#define DEALLOCATE_SYM 379
#define DECIMAL_NUM 380
#define DECIMAL_SYM 381
#define DECLARE_SYM 382
#define DEFAULT 383
#define DEFINER_SYM 384
#define DELAYED_SYM 385
#define DELAY_KEY_WRITE_SYM 386
#define DELETE_SYM 387
#define DESC 388
#define DESCRIBE 389
#define DES_KEY_FILE 390
#define DETERMINISTIC_SYM 391
#define DIRECTORY_SYM 392
#define DISABLE_SYM 393
#define DISCARD 394
#define DISK_SYM 395
#define DISTINCT 396
#define DIV_SYM 397
#define DOUBLE_SYM 398
#define DO_SYM 399
#define DROP 400
#define DUAL_SYM 401
#define DUMPFILE 402
#define DUPLICATE_SYM 403
#define DYNAMIC_SYM 404
#define EACH_SYM 405
#define ELSE 406
#define ELSEIF_SYM 407
#define ENABLE_SYM 408
#define ENCLOSED 409
#define END 410
#define ENDS_SYM 411
#define END_OF_INPUT 412
#define ENGINES_SYM 413
#define ENGINE_SYM 414
#define ENUM 415
#define EQUAL_SYM 416
#define ERROR_SYM 417
#define ERRORS 418
#define ESCAPED 419
#define ESCAPE_SYM 420
#define EVENTS_SYM 421
#define EVENT_SYM 422
#define EVERY_SYM 423
#define EXAMINED_SYM 424
#define EXECUTE_SYM 425
#define EXISTS 426
#define EXIT_SYM 427
#define EXPANSION_SYM 428
#define EXTENDED_SYM 429
#define EXTENT_SIZE_SYM 430
#define EXTRACT_SYM 431
#define FALSE_SYM 432
#define FAST_SYM 433
#define FAULTS_SYM 434
#define FETCH_SYM 435
#define FILE_SYM 436
#define FIRST_SYM 437
#define FIXED_SYM 438
#define FLOAT_NUM 439
#define FLOAT_SYM 440
#define FLUSH_SYM 441
#define FORCE_SYM 442
#define FOREIGN 443
#define FOR_SYM 444
#define FOUND_SYM 445
#define FROM 446
#define FULL 447
#define FULLTEXT_SYM 448
#define FUNCTION_SYM 449
#define GE 450
#define GENERAL 451
#define GENERATED_SYM 452
#define GEOMETRYCOLLECTION 453
#define GEOMETRY_SYM 454
#define GET_FORMAT 455
#define GLOBAL_SYM 456
#define GRANT 457
#define GRANTS 458
#define GROUP_SYM 459
#define GROUP_CONCAT_SYM 460
#define HANDLER_SYM 461
#define HARD_SYM 462
#define HASH_SYM 463
#define HAVING 464
#define HELP_SYM 465
#define HEX_NUM 466
#define HEX_STRING 467
#define HIGH_PRIORITY 468
#define HOST_SYM 469
#define HOSTS_SYM 470
#define HOUR_MICROSECOND_SYM 471
#define HOUR_MINUTE_SYM 472
#define HOUR_SECOND_SYM 473
#define HOUR_SYM 474
#define IDENT 475
#define IDENTIFIED_SYM 476
#define IDENT_QUOTED 477
#define IF 478
#define IGNORE_SYM 479
#define IGNORE_SERVER_IDS_SYM 480
#define IMPORT 481
#define INDEXES 482
#define INDEX_SYM 483
#define INDEX_STATS_SYM 484
#define INFILE 485
#define INITIAL_SIZE_SYM 486
#define INNER_SYM 487
#define INOUT_SYM 488
#define INSENSITIVE_SYM 489
#define INSERT 490
#define INSERT_METHOD 491
#define INSTALL_SYM 492
#define INTERVAL_SYM 493
#define INTO 494
#define INT_SYM 495
#define INVOKER_SYM 496
#define IN_SYM 497
#define IO_SYM 498
#define IPC_SYM 499
#define IS 500
#define ISOLATION 501
#define ISSUER_SYM 502
#define ITERATE_SYM 503
#define JOIN_SYM 504
#define KEYS 505
#define KEY_BLOCK_SIZE 506
#define KEY_SYM 507
#define KILL_SYM 508
#define LANGUAGE_SYM 509
#define LAST_SYM 510
#define LAST_VALUE 511
#define LE 512
#define LEADING 513
#define LEAVES 514
#define LEAVE_SYM 515
#define LEFT 516
#define LESS_SYM 517
#define LEVEL_SYM 518
#define LEX_HOSTNAME 519
#define LIKE 520
#define LIMIT 521
#define LINEAR_SYM 522
#define LINES 523
#define LINESTRING 524
#define LIST_SYM 525
#define LOAD 526
#define LOCAL_SYM 527
#define LOCATOR_SYM 528
#define LOCKS_SYM 529
#define LOCK_SYM 530
#define LOGFILE_SYM 531
#define LOGS_SYM 532
#define LONGBLOB 533
#define LONGTEXT 534
#define LONG_NUM 535
#define LONG_SYM 536
#define LOOP_SYM 537
#define LOW_PRIORITY 538
#define MASTER_CONNECT_RETRY_SYM 539
#define MASTER_HOST_SYM 540
#define MASTER_LOG_FILE_SYM 541
#define MASTER_LOG_POS_SYM 542
#define MASTER_PASSWORD_SYM 543
#define MASTER_PORT_SYM 544
#define MASTER_SERVER_ID_SYM 545
#define MASTER_SSL_CAPATH_SYM 546
#define MASTER_SSL_CA_SYM 547
#define MASTER_SSL_CERT_SYM 548
#define MASTER_SSL_CIPHER_SYM 549
#define MASTER_SSL_KEY_SYM 550
#define MASTER_SSL_SYM 551
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 552
#define MASTER_SYM 553
#define MASTER_USER_SYM 554
#define MASTER_HEARTBEAT_PERIOD_SYM 555
#define MATCH 556
#define MAX_CONNECTIONS_PER_HOUR 557
#define MAX_QUERIES_PER_HOUR 558
#define MAX_ROWS 559
#define MAX_SIZE_SYM 560
#define MAX_SYM 561
#define MAX_UPDATES_PER_HOUR 562
#define MAX_USER_CONNECTIONS_SYM 563
#define MAX_VALUE_SYM 564
#define MEDIUMBLOB 565
#define MEDIUMINT 566
#define MEDIUMTEXT 567
#define MEDIUM_SYM 568
#define MEMORY_SYM 569
#define MERGE_SYM 570
#define MESSAGE_TEXT_SYM 571
#define MICROSECOND_SYM 572
#define MIGRATE_SYM 573
#define MINUTE_MICROSECOND_SYM 574
#define MINUTE_SECOND_SYM 575
#define MINUTE_SYM 576
#define MIN_ROWS 577
#define MIN_SYM 578
#define MODE_SYM 579
#define MODIFIES_SYM 580
#define MODIFY_SYM 581
#define MOD_SYM 582
#define MONTH_SYM 583
#define MULTILINESTRING 584
#define MULTIPOINT 585
#define MULTIPOLYGON 586
#define MUTEX_SYM 587
#define MYSQL_SYM 588
#define MYSQL_ERRNO_SYM 589
#define NAMES_SYM 590
#define NAME_SYM 591
#define NATIONAL_SYM 592
#define NATURAL 593
#define NCHAR_STRING 594
#define NCHAR_SYM 595
#define NDBCLUSTER_SYM 596
#define NE 597
#define NEG 598
#define NEW_SYM 599
#define NEXT_SYM 600
#define NODEGROUP_SYM 601
#define NONE_SYM 602
#define NOT2_SYM 603
#define NOT_SYM 604
#define NOW_SYM 605
#define NO_SYM 606
#define NO_WAIT_SYM 607
#define NO_WRITE_TO_BINLOG 608
#define NULL_SYM 609
#define NUM 610
#define NUMERIC_SYM 611
#define NVARCHAR_SYM 612
#define OFFSET_SYM 613
#define OLD_PASSWORD 614
#define ON 615
#define ONE_SHOT_SYM 616
#define ONE_SYM 617
#define ONLINE_SYM 618
#define OPEN_SYM 619
#define OPTIMIZE 620
#define OPTIONS_SYM 621
#define OPTION 622
#define OPTIONALLY 623
#define OR2_SYM 624
#define ORDER_SYM 625
#define OR_OR_SYM 626
#define OR_SYM 627
#define OUTER 628
#define OUTFILE 629
#define OUT_SYM 630
#define OWNER_SYM 631
#define PACK_KEYS_SYM 632
#define PAGE_SYM 633
#define PAGE_CHECKSUM_SYM 634
#define PARAM_MARKER 635
#define PARSER_SYM 636
#define PARSE_VCOL_EXPR_SYM 637
#define PARTIAL 638
#define PARTITIONING_SYM 639
#define PARTITIONS_SYM 640
#define PARTITION_SYM 641
#define PASSWORD 642
#define PERSISTENT_SYM 643
#define PHASE_SYM 644
#define PLUGINS_SYM 645
#define PLUGIN_SYM 646
#define POINT_SYM 647
#define POLYGON 648
#define PORT_SYM 649
#define POSITION_SYM 650
#define PRECISION 651
#define PREPARE_SYM 652
#define PRESERVE_SYM 653
#define PREV_SYM 654
#define PRIMARY_SYM 655
#define PRIVILEGES 656
#define PROCEDURE_SYM 657
#define PROCESS 658
#define PROCESSLIST_SYM 659
#define PROFILE_SYM 660
#define PROFILES_SYM 661
#define PROXY_SYM 662
#define PURGE 663
#define QUARTER_SYM 664
#define QUERY_SYM 665
#define QUICK 666
#define RANGE_SYM 667
#define READS_SYM 668
#define READ_ONLY_SYM 669
#define READ_SYM 670
#define READ_WRITE_SYM 671
#define REAL 672
#define REBUILD_SYM 673
#define RECOVER_SYM 674
#define REDOFILE_SYM 675
#define REDO_BUFFER_SIZE_SYM 676
#define REDUNDANT_SYM 677
#define REFERENCES 678
#define REGEXP 679
#define RELAY 680
#define RELAYLOG_SYM 681
#define RELAY_LOG_FILE_SYM 682
#define RELAY_LOG_POS_SYM 683
#define RELAY_THREAD 684
#define RELEASE_SYM 685
#define RELOAD 686
#define REMOVE_SYM 687
#define RENAME 688
#define REORGANIZE_SYM 689
#define REPAIR 690
#define REPEATABLE_SYM 691
#define REPEAT_SYM 692
#define REPLACE 693
#define REPLICATION 694
#define REQUIRE_SYM 695
#define RESET_SYM 696
#define RESIGNAL_SYM 697
#define RESOURCES 698
#define RESTORE_SYM 699
#define RESTRICT 700
#define RESUME_SYM 701
#define RETURNS_SYM 702
#define RETURN_SYM 703
#define REVOKE 704
#define RIGHT 705
#define ROLLBACK_SYM 706
#define ROLLUP_SYM 707
#define ROUTINE_SYM 708
#define ROWS_SYM 709
#define ROW_FORMAT_SYM 710
#define ROW_SYM 711
#define RTREE_SYM 712
#define SAVEPOINT_SYM 713
#define SCHEDULE_SYM 714
#define SCHEMA_NAME_SYM 715
#define SECOND_MICROSECOND_SYM 716
#define SECOND_SYM 717
#define SECURITY_SYM 718
#define SELECT_SYM 719
#define SENSITIVE_SYM 720
#define SEPARATOR_SYM 721
#define SERIALIZABLE_SYM 722
#define SERIAL_SYM 723
#define SESSION_SYM 724
#define SERVER_SYM 725
#define SERVER_OPTIONS 726
#define SET 727
#define SET_VAR 728
#define SHARE_SYM 729
#define SHIFT_LEFT 730
#define SHIFT_RIGHT 731
#define SHOW 732
#define SHUTDOWN 733
#define SIGNAL_SYM 734
#define SIGNED_SYM 735
#define SIMPLE_SYM 736
#define SLAVE 737
#define SLOW 738
#define SMALLINT 739
#define SNAPSHOT_SYM 740
#define SOCKET_SYM 741
#define SOFT_SYM 742
#define SONAME_SYM 743
#define SOUNDS_SYM 744
#define SOURCE_SYM 745
#define SPATIAL_SYM 746
#define SPECIFIC_SYM 747
#define SQLEXCEPTION_SYM 748
#define SQLSTATE_SYM 749
#define SQLWARNING_SYM 750
#define SQL_BIG_RESULT 751
#define SQL_BUFFER_RESULT 752
#define SQL_CACHE_SYM 753
#define SQL_CALC_FOUND_ROWS 754
#define SQL_NO_CACHE_SYM 755
#define SQL_SMALL_RESULT 756
#define SQL_SYM 757
#define SQL_THREAD 758
#define SSL_SYM 759
#define STARTING 760
#define STARTS_SYM 761
#define START_SYM 762
#define STATUS_SYM 763
#define STDDEV_SAMP_SYM 764
#define STD_SYM 765
#define STOP_SYM 766
#define STORAGE_SYM 767
#define STRAIGHT_JOIN 768
#define STRING_SYM 769
#define SUBCLASS_ORIGIN_SYM 770
#define SUBDATE_SYM 771
#define SUBJECT_SYM 772
#define SUBPARTITIONS_SYM 773
#define SUBPARTITION_SYM 774
#define SUBSTRING 775
#define SUM_SYM 776
#define SUPER_SYM 777
#define SUSPEND_SYM 778
#define SWAPS_SYM 779
#define SWITCHES_SYM 780
#define SYSDATE 781
#define TABLES 782
#define TABLESPACE 783
#define TABLE_REF_PRIORITY 784
#define TABLE_STATS_SYM 785
#define TABLE_SYM 786
#define TABLE_CHECKSUM_SYM 787
#define TABLE_NAME_SYM 788
#define TEMPORARY 789
#define TEMPTABLE_SYM 790
#define TERMINATED 791
#define TEXT_STRING 792
#define TEXT_SYM 793
#define THAN_SYM 794
#define THEN_SYM 795
#define TIMESTAMP 796
#define TIMESTAMP_ADD 797
#define TIMESTAMP_DIFF 798
#define TIME_SYM 799
#define TINYBLOB 800
#define TINYINT 801
#define TINYTEXT 802
#define TO_SYM 803
#define TRAILING 804
#define TRANSACTION_SYM 805
#define TRANSACTIONAL_SYM 806
#define TRIGGERS_SYM 807
#define TRIGGER_SYM 808
#define TRIM 809
#define TRUE_SYM 810
#define TRUNCATE_SYM 811
#define TYPES_SYM 812
#define TYPE_SYM 813
#define UDF_RETURNS_SYM 814
#define ULONGLONG_NUM 815
#define UNCOMMITTED_SYM 816
#define UNDEFINED_SYM 817
#define UNDERSCORE_CHARSET 818
#define UNDOFILE_SYM 819
#define UNDO_BUFFER_SIZE_SYM 820
#define UNDO_SYM 821
#define UNICODE_SYM 822
#define UNINSTALL_SYM 823
#define UNION_SYM 824
#define UNIQUE_SYM 825
#define UNKNOWN_SYM 826
#define UNLOCK_SYM 827
#define UNSIGNED 828
#define UNTIL_SYM 829
#define UPDATE_SYM 830
#define UPGRADE_SYM 831
#define USAGE 832
#define USER 833
#define USER_STATS_SYM 834
#define USE_FRM 835
#define USE_SYM 836
#define USING 837
#define UTC_DATE_SYM 838
#define UTC_TIMESTAMP_SYM 839
#define UTC_TIME_SYM 840
#define VALUES 841
#define VALUE_SYM 842
#define VARBINARY 843
#define VARCHAR 844
#define VARIABLES 845
#define VARIANCE_SYM 846
#define VARYING 847
#define VAR_SAMP_SYM 848
#define VIA_SYM 849
#define VIEW_SYM 850
#define VIRTUAL_SYM 851
#define WAIT_SYM 852
#define WARNINGS 853
#define WEEK_SYM 854
#define WHEN_SYM 855
#define WHERE 856
#define WHILE_SYM 857
#define WITH 858
#define WITH_CUBE_SYM 859
#define WITH_ROLLUP_SYM 860
#define WORK_SYM 861
#define WRAPPER_SYM 862
#define WRITE_SYM 863
#define X509_SYM 864
#define XA_SYM 865
#define XML_SYM 866
#define XOR 867
#define YEAR_MONTH_SYM 868
#define YEAR_SYM 869
#define ZEROFILL 870
#define IMPOSSIBLE_ACTION 871




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 732 "/home/buildbot/git/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  LEX_TYPE lex_type;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  enum ha_choice choice;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  DYNCALL_CREATE_DEF *dyncol_def;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;
  bool is_not_empty;



/* Line 214 of yacc.c  */
#line 2113 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 785 "/home/buildbot/git/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2130 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  602
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   56329

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  639
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  930
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2643
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4474

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   871

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   632,     2,     2,     2,   626,   621,     2,
     629,   630,   624,   623,   631,   622,   637,   625,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   638,   635,
     619,   617,   618,     2,   636,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   627,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   633,   620,   634,   628,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   127,   131,   133,   135,   140,   142,   145,
     146,   151,   152,   155,   159,   161,   164,   165,   169,   170,
     176,   178,   182,   186,   190,   194,   198,   202,   206,   210,
     214,   218,   222,   226,   230,   234,   240,   242,   243,   245,
     249,   251,   255,   259,   263,   267,   268,   276,   277,   290,
     291,   304,   305,   318,   319,   326,   327,   331,   336,   341,
     345,   348,   359,   361,   365,   368,   371,   374,   377,   380,
     383,   386,   387,   401,   402,   409,   412,   413,   415,   419,
     421,   422,   425,   426,   429,   430,   432,   436,   441,   442,
     445,   446,   449,   451,   453,   455,   457,   459,   461,   463,
     465,   467,   469,   471,   473,   475,   476,   480,   482,   483,
     486,   487,   490,   493,   496,   499,   502,   506,   510,   512,
     514,   516,   519,   523,   527,   528,   533,   534,   538,   539,
     541,   545,   547,   548,   550,   554,   556,   557,   561,   562,
     564,   568,   570,   575,   576,   578,   580,   582,   583,   587,
     590,   594,   595,   599,   600,   606,   612,   613,   621,   627,
     628,   631,   633,   635,   637,   641,   643,   645,   647,   651,
     652,   654,   656,   658,   660,   663,   665,   669,   671,   673,
     674,   676,   677,   680,   684,   690,   692,   694,   696,   698,
     700,   702,   704,   706,   708,   710,   712,   714,   716,   718,
     720,   724,   726,   730,   731,   734,   736,   738,   740,   742,
     744,   746,   748,   750,   752,   754,   756,   758,   760,   761,
     767,   768,   771,   772,   776,   777,   780,   783,   786,   789,
     790,   797,   800,   801,   804,   806,   808,   812,   813,   814,
     815,   823,   824,   827,   830,   832,   834,   835,   836,   845,
     846,   853,   855,   858,   860,   863,   864,   865,   872,   873,
     874,   881,   882,   885,   886,   892,   893,   895,   896,   902,
     903,   906,   907,   913,   918,   919,   920,   929,   930,   938,
     940,   942,   944,   946,   948,   951,   956,   962,   963,   968,
     973,   978,   982,   986,   989,   992,   993,   996,   998,  1001,
    1005,  1007,  1009,  1011,  1013,  1015,  1018,  1022,  1024,  1026,
    1028,  1030,  1032,  1034,  1036,  1038,  1040,  1042,  1045,  1049,
    1051,  1053,  1055,  1057,  1059,  1061,  1063,  1066,  1070,  1072,
    1074,  1076,  1078,  1080,  1082,  1084,  1086,  1088,  1091,  1095,
    1097,  1099,  1101,  1104,  1107,  1110,  1112,  1114,  1116,  1118,
    1121,  1125,  1129,  1133,  1137,  1141,  1145,  1149,  1153,  1158,
    1159,  1161,  1163,  1165,  1167,  1169,  1172,  1176,  1179,  1184,
    1185,  1192,  1193,  1199,  1200,  1201,  1207,  1208,  1216,  1218,
    1219,  1221,  1222,  1227,  1228,  1229,  1233,  1239,  1246,  1247,
    1252,  1255,  1258,  1261,  1264,  1265,  1267,  1268,  1272,  1273,
    1275,  1277,  1281,  1283,  1288,  1294,  1300,  1301,  1304,  1305,
    1306,  1314,  1315,  1326,  1328,  1332,  1334,  1336,  1337,  1340,
    1341,  1345,  1347,  1351,  1352,  1359,  1361,  1362,  1363,  1369,
    1370,  1375,  1377,  1379,  1381,  1385,  1387,  1391,  1392,  1393,
    1399,  1401,  1405,  1407,  1409,  1410,  1414,  1416,  1420,  1421,
    1426,  1428,  1429,  1431,  1434,  1436,  1440,  1445,  1449,  1453,
    1457,  1461,  1466,  1471,  1475,  1476,  1477,  1484,  1485,  1487,
    1488,  1490,  1492,  1495,  1497,  1499,  1500,  1502,  1504,  1507,
    1509,  1510,  1514,  1515,  1517,  1519,  1522,  1524,  1527,  1531,
    1535,  1539,  1543,  1547,  1551,  1555,  1559,  1563,  1567,  1571,
    1575,  1579,  1583,  1587,  1588,  1595,  1597,  1599,  1603,  1608,
    1613,  1616,  1619,  1622,  1626,  1630,  1634,  1638,  1642,  1646,
    1650,  1655,  1660,  1662,  1664,  1666,  1668,  1670,  1672,  1674,
    1676,  1678,  1680,  1682,  1684,  1686,  1689,  1691,  1693,  1695,
    1697,  1699,  1701,  1705,  1707,  1709,  1712,  1715,  1716,  1725,
    1726,  1736,  1737,  1747,  1748,  1758,  1767,  1770,  1771,  1773,
    1778,  1779,  1781,  1784,  1785,  1789,  1792,  1793,  1803,  1804,
    1807,  1808,  1810,  1812,  1813,  1815,  1818,  1820,  1822,  1825,
    1828,  1833,  1837,  1841,  1845,  1849,  1851,  1854,  1856,  1858,
    1862,  1865,  1869,  1872,  1875,  1877,  1881,  1885,  1888,  1892,
    1894,  1897,  1900,  1903,  1905,  1908,  1910,  1912,  1914,  1917,
    1921,  1924,  1928,  1931,  1934,  1938,  1942,  1946,  1947,  1954,
    1955,  1962,  1965,  1967,  1969,  1971,  1973,  1975,  1977,  1979,
    1981,  1983,  1985,  1987,  1990,  1993,  1995,  1998,  2000,  2003,
    2007,  2010,  2012,  2014,  2016,  2018,  2020,  2022,  2024,  2027,
    2028,  2030,  2032,  2038,  2039,  2041,  2044,  2046,  2048,  2050,
    2052,  2056,  2060,  2064,  2068,  2069,  2071,  2072,  2074,  2075,
    2077,  2080,  2082,  2084,  2087,  2090,  2095,  2097,  2101,  2104,
    2106,  2109,  2112,  2115,  2119,  2123,  2127,  2131,  2134,  2137,
    2139,  2141,  2143,  2146,  2148,  2150,  2152,  2154,  2156,  2157,
    2160,  2162,  2164,  2166,  2168,  2170,  2171,  2174,  2176,  2178,
    2179,  2181,  2183,  2186,  2189,  2191,  2194,  2197,  2198,  2200,
    2202,  2204,  2208,  2210,  2214,  2215,  2217,  2218,  2220,  2226,
    2227,  2231,  2235,  2237,  2238,  2241,  2244,  2247,  2248,  2252,
    2256,  2263,  2270,  2272,  2274,  2277,  2280,  2283,  2285,  2288,
    2291,  2293,  2295,  2296,  2298,  2300,  2302,  2304,  2305,  2307,
    2309,  2311,  2312,  2314,  2317,  2318,  2320,  2321,  2323,  2324,
    2326,  2328,  2331,  2333,  2336,  2338,  2341,  2344,  2347,  2351,
    2354,  2358,  2362,  2366,  2370,  2372,  2374,  2376,  2378,  2382,
    2384,  2386,  2388,  2393,  2396,  2398,  2403,  2404,  2406,  2407,
    2410,  2412,  2416,  2417,  2424,  2425,  2431,  2439,  2440,  2446,
    2447,  2453,  2454,  2460,  2461,  2466,  2467,  2478,  2482,  2487,
    2491,  2495,  2503,  2504,  2508,  2510,  2515,  2516,  2520,  2521,
    2524,  2525,  2527,  2528,  2531,  2534,  2537,  2540,  2542,  2544,
    2546,  2550,  2555,  2556,  2563,  2568,  2569,  2575,  2576,  2583,
    2588,  2592,  2594,  2597,  2599,  2601,  2602,  2608,  2609,  2613,
    2616,  2617,  2623,  2624,  2625,  2632,  2634,  2638,  2640,  2642,
    2646,  2649,  2653,  2656,  2661,  2662,  2669,  2670,  2671,  2679,
    2684,  2689,  2693,  2697,  2700,  2703,  2710,  2716,  2720,  2726,
    2728,  2730,  2732,  2733,  2735,  2736,  2738,  2739,  2742,  2743,
    2745,  2748,  2750,  2752,  2754,  2755,  2757,  2759,  2760,  2763,
    2765,  2766,  2768,  2770,  2772,  2773,  2779,  2783,  2784,  2790,
    2794,  2798,  2799,  2803,  2804,  2807,  2809,  2813,  2814,  2816,
    2818,  2819,  2822,  2824,  2828,  2829,  2835,  2836,  2838,  2840,
    2844,  2845,  2850,  2851,  2856,  2857,  2859,  2861,  2864,  2866,
    2868,  2870,  2871,  2874,  2875,  2881,  2884,  2888,  2889,  2894,
    2895,  2899,  2900,  2902,  2904,  2907,  2909,  2911,  2913,  2915,
    2917,  2920,  2921,  2924,  2925,  2931,  2932,  2934,  2936,  2937,
    2942,  2947,  2951,  2957,  2959,  2963,  2967,  2968,  2975,  2977,
    2979,  2981,  2985,  2988,  2992,  2994,  2996,  2997,  3004,  3006,
    3008,  3010,  3014,  3018,  3023,  3024,  3031,  3032,  3035,  3036,
    3041,  3042,  3045,  3047,  3050,  3055,  3058,  3062,  3065,  3069,
    3070,  3074,  3075,  3076,  3083,  3086,  3088,  3090,  3093,  3096,
    3105,  3110,  3111,  3113,  3116,  3118,  3120,  3122,  3124,  3125,
    3128,  3133,  3137,  3139,  3141,  3145,  3150,  3151,  3152,  3153,
    3156,  3159,  3161,  3163,  3164,  3167,  3171,  3172,  3175,  3179,
    3183,  3187,  3190,  3194,  3199,  3203,  3208,  3212,  3217,  3219,
    3223,  3228,  3232,  3236,  3243,  3245,  3251,  3258,  3264,  3272,
    3279,  3288,  3294,  3301,  3306,  3311,  3317,  3321,  3326,  3328,
    3332,  3336,  3340,  3344,  3348,  3352,  3358,  3364,  3368,  3372,
    3376,  3380,  3384,  3388,  3390,  3392,  3394,  3396,  3398,  3400,
    3402,  3404,  3406,  3408,  3410,  3412,  3414,  3416,  3418,  3420,
    3422,  3423,  3426,  3428,  3431,  3433,  3435,  3437,  3440,  3443,
    3445,  3447,  3450,  3453,  3458,  3460,  3464,  3466,  3468,  3470,
    3472,  3474,  3478,  3480,  3482,  3484,  3486,  3490,  3493,  3496,
    3499,  3502,  3506,  3510,  3516,  3523,  3528,  3533,  3541,  3544,
    3551,  3557,  3564,  3571,  3576,  3581,  3587,  3592,  3599,  3602,
    3607,  3612,  3617,  3628,  3635,  3644,  3651,  3656,  3661,  3668,
    3673,  3678,  3683,  3690,  3695,  3703,  3711,  3719,  3726,  3733,
    3740,  3747,  3751,  3756,  3763,  3772,  3775,  3778,  3787,  3796,
    3803,  3810,  3813,  3820,  3827,  3836,  3845,  3852,  3861,  3868,
    3871,  3880,  3889,  3892,  3895,  3898,  3905,  3912,  3919,  3924,
    3929,  3938,  3943,  3948,  3953,  3958,  3962,  3971,  3976,  3981,
    3988,  3993,  3998,  4003,  4010,  4019,  4026,  4031,  4038,  4040,
    4047,  4052,  4057,  4062,  4067,  4072,  4079,  4084,  4085,  4091,
    4098,  4101,  4105,  4106,  4111,  4112,  4116,  4117,  4119,  4121,
    4125,  4130,  4135,  4141,  4146,  4151,  4156,  4162,  4167,  4168,
    4169,  4177,  4182,  4188,  4193,  4199,  4204,  4209,  4214,  4219,
    4224,  4230,  4231,  4240,  4241,  4245,  4249,  4251,  4256,  4257,
    4259,  4260,  4263,  4264,  4265,  4270,  4275,  4278,  4279,  4283,
    4286,  4290,  4293,  4295,  4297,  4300,  4302,  4305,  4307,  4310,
    4313,  4316,  4317,  4321,  4322,  4324,  4326,  4330,  4332,  4336,
    4338,  4342,  4343,  4345,  4346,  4349,  4354,  4360,  4362,  4364,
    4366,  4368,  4373,  4375,  4379,  4383,  4387,  4388,  4395,  4396,
    4403,  4404,  4413,  4418,  4419,  4428,  4429,  4440,  4447,  4448,
    4457,  4458,  4469,  4476,  4478,  4481,  4484,  4485,  4490,  4494,
    4500,  4503,  4504,  4505,  4513,  4515,  4516,  4517,  4524,  4525,
    4529,  4530,  4531,  4537,  4538,  4540,  4541,  4543,  4544,  4547,
    4551,  4555,  4557,  4559,  4560,  4568,  4569,  4577,  4579,  4582,
    4583,  4584,  4587,  4588,  4591,  4592,  4594,  4596,  4598,  4600,
    4604,  4606,  4610,  4612,  4614,  4616,  4618,  4620,  4622,  4624,
    4626,  4628,  4630,  4632,  4634,  4636,  4638,  4640,  4642,  4644,
    4646,  4648,  4650,  4652,  4654,  4656,  4658,  4660,  4661,  4663,
    4665,  4666,  4669,  4670,  4672,  4673,  4674,  4678,  4679,  4680,
    4684,  4687,  4688,  4689,  4694,  4699,  4702,  4703,  4705,  4707,
    4711,  4715,  4717,  4720,  4721,  4723,  4724,  4729,  4734,  4737,
    4738,  4740,  4742,  4743,  4745,  4746,  4748,  4751,  4757,  4762,
    4764,  4768,  4772,  4774,  4776,  4778,  4780,  4782,  4784,  4785,
    4788,  4792,  4797,  4799,  4802,  4805,  4807,  4809,  4811,  4813,
    4815,  4817,  4819,  4821,  4823,  4825,  4827,  4829,  4831,  4833,
    4835,  4837,  4839,  4841,  4843,  4845,  4847,  4849,  4851,  4853,
    4855,  4857,  4858,  4859,  4866,  4867,  4869,  4873,  4875,  4879,
    4880,  4883,  4887,  4889,  4892,  4894,  4895,  4899,  4900,  4901,
    4909,  4912,  4914,  4915,  4919,  4920,  4928,  4929,  4936,  4941,
    4948,  4953,  4958,  4963,  4964,  4971,  4976,  4981,  4987,  4994,
    4999,  5001,  5005,  5007,  5009,  5013,  5015,  5016,  5019,  5020,
    5022,  5023,  5024,  5033,  5034,  5035,  5042,  5043,  5045,  5047,
    5049,  5051,  5053,  5056,  5058,  5060,  5062,  5066,  5071,  5072,
    5076,  5080,  5082,  5085,  5088,  5089,  5093,  5094,  5100,  5104,
    5106,  5110,  5112,  5116,  5118,  5120,  5121,  5123,  5124,  5129,
    5130,  5132,  5136,  5138,  5140,  5142,  5143,  5144,  5151,  5152,
    5153,  5165,  5169,  5171,  5175,  5179,  5181,  5185,  5186,  5188,
    5189,  5194,  5195,  5202,  5203,  5209,  5210,  5217,  5219,  5223,
    5226,  5231,  5232,  5235,  5236,  5239,  5241,  5243,  5245,  5246,
    5251,  5252,  5254,  5255,  5257,  5259,  5263,  5265,  5267,  5270,
    5273,  5276,  5278,  5280,  5282,  5284,  5285,  5289,  5290,  5294,
    5297,  5302,  5307,  5311,  5316,  5321,  5323,  5327,  5331,  5338,
    5341,  5344,  5345,  5352,  5353,  5360,  5366,  5369,  5371,  5373,
    5375,  5381,  5387,  5390,  5393,  5395,  5400,  5404,  5407,  5411,
    5414,  5417,  5419,  5423,  5428,  5432,  5436,  5439,  5442,  5444,
    5446,  5448,  5450,  5454,  5458,  5462,  5466,  5470,  5474,  5478,
    5482,  5484,  5486,  5488,  5490,  5492,  5493,  5495,  5496,  5499,
    5500,  5502,  5504,  5506,  5507,  5510,  5511,  5514,  5515,  5518,
    5521,  5522,  5527,  5528,  5533,  5535,  5537,  5538,  5540,  5542,
    5543,  5545,  5547,  5548,  5553,  5554,  5555,  5561,  5563,  5564,
    5569,  5573,  5575,  5578,  5581,  5584,  5587,  5590,  5593,  5596,
    5598,  5600,  5602,  5604,  5606,  5608,  5610,  5612,  5614,  5616,
    5618,  5620,  5621,  5623,  5624,  5628,  5629,  5633,  5637,  5639,
    5640,  5644,  5646,  5649,  5650,  5652,  5653,  5657,  5661,  5664,
    5667,  5668,  5674,  5675,  5677,  5679,  5680,  5682,  5684,  5686,
    5689,  5692,  5693,  5694,  5695,  5696,  5718,  5720,  5722,  5723,
    5725,  5726,  5728,  5730,  5731,  5733,  5735,  5736,  5739,  5742,
    5744,  5748,  5753,  5757,  5761,  5762,  5765,  5768,  5770,  5774,
    5778,  5779,  5784,  5785,  5789,  5791,  5793,  5794,  5798,  5801,
    5805,  5807,  5809,  5812,  5813,  5816,  5820,  5822,  5828,  5830,
    5832,  5835,  5838,  5840,  5842,  5844,  5846,  5848,  5850,  5853,
    5856,  5858,  5860,  5862,  5864,  5866,  5868,  5870,  5872,  5875,
    5878,  5881,  5884,  5887,  5889,  5891,  5893,  5895,  5897,  5899,
    5901,  5905,  5911,  5913,  5915,  5917,  5919,  5921,  5925,  5930,
    5936,  5938,  5944,  5948,  5951,  5953,  5957,  5960,  5963,  5968,
    5970,  5972,  5974,  5976,  5978,  5980,  5982,  5984,  5986,  5988,
    5990,  5992,  5994,  5996,  6000,  6003,  6005,  6007,  6009,  6011,
    6013,  6015,  6017,  6019,  6021,  6023,  6025,  6027,  6029,  6031,
    6033,  6035,  6037,  6039,  6041,  6043,  6045,  6047,  6049,  6051,
    6053,  6055,  6057,  6059,  6061,  6063,  6065,  6067,  6069,  6071,
    6073,  6075,  6077,  6079,  6081,  6083,  6085,  6087,  6089,  6091,
    6093,  6095,  6097,  6099,  6101,  6103,  6105,  6107,  6109,  6111,
    6113,  6115,  6117,  6119,  6121,  6123,  6125,  6127,  6129,  6131,
    6133,  6135,  6137,  6139,  6141,  6143,  6145,  6147,  6149,  6151,
    6153,  6155,  6157,  6159,  6161,  6163,  6165,  6167,  6169,  6171,
    6173,  6175,  6177,  6179,  6181,  6183,  6185,  6187,  6189,  6191,
    6193,  6195,  6197,  6199,  6201,  6203,  6205,  6207,  6209,  6211,
    6213,  6215,  6217,  6219,  6221,  6223,  6225,  6227,  6229,  6231,
    6233,  6235,  6237,  6239,  6241,  6243,  6245,  6247,  6249,  6251,
    6253,  6255,  6257,  6259,  6261,  6263,  6265,  6267,  6269,  6271,
    6273,  6275,  6277,  6279,  6281,  6283,  6285,  6287,  6289,  6291,
    6293,  6295,  6297,  6299,  6301,  6303,  6305,  6307,  6309,  6311,
    6313,  6315,  6317,  6319,  6321,  6323,  6325,  6327,  6329,  6331,
    6333,  6335,  6337,  6339,  6341,  6343,  6345,  6347,  6349,  6351,
    6353,  6355,  6357,  6359,  6361,  6363,  6365,  6367,  6369,  6371,
    6373,  6375,  6377,  6379,  6381,  6383,  6385,  6387,  6389,  6391,
    6393,  6395,  6397,  6399,  6401,  6403,  6405,  6407,  6409,  6411,
    6413,  6415,  6417,  6419,  6421,  6423,  6425,  6427,  6429,  6431,
    6433,  6435,  6437,  6439,  6441,  6443,  6445,  6447,  6449,  6451,
    6453,  6455,  6457,  6459,  6461,  6463,  6465,  6467,  6469,  6471,
    6473,  6475,  6477,  6479,  6481,  6483,  6485,  6487,  6489,  6491,
    6493,  6495,  6497,  6499,  6501,  6503,  6505,  6507,  6509,  6511,
    6513,  6515,  6517,  6519,  6521,  6523,  6525,  6527,  6529,  6531,
    6533,  6535,  6537,  6539,  6541,  6543,  6545,  6547,  6549,  6551,
    6553,  6555,  6557,  6559,  6561,  6563,  6565,  6567,  6569,  6571,
    6573,  6575,  6577,  6579,  6581,  6583,  6585,  6587,  6589,  6591,
    6593,  6595,  6597,  6599,  6601,  6603,  6605,  6607,  6609,  6611,
    6613,  6615,  6617,  6619,  6621,  6623,  6625,  6627,  6629,  6631,
    6633,  6635,  6637,  6639,  6641,  6643,  6645,  6647,  6649,  6651,
    6653,  6655,  6657,  6659,  6661,  6663,  6665,  6667,  6669,  6671,
    6673,  6675,  6677,  6679,  6681,  6683,  6685,  6687,  6689,  6691,
    6693,  6695,  6697,  6699,  6701,  6703,  6705,  6707,  6708,  6713,
    6714,  6716,  6718,  6722,  6723,  6726,  6728,  6730,  6732,  6734,
    6735,  6737,  6738,  6740,  6742,  6744,  6745,  6748,  6751,  6754,
    6756,  6759,  6764,  6770,  6775,  6782,  6785,  6789,  6793,  6797,
    6803,  6805,  6809,  6813,  6816,  6819,  6822,  6824,  6826,  6831,
    6836,  6838,  6840,  6842,  6844,  6846,  6847,  6852,  6854,  6856,
    6858,  6862,  6866,  6868,  6870,  6873,  6876,  6879,  6880,  6884,
    6889,  6893,  6894,  6902,  6904,  6907,  6909,  6911,  6913,  6915,
    6917,  6919,  6920,  6926,  6928,  6930,  6932,  6934,  6936,  6940,
    6947,  6954,  6961,  6969,  6975,  6979,  6988,  6997,  7006,  7013,
    7014,  7016,  7018,  7021,  7022,  7024,  7026,  7030,  7031,  7035,
    7036,  7040,  7041,  7045,  7046,  7050,  7052,  7054,  7056,  7058,
    7060,  7062,  7064,  7066,  7068,  7070,  7072,  7075,  7078,  7080,
    7084,  7087,  7090,  7093,  7096,  7099,  7102,  7105,  7108,  7110,
    7112,  7115,  7116,  7118,  7122,  7124,  7127,  7130,  7133,  7135,
    7139,  7143,  7145,  7147,  7151,  7153,  7157,  7159,  7161,  7163,
    7165,  7170,  7176,  7181,  7188,  7190,  7191,  7195,  7199,  7201,
    7203,  7204,  7207,  7210,  7213,  7216,  7217,  7220,  7221,  7225,
    7228,  7230,  7233,  7236,  7239,  7242,  7245,  7246,  7250,  7251,
    7253,  7254,  7258,  7261,  7262,  7264,  7267,  7268,  7270,  7275,
    7280,  7286,  7289,  7293,  7294,  7296,  7297,  7302,  7303,  7305,
    7307,  7308,  7310,  7311,  7314,  7317,  7319,  7320,  7322,  7324,
    7327,  7331,  7334,  7335,  7342,  7346,  7347,  7348,  7349,  7351,
    7354,  7356,  7358,  7360,  7362,  7364,  7366,  7368,  7370,  7372,
    7375,  7378,  7382,  7384,  7386,  7388,  7390,  7392,  7394,  7396,
    7398,  7400,  7402,  7404,  7406,  7408,  7409,  7413,  7415,  7418,
    7420,  7423,  7427,  7431,  7435,  7436,  7440,  7444,  7445,  7453,
    7454,  7458,  7460,  7464,  7465,  7469,  7472,  7477,  7478,  7482,
    7487,  7492,  7493,  7494,  7495,  7512,  7521,  7529,  7530,  7531,
    7532,  7533,  7534,  7550,  7551,  7552,  7553,  7554,  7567,  7572,
    7577,  7581,  7586,  7590,  7593,  7595,  7599,  7605,  7607,  7609,
    7610,  7612,  7614,  7615,  7618,  7619,  7620,  7624,  7625,  7628,
    7634,  7638,  7642,  7646
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     640,     0,    -1,   157,    -1,    -1,   643,   641,   635,   642,
      -1,   643,   157,    -1,    -1,   157,    -1,   644,    -1,  1496,
      -1,  1002,    -1,  1067,    -1,  1069,    -1,   693,    -1,   656,
      -1,  1072,    -1,  1056,    -1,  1502,    -1,   663,    -1,   645,
      -1,  1320,    -1,  1352,    -1,  1272,    -1,  1274,    -1,   649,
      -1,  1358,    -1,  1468,    -1,  1459,    -1,   654,    -1,  1284,
      -1,  1566,    -1,  1568,    -1,  1086,    -1,  1378,    -1,  1384,
      -1,  1451,    -1,  1078,    -1,   928,    -1,   837,    -1,  1093,
      -1,   647,    -1,  1374,    -1,  1505,    -1,  1081,    -1,  1061,
      -1,  1287,    -1,  1368,    -1,   728,    -1,  1466,    -1,  1503,
      -1,  1504,    -1,  1105,    -1,  1434,    -1,   721,    -1,  1338,
      -1,  1045,    -1,  1048,    -1,  1331,    -1,  1567,    -1,  1457,
      -1,  1312,    -1,  1383,    -1,  1558,    -1,   646,   397,  1428,
      -1,   124,    -1,   145,    -1,   397,  1428,   191,   648,    -1,
    1425,    -1,   636,  1430,    -1,    -1,   170,  1428,   650,   651,
      -1,    -1,   582,   652,    -1,   652,   631,   653,    -1,   653,
      -1,   636,  1430,    -1,    -1,   210,   655,  1430,    -1,    -1,
      57,   298,   548,   657,   658,    -1,   659,    -1,   658,   631,
     659,    -1,   285,   617,  1425,    -1,   299,   617,  1425,    -1,
     288,   617,  1425,    -1,   289,   617,  1251,    -1,   284,   617,
    1251,    -1,   296,   617,  1251,    -1,   292,   617,  1425,    -1,
     291,   617,  1425,    -1,   293,   617,  1425,    -1,   294,   617,
    1425,    -1,   295,   617,  1425,    -1,   297,   617,  1251,    -1,
     300,   617,  1413,    -1,   225,   617,   629,   660,   630,    -1,
     662,    -1,    -1,   661,    -1,   660,   631,   661,    -1,  1251,
      -1,   286,   617,  1425,    -1,   287,   617,  1253,    -1,   427,
     617,  1425,    -1,   428,   617,  1251,    -1,    -1,   103,   889,
     531,   892,  1421,   664,   825,    -1,    -1,   103,   980,   228,
    1428,   984,   360,  1421,   665,   629,   997,   630,   985,    -1,
      -1,   103,   981,   228,  1428,   983,   360,  1421,   666,   629,
     997,   630,   986,    -1,    -1,   103,   982,   228,  1428,   983,
     360,  1421,   667,   629,   997,   630,   987,    -1,    -1,   103,
     111,   892,  1428,   668,   886,    -1,    -1,   103,   669,  1524,
      -1,   103,   578,   686,  1484,    -1,   103,   276,   204,   788,
      -1,   103,   528,   785,    -1,   103,   670,    -1,   470,  1430,
     188,   114,   607,  1430,   366,   629,   671,   630,    -1,   672,
      -1,   671,   631,   672,    -1,   578,  1425,    -1,   214,  1425,
      -1,   111,  1425,    -1,   376,  1425,    -1,   387,  1425,    -1,
     486,  1425,    -1,   394,  1251,    -1,    -1,  1122,   167,   892,
     687,   674,   360,   459,   675,   680,   677,   682,   144,   683,
      -1,    -1,   168,  1127,  1221,   676,   678,   679,    -1,    23,
    1127,    -1,    -1,   153,    -1,   138,   360,   482,    -1,   138,
      -1,    -1,   506,  1127,    -1,    -1,   156,  1127,    -1,    -1,
     681,    -1,   360,    86,   398,    -1,   360,    86,   349,   398,
      -1,    -1,    82,  1425,    -1,    -1,   684,   685,    -1,   734,
      -1,   736,    -1,   732,    -1,   753,    -1,   771,    -1,   773,
      -1,   768,    -1,   738,    -1,   740,    -1,   741,    -1,   742,
      -1,   743,    -1,   745,    -1,    -1,  1428,   637,  1428,    -1,
    1428,    -1,    -1,   688,   690,    -1,    -1,   689,   691,    -1,
      82,  1425,    -1,   254,   502,    -1,   351,   502,    -1,    96,
     502,    -1,   413,   502,   114,    -1,   325,   502,   114,    -1,
     692,    -1,   690,    -1,   136,    -1,  1133,   136,    -1,   502,
     463,   129,    -1,   502,   463,   241,    -1,    -1,    50,   687,
     694,   695,    -1,    -1,   629,   696,   630,    -1,    -1,   697,
      -1,   697,   631,  1127,    -1,  1127,    -1,    -1,   699,    -1,
     699,   631,   701,    -1,   701,    -1,    -1,  1428,   700,   951,
      -1,    -1,   703,    -1,   703,   631,   704,    -1,   704,    -1,
     705,   700,  1428,   951,    -1,    -1,   242,    -1,   375,    -1,
     233,    -1,    -1,   706,   731,   635,    -1,   731,   635,    -1,
     707,   731,   635,    -1,    -1,   708,   709,   635,    -1,    -1,
     127,   729,   710,   951,   730,    -1,   127,  1428,    89,   189,
     717,    -1,    -1,   127,   714,   206,   189,   711,   715,   731,
      -1,   127,  1428,   108,   189,   712,    -1,    -1,   713,  1105,
      -1,   172,    -1,    98,    -1,   716,    -1,   715,   631,   716,
      -1,   720,    -1,  1251,    -1,   718,    -1,   494,   719,  1426,
      -1,    -1,   587,    -1,   717,    -1,  1428,    -1,   495,    -1,
    1133,   190,    -1,   493,    -1,   479,   722,   724,    -1,  1428,
      -1,   718,    -1,    -1,   722,    -1,    -1,   472,   725,    -1,
     727,   617,   726,    -1,   725,   631,   727,   617,   726,    -1,
    1412,    -1,  1158,    -1,  1417,    -1,    65,    -1,   515,    -1,
      93,    -1,    95,    -1,    94,    -1,    55,    -1,   460,    -1,
     533,    -1,    81,    -1,   109,    -1,   316,    -1,   334,    -1,
     442,   723,   724,    -1,  1428,    -1,   729,   631,  1428,    -1,
      -1,   128,  1127,    -1,   734,    -1,   736,    -1,   732,    -1,
     753,    -1,   771,    -1,   773,    -1,   768,    -1,   738,    -1,
     740,    -1,   741,    -1,   742,    -1,   743,    -1,   745,    -1,
      -1,   223,   733,   748,   155,   223,    -1,    -1,   735,   644,
      -1,    -1,   448,   737,  1127,    -1,    -1,   739,   777,    -1,
     260,  1429,    -1,   248,  1429,    -1,   364,  1428,    -1,    -1,
     180,   746,  1428,   239,   744,   747,    -1,    68,  1428,    -1,
      -1,   345,   191,    -1,   191,    -1,  1428,    -1,   747,   631,
    1428,    -1,    -1,    -1,    -1,   749,  1127,   540,   750,   707,
     751,   752,    -1,    -1,   152,   748,    -1,   151,   707,    -1,
     754,    -1,   757,    -1,    -1,    -1,    53,   755,  1127,   756,
     759,   767,   155,    53,    -1,    -1,    53,   758,   760,   767,
     155,    53,    -1,   761,    -1,   759,   761,    -1,   764,    -1,
     760,   764,    -1,    -1,    -1,   600,   762,  1127,   763,   540,
     707,    -1,    -1,    -1,   600,   765,  1127,   766,   540,   707,
      -1,    -1,   151,   707,    -1,    -1,  1429,   638,   769,   777,
     770,    -1,    -1,  1429,    -1,    -1,  1429,   638,   772,   775,
     770,    -1,    -1,   774,   775,    -1,    -1,    31,   776,   708,
     706,   155,    -1,   282,   707,   155,   282,    -1,    -1,    -1,
     602,   778,  1127,   144,   779,   707,   155,   602,    -1,    -1,
     437,   707,   574,   780,  1127,   155,   437,    -1,    30,    -1,
       8,    -1,   235,    -1,   575,    -1,   132,    -1,   810,   812,
      -1,   810,    57,   807,   791,    -1,   810,     6,   807,   786,
     795,    -1,    -1,   581,   276,   204,  1428,    -1,   810,     6,
     807,   798,    -1,   810,   145,   807,   798,    -1,   811,   790,
     801,    -1,   811,   790,   804,    -1,     6,   808,    -1,     6,
     809,    -1,    -1,   792,   793,    -1,   794,    -1,   793,   794,
      -1,   793,   631,   794,    -1,   813,    -1,   814,    -1,   815,
      -1,   796,    -1,   797,    -1,   796,   797,    -1,   796,   631,
     797,    -1,   813,    -1,   814,    -1,   815,    -1,   816,    -1,
     819,    -1,   821,    -1,   823,    -1,   820,    -1,   799,    -1,
     800,    -1,   799,   800,    -1,   799,   631,   800,    -1,   813,
      -1,   814,    -1,   815,    -1,   821,    -1,   823,    -1,   802,
      -1,   803,    -1,   802,   803,    -1,   802,   631,   803,    -1,
     813,    -1,   817,    -1,   818,    -1,   819,    -1,   821,    -1,
     823,    -1,   820,    -1,   805,    -1,   806,    -1,   805,   806,
      -1,   805,   631,   806,    -1,   813,    -1,   821,    -1,   823,
      -1,   113,  1425,    -1,   564,  1425,    -1,   420,  1425,    -1,
    1428,    -1,  1428,    -1,   414,    -1,   416,    -1,   349,     4,
      -1,   231,  1304,   824,    -1,    25,  1304,   824,    -1,   305,
    1304,   824,    -1,   175,  1304,   824,    -1,   565,  1304,   824,
      -1,   421,  1304,   824,    -1,   346,  1304,  1252,    -1,    82,
    1304,  1425,    -1,  1345,   159,  1304,   900,    -1,    -1,   823,
      -1,   597,    -1,   352,    -1,  1254,    -1,  1424,    -1,   629,
     826,    -1,   893,   832,   829,    -1,   265,  1421,    -1,   629,
     265,  1421,   630,    -1,    -1,   906,   630,   827,   893,   832,
     829,    -1,    -1,   832,   882,   630,   828,  1509,    -1,    -1,
      -1,  1392,   885,   882,   830,  1506,    -1,    -1,  1392,   885,
     629,   882,   630,   831,  1509,    -1,   833,    -1,    -1,   834,
      -1,    -1,   386,   836,   835,   839,    -1,    -1,    -1,   386,
     838,   839,    -1,    47,   840,   850,   851,   858,    -1,   842,
     252,   843,   629,   844,   630,    -1,    -1,   842,   208,   841,
     848,    -1,   412,   848,    -1,   412,   847,    -1,   270,   848,
      -1,   270,   847,    -1,    -1,   267,    -1,    -1,    11,   617,
    1252,    -1,    -1,   845,    -1,   846,    -1,   845,   631,   846,
      -1,  1428,    -1,    73,   629,   844,   630,    -1,   629,  1122,
     856,  1123,   630,    -1,   629,  1122,   856,  1123,   630,    -1,
      -1,   385,  1252,    -1,    -1,    -1,   519,    47,   842,   208,
     849,   852,   857,    -1,    -1,   519,    47,   842,   252,   843,
     629,   854,   630,   853,   857,    -1,   855,    -1,   854,   631,
     855,    -1,  1428,    -1,  1130,    -1,    -1,   518,  1252,    -1,
      -1,   629,   859,   630,    -1,   860,    -1,   859,   631,   860,
      -1,    -1,   386,   861,   862,   863,   879,   874,    -1,  1428,
      -1,    -1,    -1,   586,   262,   539,   864,   866,    -1,    -1,
     586,   242,   865,   867,    -1,   309,    -1,   869,    -1,   869,
      -1,   629,   868,   630,    -1,   869,    -1,   868,   631,   869,
      -1,    -1,    -1,   629,   870,   872,   871,   630,    -1,   873,
      -1,   872,   631,   873,    -1,   309,    -1,  1130,    -1,    -1,
     629,   875,   630,    -1,   876,    -1,   875,   631,   876,    -1,
      -1,   519,   877,   878,   879,    -1,  1430,    -1,    -1,   880,
      -1,   880,   881,    -1,   881,    -1,   528,  1304,  1430,    -1,
    1345,   159,  1304,   900,    -1,    90,  1304,  1425,    -1,   346,
    1304,  1252,    -1,   304,  1304,  1254,    -1,   322,  1304,  1254,
      -1,   114,   137,  1304,  1425,    -1,   228,   137,  1304,  1425,
      -1,    82,  1304,  1425,    -1,    -1,    -1,   464,   883,  1116,
    1120,   884,   904,    -1,    -1,    19,    -1,    -1,   887,    -1,
     888,    -1,   887,   888,    -1,   899,    -1,   898,    -1,    -1,
     890,    -1,   891,    -1,   891,   890,    -1,   534,    -1,    -1,
     223,  1133,   171,    -1,    -1,   895,    -1,   896,    -1,   896,
     894,    -1,   896,    -1,   896,   895,    -1,   896,   631,   895,
      -1,   159,  1304,   900,    -1,   304,  1304,  1253,    -1,   322,
    1304,  1253,    -1,    27,  1304,  1251,    -1,   387,  1304,  1425,
      -1,    82,  1304,  1425,    -1,    26,  1304,  1253,    -1,   377,
    1304,  1251,    -1,   377,  1304,   128,    -1,    62,  1304,  1251,
      -1,   532,  1304,  1251,    -1,   379,  1304,  1257,    -1,   131,
    1304,  1251,    -1,   455,  1304,   902,    -1,    -1,   569,  1304,
     897,   629,  1366,   630,    -1,   898,    -1,   899,    -1,   236,
    1304,   903,    -1,   114,   137,  1304,  1425,    -1,   228,   137,
    1304,  1425,    -1,   528,  1428,    -1,   512,   140,    -1,   512,
     314,    -1,    90,  1304,  1425,    -1,   251,  1304,  1251,    -1,
     551,  1304,  1257,    -1,  1424,  1303,  1425,    -1,  1424,  1303,
    1428,    -1,  1424,  1303,  1254,    -1,  1424,  1303,   128,    -1,
     963,   954,  1304,   956,    -1,   963,    71,  1304,   962,    -1,
    1430,    -1,  1430,    -1,   128,    -1,   183,    -1,   149,    -1,
      87,    -1,   422,    -1,    85,    -1,   378,    -1,   351,    -1,
     182,    -1,   255,    -1,  1244,    -1,  1115,  1119,    -1,   514,
      -1,   417,    -1,   126,    -1,   240,    -1,   907,    -1,   908,
      -1,   907,   631,   908,    -1,   909,    -1,   910,    -1,   919,
     915,    -1,   919,   969,    -1,    -1,   975,   999,   984,   629,
     997,   630,   911,   985,    -1,    -1,   981,   978,   999,   983,
     629,   997,   630,   912,   986,    -1,    -1,   982,   978,   999,
     983,   629,   997,   630,   913,   987,    -1,    -1,   917,   976,
     999,   984,   629,   997,   630,   914,   985,    -1,   917,   188,
     252,   999,   629,   997,   630,   969,    -1,   917,   916,    -1,
      -1,   916,    -1,    63,   629,  1127,   630,    -1,    -1,   918,
      -1,    92,   999,    -1,    -1,  1420,   920,   921,    -1,   930,
     948,    -1,    -1,   930,   923,    19,   922,   629,   929,   630,
     924,   925,    -1,    -1,   197,    14,    -1,    -1,   596,    -1,
     388,    -1,    -1,   926,    -1,   926,   927,    -1,   927,    -1,
     570,    -1,   570,   252,    -1,    82,  1425,    -1,   382,   629,
     929,   630,    -1,  1122,  1127,  1123,    -1,   938,   946,   942,
      -1,   939,   947,   942,    -1,   185,   940,   942,    -1,    39,
      -1,    39,   945,    -1,    44,    -1,    43,    -1,   934,   945,
     966,    -1,   934,   966,    -1,   935,   945,   967,    -1,   935,
     967,    -1,    34,   945,    -1,    34,    -1,   936,   945,   966,
      -1,   937,   945,   967,    -1,   588,   945,    -1,   614,   946,
     942,    -1,   118,    -1,   544,   946,    -1,   541,   946,    -1,
     115,   946,    -1,   545,    -1,    41,   946,    -1,   933,    -1,
     310,    -1,   278,    -1,   281,   588,    -1,   281,   936,   966,
      -1,   547,   966,    -1,   538,   946,   966,    -1,   312,   966,
      -1,   279,   966,    -1,   126,   940,   942,    -1,   356,   940,
     942,    -1,   183,   940,   942,    -1,    -1,   160,   931,   629,
    1001,   630,   966,    -1,    -1,   472,   932,   629,  1001,   630,
     966,    -1,   281,   966,    -1,   468,    -1,   199,    -1,   198,
      -1,   392,    -1,   330,    -1,   269,    -1,   329,    -1,   393,
      -1,   331,    -1,    60,    -1,   340,    -1,   337,    60,    -1,
     934,   592,    -1,   589,    -1,   337,   589,    -1,   357,    -1,
     340,   589,    -1,   337,    60,   592,    -1,   340,   592,    -1,
     240,    -1,   546,    -1,   484,    -1,   311,    -1,    33,    -1,
     417,    -1,   143,    -1,   143,   396,    -1,    -1,   945,    -1,
     941,    -1,   629,   355,   631,   355,   630,    -1,    -1,   943,
      -1,   943,   944,    -1,   944,    -1,   480,    -1,   573,    -1,
     615,    -1,   629,   280,   630,    -1,   629,   560,   630,    -1,
     629,   125,   630,    -1,   629,   355,   630,    -1,    -1,   945,
      -1,    -1,   941,    -1,    -1,   949,    -1,   949,   950,    -1,
     950,    -1,   354,    -1,  1133,   354,    -1,   128,   952,    -1,
     360,   575,   350,  1126,    -1,    26,    -1,   468,   128,   587,
      -1,   968,   252,    -1,   570,    -1,   570,   252,    -1,    82,
    1425,    -1,    71,   960,    -1,  1424,  1303,  1425,    -1,  1424,
    1303,  1428,    -1,  1424,  1303,  1254,    -1,  1424,  1303,   128,
      -1,   930,   961,    -1,   350,  1126,    -1,  1411,    -1,   211,
      -1,   212,    -1,    60,   472,    -1,    59,    -1,  1430,    -1,
      34,    -1,   955,    -1,   128,    -1,    -1,   954,   956,    -1,
    1430,    -1,    34,    -1,   958,    -1,   128,    -1,  1430,    -1,
      -1,    71,   962,    -1,   960,    -1,   128,    -1,    -1,   128,
      -1,    21,    -1,    34,    21,    -1,    21,    34,    -1,   567,
      -1,   567,    34,    -1,    34,   567,    -1,    -1,   964,    -1,
     965,    -1,    48,    -1,   954,   955,   967,    -1,    34,    -1,
      34,   954,   955,    -1,    -1,    34,    -1,    -1,   400,    -1,
     423,  1421,   970,   972,   973,    -1,    -1,   629,   971,   630,
      -1,   971,   631,  1428,    -1,  1428,    -1,    -1,   301,   192,
      -1,   301,   383,    -1,   301,   481,    -1,    -1,   360,   575,
     974,    -1,   360,   132,   974,    -1,   360,   575,   974,   360,
     132,   974,    -1,   360,   132,   974,   360,   575,   974,    -1,
     445,    -1,    51,    -1,   472,   354,    -1,   351,     5,    -1,
     472,   128,    -1,   977,    -1,   400,   252,    -1,   570,   978,
      -1,   252,    -1,   228,    -1,    -1,   977,    -1,   250,    -1,
     228,    -1,   227,    -1,    -1,   570,    -1,   193,    -1,   491,
      -1,    -1,   983,    -1,   983,   991,    -1,    -1,   988,    -1,
      -1,   990,    -1,    -1,   989,    -1,   993,    -1,   988,   993,
      -1,   994,    -1,   989,   994,    -1,   995,    -1,   990,   995,
      -1,   582,   996,    -1,   558,   996,    -1,   251,  1304,  1251,
      -1,    82,  1425,    -1,  1424,  1303,  1425,    -1,  1424,  1303,
    1428,    -1,  1424,  1303,  1254,    -1,  1424,  1303,   128,    -1,
     992,    -1,   991,    -1,   992,    -1,   992,    -1,   603,   381,
    1424,    -1,    46,    -1,   457,    -1,   208,    -1,   997,   631,
     998,  1242,    -1,   998,  1242,    -1,  1428,    -1,  1428,   629,
     355,   630,    -1,    -1,  1420,    -1,    -1,   637,  1428,    -1,
    1409,    -1,  1001,   631,  1409,    -1,    -1,    13,  1037,   531,
    1421,  1003,  1014,    -1,    -1,    13,   111,  1013,  1004,   887,
      -1,    13,   111,  1428,   576,   114,   137,   336,    -1,    -1,
      13,   402,   687,  1005,   688,    -1,    -1,    13,   194,   687,
    1006,   688,    -1,    -1,    13,  1532,  1527,  1007,  1534,    -1,
      -1,    13,  1527,  1008,  1534,    -1,    -1,    13,  1527,   167,
     687,  1009,  1010,  1011,   677,   682,  1012,    -1,    13,   528,
     787,    -1,    13,   276,   204,   789,    -1,    13,   528,   784,
      -1,    13,   528,   783,    -1,    13,   470,  1430,   366,   629,
     671,   630,    -1,    -1,   360,   459,   675,    -1,   681,    -1,
     360,   459,   675,   681,    -1,    -1,   433,   548,   687,    -1,
      -1,   144,   683,    -1,    -1,  1428,    -1,    -1,   139,   528,
      -1,   226,   528,    -1,  1029,   833,    -1,  1029,  1018,    -1,
    1018,    -1,   834,    -1,  1020,    -1,   145,   386,  1027,    -1,
     418,   386,  1080,  1019,    -1,    -1,   365,   386,  1080,  1019,
    1015,  1080,    -1,    15,   386,  1080,  1019,    -1,    -1,    63,
     386,  1019,  1016,  1074,    -1,    -1,   435,   386,  1080,  1019,
    1017,  1063,    -1,    69,   386,  1080,  1252,    -1,   556,   386,
    1019,    -1,  1023,    -1,   432,   384,    -1,    12,    -1,  1027,
      -1,    -1,     6,   386,  1080,  1021,  1022,    -1,    -1,   629,
     859,   630,    -1,   385,  1252,    -1,    -1,   434,   386,  1080,
    1024,  1025,    -1,    -1,    -1,  1027,  1026,   239,   629,   859,
     630,    -1,  1028,    -1,  1027,   631,  1028,    -1,  1428,    -1,
    1031,    -1,  1029,   631,  1031,    -1,     6,  1035,    -1,  1030,
     909,  1043,    -1,     6,   910,    -1,  1030,   629,   906,   630,
      -1,    -1,    57,  1035,  1420,  1032,   919,  1043,    -1,    -1,
      -1,   326,  1035,  1420,  1033,   921,  1034,  1043,    -1,   145,
    1035,  1420,  1042,    -1,   145,   188,   252,   999,    -1,   145,
     400,   252,    -1,   145,   977,  1420,    -1,   138,   250,    -1,
     153,   250,    -1,    13,  1035,  1420,   472,   128,  1411,    -1,
      13,  1035,  1420,   145,   128,    -1,   433,  1044,  1421,    -1,
     100,   548,   954,   956,   961,    -1,   894,    -1,   187,    -1,
    1235,    -1,    -1,    80,    -1,    -1,   224,    -1,    -1,  1038,
    1039,    -1,    -1,  1040,    -1,  1040,  1041,    -1,  1041,    -1,
     224,    -1,   363,    -1,    -1,   445,    -1,    51,    -1,    -1,
       8,  1428,    -1,   182,    -1,    -1,   548,    -1,   617,    -1,
      19,    -1,    -1,   507,   482,  1050,  1046,  1054,    -1,   511,
     482,  1050,    -1,    -1,   482,   507,  1050,  1047,  1054,    -1,
     482,   511,  1050,    -1,   507,   550,  1049,    -1,    -1,   603,
      91,   485,    -1,    -1,  1051,  1052,    -1,  1053,    -1,  1052,
     631,  1053,    -1,    -1,   503,    -1,   429,    -1,    -1,   574,
    1055,    -1,   662,    -1,  1055,   631,   662,    -1,    -1,    62,
    1453,  1057,  1278,  1058,    -1,    -1,   411,    -1,   174,    -1,
    1453,  1278,  1063,    -1,    -1,   595,  1060,  1278,  1066,    -1,
      -1,   435,  1080,  1062,  1059,    -1,    -1,  1064,    -1,  1065,
      -1,  1065,  1064,    -1,   411,    -1,   174,    -1,   580,    -1,
      -1,   191,   333,    -1,    -1,    15,  1080,  1453,  1068,  1278,
      -1,    35,  1425,    -1,  1453,  1278,  1074,    -1,    -1,   595,
    1071,  1278,  1077,    -1,    -1,    63,  1073,  1070,    -1,    -1,
    1075,    -1,  1076,    -1,  1076,  1075,    -1,   411,    -1,   178,
      -1,   313,    -1,   174,    -1,    58,    -1,   189,   576,    -1,
      -1,   189,   576,    -1,    -1,   365,  1080,  1453,  1079,  1278,
      -1,    -1,   353,    -1,   272,    -1,    -1,   433,  1453,  1082,
    1084,    -1,   433,   578,   686,  1083,    -1,  1431,   548,  1431,
      -1,  1083,   631,  1431,   548,  1431,    -1,  1085,    -1,  1084,
     631,  1085,    -1,  1421,   548,  1421,    -1,    -1,    49,   228,
    1087,  1088,   242,  1092,    -1,  1089,    -1,  1091,    -1,  1090,
      -1,  1089,   631,  1090,    -1,  1421,  1101,    -1,  1421,  1099,
    1101,    -1,  1428,    -1,   128,    -1,    -1,   271,   228,   239,
      49,  1094,  1095,    -1,  1098,    -1,  1096,    -1,  1097,    -1,
    1096,   631,  1097,    -1,  1421,  1101,  1104,    -1,  1421,  1099,
    1101,  1104,    -1,    -1,   386,   836,  1100,   629,  1019,   630,
      -1,    -1,  1102,  1103,    -1,    -1,   977,   629,  1217,   630,
      -1,    -1,   224,   259,    -1,  1106,    -1,   464,  1109,    -1,
     629,  1107,   630,  1509,    -1,   464,  1111,    -1,   629,  1107,
     630,    -1,   464,  1196,    -1,   629,  1108,   630,    -1,    -1,
    1111,  1110,  1506,    -1,    -1,    -1,  1112,  1116,  1120,  1113,
    1114,  1119,    -1,  1238,  1244,    -1,  1267,    -1,  1115,    -1,
    1267,  1115,    -1,  1115,  1267,    -1,   191,  1178,  1227,  1232,
    1229,  1238,  1244,  1258,    -1,   191,   146,  1227,  1244,    -1,
      -1,  1117,    -1,  1117,  1118,    -1,  1118,    -1,  1523,    -1,
     500,    -1,   498,    -1,    -1,   189,   575,    -1,   275,   242,
     474,   324,    -1,  1120,   631,  1121,    -1,  1121,    -1,   624,
      -1,  1122,  1415,  1123,    -1,  1122,  1127,  1123,  1124,    -1,
      -1,    -1,    -1,    19,  1428,    -1,    19,  1425,    -1,  1428,
      -1,  1425,    -1,    -1,   629,   630,    -1,   629,  1252,   630,
      -1,    -1,   629,   630,    -1,  1127,  1131,  1127,    -1,  1127,
     612,  1127,    -1,  1127,  1132,  1127,    -1,   349,  1127,    -1,
    1128,   245,   555,    -1,  1128,   245,  1133,   555,    -1,  1128,
     245,   177,    -1,  1128,   245,  1133,   177,    -1,  1128,   245,
     571,    -1,  1128,   245,  1133,   571,    -1,  1128,    -1,  1128,
     245,   354,    -1,  1128,   245,  1133,   354,    -1,  1128,   161,
    1129,    -1,  1128,  1135,  1129,    -1,  1128,  1135,  1136,   629,
    1518,   630,    -1,  1129,    -1,  1130,   242,   629,  1518,   630,
      -1,  1130,  1133,   242,   629,  1518,   630,    -1,  1130,   242,
     629,  1127,   630,    -1,  1130,   242,   629,  1127,   631,  1171,
     630,    -1,  1130,  1133,   242,   629,  1127,   630,    -1,  1130,
    1133,   242,   629,  1127,   631,  1171,   630,    -1,  1130,    32,
    1130,    17,  1129,    -1,  1130,  1133,    32,  1130,    17,  1129,
      -1,  1130,   489,   265,  1130,    -1,  1130,   265,  1141,  1231,
      -1,  1130,  1133,   265,  1141,  1231,    -1,  1130,   424,  1130,
      -1,  1130,  1133,   424,  1130,    -1,  1130,    -1,  1130,   620,
    1130,    -1,  1130,   621,  1130,    -1,  1130,   475,  1130,    -1,
    1130,   476,  1130,    -1,  1130,   623,  1130,    -1,  1130,   622,
    1130,    -1,  1130,   623,   238,  1127,  1221,    -1,  1130,   622,
     238,  1127,  1221,    -1,  1130,   624,  1130,    -1,  1130,   625,
    1130,    -1,  1130,   626,  1130,    -1,  1130,   142,  1130,    -1,
    1130,   327,  1130,    -1,  1130,   627,  1130,    -1,  1141,    -1,
     372,    -1,   369,    -1,    17,    -1,    16,    -1,   349,    -1,
     348,    -1,   632,    -1,   348,    -1,   617,    -1,   195,    -1,
     618,    -1,   257,    -1,   619,    -1,   342,    -1,    12,    -1,
      18,    -1,    -1,    19,  1138,    -1,   240,    -1,   573,   240,
      -1,   143,    -1,   417,    -1,   185,    -1,   126,   940,    -1,
     934,   966,    -1,   935,    -1,   118,    -1,   544,   946,    -1,
     115,   946,    -1,  1127,   631,  1127,  1137,    -1,  1139,    -1,
    1140,   631,  1139,    -1,  1417,    -1,  1142,    -1,  1143,    -1,
    1146,    -1,  1144,    -1,  1141,    71,  1430,    -1,  1412,    -1,
    1410,    -1,  1158,    -1,  1154,    -1,  1141,   371,  1141,    -1,
     623,  1141,    -1,   622,  1141,    -1,   628,  1141,    -1,  1134,
    1141,    -1,   629,  1518,   630,    -1,   629,  1127,   630,    -1,
     629,  1127,   631,  1171,   630,    -1,   456,   629,  1127,   631,
    1171,   630,    -1,   171,   629,  1518,   630,    -1,   633,  1428,
    1127,   634,    -1,   301,  1172,     9,   629,  1130,  1148,   630,
      -1,    34,  1141,    -1,    54,   629,  1127,    19,  1168,   630,
      -1,    53,  1174,  1176,  1175,   155,    -1,   100,   629,  1127,
     631,  1168,   630,    -1,   100,   629,  1127,   582,   955,   630,
      -1,   128,   629,  1417,   630,    -1,   586,   629,  1418,   630,
      -1,   238,  1127,  1221,   623,  1127,    -1,    60,   629,  1171,
     630,    -1,    60,   629,  1171,   582,   955,   630,    -1,   107,
    1126,    -1,   118,   629,  1127,   630,    -1,   123,   629,  1127,
     630,    -1,   219,   629,  1127,   630,    -1,   235,   629,  1127,
     631,  1127,   631,  1127,   631,  1127,   630,    -1,   238,   629,
    1127,   631,  1127,   630,    -1,   238,   629,  1127,   631,  1127,
     631,  1171,   630,    -1,   261,   629,  1127,   631,  1127,   630,
      -1,   321,   629,  1127,   630,    -1,   328,   629,  1127,   630,
      -1,   450,   629,  1127,   631,  1127,   630,    -1,   462,   629,
    1127,   630,    -1,   544,   629,  1127,   630,    -1,   541,   629,
    1127,   630,    -1,   541,   629,  1127,   631,  1127,   630,    -1,
     554,   629,  1127,   630,    -1,   554,   629,   258,  1127,   191,
    1127,   630,    -1,   554,   629,   549,  1127,   191,  1127,   630,
      -1,   554,   629,    45,  1127,   191,  1127,   630,    -1,   554,
     629,   258,   191,  1127,   630,    -1,   554,   629,   549,   191,
    1127,   630,    -1,   554,   629,    45,   191,  1127,   630,    -1,
     554,   629,  1127,   191,  1127,   630,    -1,   578,   629,   630,
      -1,   614,   629,  1127,   630,    -1,     7,   629,  1127,   631,
    1127,   630,    -1,     7,   629,  1127,   631,   238,  1127,  1221,
     630,    -1,   106,  1126,    -1,   110,  1125,    -1,   116,   629,
    1127,   631,   238,  1127,  1221,   630,    -1,   117,   629,  1127,
     631,   238,  1127,  1221,   630,    -1,   176,   629,  1221,   191,
    1127,   630,    -1,   200,   629,  1223,   631,  1127,   630,    -1,
     350,  1125,    -1,   395,   629,  1130,   242,  1127,   630,    -1,
     516,   629,  1127,   631,  1127,   630,    -1,   516,   629,  1127,
     631,   238,  1127,  1221,   630,    -1,   520,   629,  1127,   631,
    1127,   631,  1127,   630,    -1,   520,   629,  1127,   631,  1127,
     630,    -1,   520,   629,  1127,   191,  1127,   189,  1127,   630,
      -1,   520,   629,  1127,   191,  1127,   630,    -1,   526,  1125,
      -1,   542,   629,  1222,   631,  1127,   631,  1127,   630,    -1,
     543,   629,  1222,   631,  1127,   631,  1127,   630,    -1,   583,
    1126,    -1,   585,  1125,    -1,   584,  1125,    -1,    74,   629,
    1127,   631,  1140,   630,    -1,    76,   629,  1127,   631,  1171,
     630,    -1,    77,   629,  1127,   631,  1127,   630,    -1,    79,
     629,  1127,   630,    -1,    75,   629,  1140,   630,    -1,    78,
     629,  1127,   631,  1127,    19,  1168,   630,    -1,    21,   629,
    1127,   630,    -1,    59,   629,  1127,   630,    -1,    69,   629,
    1171,   630,    -1,    72,   629,  1127,   630,    -1,   111,   629,
     630,    -1,   223,   629,  1127,   631,  1127,   631,  1127,   630,
      -1,   256,   629,  1171,   630,    -1,   317,   629,  1127,   630,
      -1,   327,   629,  1127,   631,  1127,   630,    -1,   359,   629,
    1127,   630,    -1,   387,   629,  1127,   630,    -1,   409,   629,
    1127,   630,    -1,   437,   629,  1127,   631,  1127,   630,    -1,
     438,   629,  1127,   631,  1127,   631,  1127,   630,    -1,   556,
     629,  1127,   631,  1127,   630,    -1,   599,   629,  1127,   630,
      -1,   599,   629,  1127,   631,  1127,   630,    -1,  1145,    -1,
      96,   629,  1127,   631,  1127,   630,    -1,   198,   629,  1171,
     630,    -1,   269,   629,  1171,   630,    -1,   329,   629,  1171,
     630,    -1,   330,   629,  1171,   630,    -1,   331,   629,  1171,
     630,    -1,   392,   629,  1127,   631,  1127,   630,    -1,   393,
     629,  1171,   630,    -1,    -1,  1424,   629,  1147,  1151,   630,
      -1,  1428,   637,  1428,   629,  1170,   630,    -1,  1149,  1150,
      -1,   242,    43,   324,    -1,    -1,   242,   338,   254,   324,
      -1,    -1,   603,   410,   173,    -1,    -1,  1152,    -1,  1153,
      -1,  1152,   631,  1153,    -1,  1122,  1127,  1123,  1124,    -1,
      28,   629,  1166,   630,    -1,    28,   629,   141,  1166,   630,
      -1,    37,   629,  1166,   630,    -1,    38,   629,  1166,   630,
      -1,    40,   629,  1166,   630,    -1,   101,   629,  1226,   624,
     630,    -1,   101,   629,  1166,   630,    -1,    -1,    -1,   101,
     629,   141,  1155,  1171,  1156,   630,    -1,   323,   629,  1166,
     630,    -1,   323,   629,   141,  1166,   630,    -1,   306,   629,
    1166,   630,    -1,   306,   629,   141,  1166,   630,    -1,   510,
     629,  1166,   630,    -1,   591,   629,  1166,   630,    -1,   509,
     629,  1166,   630,    -1,   593,   629,  1166,   630,    -1,   521,
     629,  1166,   630,    -1,   521,   629,   141,  1166,   630,    -1,
      -1,   205,   629,  1161,  1157,  1171,  1163,  1162,   630,    -1,
      -1,   636,  1159,  1160,    -1,  1430,   473,  1127,    -1,  1430,
      -1,   636,  1443,  1430,  1000,    -1,    -1,   141,    -1,    -1,
     466,  1409,    -1,    -1,    -1,   370,    47,  1164,  1165,    -1,
    1165,   631,  1416,  1242,    -1,  1416,  1242,    -1,    -1,  1226,
    1167,  1127,    -1,    34,   946,    -1,    60,   946,   966,    -1,
     340,   946,    -1,   240,    -1,   480,    -1,   480,   240,    -1,
     573,    -1,   573,   240,    -1,   118,    -1,   544,   946,    -1,
     115,   946,    -1,   126,   940,    -1,    -1,   143,  1169,   947,
      -1,    -1,  1171,    -1,  1127,    -1,  1171,   631,  1127,    -1,
    1173,    -1,   629,  1173,   630,    -1,  1417,    -1,  1173,   631,
    1417,    -1,    -1,  1127,    -1,    -1,   151,  1127,    -1,   600,
    1127,   540,  1127,    -1,  1176,   600,  1127,   540,  1127,    -1,
    1190,    -1,  1181,    -1,  1180,    -1,  1177,    -1,   633,  1428,
    1177,   634,    -1,  1179,    -1,  1180,   631,  1179,    -1,  1177,
    1189,  1177,    -1,  1177,   513,  1190,    -1,    -1,  1177,  1189,
    1177,   360,  1182,  1127,    -1,    -1,  1177,   513,  1190,   360,
    1183,  1127,    -1,    -1,  1177,  1189,  1177,   582,  1184,   629,
    1220,   630,    -1,  1177,   338,   249,  1190,    -1,    -1,  1177,
     261,  1206,   249,  1177,   360,  1185,  1127,    -1,    -1,  1177,
     261,  1206,   249,  1190,  1186,   582,   629,  1220,   630,    -1,
    1177,   338,   261,  1206,   249,  1190,    -1,    -1,  1177,   450,
    1206,   249,  1177,   360,  1187,  1127,    -1,    -1,  1177,   450,
    1206,   249,  1190,  1188,   582,   629,  1220,   630,    -1,  1177,
     338,   450,  1206,   249,  1190,    -1,   249,    -1,   232,   249,
      -1,   104,   249,    -1,    -1,  1191,  1421,  1225,  1215,    -1,
    1205,  1204,  1201,    -1,   629,  1204,  1192,   630,  1225,    -1,
    1199,  1510,    -1,    -1,    -1,  1192,   569,  1514,  1193,  1515,
    1194,  1510,    -1,  1196,    -1,    -1,    -1,  1197,  1521,  1120,
    1198,   904,  1119,    -1,    -1,  1204,  1200,  1180,    -1,    -1,
      -1,  1202,  1116,  1120,  1203,   904,    -1,    -1,   464,    -1,
      -1,   373,    -1,    -1,   189,   249,    -1,   189,   370,    47,
      -1,   189,   204,    47,    -1,   187,    -1,   224,    -1,    -1,
    1208,   977,  1207,  1210,   629,  1219,   630,    -1,    -1,   581,
     977,  1207,  1211,   629,  1217,   630,    -1,  1209,    -1,  1212,
    1209,    -1,    -1,    -1,  1214,  1212,    -1,    -1,  1216,  1213,
      -1,    -1,  1219,    -1,  1428,    -1,   400,    -1,  1218,    -1,
    1219,   631,  1218,    -1,  1428,    -1,  1220,   631,  1428,    -1,
    1222,    -1,   119,    -1,   120,    -1,   121,    -1,   122,    -1,
     216,    -1,   217,    -1,   218,    -1,   319,    -1,   320,    -1,
     461,    -1,   613,    -1,   123,    -1,   599,    -1,   219,    -1,
     321,    -1,   328,    -1,   409,    -1,   462,    -1,   317,    -1,
     614,    -1,   118,    -1,   544,    -1,   115,    -1,   541,    -1,
      -1,    19,    -1,   617,    -1,    -1,  1224,  1428,    -1,    -1,
      12,    -1,    -1,    -1,   601,  1228,  1127,    -1,    -1,    -1,
     209,  1230,  1127,    -1,   165,  1141,    -1,    -1,    -1,   204,
      47,  1233,  1234,    -1,  1233,   631,  1416,  1242,    -1,  1416,
    1242,    -1,    -1,   604,    -1,   605,    -1,   370,    47,  1236,
      -1,  1236,   631,  1237,    -1,  1237,    -1,  1418,  1242,    -1,
      -1,  1239,    -1,    -1,   370,    47,  1240,  1241,    -1,  1241,
     631,  1416,  1242,    -1,  1416,  1242,    -1,    -1,    20,    -1,
     133,    -1,    -1,  1245,    -1,    -1,  1245,    -1,   266,  1246,
      -1,   266,  1246,   454,   169,  1248,    -1,   266,   454,   169,
    1248,    -1,  1247,    -1,  1247,   631,  1247,    -1,  1247,   358,
    1247,    -1,  1428,    -1,  1410,    -1,   560,    -1,   280,    -1,
     355,    -1,  1247,    -1,    -1,   266,  1247,    -1,   266,   454,
     169,    -1,   266,  1247,   454,   169,    -1,   355,    -1,   622,
     355,    -1,   622,   280,    -1,   355,    -1,   211,    -1,   280,
      -1,   560,    -1,   125,    -1,   184,    -1,   355,    -1,   211,
      -1,   280,    -1,   560,    -1,  1255,    -1,   355,    -1,   560,
      -1,   280,    -1,   125,    -1,   184,    -1,   355,    -1,   560,
      -1,   211,    -1,   280,    -1,  1255,    -1,  1256,    -1,   125,
      -1,   184,    -1,  1251,    -1,   128,    -1,    -1,    -1,   402,
    1428,  1259,   629,  1260,   630,    -1,    -1,  1261,    -1,  1261,
     631,  1262,    -1,  1262,    -1,  1122,  1127,  1123,    -1,    -1,
    1264,  1265,    -1,  1265,   631,  1266,    -1,  1266,    -1,   636,
    1430,    -1,  1430,    -1,    -1,   239,  1268,  1269,    -1,    -1,
      -1,   374,  1427,  1270,   957,  1271,  1393,  1396,    -1,   147,
    1427,    -1,  1263,    -1,    -1,   144,  1273,  1171,    -1,    -1,
     145,  1283,  1453,  1282,  1275,  1278,  1042,    -1,    -1,   145,
     228,  1428,   360,  1421,  1276,    -1,   145,   111,  1282,  1428,
      -1,   145,   194,  1282,  1428,   637,  1428,    -1,   145,   194,
    1282,  1428,    -1,   145,   402,  1282,   687,    -1,   145,   578,
     686,  1483,    -1,    -1,   145,   595,  1282,  1277,  1278,  1042,
      -1,   145,   167,  1282,   687,    -1,   145,   553,  1282,   687,
      -1,   145,   528,   810,   821,   822,    -1,   145,   276,   204,
     811,   821,   822,    -1,   145,   470,  1282,  1430,    -1,  1279,
      -1,  1278,   631,  1279,    -1,  1421,    -1,  1281,    -1,  1280,
     631,  1281,    -1,  1422,    -1,    -1,   223,   171,    -1,    -1,
     534,    -1,    -1,    -1,   235,  1285,  1290,  1036,  1292,  1286,
    1294,  1310,    -1,    -1,    -1,   438,  1288,  1291,  1292,  1289,
    1294,    -1,    -1,   283,    -1,   130,    -1,   213,    -1,  1319,
      -1,   130,    -1,   239,  1293,    -1,  1293,    -1,  1279,    -1,
    1297,    -1,   629,   630,  1297,    -1,   629,  1296,   630,  1297,
      -1,    -1,   472,  1295,  1301,    -1,  1296,   631,  1414,    -1,
    1414,    -1,   586,  1300,    -1,   587,  1300,    -1,    -1,   882,
    1298,  1506,    -1,    -1,   629,   882,   630,  1299,  1509,    -1,
    1300,   631,  1305,    -1,  1305,    -1,  1301,   631,  1302,    -1,
    1302,    -1,  1418,  1303,  1309,    -1,   617,    -1,   473,    -1,
      -1,  1303,    -1,    -1,   629,  1306,  1307,   630,    -1,    -1,
    1308,    -1,  1308,   631,  1309,    -1,  1309,    -1,  1127,    -1,
     128,    -1,    -1,    -1,   360,   148,  1311,   252,   575,  1317,
      -1,    -1,    -1,   575,  1313,  1319,  1036,  1178,   472,  1315,
    1314,  1227,  1238,  1249,    -1,  1315,   631,  1316,    -1,  1316,
      -1,  1418,  1303,  1309,    -1,  1317,   631,  1318,    -1,  1318,
      -1,  1418,  1303,  1309,    -1,    -1,   283,    -1,    -1,   132,
    1321,  1329,  1322,    -1,    -1,   191,  1421,  1323,  1227,  1238,
    1249,    -1,    -1,  1326,  1324,   191,  1178,  1227,    -1,    -1,
     191,  1280,  1325,   582,  1178,  1227,    -1,  1327,    -1,  1326,
     631,  1327,    -1,  1428,  1328,    -1,  1428,   637,  1428,  1328,
      -1,    -1,   637,   624,    -1,    -1,  1330,  1329,    -1,   411,
      -1,   283,    -1,   224,    -1,    -1,   556,  1333,  1332,  1279,
      -1,    -1,   531,    -1,    -1,  1335,    -1,  1336,    -1,  1335,
     631,  1336,    -1,   102,    -1,   314,    -1,    42,   243,    -1,
      97,   525,    -1,   378,   179,    -1,   244,    -1,   524,    -1,
     490,    -1,    12,    -1,    -1,   189,   410,   355,    -1,    -1,
     477,  1339,  1340,    -1,   112,  1351,    -1,  1347,   527,  1346,
    1351,    -1,  1347,   552,  1346,  1351,    -1,   166,  1346,  1351,
      -1,   531,   508,  1346,  1351,    -1,   364,   527,  1346,  1351,
      -1,   390,    -1,   159,   901,  1343,    -1,   159,    12,  1343,
      -1,  1347,    73,  1348,  1421,  1346,  1351,    -1,  1344,   277,
      -1,   482,   215,    -1,    -1,    35,   166,  1349,  1350,  1341,
    1243,    -1,    -1,   426,   166,  1349,  1350,  1342,  1243,    -1,
     979,  1348,  1421,  1346,  1227,    -1,  1345,   158,    -1,    24,
      -1,    99,    -1,   401,    -1,   101,   629,   624,   630,   598,
      -1,   101,   629,   624,   630,   163,    -1,   598,  1243,    -1,
     163,  1243,    -1,   406,    -1,   405,  1334,  1337,  1243,    -1,
    1442,   508,  1351,    -1,  1347,   404,    -1,  1442,   590,  1351,
      -1,   954,  1351,    -1,    72,  1351,    -1,   203,    -1,   203,
     189,  1431,    -1,   103,   111,   892,  1428,    -1,   103,   531,
    1421,    -1,   103,   595,  1421,    -1,   298,   508,    -1,   482,
     508,    -1,    67,    -1,   579,    -1,   530,    -1,   229,    -1,
     103,   402,   687,    -1,   103,   194,   687,    -1,   103,   553,
     687,    -1,   402,   508,  1351,    -1,   194,   508,  1351,    -1,
     402,    70,   687,    -1,   194,    70,   687,    -1,   103,   167,
     687,    -1,   508,    -1,   332,    -1,   277,    -1,   298,    -1,
      34,    -1,    -1,   512,    -1,    -1,  1348,  1428,    -1,    -1,
     192,    -1,   191,    -1,   242,    -1,    -1,   242,  1425,    -1,
      -1,   191,  1253,    -1,    -1,   265,  1425,    -1,   601,  1127,
      -1,    -1,  1355,  1421,  1353,  1357,    -1,    -1,  1355,  1356,
    1354,  1105,    -1,   133,    -1,   134,    -1,    -1,   174,    -1,
     385,    -1,    -1,  1409,    -1,  1428,    -1,    -1,   186,  1080,
    1359,  1360,    -1,    -1,    -1,  1453,  1361,  1366,  1362,  1363,
      -1,  1364,    -1,    -1,   603,   415,   275,  1367,    -1,  1364,
     631,  1365,    -1,  1365,    -1,   162,   277,    -1,   159,   277,
      -1,   196,   277,    -1,   483,   277,    -1,    34,   277,    -1,
     425,   277,    -1,   410,    49,    -1,   215,    -1,   401,    -1,
     277,    -1,   508,    -1,   482,    -1,    67,    -1,   579,    -1,
     530,    -1,   229,    -1,   298,    -1,   135,    -1,   443,    -1,
      -1,  1278,    -1,    -1,    17,   138,    61,    -1,    -1,   441,
    1369,  1370,    -1,  1370,   631,  1371,    -1,  1371,    -1,    -1,
     482,  1372,  1373,    -1,   298,    -1,   410,    49,    -1,    -1,
      12,    -1,    -1,   408,  1375,  1376,    -1,  1344,   277,  1377,
      -1,   548,  1425,    -1,    30,  1127,    -1,    -1,   253,  1379,
    1380,  1381,  1382,    -1,    -1,   207,    -1,   487,    -1,    -1,
      90,    -1,   410,    -1,  1127,    -1,   578,  1431,    -1,   581,
    1428,    -1,    -1,    -1,    -1,    -1,   271,  1389,  1385,  1391,
    1390,   230,  1427,  1386,  1392,   239,   531,  1421,  1387,   957,
    1388,  1399,  1393,  1396,  1400,  1402,  1405,    -1,   114,    -1,
     611,    -1,    -1,   272,    -1,    -1,    88,    -1,   283,    -1,
      -1,   438,    -1,   224,    -1,    -1,    73,  1394,    -1,  1394,
    1395,    -1,  1395,    -1,   536,    47,  1409,    -1,   368,   154,
      47,  1409,    -1,   154,    47,  1409,    -1,   164,    47,  1409,
      -1,    -1,   268,  1397,    -1,  1397,  1398,    -1,  1398,    -1,
     536,    47,  1409,    -1,   505,    47,  1409,    -1,    -1,   454,
     221,    47,  1409,    -1,    -1,   224,   355,  1401,    -1,   268,
      -1,   454,    -1,    -1,   629,  1403,   630,    -1,   629,   630,
      -1,  1403,   631,  1404,    -1,  1404,    -1,  1418,    -1,   636,
    1430,    -1,    -1,   472,  1406,    -1,  1406,   631,  1407,    -1,
    1407,    -1,  1418,  1303,  1122,  1309,  1123,    -1,   537,    -1,
     339,    -1,   563,   537,    -1,  1408,  1426,    -1,  1426,    -1,
     211,    -1,   212,    -1,    36,    -1,   380,    -1,  1412,    -1,
     623,  1413,    -1,   622,  1413,    -1,  1408,    -1,  1413,    -1,
     354,    -1,   177,    -1,   555,    -1,   211,    -1,   212,    -1,
      36,    -1,   563,   953,    -1,   563,    36,    -1,   118,  1408,
      -1,   544,  1408,    -1,   541,  1408,    -1,   355,    -1,   280,
      -1,   560,    -1,   125,    -1,   184,    -1,  1418,    -1,  1415,
      -1,  1428,   637,   624,    -1,  1428,   637,  1428,   637,   624,
      -1,  1127,    -1,  1428,    -1,  1419,    -1,  1428,    -1,  1419,
      -1,  1428,   637,  1428,    -1,   637,  1428,   637,  1428,    -1,
    1428,   637,  1428,   637,  1428,    -1,  1428,    -1,  1428,   637,
    1428,   637,  1428,    -1,  1428,   637,  1428,    -1,   637,  1428,
      -1,  1428,    -1,  1428,   637,  1428,    -1,   637,  1428,    -1,
    1428,  1328,    -1,  1428,   637,  1428,  1328,    -1,  1428,    -1,
     220,    -1,   222,    -1,   537,    -1,   537,    -1,   537,    -1,
    1424,    -1,  1432,    -1,  1424,    -1,  1433,    -1,  1428,    -1,
    1425,    -1,   264,    -1,  1430,    -1,  1430,   636,  1430,    -1,
     107,  1126,    -1,  1433,    -1,    21,    -1,    29,    -1,    31,
      -1,    48,    -1,    49,    -1,    59,    -1,    62,    -1,    61,
      -1,    68,    -1,    74,    -1,    75,    -1,    76,    -1,    77,
      -1,    78,    -1,    79,    -1,    82,    -1,    84,    -1,    96,
      -1,   124,    -1,   144,    -1,   155,    -1,   169,    -1,   170,
      -1,   186,    -1,   206,    -1,   210,    -1,   214,    -1,   237,
      -1,   254,    -1,   351,    -1,   364,    -1,   367,    -1,   366,
      -1,   376,    -1,   381,    -1,   386,    -1,   394,    -1,   397,
      -1,   432,    -1,   435,    -1,   441,    -1,   444,    -1,   451,
      -1,   458,    -1,   463,    -1,   470,    -1,   480,    -1,   486,
      -1,   482,    -1,   488,    -1,   507,    -1,   511,    -1,   556,
      -1,   567,    -1,   568,    -1,   607,    -1,   610,    -1,   576,
      -1,     5,    -1,     7,    -1,     8,    -1,     9,    -1,    10,
      -1,    11,    -1,    14,    -1,    18,    -1,    23,    -1,    24,
      -1,    26,    -1,    25,    -1,    27,    -1,    28,    -1,    35,
      -1,    39,    -1,    42,    -1,    44,    -1,    43,    -1,    46,
      -1,    52,    -1,    55,    -1,    56,    -1,    58,    -1,    64,
      -1,    67,    -1,    66,    -1,    65,    -1,    69,    -1,    70,
      -1,    72,    -1,    81,    -1,    73,    -1,    83,    -1,    85,
      -1,    86,    -1,    87,    -1,    88,    -1,    90,    -1,    91,
      -1,    93,    -1,    95,    -1,    94,    -1,    97,    -1,    99,
      -1,   102,    -1,   105,    -1,   109,    -1,   114,    -1,   113,
      -1,   115,    -1,   118,    -1,   123,    -1,   129,    -1,   131,
      -1,   135,    -1,   137,    -1,   138,    -1,   139,    -1,   140,
      -1,   147,    -1,   148,    -1,   149,    -1,   156,    -1,   160,
      -1,   159,    -1,   158,    -1,   162,    -1,   163,    -1,   165,
      -1,   167,    -1,   166,    -1,   168,    -1,   173,    -1,   174,
      -1,   175,    -1,   179,    -1,   178,    -1,   190,    -1,   153,
      -1,   192,    -1,   181,    -1,   182,    -1,   183,    -1,   196,
      -1,   197,    -1,   199,    -1,   198,    -1,   200,    -1,   203,
      -1,   201,    -1,   208,    -1,   207,    -1,   215,    -1,   219,
      -1,   221,    -1,   225,    -1,   229,    -1,   241,    -1,   226,
      -1,   227,    -1,   231,    -1,   243,    -1,   244,    -1,   246,
      -1,   247,    -1,   236,    -1,   251,    -1,   256,    -1,   255,
      -1,   259,    -1,   262,    -1,   263,    -1,   269,    -1,   270,
      -1,   272,    -1,   274,    -1,   276,    -1,   277,    -1,   304,
      -1,   298,    -1,   300,    -1,   285,    -1,   289,    -1,   286,
      -1,   287,    -1,   299,    -1,   288,    -1,   290,    -1,   284,
      -1,   296,    -1,   292,    -1,   291,    -1,   293,    -1,   294,
      -1,   295,    -1,   302,    -1,   303,    -1,   305,    -1,   307,
      -1,   308,    -1,   313,    -1,   314,    -1,   315,    -1,   316,
      -1,   317,    -1,   318,    -1,   321,    -1,   322,    -1,   326,
      -1,   324,    -1,   328,    -1,   329,    -1,   330,    -1,   331,
      -1,   332,    -1,   333,    -1,   334,    -1,   336,    -1,   335,
      -1,   337,    -1,   340,    -1,   341,    -1,   345,    -1,   344,
      -1,   352,    -1,   346,    -1,   347,    -1,   357,    -1,   358,
      -1,   359,    -1,   361,    -1,   362,    -1,   363,    -1,   377,
      -1,   378,    -1,   383,    -1,   384,    -1,   385,    -1,   387,
      -1,   388,    -1,   389,    -1,   391,    -1,   390,    -1,   392,
      -1,   393,    -1,   398,    -1,   399,    -1,   401,    -1,   403,
      -1,   404,    -1,   405,    -1,   406,    -1,   407,    -1,   409,
      -1,   410,    -1,   411,    -1,   414,    -1,   418,    -1,   419,
      -1,   421,    -1,   420,    -1,   422,    -1,   425,    -1,   426,
      -1,   427,    -1,   428,    -1,   429,    -1,   431,    -1,   434,
      -1,   436,    -1,   439,    -1,   443,    -1,   446,    -1,   447,
      -1,   452,    -1,   453,    -1,   454,    -1,   455,    -1,   456,
      -1,   457,    -1,   459,    -1,   460,    -1,   462,    -1,   468,
      -1,   467,    -1,   469,    -1,   481,    -1,   474,    -1,   478,
      -1,   483,    -1,   485,    -1,   487,    -1,   489,    -1,   490,
      -1,   498,    -1,   497,    -1,   500,    -1,   503,    -1,   506,
      -1,   508,    -1,   512,    -1,   514,    -1,   515,    -1,   516,
      -1,   517,    -1,   519,    -1,   518,    -1,   522,    -1,   523,
      -1,   524,    -1,   525,    -1,   533,    -1,   530,    -1,   527,
      -1,   532,    -1,   528,    -1,   534,    -1,   535,    -1,   538,
      -1,   539,    -1,   550,    -1,   551,    -1,   552,    -1,   541,
      -1,   542,    -1,   543,    -1,   544,    -1,   557,    -1,   558,
      -1,   559,    -1,   194,    -1,   561,    -1,   562,    -1,   565,
      -1,   564,    -1,   571,    -1,   574,    -1,   578,    -1,   579,
      -1,   580,    -1,   590,    -1,   595,    -1,   596,    -1,   587,
      -1,   598,    -1,   597,    -1,   599,    -1,   606,    -1,   609,
      -1,   611,    -1,   614,    -1,   594,    -1,    -1,   472,  1436,
    1435,  1437,    -1,    -1,   367,    -1,  1438,    -1,  1437,   631,
    1438,    -1,    -1,  1439,  1444,    -1,  1441,    -1,   201,    -1,
     272,    -1,   469,    -1,    -1,   361,    -1,    -1,   201,    -1,
     272,    -1,   469,    -1,    -1,   201,   637,    -1,   272,   637,
      -1,   469,   637,    -1,  1445,    -1,  1441,  1446,    -1,  1440,
    1447,  1303,  1450,    -1,  1440,   550,   246,   263,  1448,    -1,
     636,  1430,  1303,  1127,    -1,   636,   636,  1443,  1447,  1303,
    1450,    -1,   954,   959,    -1,   335,  1303,  1127,    -1,   335,
     956,   961,    -1,   387,  1303,  1449,    -1,   387,   189,  1431,
    1303,  1449,    -1,  1428,    -1,  1428,   637,  1428,    -1,   128,
     637,  1428,    -1,   415,   561,    -1,   415,    83,    -1,   436,
     415,    -1,   467,    -1,   537,    -1,   387,   629,   537,   630,
      -1,   359,   629,   537,   630,    -1,  1127,    -1,   128,    -1,
     360,    -1,    12,    -1,    34,    -1,    -1,   275,  1453,  1452,
    1454,    -1,   531,    -1,   527,    -1,  1455,    -1,  1454,   631,
    1455,    -1,  1421,  1225,  1456,    -1,   415,    -1,   608,    -1,
     608,    88,    -1,   283,   608,    -1,   415,   272,    -1,    -1,
     572,  1458,  1453,    -1,   206,  1421,   364,  1225,    -1,   206,
    1423,    68,    -1,    -1,   206,  1423,   415,  1460,  1461,  1227,
    1244,    -1,  1462,    -1,  1428,  1463,    -1,   182,    -1,   345,
      -1,   182,    -1,   345,    -1,   399,    -1,   255,    -1,    -1,
    1465,  1464,   629,  1308,   630,    -1,   617,    -1,   195,    -1,
     257,    -1,   618,    -1,   619,    -1,   449,   686,  1467,    -1,
    1471,   360,  1470,  1482,   191,  1483,    -1,  1471,   360,   194,
    1482,   191,  1483,    -1,  1471,   360,   402,  1482,   191,  1483,
      -1,    12,  1472,   631,   202,   367,   191,  1483,    -1,   407,
     360,  1431,   191,  1483,    -1,   202,   686,  1469,    -1,  1471,
     360,  1470,  1482,   548,  1484,  1491,  1492,    -1,  1471,   360,
     194,  1482,   548,  1484,  1491,  1492,    -1,  1471,   360,   402,
    1482,   548,  1484,  1491,  1492,    -1,   407,   360,  1431,   548,
    1484,  1493,    -1,    -1,   531,    -1,  1473,    -1,    12,  1472,
      -1,    -1,   401,    -1,  1474,    -1,  1473,   631,  1474,    -1,
      -1,   464,  1475,  1488,    -1,    -1,   235,  1476,  1488,    -1,
      -1,   575,  1477,  1488,    -1,    -1,   423,  1478,  1488,    -1,
     132,    -1,   577,    -1,   228,    -1,    13,    -1,   103,    -1,
     145,    -1,   170,    -1,   431,    -1,   478,    -1,   403,    -1,
     181,    -1,   202,   367,    -1,   477,   112,    -1,   522,    -1,
     103,   534,   527,    -1,   275,   527,    -1,   439,   482,    -1,
     439,    66,    -1,   103,   595,    -1,   477,   595,    -1,   103,
     453,    -1,    13,   453,    -1,   103,   578,    -1,   167,    -1,
     553,    -1,   103,   528,    -1,    -1,    17,    -1,  1481,  1479,
    1480,    -1,  1481,    -1,   517,   537,    -1,   247,   537,    -1,
      64,   537,    -1,   624,    -1,  1428,   637,   624,    -1,   624,
     637,   624,    -1,  1421,    -1,  1431,    -1,  1483,   631,  1431,
      -1,  1487,    -1,  1484,   631,  1487,    -1,   594,    -1,   603,
      -1,   582,    -1,    19,    -1,  1431,   221,    47,   537,    -1,
    1431,   221,    47,   387,   537,    -1,  1431,   221,  1485,  1430,
      -1,  1431,   221,  1485,  1430,  1486,  1425,    -1,  1431,    -1,
      -1,   629,  1489,   630,    -1,  1489,   631,  1490,    -1,  1490,
      -1,  1428,    -1,    -1,   440,  1480,    -1,   440,   504,    -1,
     440,   609,    -1,   440,   347,    -1,    -1,   603,  1494,    -1,
      -1,   603,   202,   367,    -1,  1494,  1495,    -1,  1495,    -1,
     202,   367,    -1,   303,  1251,    -1,   307,  1251,    -1,   302,
    1251,    -1,   308,  1250,    -1,    -1,    31,  1497,  1498,    -1,
      -1,   606,    -1,    -1,    17,   351,    56,    -1,    17,    56,
      -1,    -1,   430,    -1,   351,   430,    -1,    -1,   458,    -1,
      84,  1498,  1499,  1500,    -1,   451,  1498,  1499,  1500,    -1,
     451,  1498,   548,  1501,  1428,    -1,   458,  1428,    -1,   430,
     458,  1428,    -1,    -1,  1507,    -1,    -1,   569,  1514,  1508,
    1106,    -1,    -1,  1507,    -1,  1511,    -1,    -1,  1511,    -1,
      -1,  1512,  1513,    -1,  1239,  1243,    -1,  1245,    -1,    -1,
     141,    -1,    12,    -1,   464,  1195,    -1,   629,  1108,   630,
      -1,  1515,  1510,    -1,    -1,  1516,   569,  1514,  1517,  1515,
    1510,    -1,  1519,  1516,  1520,    -1,    -1,    -1,    -1,  1522,
      -1,  1522,  1523,    -1,  1523,    -1,   513,    -1,   213,    -1,
     141,    -1,   501,    -1,   496,    -1,   497,    -1,   499,    -1,
      12,    -1,  1529,  1525,    -1,  1528,  1526,    -1,  1530,  1527,
    1534,    -1,  1534,    -1,  1542,    -1,  1553,    -1,  1547,    -1,
     673,    -1,  1534,    -1,  1542,    -1,  1553,    -1,  1547,    -1,
    1546,    -1,   673,    -1,  1528,    -1,  1529,    -1,    -1,   129,
     617,  1431,    -1,  1531,    -1,  1531,  1532,    -1,  1532,    -1,
     372,   438,    -1,    11,   617,   562,    -1,    11,   617,   315,
      -1,    11,   617,   535,    -1,    -1,   502,   463,   129,    -1,
     502,   463,   241,    -1,    -1,  1533,   595,  1421,  1535,  1536,
      19,  1538,    -1,    -1,   629,  1537,   630,    -1,  1428,    -1,
    1537,   631,  1428,    -1,    -1,  1539,  1540,  1541,    -1,   464,
    1109,    -1,   629,  1107,   630,  1509,    -1,    -1,   603,    63,
     367,    -1,   603,    52,    63,   367,    -1,   603,   272,    63,
     367,    -1,    -1,    -1,    -1,   553,  1122,   687,   781,   782,
     360,  1122,  1543,  1421,   189,  1122,  1544,   150,   456,  1545,
     731,    -1,    10,  1122,   194,  1428,   447,   905,   488,  1425,
      -1,  1122,   194,  1428,   447,   905,   488,  1425,    -1,    -1,
      -1,    -1,    -1,    -1,  1122,   194,   687,   629,  1548,   698,
     630,  1549,   447,  1550,   951,  1551,   689,  1552,   731,    -1,
      -1,    -1,    -1,    -1,   402,  1122,   687,  1554,   629,  1555,
     702,   630,  1556,   689,  1557,   731,    -1,   610,  1560,  1559,
    1561,    -1,   610,   155,  1559,  1563,    -1,   610,   397,  1559,
      -1,   610,    84,  1559,  1562,    -1,   610,   451,  1559,    -1,
     610,   419,    -1,  1409,    -1,  1409,   631,  1409,    -1,  1409,
     631,  1409,   631,  1251,    -1,    31,    -1,   507,    -1,    -1,
     249,    -1,   446,    -1,    -1,   362,   389,    -1,    -1,    -1,
     523,  1564,  1565,    -1,    -1,   189,   318,    -1,   237,   391,
    1428,   488,  1425,    -1,   237,   488,  1425,    -1,   568,   391,
    1428,    -1,   568,   488,  1425,    -1,   616,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1707,  1707,  1719,  1718,  1743,  1750,  1752,  1756,  1757,
    1762,  1763,  1764,  1765,  1766,  1767,  1768,  1769,  1770,  1771,
    1772,  1773,  1774,  1775,  1776,  1777,  1778,  1779,  1780,  1781,
    1782,  1783,  1784,  1785,  1786,  1787,  1788,  1789,  1790,  1791,
    1792,  1793,  1794,  1795,  1796,  1797,  1798,  1799,  1800,  1801,
    1802,  1803,  1804,  1805,  1806,  1807,  1808,  1809,  1810,  1811,
    1812,  1813,  1814,  1818,  1827,  1828,  1832,  1841,  1847,  1857,
    1856,  1866,  1868,  1872,  1873,  1877,  1890,  1889,  1909,  1908,
    1917,  1918,  1922,  1926,  1930,  1934,  1938,  1942,  1947,  1951,
    1955,  1959,  1963,  1967,  1973,  2004,  2009,  2012,  2014,  2015,
    2019,  2025,  2029,  2045,  2049,  2061,  2060,  2101,  2100,  2112,
    2110,  2123,  2121,  2133,  2132,  2145,  2144,  2152,  2156,  2160,
    2164,  2171,  2184,  2185,  2189,  2193,  2197,  2201,  2205,  2209,
    2213,  2221,  2220,  2251,  2250,  2257,  2264,  2265,  2271,  2277,
    2287,  2293,  2299,  2301,  2308,  2309,  2313,  2319,  2328,  2329,
    2337,  2337,  2393,  2394,  2395,  2396,  2397,  2398,  2399,  2400,
    2401,  2402,  2403,  2404,  2405,  2410,  2424,  2440,  2458,  2459,
    2463,  2464,  2469,  2471,  2473,  2475,  2477,  2479,  2481,  2487,
    2488,  2489,  2493,  2497,  2505,  2504,  2517,  2519,  2522,  2524,
    2528,  2532,  2539,  2541,  2545,  2546,  2551,  2571,  2597,  2599,
    2603,  2604,  2608,  2634,  2635,  2636,  2637,  2641,  2642,  2646,
    2647,  2652,  2655,  2682,  2681,  2745,  2761,  2760,  2814,  2840,
    2840,  2863,  2864,  2869,  2871,  2876,  2899,  2912,  2916,  2933,
    2934,  2938,  2942,  2951,  2958,  2965,  2975,  2989,  3012,  3018,
    3019,  3025,  3028,  3032,  3040,  3060,  3062,  3080,  3086,  3088,
    3090,  3092,  3094,  3096,  3098,  3100,  3102,  3104,  3106,  3108,
    3113,  3127,  3142,  3160,  3161,  3165,  3166,  3167,  3168,  3169,
    3170,  3171,  3172,  3173,  3174,  3175,  3176,  3177,  3182,  3181,
    3188,  3188,  3243,  3242,  3271,  3271,  3285,  3338,  3381,  3402,
    3401,  3423,  3442,  3444,  3445,  3449,  3469,  3492,  3494,  3510,
    3492,  3529,  3531,  3532,  3536,  3537,  3542,  3548,  3541,  3569,
    3568,  3584,  3585,  3589,  3590,  3595,  3599,  3594,  3620,  3624,
    3619,  3643,  3653,  3658,  3657,  3693,  3694,  3699,  3698,  3731,
    3731,  3746,  3745,  3781,  3793,  3795,  3792,  3822,  3821,  3842,
    3844,  3849,  3851,  3853,  3870,  3875,  3881,  3888,  3889,  3897,
    3903,  3912,  3918,  3924,  3925,  3929,  3929,  3934,  3935,  3936,
    3940,  3941,  3942,  3946,  3950,  3951,  3952,  3956,  3957,  3958,
    3959,  3960,  3961,  3962,  3963,  3967,  3971,  3972,  3973,  3977,
    3978,  3979,  3980,  3981,  3985,  3989,  3990,  3991,  3995,  3996,
    3997,  3998,  3999,  4000,  4001,  4005,  4009,  4010,  4011,  4015,
    4016,  4017,  4022,  4030,  4038,  4046,  4058,  4070,  4075,  4080,
    4088,  4096,  4104,  4112,  4120,  4128,  4136,  4149,  4162,  4175,
    4177,  4181,  4186,  4199,  4200,  4251,  4252,  4255,  4269,  4287,
    4286,  4295,  4293,  4300,  4302,  4301,  4305,  4304,  4310,  4347,
    4348,  4353,  4352,  4371,  4390,  4389,  4406,  4410,  4418,  4417,
    4420,  4422,  4424,  4426,  4431,  4432,  4438,  4439,  4456,  4457,
    4461,  4462,  4466,  4485,  4495,  4506,  4515,  4516,  4532,  4534,
    4533,  4538,  4536,  4547,  4548,  4552,  4570,  4586,  4587,  4603,
    4618,  4640,  4641,  4646,  4645,  4669,  4681,  4703,  4702,  4720,
    4719,  4739,  4761,  4765,  4794,  4806,  4807,  4812,  4823,  4811,
    4848,  4849,  4853,  4866,  4887,  4900,  4926,  4927,  4932,  4931,
    4968,  4977,  4978,  4982,  4983,  4987,  4989,  4995,  5001,  5003,
    5005,  5007,  5009,  5011,  5021,  5036,  5020,  5050,  5051,  5055,
    5056,  5060,  5061,  5065,  5066,  5070,  5071,  5075,  5076,  5080,
    5084,  5085,  5088,  5090,  5094,  5095,  5099,  5100,  5101,  5105,
    5110,  5115,  5120,  5125,  5130,  5135,  5140,  5155,  5161,  5166,
    5171,  5176,  5181,  5187,  5186,  5212,  5213,  5214,  5219,  5224,
    5229,  5231,  5233,  5235,  5241,  5246,  5251,  5257,  5263,  5269,
    5278,  5296,  5313,  5336,  5350,  5351,  5352,  5353,  5354,  5355,
    5356,  5360,  5361,  5362,  5366,  5367,  5371,  5372,  5373,  5374,
    5379,  5386,  5387,  5391,  5392,  5396,  5397,  5405,  5404,  5413,
    5411,  5421,  5419,  5429,  5427,  5435,  5454,  5460,  5462,  5466,
    5470,  5471,  5475,  5480,  5479,  5505,  5508,  5507,  5517,  5519,
    5524,  5527,  5531,  5538,  5539,  5543,  5544,  5548,  5554,  5560,
    5564,  5580,  5596,  5597,  5598,  5599,  5604,  5608,  5613,  5618,
    5622,  5627,  5632,  5638,  5643,  5649,  5653,  5658,  5663,  5681,
    5683,  5685,  5698,  5700,  5705,  5710,  5722,  5727,  5732,  5737,
    5739,  5741,  5743,  5745,  5747,  5749,  5751,  5754,  5753,  5758,
    5757,  5761,  5763,  5772,  5773,  5774,  5780,  5781,  5782,  5783,
    5784,  5788,  5792,  5793,  5797,  5798,  5802,  5803,  5804,  5805,
    5806,  5810,  5811,  5812,  5813,  5814,  5818,  5823,  5825,  5831,
    5832,  5834,  5839,  5848,  5849,  5853,  5854,  5858,  5859,  5860,
    5864,  5865,  5866,  5867,  5870,  5871,  5875,  5876,  5880,  5881,
    5885,  5886,  5890,  5891,  5892,  5893,  5900,  5901,  5907,  5913,
    5919,  5925,  5926,  5939,  5945,  5951,  5957,  5966,  5987,  5993,
    5998,  5999,  6003,  6004,  6008,  6016,  6020,  6021,  6025,  6026,
    6030,  6039,  6043,  6044,  6048,  6059,  6060,  6064,  6065,  6069,
    6070,  6075,  6076,  6080,  6087,  6096,  6104,  6115,  6116,  6117,
    6118,  6119,  6120,  6125,  6133,  6134,  6138,  6140,  6144,  6156,
    6157,  6161,  6168,  6181,  6182,  6184,  6186,  6192,  6197,  6203,
    6209,  6216,  6226,  6227,  6228,  6229,  6230,  6234,  6238,  6239,
    6243,  6244,  6248,  6249,  6253,  6254,  6255,  6259,  6260,  6264,
    6268,  6281,  6293,  6294,  6298,  6299,  6303,  6304,  6308,  6309,
    6313,  6314,  6318,  6319,  6323,  6324,  6328,  6329,  6333,  6335,
    6336,  6342,  6348,  6354,  6362,  6363,  6367,  6371,  6372,  6385,
    6386,  6387,  6391,  6392,  6396,  6402,  6416,  6417,  6421,  6422,
    6426,  6427,  6435,  6434,  6471,  6470,  6484,  6496,  6495,  6514,
    6513,  6532,  6531,  6550,  6544,  6564,  6563,  6596,  6601,  6606,
    6611,  6616,  6626,  6627,  6628,  6629,  6633,  6634,  6646,  6647,
    6651,  6652,  6655,  6657,  6658,  6659,  6661,  6663,  6664,  6673,
    6674,  6678,  6687,  6685,  6698,  6711,  6710,  6723,  6721,  6734,
    6741,  6751,  6755,  6762,  6766,  6771,  6770,  6786,  6788,  6793,
    6801,  6800,  6816,  6820,  6819,  6831,  6832,  6836,  6851,  6852,
    6856,  6865,  6869,  6874,  6879,  6878,  6890,  6901,  6889,  6917,
    6926,  6930,  6939,  6948,  6954,  6960,  6969,  6978,  6997,  7017,
    7027,  7031,  7039,  7040,  7044,  7045,  7049,  7049,  7052,  7054,
    7058,  7059,  7063,  7064,  7068,  7069,  7070,  7074,  7075,  7076,
    7080,  7081,  7082,  7083,  7092,  7091,  7100,  7108,  7107,  7115,
    7124,  7133,  7134,  7141,  7141,  7147,  7148,  7152,  7153,  7154,
    7158,  7159,  7175,  7176,  7181,  7180,  7192,  7193,  7194,  7198,
    7199,  7199,  7204,  7203,  7224,  7225,  7229,  7230,  7234,  7235,
    7236,  7240,  7241,  7246,  7245,  7266,  7274,  7275,  7275,  7279,
    7278,  7304,  7305,  7309,  7310,  7314,  7315,  7316,  7317,  7318,
    7319,  7323,  7324,  7329,  7328,  7349,  7350,  7351,  7356,  7355,
    7361,  7368,  7373,  7381,  7382,  7386,  7400,  7399,  7412,  7413,
    7417,  7418,  7422,  7432,  7442,  7443,  7448,  7447,  7458,  7459,
    7463,  7464,  7468,  7478,  7489,  7488,  7496,  7496,  7505,  7506,
    7511,  7512,  7521,  7530,  7531,  7535,  7540,  7545,  7550,  7555,
    7554,  7574,  7582,  7574,  7589,  7590,  7591,  7592,  7593,  7597,
    7604,  7611,  7613,  7624,  7625,  7629,  7630,  7658,  7688,  7690,
    7696,  7706,  7707,  7708,  7722,  7727,  7752,  7758,  7764,  7765,
    7766,  7767,  7768,  7772,  7773,  7774,  7778,  7779,  7784,  7835,
    7842,  7885,  7891,  7897,  7903,  7909,  7915,  7921,  7927,  7931,
    7937,  7943,  7949,  7955,  7961,  7965,  7971,  7980,  7986,  7994,
    8000,  8010,  8016,  8025,  8035,  8041,  8051,  8057,  8066,  8070,
    8076,  8082,  8088,  8094,  8100,  8106,  8112,  8118,  8124,  8130,
    8136,  8142,  8148,  8154,  8158,  8159,  8163,  8164,  8168,  8169,
    8173,  8174,  8178,  8179,  8180,  8181,  8182,  8183,  8187,  8188,
    8193,  8199,  8203,  8210,  8217,  8224,  8231,  8238,  8243,  8249,
    8256,  8263,  8271,  8282,  8304,  8311,  8319,  8320,  8321,  8322,
    8323,  8324,  8335,  8336,  8337,  8338,  8339,  8345,  8349,  8355,
    8361,  8367,  8373,  8375,  8382,  8389,  8395,  8397,  8406,  8413,
    8421,  8427,  8434,  8440,  8454,  8461,  8477,  8483,  8489,  8497,
    8503,  8509,  8515,  8521,  8535,  8546,  8552,  8558,  8564,  8570,
    8576,  8582,  8588,  8594,  8600,  8606,  8612,  8618,  8624,  8630,
    8636,  8642,  8650,  8671,  8678,  8684,  8691,  8698,  8705,  8712,
    8718,  8724,  8731,  8737,  8744,  8750,  8756,  8762,  8768,  8774,
    8792,  8798,  8804,  8811,  8818,  8826,  8833,  8840,  8847,  8854,
    8861,  8878,  8884,  8890,  8896,  8902,  8909,  8915,  8921,  8927,
    8933,  8939,  8950,  8956,  8962,  8968,  8974,  8985,  8991,  9007,
    9013,  9020,  9027,  9034,  9041,  9048,  9052,  9072,  9071,  9143,
    9184,  9186,  9191,  9192,  9196,  9197,  9201,  9202,  9206,  9213,
    9221,  9248,  9254,  9260,  9266,  9272,  9278,  9287,  9294,  9296,
    9293,  9303,  9314,  9320,  9326,  9332,  9338,  9344,  9350,  9356,
    9362,  9369,  9368,  9388,  9387,  9402,  9412,  9420,  9436,  9437,
    9442,  9447,  9450,  9453,  9452,  9469,  9471,  9477,  9476,  9493,
    9495,  9497,  9499,  9501,  9503,  9505,  9507,  9509,  9511,  9517,
    9523,  9526,  9525,  9531,  9532,  9536,  9543,  9551,  9552,  9556,
    9563,  9571,  9572,  9576,  9577,  9581,  9589,  9600,  9601,  9613,
    9624,  9625,  9631,  9632,  9652,  9654,  9658,  9656,  9673,  9671,
    9689,  9687,  9694,  9703,  9701,  9719,  9718,  9728,  9739,  9737,
    9756,  9755,  9766,  9777,  9778,  9779,  9791,  9791,  9805,  9845,
    9930,  9941,  9946,  9938,  9965,  9985,  9993,  9985, 10002, 10001,
   10024, 10041, 10024, 10048, 10052, 10078, 10079, 10084, 10087, 10088,
   10089, 10093, 10094, 10099, 10098, 10104, 10103, 10111, 10112, 10115,
   10117, 10117, 10121, 10121, 10126, 10127, 10131, 10133, 10138, 10139,
   10143, 10154, 10167, 10168, 10169, 10170, 10171, 10172, 10173, 10174,
   10175, 10176, 10177, 10178, 10182, 10183, 10184, 10185, 10186, 10187,
   10188, 10189, 10190, 10194, 10195, 10196, 10197, 10200, 10202, 10203,
   10207, 10208, 10216, 10218, 10222, 10224, 10223, 10237, 10240, 10239,
   10254, 10260, 10274, 10276, 10280, 10282, 10287, 10288, 10308, 10333,
   10337, 10338, 10342, 10354, 10356, 10361, 10360, 10395, 10397, 10402,
   10403, 10404, 10409, 10416, 10420, 10421, 10425, 10429, 10433, 10440,
   10447, 10454, 10464, 10497, 10501, 10507, 10513, 10522, 10530, 10534,
   10541, 10542, 10546, 10547, 10548, 10552, 10553, 10554, 10555, 10556,
   10557, 10561, 10562, 10563, 10564, 10565, 10569, 10570, 10571, 10572,
   10573, 10577, 10578, 10579, 10580, 10581, 10585, 10590, 10591, 10595,
   10596, 10599, 10602, 10601, 10644, 10645, 10649, 10650, 10654, 10664,
   10664, 10674, 10675, 10679, 10698, 10731, 10730, 10743, 10751, 10742,
   10753, 10765, 10777, 10776, 10794, 10793, 10804, 10804, 10820, 10827,
   10849, 10869, 10881, 10886, 10885, 10895, 10901, 10908, 10913, 10918,
   10928, 10929, 10933, 10944, 10945, 10949, 10960, 10961, 10965, 10966,
   10974, 10982, 10973, 10992, 10999, 10991, 11009, 11017, 11018, 11026,
   11030, 11031, 11042, 11043, 11047, 11056, 11057, 11058, 11060, 11059,
   11070, 11071, 11075, 11076, 11078, 11077, 11081, 11080, 11086, 11087,
   11091, 11092, 11096, 11106, 11107, 11111, 11112, 11117, 11116, 11130,
   11131, 11135, 11140, 11148, 11149, 11157, 11159, 11159, 11167, 11175,
   11166, 11197, 11198, 11202, 11210, 11211, 11215, 11225, 11226, 11233,
   11232, 11248, 11247, 11259, 11258, 11270, 11269, 11283, 11284, 11288,
   11301, 11317, 11318, 11322, 11323, 11327, 11328, 11329, 11334, 11333,
   11354, 11356, 11359, 11361, 11364, 11365, 11368, 11372, 11376, 11380,
   11384, 11388, 11392, 11396, 11400, 11408, 11411, 11421, 11420, 11435,
   11442, 11450, 11458, 11466, 11474, 11482, 11489, 11491, 11493, 11502,
   11506, 11511, 11510, 11516, 11515, 11520, 11529, 11536, 11545, 11554,
   11559, 11561, 11563, 11565, 11567, 11569, 11576, 11584, 11586, 11594,
   11601, 11608, 11618, 11625, 11631, 11639, 11647, 11651, 11655, 11662,
   11669, 11676, 11683, 11690, 11697, 11703, 11710, 11717, 11722, 11727,
   11735, 11737, 11739, 11744, 11745, 11748, 11750, 11754, 11755, 11759,
   11760, 11764, 11765, 11769, 11770, 11774, 11775, 11778, 11780, 11787,
   11798, 11797, 11813, 11812, 11822, 11823, 11827, 11828, 11829, 11833,
   11834, 11835, 11850, 11849, 11862, 11871, 11861, 11873, 11877, 11878,
   11892, 11893, 11898, 11900, 11902, 11904, 11906, 11908, 11910, 11912,
   11914, 11916, 11918, 11920, 11925, 11927, 11929, 11931, 11933, 11935,
   11937, 11942, 11943, 11947, 11948, 11952, 11951, 11961, 11962, 11966,
   11966, 11968, 11969, 11973, 11974, 11979, 11978, 11989, 11993, 11997,
   12010, 12009, 12023, 12024, 12025, 12028, 12029, 12030, 12034, 12039,
   12049, 12061, 12072, 12082, 12092, 12060, 12100, 12101, 12105, 12106,
   12110, 12111, 12119, 12123, 12124, 12125, 12128, 12130, 12134, 12135,
   12139, 12144, 12151, 12156, 12163, 12165, 12169, 12170, 12174, 12179,
   12187, 12188, 12191, 12193, 12201, 12203, 12207, 12208, 12209, 12213,
   12215, 12220, 12221, 12230, 12231, 12235, 12236, 12240, 12253, 12276,
   12288, 12299, 12318, 12326, 12338, 12346, 12361, 12381, 12382, 12383,
   12391, 12392, 12393, 12400, 12406, 12412, 12418, 12424, 12430, 12459,
   12487, 12488, 12489, 12493, 12503, 12513, 12519, 12528, 12543, 12544,
   12548, 12557, 12572, 12576, 12622, 12626, 12643, 12647, 12725, 12749,
   12779, 12780, 12796, 12806, 12810, 12816, 12822, 12832, 12838, 12847,
   12857, 12858, 12886, 12900, 12914, 12929, 12930, 12940, 12941, 12951,
   12952, 12953, 12957, 12973, 12994, 13009, 13010, 13011, 13012, 13013,
   13014, 13015, 13016, 13017, 13018, 13019, 13020, 13021, 13022, 13023,
   13024, 13025, 13026, 13027, 13028, 13029, 13030, 13031, 13032, 13033,
   13034, 13035, 13036, 13037, 13038, 13039, 13040, 13041, 13042, 13043,
   13044, 13045, 13046, 13047, 13048, 13049, 13050, 13051, 13052, 13053,
   13054, 13055, 13056, 13057, 13058, 13059, 13060, 13061, 13062, 13063,
   13064, 13065, 13066, 13067, 13077, 13078, 13079, 13080, 13081, 13082,
   13083, 13084, 13085, 13086, 13087, 13088, 13089, 13090, 13091, 13092,
   13093, 13094, 13095, 13096, 13097, 13098, 13099, 13100, 13101, 13102,
   13103, 13104, 13105, 13106, 13107, 13108, 13109, 13110, 13111, 13112,
   13113, 13114, 13115, 13116, 13117, 13118, 13119, 13120, 13121, 13122,
   13123, 13124, 13125, 13126, 13127, 13128, 13129, 13130, 13131, 13132,
   13133, 13134, 13135, 13136, 13137, 13138, 13139, 13140, 13141, 13142,
   13143, 13144, 13145, 13146, 13147, 13148, 13149, 13150, 13151, 13152,
   13153, 13154, 13155, 13156, 13157, 13158, 13159, 13160, 13161, 13162,
   13163, 13164, 13165, 13166, 13167, 13168, 13169, 13170, 13171, 13172,
   13173, 13174, 13175, 13176, 13177, 13178, 13179, 13180, 13181, 13182,
   13183, 13184, 13185, 13186, 13187, 13188, 13189, 13190, 13191, 13192,
   13193, 13194, 13195, 13196, 13197, 13198, 13199, 13200, 13201, 13202,
   13203, 13204, 13205, 13206, 13207, 13208, 13209, 13210, 13211, 13212,
   13213, 13214, 13215, 13216, 13217, 13218, 13219, 13220, 13221, 13222,
   13223, 13224, 13225, 13226, 13227, 13228, 13229, 13230, 13231, 13232,
   13233, 13234, 13235, 13236, 13237, 13238, 13239, 13240, 13241, 13242,
   13243, 13244, 13245, 13246, 13247, 13248, 13249, 13250, 13251, 13252,
   13253, 13254, 13255, 13256, 13257, 13258, 13259, 13260, 13261, 13262,
   13263, 13264, 13265, 13266, 13267, 13268, 13269, 13270, 13271, 13272,
   13273, 13274, 13275, 13276, 13277, 13278, 13279, 13280, 13281, 13282,
   13283, 13284, 13285, 13286, 13287, 13288, 13289, 13290, 13291, 13292,
   13293, 13294, 13295, 13296, 13297, 13298, 13299, 13300, 13301, 13302,
   13303, 13304, 13305, 13306, 13307, 13308, 13309, 13310, 13311, 13312,
   13313, 13314, 13315, 13316, 13317, 13318, 13319, 13320, 13321, 13322,
   13323, 13324, 13325, 13326, 13327, 13328, 13329, 13330, 13331, 13332,
   13333, 13334, 13335, 13336, 13337, 13338, 13339, 13340, 13341, 13342,
   13343, 13344, 13345, 13346, 13347, 13348, 13349, 13350, 13351, 13352,
   13353, 13354, 13355, 13356, 13357, 13358, 13359, 13360, 13361, 13362,
   13363, 13364, 13365, 13366, 13367, 13368, 13369, 13376, 13375, 13390,
   13391, 13395, 13396, 13400, 13400, 13480, 13481, 13482, 13483, 13487,
   13488, 13492, 13493, 13494, 13495, 13499, 13500, 13501, 13502, 13506,
   13507, 13511, 13552, 13570, 13581, 13593, 13606, 13621, 13640, 13666,
   13679, 13705, 13748, 13762, 13763, 13764, 13765, 13769, 13770, 13779,
   13791, 13792, 13793, 13799, 13805, 13817, 13816, 13832, 13833, 13837,
   13838, 13842, 13857, 13858, 13859, 13864, 13865, 13870, 13869, 13889,
   13901, 13914, 13913, 13947, 13948, 13952, 13953, 13957, 13958, 13959,
   13960, 13962, 13961, 13974, 13975, 13976, 13977, 13978, 13984, 13989,
   13995, 14006, 14017, 14021, 14031, 14036, 14043, 14055, 14067, 14076,
   14078, 14082, 14083, 14090, 14092, 14096, 14097, 14102, 14101, 14105,
   14104, 14108, 14107, 14111, 14110, 14113, 14114, 14115, 14116, 14117,
   14118, 14119, 14120, 14121, 14122, 14123, 14124, 14125, 14126, 14127,
   14128, 14129, 14130, 14131, 14132, 14133, 14134, 14135, 14136, 14137,
   14138, 14142, 14143, 14147, 14148, 14152, 14162, 14172, 14185, 14200,
   14213, 14226, 14238, 14243, 14251, 14256, 14263, 14263, 14264, 14264,
   14267, 14294, 14299, 14305, 14311, 14317, 14321, 14325, 14326, 14330,
   14357, 14359, 14363, 14367, 14371, 14378, 14379, 14383, 14384, 14388,
   14389, 14393, 14394, 14400, 14406, 14412, 14422, 14421, 14431, 14432,
   14437, 14438, 14439, 14444, 14445, 14446, 14450, 14451, 14455, 14467,
   14476, 14486, 14495, 14509, 14510, 14515, 14514, 14530, 14531, 14532,
   14536, 14537, 14541, 14541, 14563, 14564, 14568, 14569, 14570, 14574,
   14578, 14585, 14588, 14586, 14602, 14609, 14630, 14654, 14656, 14660,
   14661, 14665, 14666, 14674, 14675, 14676, 14677, 14683, 14689, 14699,
   14701, 14703, 14708, 14709, 14710, 14711, 14712, 14716, 14717, 14718,
   14719, 14720, 14721, 14731, 14732, 14737, 14750, 14763, 14765, 14767,
   14772, 14777, 14779, 14781, 14787, 14788, 14790, 14796, 14795, 14812,
   14813, 14817, 14822, 14830, 14830, 14854, 14855, 14860, 14861, 14863,
   14865, 14883, 14889, 14894, 14876, 14955, 14972, 14996, 15027, 15031,
   15040, 15063, 14992, 15126, 15150, 15159, 15166, 15125, 15186, 15190,
   15194, 15198, 15202, 15206, 15213, 15220, 15227, 15237, 15238, 15242,
   15243, 15244, 15248, 15249, 15254, 15256, 15255, 15261, 15262, 15266,
   15273, 15283, 15289, 15300
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM", "ANALYZE_SYM",
  "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC", "ASCII_SYM",
  "ASENSITIVE_SYM", "AT_SYM", "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM",
  "AUTO_INC", "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM",
  "BEGIN_SYM", "BETWEEN_SYM", "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM",
  "BIT_AND", "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM",
  "BOOLEAN_SYM", "BOOL_SYM", "BOTH", "BTREE_SYM", "BY", "BYTE_SYM",
  "CACHE_SYM", "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM",
  "CATALOG_NAME_SYM", "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET",
  "CHAR_SYM", "CHECKPOINT_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLIENT_STATS_SYM", "CLOSE_SYM",
  "COALESCE", "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS",
  "COLUMN_ADD_SYM", "COLUMN_CREATE_SYM", "COLUMN_DELETE_SYM",
  "COLUMN_EXISTS_SYM", "COLUMN_GET_SYM", "COLUMN_LIST_SYM", "COLUMN_SYM",
  "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM",
  "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM", "CONCURRENT",
  "CONDITION_SYM", "CONNECTION_SYM", "CONSISTENT_SYM", "CONSTRAINT",
  "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM",
  "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_USER", "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME",
  "DATABASE", "DATABASES", "DATAFILE_SYM", "DATA_SYM", "DATETIME",
  "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM",
  "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM",
  "DEALLOCATE_SYM", "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM", "DIRECTORY_SYM",
  "DISABLE_SYM", "DISCARD", "DISK_SYM", "DISTINCT", "DIV_SYM",
  "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM",
  "DYNAMIC_SYM", "EACH_SYM", "ELSE", "ELSEIF_SYM", "ENABLE_SYM",
  "ENCLOSED", "END", "ENDS_SYM", "END_OF_INPUT", "ENGINES_SYM",
  "ENGINE_SYM", "ENUM", "EQUAL_SYM", "ERROR_SYM", "ERRORS", "ESCAPED",
  "ESCAPE_SYM", "EVENTS_SYM", "EVENT_SYM", "EVERY_SYM", "EXAMINED_SYM",
  "EXECUTE_SYM", "EXISTS", "EXIT_SYM", "EXPANSION_SYM", "EXTENDED_SYM",
  "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM",
  "FETCH_SYM", "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM",
  "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM", "FOUND_SYM",
  "FROM", "FULL", "FULLTEXT_SYM", "FUNCTION_SYM", "GE", "GENERAL",
  "GENERATED_SYM", "GEOMETRYCOLLECTION", "GEOMETRY_SYM", "GET_FORMAT",
  "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM", "GROUP_CONCAT_SYM",
  "HANDLER_SYM", "HARD_SYM", "HASH_SYM", "HAVING", "HELP_SYM", "HEX_NUM",
  "HEX_STRING", "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM",
  "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM",
  "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM",
  "INDEX_STATS_SYM", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM",
  "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM",
  "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_SYM",
  "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM",
  "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM",
  "LAST_SYM", "LAST_VALUE", "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT",
  "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM",
  "LINES", "LINESTRING", "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM",
  "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB",
  "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY",
  "MASTER_CONNECT_RETRY_SYM", "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM",
  "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM",
  "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM",
  "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_KEY_SYM",
  "MASTER_SSL_SYM", "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM",
  "MASTER_USER_SYM", "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH",
  "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM", "MEDIUMBLOB", "MEDIUMINT",
  "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM",
  "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM",
  "NATIONAL_SYM", "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM",
  "NE", "NEG", "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM",
  "NOT2_SYM", "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM",
  "NO_WRITE_TO_BINLOG", "NULL_SYM", "NUM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SHOT_SYM", "ONE_SYM",
  "ONLINE_SYM", "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION",
  "OPTIONALLY", "OR2_SYM", "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER",
  "OUTFILE", "OUT_SYM", "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM",
  "PAGE_CHECKSUM_SYM", "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM",
  "PARTIAL", "PARTITIONING_SYM", "PARTITIONS_SYM", "PARTITION_SYM",
  "PASSWORD", "PERSISTENT_SYM", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM",
  "POINT_SYM", "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION",
  "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES",
  "PROCEDURE_SYM", "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM",
  "PROFILES_SYM", "PROXY_SYM", "PURGE", "QUARTER_SYM", "QUERY_SYM",
  "QUICK", "RANGE_SYM", "READS_SYM", "READ_ONLY_SYM", "READ_SYM",
  "READ_WRITE_SYM", "REAL", "REBUILD_SYM", "RECOVER_SYM", "REDOFILE_SYM",
  "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES", "REGEXP", "RELAY",
  "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM",
  "RELAY_THREAD", "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME",
  "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE",
  "REPLICATION", "REQUIRE_SYM", "RESET_SYM", "RESIGNAL_SYM", "RESOURCES",
  "RESTORE_SYM", "RESTRICT", "RESUME_SYM", "RETURNS_SYM", "RETURN_SYM",
  "REVOKE", "RIGHT", "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM",
  "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM", "RTREE_SYM", "SAVEPOINT_SYM",
  "SCHEDULE_SYM", "SCHEMA_NAME_SYM", "SECOND_MICROSECOND_SYM",
  "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM", "SENSITIVE_SYM",
  "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM", "SESSION_SYM",
  "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR", "SHARE_SYM",
  "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN", "SIGNAL_SYM",
  "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLOW", "SMALLINT", "SNAPSHOT_SYM",
  "SOCKET_SYM", "SOFT_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM",
  "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM",
  "SQLWARNING_SYM", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE_SYM",
  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM",
  "SQL_THREAD", "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM",
  "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM",
  "STRAIGHT_JOIN", "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM",
  "SUBJECT_SYM", "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING",
  "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM",
  "SYSDATE", "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY",
  "TABLE_STATS_SYM", "TABLE_SYM", "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM",
  "TEMPORARY", "TEMPTABLE_SYM", "TERMINATED", "TEXT_STRING", "TEXT_SYM",
  "THAN_SYM", "THEN_SYM", "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF",
  "TIME_SYM", "TINYBLOB", "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING",
  "TRANSACTION_SYM", "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM",
  "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM",
  "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER", "USER_STATS_SYM", "USE_FRM", "USE_SYM", "USING",
  "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES",
  "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE_SYM",
  "VARYING", "VAR_SAMP_SYM", "VIA_SYM", "VIEW_SYM", "VIRTUAL_SYM",
  "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM",
  "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM",
  "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM",
  "YEAR_SYM", "ZEROFILL", "IMPOSSIBLE_ACTION", "'='", "'>'", "'<'", "'|'",
  "'&'", "'-'", "'+'", "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'",
  "','", "'!'", "'{'", "'}'", "';'", "'@'", "'.'", "':'", "$accept",
  "query", "$@1", "opt_end_of_input", "verb_clause", "statement",
  "deallocate", "deallocate_or_drop", "prepare", "prepare_src", "execute",
  "$@2", "execute_using", "execute_var_list", "execute_var_ident", "help",
  "$@3", "change", "$@4", "master_defs", "master_def",
  "ignore_server_id_list", "ignore_server_id", "master_file_def", "create",
  "$@5", "$@6", "$@7", "$@8", "$@9", "$@10", "server_def",
  "server_options_list", "server_option", "event_tail", "$@11",
  "ev_schedule_time", "$@12", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@13", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@14", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@15", "$@16", "sp_cursor_stmt", "$@17",
  "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "sqlstate", "opt_value", "sp_hcond", "signal_stmt", "signal_value",
  "opt_signal_value", "opt_set_signal_information",
  "signal_information_item_list", "signal_allowed_expr",
  "signal_condition_information_item_name", "resignal_stmt",
  "sp_decl_idents", "sp_opt_default", "sp_proc_stmt", "sp_proc_stmt_if",
  "$@18", "sp_proc_stmt_statement", "$@19", "sp_proc_stmt_return", "$@20",
  "sp_proc_stmt_unlabeled", "$@21", "sp_proc_stmt_leave",
  "sp_proc_stmt_iterate", "sp_proc_stmt_open", "sp_proc_stmt_fetch",
  "$@22", "sp_proc_stmt_close", "sp_opt_fetch_noise", "sp_fetch_list",
  "sp_if", "$@23", "$@24", "$@25", "sp_elseifs", "case_stmt_specification",
  "simple_case_stmt", "$@26", "$@27", "searched_case_stmt", "$@28",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@29", "$@30", "searched_when_clause", "$@31",
  "$@32", "else_clause_opt", "sp_labeled_control", "$@33", "sp_opt_label",
  "sp_labeled_block", "$@34", "sp_unlabeled_block", "$@35",
  "sp_block_content", "$@36", "sp_unlabeled_control", "$@37", "$@38",
  "$@39", "trg_action_time", "trg_event", "change_tablespace_access",
  "change_tablespace_info", "tablespace_info", "opt_logfile_group_name",
  "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@40", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create2",
  "create2a", "$@41", "$@42", "create3", "$@43", "$@44",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@45",
  "have_partitioning", "partition_entry", "$@46", "partition",
  "part_type_def", "$@47", "opt_linear", "opt_key_algo", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@48",
  "$@49", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@50", "part_name", "opt_part_values", "$@51", "$@52", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@53", "$@54",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@55", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@56", "$@57", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@58", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "$@59", "$@60", "$@61", "$@62", "opt_check_constraint",
  "check_constraint", "opt_constraint", "constraint", "field_spec", "$@63",
  "field_def", "@64", "opt_generated_always", "vcol_opt_specifier",
  "vcol_opt_attribute", "vcol_opt_attribute_list", "vcol_attribute",
  "parse_vcol_expr", "virtual_column_func", "type", "$@65", "$@66",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now_or_signed_literal", "hex_num_or_string",
  "charset", "charset_name", "charset_name_or_default",
  "opt_load_data_charset", "old_or_new_charset_name",
  "old_or_new_charset_name_or_default", "collation_name", "opt_collate",
  "collation_name_or_default", "opt_default", "ascii", "unicode",
  "opt_binary", "opt_bin_mod", "opt_primary", "references", "opt_ref_list",
  "ref_list", "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@67", "$@68", "$@69", "$@70", "$@71", "$@72",
  "$@73", "ev_alter_on_schedule_completion", "opt_ev_rename_to",
  "opt_ev_sql_stmt", "ident_or_empty", "alter_commands", "$@74", "$@75",
  "$@76", "remove_partitioning", "all_or_alt_part_name_list",
  "add_partition_rule", "$@77", "add_part_extra", "reorg_partition_rule",
  "$@78", "reorg_parts_rule", "$@79", "alt_part_name_list",
  "alt_part_name_item", "alter_list", "add_column", "alter_list_item",
  "$@80", "$@81", "$@82", "opt_column", "opt_ignore", "alter_options",
  "$@83", "alter_options_part2", "alter_option_list", "alter_option",
  "opt_restrict", "opt_place", "opt_to", "slave", "$@84", "$@85", "start",
  "start_transaction_opts", "slave_thread_opts", "$@86",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "$@87", "opt_checksum_type",
  "repair_table_or_view", "$@88", "repair", "$@89", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "opt_view_repair_type", "analyze",
  "$@90", "binlog_base64_event", "check_view_or_table", "$@91", "check",
  "$@92", "opt_mi_check_type", "mi_check_types", "mi_check_type",
  "opt_view_check_type", "optimize", "$@93", "opt_no_write_to_binlog",
  "rename", "$@94", "rename_list", "table_to_table_list", "table_to_table",
  "keycache", "$@95", "keycache_list_or_parts", "keycache_list",
  "assign_to_keycache", "assign_to_keycache_parts", "key_cache_name",
  "preload", "$@96", "preload_list_or_parts", "preload_list",
  "preload_keys", "preload_keys_parts", "adm_partition", "$@97",
  "cache_keys_spec", "$@98", "cache_key_list_or_empty",
  "opt_ignore_leaves", "select", "select_init", "select_paren",
  "select_paren_derived", "select_init2", "$@99", "select_part2", "$@100",
  "$@101", "select_into", "select_from", "select_options",
  "select_option_list", "select_option", "select_lock_type",
  "select_item_list", "select_item", "remember_name", "remember_end",
  "select_alias", "opt_time_precision", "optional_braces", "expr",
  "bool_pri", "predicate", "bit_expr", "or", "and", "not", "not2",
  "comp_op", "all_or_any", "opt_dyncol_type", "dyncol_type",
  "dyncall_create_element", "dyncall_create_list", "simple_expr",
  "function_call_keyword", "function_call_nonkeyword",
  "function_call_conflict", "geometry_function", "function_call_generic",
  "@102", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "$@103", "$@104", "$@105", "variable", "$@106",
  "variable_aux", "opt_distinct", "opt_gconcat_separator",
  "opt_gorder_clause", "$@107", "gorder_list", "in_sum_expr", "$@108",
  "cast_type", "$@109", "opt_expr_list", "expr_list", "ident_list_arg",
  "ident_list", "opt_expr", "opt_else", "when_list", "table_ref",
  "join_table_list", "esc_table_ref", "derived_table_list", "join_table",
  "$@110", "$@111", "$@112", "$@113", "$@114", "$@115", "$@116",
  "normal_join", "table_factor", "$@117", "select_derived_union", "$@118",
  "$@119", "select_init2_derived", "select_part2_derived", "$@120",
  "$@121", "select_derived", "$@122", "select_derived2", "$@123", "$@124",
  "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@125",
  "$@126", "index_hints_list", "opt_index_hints_list", "$@127",
  "opt_key_definition", "$@128", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@129", "having_clause", "$@130", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@131", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "limit_rows_option",
  "delete_limit_clause", "int_num", "ulong_num", "real_ulong_num",
  "ulonglong_num", "real_ulonglong_num", "dec_num_error", "dec_num",
  "choice", "procedure_clause", "$@132", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@133",
  "select_var_list", "select_var_ident", "into", "$@134",
  "into_destination", "$@135", "$@136", "do", "$@137", "drop", "$@138",
  "$@139", "$@140", "table_list", "table_name", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "opt_temporary", "insert", "$@141",
  "$@142", "replace", "$@143", "$@144", "insert_lock_option",
  "replace_lock_option", "insert2", "insert_table", "insert_field_spec",
  "$@145", "fields", "insert_values", "$@146", "$@147", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@148", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@149", "update", "$@150", "$@151", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@152", "single_multi", "$@153", "$@154", "$@155", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "$@156", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@157", "show_param",
  "$@158", "$@159", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@160", "$@161", "describe_command",
  "opt_extended_describe", "opt_describe_column", "flush", "$@162",
  "flush_options", "$@163", "$@164", "opt_with_read_lock",
  "flush_options_list", "flush_option", "opt_table_list",
  "optional_flush_tables_arguments", "reset", "$@165", "reset_options",
  "reset_option", "$@166", "slave_reset_options", "purge", "$@167",
  "purge_options", "purge_option", "kill", "$@168", "kill_type",
  "kill_option", "kill_expr", "use", "load", "$@169", "$@170", "$@171",
  "$@172", "data_or_xml", "opt_local", "load_data_lock", "opt_duplicate",
  "opt_field_term", "field_term_list", "field_term", "opt_line_term",
  "line_term_list", "line_term", "opt_xml_rows_identified_by",
  "opt_ignore_lines", "lines_or_rows", "opt_field_or_var_spec",
  "fields_or_vars", "field_or_var", "opt_load_data_set_spec",
  "load_data_set_list", "load_data_set_elem", "text_literal",
  "text_string", "param_marker", "signed_literal", "literal",
  "NUM_literal", "insert_ident", "table_wild", "order_ident",
  "simple_ident", "simple_ident_nospvar", "simple_ident_q", "field_ident",
  "table_ident", "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user", "keyword", "keyword_sp",
  "set", "$@173", "opt_option", "option_value_list", "option_type_value",
  "$@174", "option_type", "option_type2", "opt_var_type",
  "opt_var_ident_type", "ext_option_value", "sys_option_value",
  "option_value", "internal_variable_name", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@175",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@176", "handler", "$@177", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@178",
  "handler_rkey_mode", "revoke", "revoke_command", "grant",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@179", "$@180", "$@181",
  "$@182", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "via_or_with", "using_or_as",
  "grant_user", "opt_column_list", "column_list", "column_list_id",
  "require_clause", "grant_options", "opt_grant_option",
  "grant_option_list", "grant_option", "begin", "$@183", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "$@184",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "$@185",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@186", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@187",
  "view_list_opt", "view_list", "view_select", "$@188", "view_select_aux",
  "view_check_option", "trigger_tail", "$@189", "$@190", "$@191",
  "udf_tail", "sf_tail", "$@192", "$@193", "$@194", "$@195", "$@196",
  "sp_tail", "$@197", "$@198", "$@199", "$@200", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@201", "opt_migrate", "install", "uninstall", "keep_gcc_happy", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,    61,    62,    60,
     124,    38,    45,    43,    42,    47,    37,    94,   126,    40,
      41,    44,    33,   123,   125,    59,    64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   639,   640,   641,   640,   640,   642,   642,   643,   643,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   645,   646,   646,   647,   648,   648,   650,
     649,   651,   651,   652,   652,   653,   655,   654,   657,   656,
     658,   658,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   660,   660,   660,
     661,   662,   662,   662,   662,   664,   663,   665,   663,   666,
     663,   667,   663,   668,   663,   669,   663,   663,   663,   663,
     663,   670,   671,   671,   672,   672,   672,   672,   672,   672,
     672,   674,   673,   676,   675,   675,   677,   677,   677,   677,
     678,   678,   679,   679,   680,   680,   681,   681,   682,   682,
     684,   683,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   686,   687,   687,   688,   688,
     689,   689,   690,   690,   690,   690,   690,   690,   690,   691,
     691,   691,   692,   692,   694,   693,   695,   695,   696,   696,
     697,   697,   698,   698,   699,   699,   700,   701,   702,   702,
     703,   703,   704,   705,   705,   705,   705,   706,   706,   707,
     707,   708,   708,   710,   709,   709,   711,   709,   709,   713,
     712,   714,   714,   715,   715,   716,   717,   717,   718,   719,
     719,   720,   720,   720,   720,   720,   721,   722,   722,   723,
     723,   724,   724,   725,   725,   726,   726,   726,   727,   727,
     727,   727,   727,   727,   727,   727,   727,   727,   727,   727,
     728,   729,   729,   730,   730,   731,   731,   731,   731,   731,
     731,   731,   731,   731,   731,   731,   731,   731,   733,   732,
     735,   734,   737,   736,   739,   738,   740,   741,   742,   744,
     743,   745,   746,   746,   746,   747,   747,   749,   750,   751,
     748,   752,   752,   752,   753,   753,   755,   756,   754,   758,
     757,   759,   759,   760,   760,   762,   763,   761,   765,   766,
     764,   767,   767,   769,   768,   770,   770,   772,   771,   774,
     773,   776,   775,   777,   778,   779,   777,   780,   777,   781,
     781,   782,   782,   782,   783,   784,   785,   786,   786,   787,
     787,   788,   789,   790,   790,   792,   791,   793,   793,   793,
     794,   794,   794,   795,   796,   796,   796,   797,   797,   797,
     797,   797,   797,   797,   797,   798,   799,   799,   799,   800,
     800,   800,   800,   800,   801,   802,   802,   802,   803,   803,
     803,   803,   803,   803,   803,   804,   805,   805,   805,   806,
     806,   806,   807,   808,   809,   810,   811,   812,   812,   812,
     813,   814,   815,   816,   817,   818,   819,   820,   821,   822,
     822,   823,   823,   824,   824,   825,   825,   825,   825,   827,
     826,   828,   826,   829,   830,   829,   831,   829,   832,   833,
     833,   835,   834,   836,   838,   837,   839,   840,   841,   840,
     840,   840,   840,   840,   842,   842,   843,   843,   844,   844,
     845,   845,   846,   847,   848,   849,   850,   850,   851,   852,
     851,   853,   851,   854,   854,   855,   856,   857,   857,   858,
     858,   859,   859,   861,   860,   862,   863,   864,   863,   865,
     863,   866,   866,   867,   867,   868,   868,   870,   871,   869,
     872,   872,   873,   873,   874,   874,   875,   875,   877,   876,
     878,   879,   879,   880,   880,   881,   881,   881,   881,   881,
     881,   881,   881,   881,   883,   884,   882,   885,   885,   886,
     886,   887,   887,   888,   888,   889,   889,   890,   890,   891,
     892,   892,   893,   893,   894,   894,   895,   895,   895,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   897,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     898,   899,   900,   901,   902,   902,   902,   902,   902,   902,
     902,   903,   903,   903,   904,   904,   905,   905,   905,   905,
     906,   907,   907,   908,   908,   909,   909,   911,   910,   912,
     910,   913,   910,   914,   910,   910,   910,   915,   915,   916,
     917,   917,   918,   920,   919,   921,   922,   921,   923,   923,
     924,   924,   924,   925,   925,   926,   926,   927,   927,   927,
     928,   929,   930,   930,   930,   930,   930,   930,   930,   930,
     930,   930,   930,   930,   930,   930,   930,   930,   930,   930,
     930,   930,   930,   930,   930,   930,   930,   930,   930,   930,
     930,   930,   930,   930,   930,   930,   930,   931,   930,   932,
     930,   930,   930,   933,   933,   933,   933,   933,   933,   933,
     933,   934,   935,   935,   936,   936,   937,   937,   937,   937,
     937,   938,   938,   938,   938,   938,   939,   939,   939,   940,
     940,   940,   941,   942,   942,   943,   943,   944,   944,   944,
     945,   945,   945,   945,   946,   946,   947,   947,   948,   948,
     949,   949,   950,   950,   950,   950,   950,   950,   950,   950,
     950,   950,   950,   950,   950,   950,   950,   951,   952,   952,
     953,   953,   954,   954,   955,   955,   956,   956,   957,   957,
     958,   958,   959,   959,   960,   961,   961,   962,   962,   963,
     963,   964,   964,   964,   965,   965,   965,   966,   966,   966,
     966,   966,   966,   966,   967,   967,   968,   968,   969,   970,
     970,   971,   971,   972,   972,   972,   972,   973,   973,   973,
     973,   973,   974,   974,   974,   974,   974,   975,   976,   976,
     977,   977,   978,   978,   979,   979,   979,   980,   980,   981,
     982,   983,   984,   984,   985,   985,   986,   986,   987,   987,
     988,   988,   989,   989,   990,   990,   991,   991,   992,   992,
     992,   992,   992,   992,   993,   993,   994,   995,   995,   996,
     996,   996,   997,   997,   998,   998,   999,   999,  1000,  1000,
    1001,  1001,  1003,  1002,  1004,  1002,  1002,  1005,  1002,  1006,
    1002,  1007,  1002,  1008,  1002,  1009,  1002,  1002,  1002,  1002,
    1002,  1002,  1010,  1010,  1010,  1010,  1011,  1011,  1012,  1012,
    1013,  1013,  1014,  1014,  1014,  1014,  1014,  1014,  1014,  1014,
    1014,  1014,  1015,  1014,  1014,  1016,  1014,  1017,  1014,  1014,
    1014,  1014,  1018,  1019,  1019,  1021,  1020,  1022,  1022,  1022,
    1024,  1023,  1025,  1026,  1025,  1027,  1027,  1028,  1029,  1029,
    1030,  1031,  1031,  1031,  1032,  1031,  1033,  1034,  1031,  1031,
    1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,
    1031,  1031,  1035,  1035,  1036,  1036,  1038,  1037,  1039,  1039,
    1040,  1040,  1041,  1041,  1042,  1042,  1042,  1043,  1043,  1043,
    1044,  1044,  1044,  1044,  1046,  1045,  1045,  1047,  1045,  1045,
    1048,  1049,  1049,  1051,  1050,  1052,  1052,  1053,  1053,  1053,
    1054,  1054,  1055,  1055,  1057,  1056,  1058,  1058,  1058,  1059,
    1060,  1059,  1062,  1061,  1063,  1063,  1064,  1064,  1065,  1065,
    1065,  1066,  1066,  1068,  1067,  1069,  1070,  1071,  1070,  1073,
    1072,  1074,  1074,  1075,  1075,  1076,  1076,  1076,  1076,  1076,
    1076,  1077,  1077,  1079,  1078,  1080,  1080,  1080,  1082,  1081,
    1081,  1083,  1083,  1084,  1084,  1085,  1087,  1086,  1088,  1088,
    1089,  1089,  1090,  1091,  1092,  1092,  1094,  1093,  1095,  1095,
    1096,  1096,  1097,  1098,  1100,  1099,  1102,  1101,  1103,  1103,
    1104,  1104,  1105,  1106,  1106,  1107,  1107,  1108,  1108,  1110,
    1109,  1112,  1113,  1111,  1114,  1114,  1114,  1114,  1114,  1115,
    1115,  1116,  1116,  1117,  1117,  1118,  1118,  1118,  1119,  1119,
    1119,  1120,  1120,  1120,  1121,  1121,  1122,  1123,  1124,  1124,
    1124,  1124,  1124,  1125,  1125,  1125,  1126,  1126,  1127,  1127,
    1127,  1127,  1127,  1127,  1127,  1127,  1127,  1127,  1127,  1128,
    1128,  1128,  1128,  1128,  1128,  1129,  1129,  1129,  1129,  1129,
    1129,  1129,  1129,  1129,  1129,  1129,  1129,  1129,  1129,  1130,
    1130,  1130,  1130,  1130,  1130,  1130,  1130,  1130,  1130,  1130,
    1130,  1130,  1130,  1130,  1131,  1131,  1132,  1132,  1133,  1133,
    1134,  1134,  1135,  1135,  1135,  1135,  1135,  1135,  1136,  1136,
    1137,  1137,  1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,
    1138,  1138,  1138,  1139,  1140,  1140,  1141,  1141,  1141,  1141,
    1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,
    1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,
    1141,  1141,  1141,  1141,  1141,  1141,  1142,  1142,  1142,  1142,
    1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,
    1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,
    1142,  1142,  1142,  1143,  1143,  1143,  1143,  1143,  1143,  1143,
    1143,  1143,  1143,  1143,  1143,  1143,  1143,  1143,  1143,  1143,
    1143,  1143,  1143,  1143,  1143,  1143,  1143,  1143,  1143,  1143,
    1143,  1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,
    1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,  1145,
    1145,  1145,  1145,  1145,  1145,  1145,  1145,  1147,  1146,  1146,
    1148,  1148,  1149,  1149,  1150,  1150,  1151,  1151,  1152,  1152,
    1153,  1154,  1154,  1154,  1154,  1154,  1154,  1154,  1155,  1156,
    1154,  1154,  1154,  1154,  1154,  1154,  1154,  1154,  1154,  1154,
    1154,  1157,  1154,  1159,  1158,  1160,  1160,  1160,  1161,  1161,
    1162,  1162,  1163,  1164,  1163,  1165,  1165,  1167,  1166,  1168,
    1168,  1168,  1168,  1168,  1168,  1168,  1168,  1168,  1168,  1168,
    1168,  1169,  1168,  1170,  1170,  1171,  1171,  1172,  1172,  1173,
    1173,  1174,  1174,  1175,  1175,  1176,  1176,  1177,  1177,  1178,
    1179,  1179,  1180,  1180,  1181,  1181,  1182,  1181,  1183,  1181,
    1184,  1181,  1181,  1185,  1181,  1186,  1181,  1181,  1187,  1181,
    1188,  1181,  1181,  1189,  1189,  1189,  1191,  1190,  1190,  1190,
    1192,  1193,  1194,  1192,  1195,  1197,  1198,  1196,  1200,  1199,
    1202,  1203,  1201,  1204,  1205,  1206,  1206,  1207,  1207,  1207,
    1207,  1208,  1208,  1210,  1209,  1211,  1209,  1212,  1212,  1213,
    1214,  1213,  1216,  1215,  1217,  1217,  1218,  1218,  1219,  1219,
    1220,  1220,  1221,  1221,  1221,  1221,  1221,  1221,  1221,  1221,
    1221,  1221,  1221,  1221,  1222,  1222,  1222,  1222,  1222,  1222,
    1222,  1222,  1222,  1223,  1223,  1223,  1223,  1224,  1224,  1224,
    1225,  1225,  1226,  1226,  1227,  1228,  1227,  1229,  1230,  1229,
    1231,  1231,  1232,  1232,  1233,  1233,  1234,  1234,  1234,  1235,
    1236,  1236,  1237,  1238,  1238,  1240,  1239,  1241,  1241,  1242,
    1242,  1242,  1243,  1243,  1244,  1244,  1245,  1245,  1245,  1246,
    1246,  1246,  1247,  1247,  1247,  1247,  1247,  1248,  1249,  1249,
    1249,  1249,  1250,  1250,  1250,  1251,  1251,  1251,  1251,  1251,
    1251,  1252,  1252,  1252,  1252,  1252,  1253,  1253,  1253,  1253,
    1253,  1254,  1254,  1254,  1254,  1254,  1255,  1256,  1256,  1257,
    1257,  1258,  1259,  1258,  1260,  1260,  1261,  1261,  1262,  1264,
    1263,  1265,  1265,  1266,  1266,  1268,  1267,  1270,  1271,  1269,
    1269,  1269,  1273,  1272,  1275,  1274,  1276,  1274,  1274,  1274,
    1274,  1274,  1274,  1277,  1274,  1274,  1274,  1274,  1274,  1274,
    1278,  1278,  1279,  1280,  1280,  1281,  1282,  1282,  1283,  1283,
    1285,  1286,  1284,  1288,  1289,  1287,  1290,  1290,  1290,  1290,
    1291,  1291,  1292,  1292,  1293,  1294,  1294,  1294,  1295,  1294,
    1296,  1296,  1297,  1297,  1298,  1297,  1299,  1297,  1300,  1300,
    1301,  1301,  1302,  1303,  1303,  1304,  1304,  1306,  1305,  1307,
    1307,  1308,  1308,  1309,  1309,  1310,  1311,  1310,  1313,  1314,
    1312,  1315,  1315,  1316,  1317,  1317,  1318,  1319,  1319,  1321,
    1320,  1323,  1322,  1324,  1322,  1325,  1322,  1326,  1326,  1327,
    1327,  1328,  1328,  1329,  1329,  1330,  1330,  1330,  1332,  1331,
    1333,  1333,  1334,  1334,  1335,  1335,  1336,  1336,  1336,  1336,
    1336,  1336,  1336,  1336,  1336,  1337,  1337,  1339,  1338,  1340,
    1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,
    1340,  1341,  1340,  1342,  1340,  1340,  1340,  1340,  1340,  1340,
    1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,
    1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,
    1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,
    1343,  1343,  1343,  1344,  1344,  1345,  1345,  1346,  1346,  1347,
    1347,  1348,  1348,  1349,  1349,  1350,  1350,  1351,  1351,  1351,
    1353,  1352,  1354,  1352,  1355,  1355,  1356,  1356,  1356,  1357,
    1357,  1357,  1359,  1358,  1361,  1362,  1360,  1360,  1363,  1363,
    1364,  1364,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,  1365,
    1365,  1366,  1366,  1367,  1367,  1369,  1368,  1370,  1370,  1372,
    1371,  1371,  1371,  1373,  1373,  1375,  1374,  1376,  1377,  1377,
    1379,  1378,  1380,  1380,  1380,  1381,  1381,  1381,  1382,  1382,
    1383,  1385,  1386,  1387,  1388,  1384,  1389,  1389,  1390,  1390,
    1391,  1391,  1391,  1392,  1392,  1392,  1393,  1393,  1394,  1394,
    1395,  1395,  1395,  1395,  1396,  1396,  1397,  1397,  1398,  1398,
    1399,  1399,  1400,  1400,  1401,  1401,  1402,  1402,  1402,  1403,
    1403,  1404,  1404,  1405,  1405,  1406,  1406,  1407,  1408,  1408,
    1408,  1408,  1409,  1409,  1409,  1409,  1410,  1411,  1411,  1411,
    1412,  1412,  1412,  1412,  1412,  1412,  1412,  1412,  1412,  1412,
    1412,  1412,  1412,  1413,  1413,  1413,  1413,  1413,  1414,  1414,
    1415,  1415,  1416,  1417,  1417,  1418,  1418,  1419,  1419,  1419,
    1420,  1420,  1420,  1420,  1421,  1421,  1421,  1422,  1422,  1423,
    1424,  1424,  1425,  1426,  1427,  1428,  1428,  1429,  1429,  1430,
    1430,  1430,  1431,  1431,  1431,  1432,  1432,  1432,  1432,  1432,
    1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,
    1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,
    1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,
    1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,
    1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,
    1432,  1432,  1432,  1432,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,  1433,
    1433,  1433,  1433,  1433,  1433,  1433,  1433,  1435,  1434,  1436,
    1436,  1437,  1437,  1439,  1438,  1440,  1440,  1440,  1440,  1441,
    1441,  1442,  1442,  1442,  1442,  1443,  1443,  1443,  1443,  1444,
    1444,  1445,  1445,  1446,  1446,  1446,  1446,  1446,  1446,  1446,
    1447,  1447,  1447,  1448,  1448,  1448,  1448,  1449,  1449,  1449,
    1450,  1450,  1450,  1450,  1450,  1452,  1451,  1453,  1453,  1454,
    1454,  1455,  1456,  1456,  1456,  1456,  1456,  1458,  1457,  1459,
    1459,  1460,  1459,  1461,  1461,  1462,  1462,  1463,  1463,  1463,
    1463,  1464,  1463,  1465,  1465,  1465,  1465,  1465,  1466,  1467,
    1467,  1467,  1467,  1467,  1468,  1469,  1469,  1469,  1469,  1470,
    1470,  1471,  1471,  1472,  1472,  1473,  1473,  1475,  1474,  1476,
    1474,  1477,  1474,  1478,  1474,  1474,  1474,  1474,  1474,  1474,
    1474,  1474,  1474,  1474,  1474,  1474,  1474,  1474,  1474,  1474,
    1474,  1474,  1474,  1474,  1474,  1474,  1474,  1474,  1474,  1474,
    1474,  1479,  1479,  1480,  1480,  1481,  1481,  1481,  1482,  1482,
    1482,  1482,  1483,  1483,  1484,  1484,  1485,  1485,  1486,  1486,
    1487,  1487,  1487,  1487,  1487,  1488,  1488,  1489,  1489,  1490,
    1491,  1491,  1491,  1491,  1491,  1492,  1492,  1493,  1493,  1494,
    1494,  1495,  1495,  1495,  1495,  1495,  1497,  1496,  1498,  1498,
    1499,  1499,  1499,  1500,  1500,  1500,  1501,  1501,  1502,  1503,
    1503,  1504,  1505,  1506,  1506,  1508,  1507,  1509,  1509,  1509,
    1510,  1510,  1512,  1511,  1513,  1513,  1514,  1514,  1514,  1515,
    1515,  1516,  1517,  1516,  1518,  1519,  1520,  1521,  1521,  1522,
    1522,  1523,  1523,  1523,  1523,  1523,  1523,  1523,  1523,  1524,
    1524,  1524,  1525,  1525,  1525,  1525,  1525,  1526,  1526,  1526,
    1526,  1526,  1526,  1527,  1527,  1528,  1529,  1530,  1530,  1530,
    1531,  1532,  1532,  1532,  1533,  1533,  1533,  1535,  1534,  1536,
    1536,  1537,  1537,  1539,  1538,  1540,  1540,  1541,  1541,  1541,
    1541,  1543,  1544,  1545,  1542,  1546,  1546,  1548,  1549,  1550,
    1551,  1552,  1547,  1554,  1555,  1556,  1557,  1553,  1558,  1558,
    1558,  1558,  1558,  1558,  1559,  1559,  1559,  1560,  1560,  1561,
    1561,  1561,  1562,  1562,  1563,  1564,  1563,  1565,  1565,  1566,
    1566,  1567,  1567,  1568
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     4,     1,     2,     0,
       4,     0,     2,     3,     1,     2,     0,     3,     0,     5,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     5,     1,     0,     1,     3,
       1,     3,     3,     3,     3,     0,     7,     0,    12,     0,
      12,     0,    12,     0,     6,     0,     3,     4,     4,     3,
       2,    10,     1,     3,     2,     2,     2,     2,     2,     2,
       2,     0,    13,     0,     6,     2,     0,     1,     3,     1,
       0,     2,     0,     2,     0,     1,     3,     4,     0,     2,
       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     3,     1,     0,     2,
       0,     2,     2,     2,     2,     2,     3,     3,     1,     1,
       1,     2,     3,     3,     0,     4,     0,     3,     0,     1,
       3,     1,     0,     1,     3,     1,     0,     3,     0,     1,
       3,     1,     4,     0,     1,     1,     1,     0,     3,     2,
       3,     0,     3,     0,     5,     5,     0,     7,     5,     0,
       2,     1,     1,     1,     3,     1,     1,     1,     3,     0,
       1,     1,     1,     1,     2,     1,     3,     1,     1,     0,
       1,     0,     2,     3,     5,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     3,     0,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     5,
       0,     2,     0,     3,     0,     2,     2,     2,     2,     0,
       6,     2,     0,     2,     1,     1,     3,     0,     0,     0,
       7,     0,     2,     2,     1,     1,     0,     0,     8,     0,
       6,     1,     2,     1,     2,     0,     0,     6,     0,     0,
       6,     0,     2,     0,     5,     0,     1,     0,     5,     0,
       2,     0,     5,     4,     0,     0,     8,     0,     7,     1,
       1,     1,     1,     1,     2,     4,     5,     0,     4,     4,
       4,     3,     3,     2,     2,     0,     2,     1,     2,     3,
       1,     1,     1,     1,     1,     2,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     1,     1,     2,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     3,     1,
       1,     1,     2,     2,     2,     1,     1,     1,     1,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     4,     0,
       1,     1,     1,     1,     1,     2,     3,     2,     4,     0,
       6,     0,     5,     0,     0,     5,     0,     7,     1,     0,
       1,     0,     4,     0,     0,     3,     5,     6,     0,     4,
       2,     2,     2,     2,     0,     1,     0,     3,     0,     1,
       1,     3,     1,     4,     5,     5,     0,     2,     0,     0,
       7,     0,    10,     1,     3,     1,     1,     0,     2,     0,
       3,     1,     3,     0,     6,     1,     0,     0,     5,     0,
       4,     1,     1,     1,     3,     1,     3,     0,     0,     5,
       1,     3,     1,     1,     0,     3,     1,     3,     0,     4,
       1,     0,     1,     2,     1,     3,     4,     3,     3,     3,
       3,     4,     4,     3,     0,     0,     6,     0,     1,     0,
       1,     1,     2,     1,     1,     0,     1,     1,     2,     1,
       0,     3,     0,     1,     1,     2,     1,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     0,     6,     1,     1,     3,     4,     4,
       2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       4,     4,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     2,     2,     0,     8,     0,
       9,     0,     9,     0,     9,     8,     2,     0,     1,     4,
       0,     1,     2,     0,     3,     2,     0,     9,     0,     2,
       0,     1,     1,     0,     1,     2,     1,     1,     2,     2,
       4,     3,     3,     3,     3,     1,     2,     1,     1,     3,
       2,     3,     2,     2,     1,     3,     3,     2,     3,     1,
       2,     2,     2,     1,     2,     1,     1,     1,     2,     3,
       2,     3,     2,     2,     3,     3,     3,     0,     6,     0,
       6,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     2,     1,     2,     3,
       2,     1,     1,     1,     1,     1,     1,     1,     2,     0,
       1,     1,     5,     0,     1,     2,     1,     1,     1,     1,
       3,     3,     3,     3,     0,     1,     0,     1,     0,     1,
       2,     1,     1,     2,     2,     4,     1,     3,     2,     1,
       2,     2,     2,     3,     3,     3,     3,     2,     2,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     0,     2,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     0,
       1,     1,     2,     2,     1,     2,     2,     0,     1,     1,
       1,     3,     1,     3,     0,     1,     0,     1,     5,     0,
       3,     3,     1,     0,     2,     2,     2,     0,     3,     3,
       6,     6,     1,     1,     2,     2,     2,     1,     2,     2,
       1,     1,     0,     1,     1,     1,     1,     0,     1,     1,
       1,     0,     1,     2,     0,     1,     0,     1,     0,     1,
       1,     2,     1,     2,     1,     2,     2,     2,     3,     2,
       3,     3,     3,     3,     1,     1,     1,     1,     3,     1,
       1,     1,     4,     2,     1,     4,     0,     1,     0,     2,
       1,     3,     0,     6,     0,     5,     7,     0,     5,     0,
       5,     0,     5,     0,     4,     0,    10,     3,     4,     3,
       3,     7,     0,     3,     1,     4,     0,     3,     0,     2,
       0,     1,     0,     2,     2,     2,     2,     1,     1,     1,
       3,     4,     0,     6,     4,     0,     5,     0,     6,     4,
       3,     1,     2,     1,     1,     0,     5,     0,     3,     2,
       0,     5,     0,     0,     6,     1,     3,     1,     1,     3,
       2,     3,     2,     4,     0,     6,     0,     0,     7,     4,
       4,     3,     3,     2,     2,     6,     5,     3,     5,     1,
       1,     1,     0,     1,     0,     1,     0,     2,     0,     1,
       2,     1,     1,     1,     0,     1,     1,     0,     2,     1,
       0,     1,     1,     1,     0,     5,     3,     0,     5,     3,
       3,     0,     3,     0,     2,     1,     3,     0,     1,     1,
       0,     2,     1,     3,     0,     5,     0,     1,     1,     3,
       0,     4,     0,     4,     0,     1,     1,     2,     1,     1,
       1,     0,     2,     0,     5,     2,     3,     0,     4,     0,
       3,     0,     1,     1,     2,     1,     1,     1,     1,     1,
       2,     0,     2,     0,     5,     0,     1,     1,     0,     4,
       4,     3,     5,     1,     3,     3,     0,     6,     1,     1,
       1,     3,     2,     3,     1,     1,     0,     6,     1,     1,
       1,     3,     3,     4,     0,     6,     0,     2,     0,     4,
       0,     2,     1,     2,     4,     2,     3,     2,     3,     0,
       3,     0,     0,     6,     2,     1,     1,     2,     2,     8,
       4,     0,     1,     2,     1,     1,     1,     1,     0,     2,
       4,     3,     1,     1,     3,     4,     0,     0,     0,     2,
       2,     1,     1,     0,     2,     3,     0,     2,     3,     3,
       3,     2,     3,     4,     3,     4,     3,     4,     1,     3,
       4,     3,     3,     6,     1,     5,     6,     5,     7,     6,
       8,     5,     6,     4,     4,     5,     3,     4,     1,     3,
       3,     3,     3,     3,     3,     5,     5,     3,     3,     3,
       3,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     2,     1,     2,     1,     1,     1,     2,     2,     1,
       1,     2,     2,     4,     1,     3,     1,     1,     1,     1,
       1,     3,     1,     1,     1,     1,     3,     2,     2,     2,
       2,     3,     3,     5,     6,     4,     4,     7,     2,     6,
       5,     6,     6,     4,     4,     5,     4,     6,     2,     4,
       4,     4,    10,     6,     8,     6,     4,     4,     6,     4,
       4,     4,     6,     4,     7,     7,     7,     6,     6,     6,
       6,     3,     4,     6,     8,     2,     2,     8,     8,     6,
       6,     2,     6,     6,     8,     8,     6,     8,     6,     2,
       8,     8,     2,     2,     2,     6,     6,     6,     4,     4,
       8,     4,     4,     4,     4,     3,     8,     4,     4,     6,
       4,     4,     4,     6,     8,     6,     4,     6,     1,     6,
       4,     4,     4,     4,     4,     6,     4,     0,     5,     6,
       2,     3,     0,     4,     0,     3,     0,     1,     1,     3,
       4,     4,     5,     4,     4,     4,     5,     4,     0,     0,
       7,     4,     5,     4,     5,     4,     4,     4,     4,     4,
       5,     0,     8,     0,     3,     3,     1,     4,     0,     1,
       0,     2,     0,     0,     4,     4,     2,     0,     3,     2,
       3,     2,     1,     1,     2,     1,     2,     1,     2,     2,
       2,     0,     3,     0,     1,     1,     3,     1,     3,     1,
       3,     0,     1,     0,     2,     4,     5,     1,     1,     1,
       1,     4,     1,     3,     3,     3,     0,     6,     0,     6,
       0,     8,     4,     0,     8,     0,    10,     6,     0,     8,
       0,    10,     6,     1,     2,     2,     0,     4,     3,     5,
       2,     0,     0,     7,     1,     0,     0,     6,     0,     3,
       0,     0,     5,     0,     1,     0,     1,     0,     2,     3,
       3,     1,     1,     0,     7,     0,     7,     1,     2,     0,
       0,     2,     0,     2,     0,     1,     1,     1,     1,     3,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     1,     1,
       0,     2,     0,     1,     0,     0,     3,     0,     0,     3,
       2,     0,     0,     4,     4,     2,     0,     1,     1,     3,
       3,     1,     2,     0,     1,     0,     4,     4,     2,     0,
       1,     1,     0,     1,     0,     1,     2,     5,     4,     1,
       3,     3,     1,     1,     1,     1,     1,     1,     0,     2,
       3,     4,     1,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     0,     6,     0,     1,     3,     1,     3,     0,
       2,     3,     1,     2,     1,     0,     3,     0,     0,     7,
       2,     1,     0,     3,     0,     7,     0,     6,     4,     6,
       4,     4,     4,     0,     6,     4,     4,     5,     6,     4,
       1,     3,     1,     1,     3,     1,     0,     2,     0,     1,
       0,     0,     8,     0,     0,     6,     0,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     3,     4,     0,     3,
       3,     1,     2,     2,     0,     3,     0,     5,     3,     1,
       3,     1,     3,     1,     1,     0,     1,     0,     4,     0,
       1,     3,     1,     1,     1,     0,     0,     6,     0,     0,
      11,     3,     1,     3,     3,     1,     3,     0,     1,     0,
       4,     0,     6,     0,     5,     0,     6,     1,     3,     2,
       4,     0,     2,     0,     2,     1,     1,     1,     0,     4,
       0,     1,     0,     1,     1,     3,     1,     1,     2,     2,
       2,     1,     1,     1,     1,     0,     3,     0,     3,     2,
       4,     4,     3,     4,     4,     1,     3,     3,     6,     2,
       2,     0,     6,     0,     6,     5,     2,     1,     1,     1,
       5,     5,     2,     2,     1,     4,     3,     2,     3,     2,
       2,     1,     3,     4,     3,     3,     2,     2,     1,     1,
       1,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     0,     1,     0,     2,     0,
       1,     1,     1,     0,     2,     0,     2,     0,     2,     2,
       0,     4,     0,     4,     1,     1,     0,     1,     1,     0,
       1,     1,     0,     4,     0,     0,     5,     1,     0,     4,
       3,     1,     2,     2,     2,     2,     2,     2,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     1,     0,     3,     0,     3,     3,     1,     0,
       3,     1,     2,     0,     1,     0,     3,     3,     2,     2,
       0,     5,     0,     1,     1,     0,     1,     1,     1,     2,
       2,     0,     0,     0,     0,    21,     1,     1,     0,     1,
       0,     1,     1,     0,     1,     1,     0,     2,     2,     1,
       3,     4,     3,     3,     0,     2,     2,     1,     3,     3,
       0,     4,     0,     3,     1,     1,     0,     3,     2,     3,
       1,     1,     2,     0,     2,     3,     1,     5,     1,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       2,     2,     2,     1,     1,     1,     1,     1,     1,     1,
       3,     5,     1,     1,     1,     1,     1,     3,     4,     5,
       1,     5,     3,     2,     1,     3,     2,     2,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     4,     0,
       1,     1,     3,     0,     2,     1,     1,     1,     1,     0,
       1,     0,     1,     1,     1,     0,     2,     2,     2,     1,
       2,     4,     5,     4,     6,     2,     3,     3,     3,     5,
       1,     3,     3,     2,     2,     2,     1,     1,     4,     4,
       1,     1,     1,     1,     1,     0,     4,     1,     1,     1,
       3,     3,     1,     1,     2,     2,     2,     0,     3,     4,
       3,     0,     7,     1,     2,     1,     1,     1,     1,     1,
       1,     0,     5,     1,     1,     1,     1,     1,     3,     6,
       6,     6,     7,     5,     3,     8,     8,     8,     6,     0,
       1,     1,     2,     0,     1,     1,     3,     0,     3,     0,
       3,     0,     3,     0,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     2,     1,     1,
       2,     0,     1,     3,     1,     2,     2,     2,     1,     3,
       3,     1,     1,     3,     1,     3,     1,     1,     1,     1,
       4,     5,     4,     6,     1,     0,     3,     3,     1,     1,
       0,     2,     2,     2,     2,     0,     2,     0,     3,     2,
       1,     2,     2,     2,     2,     2,     0,     3,     0,     1,
       0,     3,     2,     0,     1,     2,     0,     1,     4,     4,
       5,     2,     3,     0,     1,     0,     4,     0,     1,     1,
       0,     1,     0,     2,     2,     1,     0,     1,     1,     2,
       3,     2,     0,     6,     3,     0,     0,     0,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     3,     1,     2,     1,
       2,     3,     3,     3,     0,     3,     3,     0,     7,     0,
       3,     1,     3,     0,     3,     2,     4,     0,     3,     4,
       4,     0,     0,     0,    16,     8,     7,     0,     0,     0,
       0,     0,    15,     0,     0,     0,     0,    12,     4,     4,
       3,     4,     3,     2,     1,     3,     5,     1,     1,     0,
       1,     1,     0,     2,     0,     0,     3,     0,     2,     5,
       3,     3,     3,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   956,  1035,  2506,     0,     0,     0,     0,     0,  1019,
    2508,   115,    64,  1679,  1794,  1795,  1592,  1618,     2,     0,
    1035,   165,     0,    76,  1620,     0,  1850,     0,     0,  1035,
       0,   444,     0,  1845,     0,     0,  1035,  1623,  1835,   239,
     165,  2508,     0,  1081,  2329,  1717,     0,     0,     0,     0,
    1700,     0,  2387,  1668,     0,     0,  2643,     0,     0,     3,
       8,    19,     0,    40,    24,    28,    14,    18,    13,    53,
      47,    38,    37,    10,    55,    56,    16,    44,    11,    12,
      15,    36,    43,    32,    39,    51,  1072,    22,    23,    29,
      45,    60,    20,    57,    54,    21,  1796,    25,    46,    41,
      33,    61,    34,    52,    35,    59,    27,    48,    26,     9,
      17,    49,    50,    42,    62,    30,    58,    31,     0,   890,
       0,     0,     0,     0,     0,     0,     0,   958,   873,  2573,
    2574,  2575,  1037,  1036,     0,  2508,  1962,  1015,  1046,  2034,
    2035,  2036,  2037,  2038,  2039,  2040,  2041,  1976,  2042,  2043,
    2045,  2044,  2046,  2047,  1977,  1978,  2048,  2049,  2050,  2052,
    2051,  2053,  1979,  1980,  2054,  2055,  2056,  2057,  1981,  1983,
    1982,  2058,  2061,  2060,  2059,  1984,  2062,  2063,  2064,  2066,
    1985,  1986,  1987,  1988,  1989,  1990,  2065,  1991,  2067,  1992,
    2068,  2069,  2070,  2071,  2072,  2073,  2074,  2076,  2075,  1993,
    2077,  2078,  2079,  2080,  2081,  2083,  2082,  2084,  2085,  2086,
    1994,  2087,  2088,  2089,  2090,  2091,  2092,  2093,  1995,  2094,
    2095,  2096,  2113,  1996,  2097,  2100,  2099,  2098,  2101,  2102,
    2103,  2105,  2104,  2106,  1997,  1998,  2107,  2108,  2109,  2111,
    2110,  2115,  2116,  2117,  1999,  2112,  2114,  2305,  2118,  2119,
    2121,  2120,  2122,  2124,  2123,  2000,  2126,  2125,  2001,  2002,
    2127,  2128,  1960,  2129,  1961,  2130,  2133,  2134,  2131,  2135,
    2140,  2003,  2132,  2136,  2137,  2138,  2139,  2141,  2004,  2143,
    2142,  2144,  2145,  2146,  2147,  2148,  2149,  2150,  2151,  2152,
    2163,  2156,  2158,  2159,  2161,  2157,  2162,  2166,  2165,  2167,
    2168,  2169,  2164,  2154,  2160,  2155,  2170,  2171,  2153,  2172,
    2173,  2174,  2175,  2176,  2177,  2178,  2179,  2180,  2181,  2182,
    2184,  2183,  2185,  2186,  2187,  2188,  2189,  2190,  2191,  2193,
    2192,  2194,  2195,  2196,  2198,  2197,  2200,  2201,  2005,  2199,
    2202,  2203,  2204,  2205,  2206,  2207,  2006,  2008,  2007,  2009,
    2208,  2209,  2010,  2210,  2211,  2212,  2011,  2213,  2214,  2215,
    2217,  2216,  2218,  2219,  2012,  2013,  2220,  2221,  2222,  2223,
    2224,  2225,  2226,  2227,  2228,  2229,  2230,  2231,  2232,  2233,
    2235,  2234,  2236,  2237,  2238,  2239,  2240,  2241,  2242,  2014,
    2243,  2015,  2244,  2245,  2016,  2246,  2017,  2247,  2248,  2018,
    2249,  2250,  2251,  2252,  2253,  2254,  2019,  2255,  2256,  2257,
    2020,  2259,  2258,  2260,  2021,  2262,  2263,  2022,  2261,  2024,
    2264,  2265,  2023,  2266,  2025,  2267,  2268,  2270,  2269,  2271,
    2272,  2273,  2026,  2274,  2027,  2275,  2276,  2277,  2278,  2279,
    2281,  2280,  2282,  2283,  2284,  2285,  2288,  2290,  2287,  2289,
    2286,  2291,  2292,  2293,  2294,  2298,  2299,  2300,  2301,  2295,
    2296,  2297,  2028,  2302,  2303,  2304,  2306,  2307,  2309,  2308,
    2029,  2030,  2310,  2311,  2033,  2312,  2313,  2314,  2318,  2315,
    2326,  2316,  2317,  2320,  2319,  2321,  2322,  2031,  2323,  2032,
    2324,  2325,   184,  1965,   167,  1966,  1975,     0,  2378,  2377,
     994,     0,  2509,  2510,   540,   819,     0,     0,   820,     0,
     539,   818,   165,  2575,   120,     0,   536,   537,     0,     0,
       0,  1693,     0,  1616,  1616,  1616,     0,     0,  1616,  1616,
       0,  1619,  1616,   165,  1616,     0,    69,  1802,     0,     0,
       0,     0,  1959,     0,  1626,     0,     0,  1852,  1866,     0,
    1867,  1861,  2375,     0,  1106,     0,     0,     0,     0,   165,
    1038,  1002,  1677,     0,   229,   238,   240,   241,   237,     0,
    2510,  2521,  1073,  1079,  1091,  2330,  2327,  1779,   241,   983,
     983,   983,   981,   983,  1701,  1698,     0,     0,     0,  1677,
    1860,  2627,     0,     0,     0,  2623,     0,  2628,     0,  1081,
       0,     0,     1,     5,     0,     0,  2108,  2212,  1792,  1790,
    1954,     0,   864,   891,     0,   869,     0,   867,  1971,  1970,
    1969,     0,   880,   879,   877,     0,   405,     0,   962,   963,
     957,   959,   961,     0,  2584,   871,  1013,  2507,     0,   186,
       0,    78,     0,  1017,  1020,     0,     0,  2513,     0,     0,
       0,     0,   119,     0,     0,     0,   116,  1106,  1106,  2575,
    2577,  2579,   540,   538,     0,     0,     0,  1697,  1696,  1695,
       0,  1693,  2035,  1976,  2047,     0,  1927,     0,     0,     0,
    1381,     0,  1981,     0,  2062,  2064,  1985,  1986,  1987,  1988,
    1989,  1990,  1993,     0,     0,  1116,  1116,  1113,     0,     0,
       0,  2085,  2086,  1936,     0,     0,     0,  1923,  1937,  2121,
    2122,     0,  1925,  1926,  2128,     0,     0,     0,  2142,     0,
    2147,  1934,     0,     0,  2179,  2181,     0,     0,  2185,  2186,
    2187,  2188,  1909,  1171,     0,  1113,  1922,  1933,  2204,  1916,
    2213,  2218,  2219,     0,  2228,     0,     0,     0,  2253,  2257,
       0,     0,  2278,     0,     0,  1113,  1908,  2298,  2299,  2300,
    2301,     0,  1924,  2028,  1935,     0,  2312,  1116,  1113,  1113,
       0,     0,     0,  2321,  2325,     0,     0,     0,  2545,  1170,
       0,  1343,     0,  1375,  1128,  1134,  1148,     0,  1163,  1197,
    1198,  1200,  1298,  1199,  1205,  1204,  1593,  1920,  1203,  1202,
    1921,  1196,  1944,  1965,  1943,     0,     0,     0,     0,     0,
       0,     0,     0,  1775,     0,     0,  1603,  1616,    71,     0,
    2423,  2438,  2439,  2435,  2440,  2458,  2441,  2445,     0,  2437,
    2429,     0,  2444,     0,  2433,  2442,     0,  2427,     0,  2443,
    2448,  2459,  2431,  2436,  2414,     0,  2421,  2425,  1956,  1487,
    2390,  2391,     0,    77,  1628,  1629,  1627,   954,     0,  2640,
    1853,  1854,  1855,     0,  1870,     0,  1033,     0,     0,   454,
     445,     0,  1774,  1773,     0,  1846,  2522,     0,     0,     0,
    1631,  1678,     0,  1630,  1841,     0,  1839,  1836,  1838,   230,
       0,     0,   260,  2423,     0,  2408,     0,  2516,  2513,  2523,
    2558,  2553,  2552,  2555,  2556,  1097,  2557,  1096,  2554,  2551,
    1106,  1092,  1094,  1095,  2333,  1737,     0,   753,     0,  1758,
    1787,  1738,     0,     0,  1787,     0,  1522,  1777,  1780,     0,
    2342,  1751,   816,   815,  1761,   814,  2343,  1773,     0,  1725,
    1739,     0,  1702,  1744,     0,  2344,     0,  1776,  1760,     0,
    1759,  1522,  1787,     0,  1718,     0,     0,     0,     0,   236,
     977,   987,   979,   974,     0,   980,   976,     0,  2641,  2642,
    2388,   954,  1915,  1913,  1914,  1963,  2624,  1912,  2632,  2634,
    2620,  2622,  2629,  1075,     0,  2527,     6,    63,     0,  1799,
    2582,  2583,  2581,   769,     0,  1116,  1972,  2576,   168,   878,
       0,   406,   168,     0,     0,     0,     0,     0,   407,   408,
     344,   862,   960,   875,     0,     0,   874,  2584,     0,     0,
    1048,  1050,  1049,  1066,   188,   185,   166,     0,   996,  1610,
    1612,     0,  1021,  2512,     0,     0,  2514,  2518,  1169,  1168,
       0,   113,   118,     0,     0,     0,  2484,   117,  2474,  2580,
    1106,  1106,  1106,  2572,     0,  2560,  2567,  2568,  2571,  2570,
    2569,  2566,     0,  2559,  2562,  2563,  2565,  2564,  2584,  2578,
       0,   821,   821,   821,     0,  1680,  1683,  1687,  1691,  1694,
       0,     0,  1492,  1218,  1492,  1492,  1492,  1382,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1492,     0,  1255,  1228,     0,  1256,     0,     0,
       0,     0,     0,  1930,     0,     0,  2545,     0,     0,     0,
    1348,     0,     0,     0,  2545,     0,     0,     0,     0,     0,
       0,  1377,  1379,  1943,  1492,     0,     0,  1492,     0,     0,
       0,     0,     0,  1121,  1261,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1492,  1492,     0,     0,
    1492,  1269,     0,  1932,     0,     0,     0,  1931,     0,     0,
    1929,   750,   751,  1910,  1928,     0,  1272,  1274,  1273,     0,
    1492,  1492,     0,     0,  1208,  1207,  1209,     0,     0,     0,
       0,     0,     0,  1167,  1166,  1165,  1164,     0,     0,     0,
       0,  1173,     0,  1175,  1177,  1172,  1174,  1176,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1210,     0,     0,
       0,  1911,  1307,     0,  1617,  1598,  1605,  1600,     0,  1775,
    1601,  1609,   419,     0,  1606,  2472,  1602,     0,  1594,     0,
      70,     0,  1824,  1829,     0,     0,     0,  1819,  1827,  1821,
    1828,  1820,     0,     0,  1830,  1823,     0,  1822,  1826,  1825,
    1803,  1807,  1811,  1804,  2424,  2422,  2456,  2455,  2460,     0,
    2457,  2453,  2446,  2485,  2450,     0,  2485,  2452,  2451,  2485,
    2447,  2454,  2485,  2419,     0,  1488,  1489,     0,  2389,     0,
    1955,   955,     0,     0,  1856,  1857,     0,  1056,  1871,  1872,
    1868,  1487,  2376,  2379,     0,   640,  1107,   455,     0,     0,
     466,     0,     0,    66,    67,     0,  1040,     0,  1039,  1043,
       0,  1000,  1003,     0,     0,  1634,  1624,  1633,  1842,  1843,
       0,   228,   253,   248,   256,   250,   252,   251,   257,   258,
     259,   254,   249,   255,   242,     0,  2422,     0,  2419,  2517,
       0,  2519,  2536,  1080,  2524,  1103,  1082,  1102,     0,  1093,
    2328,  2331,  2339,  1783,   752,     0,     0,  1750,     0,   540,
       0,     0,     0,     0,     0,     0,  1719,     0,     0,   583,
       0,  1743,  1523,  1781,  1782,  1787,     0,     0,  1787,     0,
    1756,  1777,     0,  1787,  1714,     0,     0,  1706,  1711,  1707,
       0,  1713,  1712,  1715,  1703,  1704,  1783,  1730,  1757,  1777,
    1742,  1749,     0,  1729,  1736,     0,  1747,  1777,  1777,  1787,
    1787,   990,   989,   988,   984,   985,   990,     0,  1699,  1416,
       0,     0,  2621,  2635,  2619,  2630,  2631,  2618,  1076,  2528,
    1074,  2529,     0,     7,     4,  1793,  1791,  1800,  1801,   770,
     769,   531,   534,   533,     0,     0,  1974,     0,   870,     0,
    1775,   868,     0,     0,  1775,   355,  1775,   409,   769,   882,
       0,     0,   872,  1014,     0,     0,   443,  1066,  1052,  1068,
       0,   189,   191,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    79,    80,    96,   998,   997,     0,   995,  1031,  1029,
    1028,  1026,     0,  1027,  1025,  1016,  1022,  1023,  2511,  2515,
     541,   769,  1775,     0,   347,     0,     0,     0,     0,     0,
     540,     0,     0,  2561,   105,   822,     0,     0,     0,  1685,
    1613,  1681,  1615,  1954,     0,     0,     0,  1689,     0,     0,
    1493,  1492,     0,  1357,     0,     0,     0,     0,  1383,     0,
       0,     0,     0,     0,     0,     0,  1194,     0,     0,     0,
       0,     0,     0,     0,  1328,     0,  1357,  1117,  1567,  1568,
    1552,  1553,  1551,  1554,  1114,     0,  1555,  1566,  1285,     0,
       0,     0,     0,     0,     0,  1463,  1464,  1465,  1466,  1474,
    1467,  1468,  1469,  1476,  1481,  1470,  1471,  1477,  1478,  1479,
    1472,  1480,  1475,  1473,  1482,     0,  1462,     0,  1485,  1483,
    1486,  1484,     0,  1349,  1341,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1492,     0,     0,
       0,  1492,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1492,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1251,     0,  1946,  1945,     0,     0,
       0,     0,  1212,     0,  1211,  1425,     0,  2530,  2546,     0,
    2345,  1344,  1346,     0,  1119,  1118,  1120,  1131,  1124,  1129,
    1122,  1126,     0,  1178,  2041,  1132,     0,     0,  1160,  2545,
    1501,  1161,  1146,  1151,  1152,     0,  1149,  1150,     0,  1154,
       0,  1153,  1157,  1158,  1159,  1162,     0,     0,     0,     0,
    1201,  1206,  1376,  1106,  1947,     0,  1596,   419,   422,   421,
    1607,   420,  1655,     0,   964,     0,     0,    72,    74,  1816,
    1813,  1812,  1814,  1818,  1817,  1815,     0,  1831,  2449,     0,
    2430,     0,  2434,  2428,  2432,     0,     0,  2420,     0,  2426,
    1491,  2116,  2197,     0,  1494,  2393,  1621,  2639,  2312,  1858,
    1851,     0,  1869,     0,     0,     0,  1034,   641,     0,  1106,
     453,   452,   451,   450,     0,   468,   448,   456,    68,     0,
       0,  1847,     0,     0,     0,     0,     0,  1004,  1632,     0,
    1844,  1840,  1837,     0,     0,     0,     0,     0,     0,     0,
    2520,  2538,  2537,  2525,  1106,  1513,  1107,  1107,  1943,  2333,
    2336,  2337,  2340,  2338,     0,  2335,  2334,  2349,     0,  1785,
    1788,  1789,     0,     0,  1769,  1763,  1762,  1754,  1764,  1755,
    1772,  1771,  1770,  1727,  1726,  1535,  1536,  2251,  1534,  1526,
    1529,  1533,  1532,  1722,  1778,  1768,  1766,  1752,  1787,  1767,
    1765,  1708,  1709,  1710,     0,  1522,     0,  1785,  1787,  1777,
       0,  1787,  1787,  1746,  1748,     0,   978,   987,   975,   982,
    1434,  1433,     0,  1390,     0,  1392,  1389,  1388,  1387,     0,
    1433,  2625,  2633,  2637,     0,  1522,  2535,  2533,   532,  1655,
    1655,     0,  1973,     0,     0,     0,     0,     0,     0,     0,
     169,   178,     0,     0,   353,   354,  1655,   352,   395,   396,
     399,   400,   401,     0,     0,     0,     0,     0,     0,     0,
       0,   122,   402,  1655,  1655,   349,   375,   376,   379,   380,
     381,   382,   383,   345,     0,   350,   952,   952,     0,  1655,
    1655,   952,  1655,     0,     0,  1655,  1655,     0,     0,  1655,
       0,     0,   952,     0,  1655,   950,     0,     0,  1655,  1655,
    1655,  1655,   952,     0,     0,  1655,  1655,   443,  1655,     0,
       0,   970,     0,     0,  1655,     0,     0,  1655,  1655,     0,
    1655,   898,   949,   544,   565,   566,   863,   897,   899,   911,
     439,     0,   928,   951,     0,     0,   884,   886,  2585,  2586,
    2587,  1055,  1047,  1054,  1051,  1066,  1064,  1053,   811,   810,
       0,  1067,   187,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1611,     0,  1018,  1030,  1024,   114,   769,
    1655,  1655,  1655,  1655,   351,   384,   385,   388,   389,   390,
     391,   394,   392,   393,     0,     0,  1775,     0,  2476,  2477,
       0,  2475,     0,  2613,     0,     0,     0,   167,   542,     0,
       0,   823,     0,     0,     0,     0,     0,  1494,     0,  1957,
    1688,  1416,  1692,  1691,     0,  1281,     0,  1321,     0,  1323,
    1324,  1325,     0,     0,     0,     0,     0,  1282,     0,  1226,
    1283,  1284,     0,     0,  1279,     0,     0,     0,     0,  1278,
       0,     0,     0,     0,  1327,     0,  1115,     0,     0,  1229,
    1230,  1223,  1215,     0,  1300,     0,     0,  1231,     0,     0,
       0,     0,  1287,     0,  1301,  1378,     0,  1380,  1947,     0,
    1333,  1288,  1236,     0,  1331,     0,  1237,  1302,  1303,  1304,
    1290,  1291,     0,  1306,     0,  1292,     0,     0,     0,     0,
    1239,  1337,  1335,     0,     0,     0,     0,  1339,  1241,     0,
       0,     0,  1240,     0,     0,     0,     0,     0,     0,     0,
    1243,     0,  1224,  1336,  1338,  1296,     0,  1252,     0,  2539,
    1424,  2547,  1425,     0,     0,  2541,  2531,  2536,  2544,  1216,
       0,     0,     0,     0,     0,  1948,  1125,  1130,  1123,  1127,
    2545,     0,     0,     0,     0,  1144,  1143,     0,     0,     0,
    2545,  1501,  1147,     0,     0,  1317,  1318,  1373,     0,  1599,
    1597,  1608,  1654,  1653,  1656,     0,  2473,   966,   965,  1604,
     964,    75,     0,  1810,  1832,  1805,  2489,     0,  2488,     0,
    2468,  2471,  1954,     0,     0,     0,  2397,  2404,  2400,  2405,
    2398,  2399,  2403,  2406,  2407,  2394,  2401,  1495,  1524,     0,
    1859,  1057,  1059,  1060,  1058,  1066,     0,     0,  2382,  2383,
    2381,  2380,   458,     0,   467,     0,   479,     0,     0,     0,
    1849,  1848,     0,  1041,  1044,  1045,  1011,  1009,  1008,  1010,
     999,  1005,  1006,   524,  1638,     0,     0,     0,  1644,  1625,
    1635,     0,  2085,  2298,  2301,   243,   246,   245,   247,     0,
       0,     0,     0,     0,     0,  1101,  1416,  1585,  1098,  1086,
    1524,  1514,  1085,  1108,  1104,     0,  2332,     0,  2295,  2360,
       0,     0,     0,     0,     0,  2350,  1784,     0,  1731,     0,
    1753,     0,     0,     0,     0,  1724,     0,  1745,  1705,  1733,
    1723,  1494,  1777,  1720,  1721,   992,   991,   986,  1433,  1416,
       0,     0,  1413,  1435,     0,  1435,  1416,  1416,     0,  1416,
    1487,  1430,     0,     0,  2636,  1515,  2534,     0,     0,   866,
     172,   175,   173,     0,   174,     0,     0,   404,   403,     0,
    1775,   397,   126,   125,   127,   128,  1549,  1550,  1546,  1547,
    1545,  1548,   130,   129,   124,   881,     0,     0,     0,  1775,
     377,   356,   357,   360,   361,   362,   953,   856,  1035,   932,
       0,   621,   856,   807,   812,   812,   930,     0,  1035,     0,
       0,     0,     0,     0,  1035,     0,     0,     0,  1655,     0,
     943,   893,     0,     0,     0,     0,     0,   944,     0,   894,
    1655,     0,     0,     0,     0,     0,  1035,     0,     0,     0,
     441,     0,  1035,   912,   973,   971,   972,     0,  1035,  1035,
       0,   571,   572,   570,     0,     0,     0,   563,   545,   769,
     895,   440,   896,   620,     0,   967,   617,   623,  1950,     0,
       0,     0,     0,   136,  2589,     0,  1454,   190,    97,    86,
      82,   101,  1559,  1560,  1558,  1556,  1557,   102,    84,    85,
      89,    88,    90,    91,    92,    87,    93,    83,    94,   103,
     104,    81,  1032,     0,     0,     0,     0,  1775,   386,     0,
       0,  1655,   346,   363,   364,   367,   368,   369,   370,   371,
     374,   372,   373,     0,  2480,  2482,     0,     0,   340,   339,
       0,   131,  2607,     0,     0,   620,   106,   439,   543,   546,
     849,   851,   850,   837,   836,   107,   109,   111,  1614,  1691,
    1416,  1513,  1955,  1494,     0,  1690,     0,     0,  1322,  1358,
       0,  1384,     0,  1220,   724,   724,   724,  1367,   709,  1371,
    1362,   724,  1363,   724,  1365,     0,   755,     0,   754,     0,
    1180,  1195,     0,     0,     0,     0,     0,     0,  1329,  1326,
       0,     0,     0,     0,  1352,     0,     0,     0,  1225,     0,
    1312,  1334,  1332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1340,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1213,  1106,  2548,
    2550,  1077,     0,  2540,  2542,  2346,  2347,  2348,   858,  1345,
       0,  1141,  1137,     0,  1135,  1500,  1156,  1155,     0,     0,
       0,  1145,  1107,  1308,  1106,     0,  1374,  1949,   418,   582,
    1595,    73,  1808,  2486,     0,  2497,     0,     0,     0,     0,
       0,     0,     0,  2392,  1525,  1665,     0,  1066,  1070,  1964,
    1862,  2385,  2386,  2384,     0,   459,   460,   462,  1107,   476,
     454,     0,   446,   449,     0,   458,     0,     0,  1001,  1007,
    1091,     0,  1657,  1642,  1649,  1643,     0,     0,     0,  1641,
    1939,  1938,  1945,  2523,     0,     0,  2413,     0,     0,     0,
    2526,  1494,  1494,  1579,     0,     0,  1083,  1088,  1084,  1087,
       0,  1105,  1112,  1111,  1940,  1947,     0,     0,     0,     0,
     757,   756,   765,     0,     0,     0,  2345,     0,   761,   763,
     762,  2355,   760,  1786,  1522,  1741,  1740,  1537,  1528,     0,
    1531,  1530,  1716,  1522,  1735,  1787,     0,     0,  2530,  1428,
       0,  1415,  1414,  1436,     0,  1416,  1435,  1435,     0,  1395,
    1394,  1669,  1672,     0,  1393,  1452,  1418,  1091,  2626,  2638,
       0,   768,   767,   581,   764,   580,   177,   176,   182,   183,
    1563,  1564,  1561,  1562,   410,   423,  1565,   424,   398,   123,
     411,   412,   378,     0,   358,   622,   857,   915,     0,     0,
       0,   812,   616,   856,   821,   813,   856,   856,     0,     0,
     555,   552,   934,   558,   913,   905,   914,   925,   927,     0,
     554,   573,     0,     0,   561,   856,   900,   941,   942,   964,
     549,     0,   592,   593,   591,   567,   574,   550,   551,   936,
       0,  1509,  1511,  1519,   557,   556,  1570,  1569,   560,     0,
     553,     0,   947,   920,     0,   589,   587,   584,   586,   585,
     590,   588,   562,   559,   575,   910,     0,   952,   952,   929,
       0,   600,   601,   603,   604,  1953,     0,   969,   931,     0,
     605,   618,   606,     0,     0,   579,   578,   576,   577,     0,
     146,     0,     0,   883,     0,   139,   137,   148,     0,     0,
       0,  1457,     0,  1458,  1455,  1456,     0,    98,   100,   417,
     416,   415,   414,   387,     0,     0,     0,  1775,   365,  2481,
    2479,  2478,     0,     0,  2614,   343,   341,   342,     0,     0,
     192,   598,   599,   597,   596,     0,   427,     0,  2011,   425,
       0,   438,     0,  1873,   769,   547,     0,     0,     0,     0,
    1494,  1538,  1958,  1684,     0,  1253,  1385,     0,     0,   725,
    1359,   777,  1369,     0,  1370,   711,   710,   726,  1361,  1364,
    1368,  1366,  1219,  1227,  1275,     0,  1193,  1276,  1277,     0,
    1299,  1222,  1221,     0,     0,     0,  1259,  1260,     0,  1350,
       0,     0,  1233,     0,  1235,     0,     0,  1314,  1289,  1305,
    1262,  1293,     0,  1238,  1214,     0,  1263,     0,  1268,  1266,
       0,  1242,     0,     0,  1249,     0,  1247,     0,  1248,     0,
    1250,  1295,  1297,  1426,  2549,  1078,     0,     0,  1347,  1133,
       0,  1142,  1139,     0,  1136,  1108,  1319,  1309,     0,  1806,
    2487,     0,  2418,  2470,  2469,  2490,  2490,  2490,     0,  1496,
       0,  1622,  1061,  1066,  1070,     0,  1062,  1873,   463,     0,
       0,     0,   483,     0,   481,   457,     0,  1042,  1012,  1106,
    1639,  1651,     0,  1659,     0,     0,  1636,  1646,     0,     0,
       0,  1645,   244,     0,  2410,  2411,  2409,  1524,  1502,     0,
       0,  1591,     0,  1586,  1099,     0,  1110,  1109,     0,  2362,
       0,  2361,  2373,  2374,  2371,  2372,  2370,  2351,     0,  2357,
    2356,     0,     0,     0,  2367,  2358,     0,     0,  1732,  1527,
    1734,  1728,   993,  2536,  1487,  1420,  1416,  1391,  1416,  1402,
       0,     0,  1416,  1398,  1396,  1400,     0,  1494,     0,  1417,
    1449,  1106,  1942,  1516,  1519,   359,   917,     0,   856,   808,
     809,   821,     0,   821,   821,     0,     0,   904,     0,  1021,
       0,   909,   765,   568,   940,   939,   569,     0,   902,     0,
    1520,  1521,  1512,   442,   901,   922,   907,  1831,   933,   620,
     968,   789,   705,   654,   645,   724,   648,   647,   691,   724,
     659,   709,   707,   677,   709,   709,   684,   683,   701,   687,
     667,   777,   777,   666,   704,   777,   688,   686,   690,     0,
     692,   709,   697,   685,   689,   706,   682,   679,   703,   724,
     724,   724,   663,   702,   777,     0,   695,   724,   624,   728,
     665,   777,   784,     0,     0,   724,   726,  1952,   147,   135,
       0,     0,   885,   887,     0,     0,   888,  2591,     0,  2593,
       0,  1069,     0,    95,     0,     0,   348,   413,   366,  2483,
       0,   203,  1106,     0,     0,   193,   195,   196,     0,     0,
       0,   429,  1875,  1874,   426,   527,   548,     0,     0,     0,
    1691,  1686,     0,  1682,     0,  1386,     0,     0,     0,     0,
     771,   782,   780,   774,     0,   778,   779,  1360,     0,     0,
     727,  1372,   724,  1190,   709,  1184,  1186,  1182,     0,   692,
    1185,   724,     0,   777,  1189,  1181,     0,  1330,     0,     0,
    1353,     0,     0,     0,     0,     0,     0,     0,  1217,     0,
    1310,     0,     0,     0,     0,     0,     0,  1246,  1244,  1245,
    1524,  2530,   859,  1138,     0,  1320,     0,     0,     0,  2495,
    2495,  2495,  1664,  1663,     0,  1662,  1666,  1063,  1071,     0,
     461,   464,     0,   456,     0,   480,     0,   447,   525,     0,
       0,     0,  1660,  1648,  2527,  1637,  1640,  1947,  2412,  1090,
       0,  1497,  1590,  1587,     0,  1580,  1582,  1584,     0,  1941,
       0,     0,  2366,  2352,   766,     0,     0,     0,     0,  2353,
    1421,  1419,  1429,     0,  1387,  1416,  1416,     0,  1387,     0,
       0,     0,  1671,  1513,  1673,  1453,     0,  1431,     0,  1518,
       0,     0,   916,     0,     0,     0,     0,     0,     0,   946,
       0,   967,   906,   926,   948,   937,  1035,  1510,   921,   923,
    1004,     0,   602,     0,   793,   653,   646,   664,   662,   713,
     708,     0,   713,   713,   673,   691,   668,     0,   777,   681,
     672,   693,   696,   698,   700,   713,     0,   777,   661,   660,
     670,   657,   713,   736,     0,     0,     0,     0,   732,     0,
     787,     0,   739,     0,   625,   729,   731,     0,     0,     0,
     694,   777,   650,   785,   784,   652,   777,   784,   713,   713,
       0,   133,   138,   149,   150,   876,  2590,     0,  2588,     0,
    1065,  1459,    99,     0,     0,   206,   204,   205,     0,   199,
     201,   196,  2601,     0,  2608,     0,     0,  2606,   428,   431,
     542,   528,     0,     0,  1519,   854,     0,     0,  2251,  1539,
    1254,   722,   720,   723,   721,   773,   772,   776,     0,   775,
     784,     0,     0,  1192,  1187,   693,  1191,  1183,  1188,  1280,
    1257,  1258,     0,  1351,  1342,  1286,     0,  1234,  1311,     0,
       0,  1294,  1264,  1267,  1265,  1270,  1271,  1098,  1098,   594,
    2543,  1140,  1833,  2498,     0,     0,  2494,  2492,     0,  2493,
    2491,  2461,     0,  2416,  2417,  2415,  2402,     0,     0,     0,
    1106,   469,     0,   486,   485,   482,  1524,  1650,  1652,  1658,
    1647,     0,  1498,  1513,   758,  1583,     0,  1100,  2364,  2363,
    2365,  2359,     0,     0,     0,     0,  1403,     0,  1407,  1412,
    1408,     0,  1399,  1397,     0,  1538,  1441,  1442,     0,     0,
    1447,  1451,  1524,  1519,   919,     0,   619,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   945,  1917,   935,
     967,   903,     0,   908,   564,     0,   792,     0,   797,   717,
     718,   719,   674,   714,   716,     0,   676,   644,   669,   699,
     675,     0,   671,   658,   742,   741,  1116,   734,   749,   629,
       0,     0,   740,   626,   730,   738,   733,     0,   649,   651,
     655,   656,   642,   643,  1951,   140,   889,   280,  2592,  1081,
       0,  2597,   121,  2605,  2615,   203,     0,     0,   144,     0,
     194,   765,   197,  2527,   439,     0,   434,   824,     0,   853,
       0,   826,   828,  1540,     0,   783,   781,     0,  1354,  1519,
       0,  1313,  1315,  1427,   595,     0,  1809,  2467,  2466,  2465,
    2462,     0,     0,     0,     0,     0,     0,  2496,  2500,  1661,
       0,     0,     0,   477,     0,     0,   511,   526,  1506,  1519,
       0,  1524,     0,  1588,  1581,  2369,  2368,  2354,  1422,     0,
       0,     0,     0,     0,  1460,  1670,  1437,  1437,  1448,  1432,
    1517,   918,     0,     0,   607,     0,     0,  1919,  1918,   938,
       0,   790,     0,   794,   795,   796,     0,   788,   715,     0,
     860,     0,   748,  1116,   737,     0,   746,   745,   743,   744,
       0,   142,   306,     0,   292,   278,     0,     0,     0,   282,
     151,   154,   152,     0,   153,   159,     0,   160,   161,   162,
     163,   164,   155,   304,   305,   158,   156,   157,     0,  1967,
       0,  1968,  2595,     0,     0,  2594,   170,   200,     0,     0,
     136,   145,  2609,   747,   432,  1873,     0,  2523,     0,  1655,
     108,   825,   845,   844,   830,     0,  1519,     0,     0,   110,
     827,   847,   834,   112,   829,   846,   832,  1541,   712,     0,
    1356,  1232,     0,  2463,  2501,  2504,  2502,  2503,  1542,     0,
    2505,  2499,     0,  1863,  1107,     0,   470,     0,   473,   475,
     489,     0,  1655,  1655,     0,     0,  1655,  1655,  1655,  1655,
     504,   512,   514,     0,  1507,  1508,     0,  1503,  1505,  1499,
    1571,   759,  1876,  2530,  1404,     0,  1409,     0,  1401,     0,
       0,  1445,  1443,     0,   613,   824,   609,   611,     0,   791,
       0,     0,   777,     0,   777,   735,  1106,   141,     0,   134,
       0,     0,   291,   294,     0,     0,   297,   287,   286,   288,
       0,   281,   280,   280,   334,   285,   331,   330,   323,  2527,
       0,     0,     0,  2616,   202,  1106,   148,     0,   430,   436,
     435,   839,     0,   831,     0,   852,   855,     0,   835,   833,
    1519,  1834,  1544,  1543,  1667,  1675,     0,   758,     0,   478,
     471,     0,     0,   487,     0,     0,  1655,  1655,     0,     0,
       0,     0,     0,   484,   513,  1655,  1519,     0,  1089,     0,
    1884,  1423,     0,     0,  1461,     0,  1438,     0,     0,     0,
     615,   824,   608,   826,   828,     0,   803,     0,   802,     0,
     799,   798,   678,   861,   680,     0,   143,   307,   318,   321,
     313,   293,     0,     0,     0,   283,   280,     0,   267,   265,
     266,   272,   273,   274,   275,   276,   277,   268,   271,   269,
     270,   280,     0,   211,     0,     0,  2596,     0,  2598,     0,
     180,   179,   171,     0,   280,  2602,     0,  2610,  2527,   838,
     843,   842,   840,   841,   848,  1355,     0,     0,  1864,   465,
     477,   474,   497,   490,   493,     0,   523,   517,     0,     0,
     519,   520,   518,   515,   508,     0,   506,     0,  1504,  1572,
       0,     0,     0,     0,  1877,  1879,     0,  1589,  1406,  1411,
    1440,  1439,  1454,     0,   614,   610,   612,   924,   805,   806,
     804,     0,     0,   630,     0,     0,   280,   314,     0,   289,
       0,     0,     0,     0,   209,   337,     0,   207,   325,   325,
    2599,  2600,   181,  2617,     0,   150,   170,   437,  1674,  1676,
    1890,   472,   497,     0,   495,     0,   491,   488,   492,   521,
     522,     0,   505,     0,   516,     0,     0,     0,     0,     0,
    1878,     0,     0,  1885,  1887,     0,     0,     0,     0,   632,
     631,   633,   315,   321,   311,   319,   280,     0,     0,   279,
     298,   333,   210,     0,   335,     0,   280,     0,   324,   326,
     328,     0,   132,  2611,     0,  1876,   494,     0,   502,   498,
     500,   503,   511,   510,   507,  1106,  1882,  1883,     0,  1880,
       0,     0,  1886,  1446,  1444,   801,   800,     0,   637,   627,
     634,   636,     0,   312,     0,     0,   310,   290,   295,   280,
       0,   280,   222,   221,     0,   213,   261,   332,     0,   212,
    2603,   280,     0,  1884,   496,     0,     0,   509,     0,     0,
    1575,  1577,  1881,  1889,  1888,   639,   638,   635,   316,     0,
     280,     0,   280,     0,   280,     0,     0,     0,     0,     0,
     208,   280,  2612,     0,  1892,   501,   499,  1107,  1573,  1106,
       0,   308,   280,   296,   301,   338,     0,   216,   262,   263,
       0,   219,  2604,  1891,     0,  1896,  1578,  1576,   280,   280,
     297,   300,   336,     0,     0,   214,   215,   227,   226,   218,
       0,     0,     0,  1903,   280,   280,   302,   235,   233,   280,
     223,   231,   225,     0,   232,   264,   220,  1894,  1895,  1893,
    1898,     0,     0,  1900,  1901,     0,  1865,     0,   217,   234,
    1902,  1897,     0,  1904,  1906,     0,   224,  1899,     0,  1106,
    1905,     0,  1107,  1907
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    58,   604,  1454,    59,    60,    61,    62,    63,  1323,
      64,   818,  1250,  1757,  1758,    65,   543,    66,  1027,  1511,
    1512,  2986,  2987,  1513,    67,  2098,  3026,  3027,  3028,  1531,
     513,   514,  1950,  1951,  1053,  3009,  2973,  3785,  2977,  3901,
    4039,  3940,  2026,  3326,  3786,  3787,  3910,   538,  2096,  1468,
    4063,  1930,  4172,  1931,    68,   639,  1025,  1490,  1491,  3344,
    3345,  3606,  3346,  3598,  3599,  3600,  3601,  4306,  4146,  4247,
    4307,  4387,  4423,  4429,  4430,  4354,  4439,  4440,  4441,  4427,
     890,  4442,    69,   566,   567,   892,  1354,  2345,  1355,    70,
    4355,  4425,  4147,  4148,  4046,  4149,  3913,  4150,  4050,  4151,
    3916,  4152,  4153,  4154,  4155,  4298,  4156,  4045,  4347,  4143,
    4144,  4349,  4404,  4421,  4157,  3923,  4040,  4234,  3924,  4041,
    4293,  4139,  4294,  4342,  4400,  4140,  4235,  4345,  4238,  4158,
    4164,  4308,  4159,  4165,  4160,  3928,  4057,  4163,  4055,  4162,
    4351,  4303,  2590,  3008,   622,   623,   652,  2086,   624,  1042,
     999,  1470,  1963,  1964,  2451,  2452,  2572,  2573,  2574,  1955,
    1956,  1957,  2074,  2075,  2076,  1937,  1938,  1939,  1474,  1934,
    1935,   625,  1000,  1010,  1958,  1959,  1960,  2578,  2078,  2079,
    2080,  2081,  1961,  1750,  1962,  2864,  2596,  3019,  3610,  3803,
    3354,  3947,  4178,  3020,  3021,  2521,  2929,  2500,    71,   555,
     870,  1320,  2317,  1321,  2319,  2744,  2745,  2746,  1800,  1801,
    3681,  1805,  2316,  3843,  4190,  3987,  3988,  2748,  3986,  2752,
    3143,  3144,  3444,  3683,  3846,  4195,  4092,  4267,  4193,  4263,
    4194,  4265,  4366,  4319,  4320,  4103,  4205,  4206,  4271,  4322,
    4000,  4001,  4002,  2338,  2760,  3686,  3612,  2068,  1460,  1461,
     515,   516,   517,   649,  2597,  2012,  2598,  2599,  2946,  2014,
    2015,  2718,  1388,  2942,  2915,  3657,  3015,  2950,  2951,  2952,
    2953,  2954,  4025,  4123,  4124,  4121,  2960,  2882,  2460,  2461,
    2526,  2963,  3308,  3895,  3563,  4291,  4339,  4340,  4341,    72,
     867,  3801,  3531,  3546,  3310,  3311,  3312,  3313,  3314,  3315,
    3316,  3044,  3045,  3752,  3753,  3754,  3039,  3040,  3381,  3564,
    3565,  3566,  3802,  3767,  1174,  3374,  2801,  2802,  3853,  2810,
    2811,  2852,  3189,  2853,  1464,  3375,  3376,  3377,  3575,  3567,
    2962,  3524,  3745,  3748,  3887,  4130,  2462,  2883,  2463,  2886,
     953,   518,  2464,  2465,  1545,  1546,  3950,  3959,  3963,  3951,
    3964,  3960,  3952,  3953,  3954,  3966,  3962,  2603,  3613,  3614,
    2875,  3108,  3889,    73,  1478,   993,  1002,   998,  1017,   634,
    1479,  2027,  2533,  3585,   612,  2016,  3516,  3239,  3520,  2017,
    2895,  2018,  3226,  3502,  2019,  3255,  3518,  3742,  2896,  2897,
    2020,  2021,  2022,  3238,  3247,  3740,  2466,  1302,   126,   127,
     630,   631,   632,  2269,  2958,  2507,    74,  1436,  1431,    75,
     965,   960,   961,  1434,  1435,  1896,  2396,    76,   642,  1517,
    1332,  1816,    77,   879,  2330,  2331,  2332,  2758,    78,  1018,
      79,   644,  1031,    80,   501,  1525,  1526,  1527,  2065,    81,
    1314,   134,    82,   878,  1326,  1328,  1329,    83,   638,  1019,
    1020,  1021,  1022,  2032,    84,  1791,  2301,  2302,  2303,  2304,
    1487,  2535,  1488,  1489,  2041,  3136,    85,    86,   601,  2224,
     572,   899,   573,   574,  1835,  2358,  3658,   910,   911,   912,
    2786,  1366,  1367,  1368,  1797,  2791,  1107,  1104,   783,   784,
     785,   786,  1198,  1199,  3568,   787,  1208,  1716,  3056,  3395,
    1576,  1577,   788,   789,   790,   791,   792,   793,  1743,  3076,
    3077,  3410,  2254,  2255,  2256,   794,  2143,  3063,  2156,   795,
    1191,  1701,  1634,  3402,  3069,  3642,  3818,  1562,  2118,  2635,
    3047,  2715,  2218,  1130,  1131,  1088,  2125,  1568,  1903,  1904,
    1905,  1906,  1907,  3490,  3489,  3491,  3859,  3707,  3861,  3711,
    2407,  1908,  1909,  2827,  3705,  4013,  2219,  2220,  2221,  3420,
    2828,  3206,  2846,  2847,  3722,  2398,  1910,  2834,  4021,  3719,
    3720,  4119,  4118,  3721,  3495,  3496,  3219,  3220,  2982,  2983,
    2984,  3863,  1625,  1626,  1632,  1297,  1298,  1563,  2298,  2732,
    3693,  3850,  2245,  3461,  3848,  4007,  2023,  2921,  2922,  2360,
    2361,  2850,  3223,  3252,  1391,  3659,  2734,  1869,  2817,  2818,
    3363,  3980,  4428,  1595,  2547,  2865,  2866,  1597,  2928,  4108,
    4275,  4369,  4370,  4371,  3171,  3172,  3465,  3466,  2362,  2783,
    3173,  3694,  4012,    87,   522,    88,  1755,  2260,  1247,  2274,
    1029,  1549,  1550,   806,   535,    89,   544,  2299,    90,   562,
    1819,   857,   882,  1336,  1337,  2339,  2761,  2768,  2340,  2773,
    3454,  2763,  3150,  3151,  2264,  2265,  2764,  3153,  3451,  3434,
    3435,  3131,  3678,    91,   589,  3217,  2841,  2842,  4084,  4085,
     883,    92,   521,  1075,  2107,  1555,  2106,  1076,  1077,  2109,
     670,   671,    93,   967,   585,  1413,  1414,  1415,  1885,    94,
     577,   954,  2814,  2823,  1863,   874,  1243,  1395,   957,  1396,
    1849,  2378,  1377,    95,   989,   988,    96,   608,  1456,    97,
     819,  1270,  1767,  2722,  3119,  1271,  1272,  2275,  3826,    98,
     563,   887,   888,  1339,  1821,    99,   557,   875,  1811,   100,
     547,   862,  1306,  1790,   101,   102,   864,  3137,  4087,  4260,
     551,  1793,  1310,  3355,  4110,  4214,  4215,  4217,  4283,  4284,
    4315,  4415,  4449,  4433,  4452,  4453,  4456,  4463,  4464,   797,
     976,   798,  3737,   799,   800,  2769,  2770,  3224,   801,  2771,
     802,  2876,  1030,  1552,   541,   493,   619,   977,  2740,   804,
    3930,   996,  1046,   495,   496,   103,   914,   576,  1370,  1371,
    1372,  1844,  1845,   958,  2233,  1846,  1847,  2375,  2370,  3473,
    3195,  3187,   104,   865,   500,  1312,  1313,  2310,   105,   588,
     106,  1299,  1784,  1785,  2295,  2731,  2296,   107,   895,   108,
     844,  1778,   845,  1275,   846,   847,  1289,  1283,  1292,  1286,
    3831,  3670,  3671,  2283,  1246,  1047,  2090,  3002,  1048,  1770,
    2277,  2278,  3429,  3673,  3122,  3837,  3838,   109,   135,   503,
     647,  1037,  1360,   110,   111,   112,   113,  1363,  1449,  2354,
    1450,  2225,  1451,  1452,  1917,  1833,  1697,  1698,  3106,  1188,
    1189,  2228,  2688,  2689,   913,   656,  1063,  1055,   128,   129,
     130,   659,   660,   131,  1015,  1016,  2534,  2979,  3328,  3588,
    3589,  3791,  3935,  1057,  3797,  4254,  4391,  1058,  1059,  3010,
    3799,  4067,  4256,  4361,  1060,  2587,  3341,  3936,  4174,   114,
     978,   598,  1447,  1442,  1444,  1913,  2414,   115,   116,   117
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3798
static const int yypact[] =
{
    4773,  2110,  1213, -3798,  -167,   171, 48419,    85,   624, -3798,
    -197,  3616, -3798, -3798, -3798, -3798, -3798,  3399, -3798, 48419,
    1213, -3798, 24653, -3798, -3798,   -59, -3798,   112,   624,  1213,
     400, -3798, 48419, -3798,   669,  1467,  1213, -3798, -3798, 43555,
   -3798,  -197, 48419, -3798,   721, -3798, 43555,  1119,  -145,   668,
     681,   -56, -3798, -3798, 48419,  1756, -3798,   713,  1223,  1115,
   -3798, -3798,   910, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, 25268, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,   714, 48419,
     742, 48419,  1164, 48419, 41731, 48419,   840,   841,  1272, -3798,
   -3798,  1345, -3798, -3798,   624,  -197, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798,   864, -3798, -3798,  1013, -3798, -3798,
   -3798,  1651, -3798,  1547,  1353, -3798,  1397, 41731, -3798, 48419,
   -3798, -3798, -3798,   915, -3798,  1130, -3798,  1145,  1441,  1479,
    1494,    84, 11527,  1509,  1509,  1509, 48419,  1538,  1509,  1509,
   48419, -3798,  1509, -3798,  1509,   624, -3798, -3798,  3649, 48419,
    1381,   167,   -70, 41731,  1558, 48419,  -167,    51, -3798,  1518,
   -3798, -3798, -3798,   624, -3798,  1715,  1582,   938, 48419, -3798,
   -3798, -3798,  1291,   922,  1218, -3798, -3798,  1304, -3798,  4179,
     139, -3798, -3798, -3798,  2120, -3798, -3798,  5219,  1304, -3798,
   -3798, -3798,  1226, -3798, -3798, -3798, 48419,  -167,   624,  1533,
   -3798, -3798,   184,   184,   184, -3798,   184, -3798,   184, -3798,
     713,  1233, -3798, -3798,  1231, 48419,   728,   793, -3798, -3798,
    1241,   878, -3798,  1306, 39299, -3798, 48419, -3798, -3798, -3798,
   -3798,  1529, -3798, -3798, -3798,  2503, -3798, 24653, -3798, -3798,
   -3798,   841, -3798, 48419,  1399, -3798, -3798, -3798, 24653,  1281,
   48419, -3798, 24653, -3798, -3798, 24653,   185,   -18,  1452, 48419,
   48419,  1726, -3798,  1945, 39299,  1484, -3798,   283,  1171,  1345,
    1963, -3798,  1353, -3798, 48419, 48419, 48419, -3798, -3798, -3798,
   44163,    84,  1337,  1362,  1367, 16591, -3798,  1370,  1387,  1405,
   11527,  1407,  1417,  1446,  1454,  1464,  1477,  1489,  1513,  1517,
    1522,  1543,  1563,  1565,  1568,  1593,  1593,  1604,  1616,  1620,
    1625,   -80,  1627, -3798,  1637,  1643,  1645, -3798, -3798,  1652,
    1667,  1674, -3798, -3798,  1678,  1684,  1695, 12160,  1700,  1703,
    1714, -3798, 21569,  1717,  1719,  1724,  1727,  1731,  1737,  1743,
    1747,  1759, -3798, -3798, 11527,  1604, -3798, -3798,  1779, -3798,
    1784,  1788,  1798,  1824,  1826,  1833,  1835,  1837,  1839,  1849,
    1859,  1861,  1865,  1871,  1878,  1604, -3798,  1280,  1885,  1887,
    1409,  1890, -3798,  1902, -3798,   192,  1907,  1593,  1604,  1604,
    1921,  1926,  1932,  1942,  1948, 16591, 16591, 16591, 11527, -3798,
   48419, -3798, 48419,  1762,  1745, -3798,  2210, 16591,   173, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798,  1459,  1491, -3798, -3798,
   -3798, -3798, -3798,  1952,  1434,  1877, 48419, 48419, 48419,  1690,
   48419, 48419, 41731,  1611, 48419, 39299, -3798,  1509,  1629,  3764,
    1816,  1672,  1704, -3798, -3798, -3798, -3798, -3798,  1869, -3798,
   -3798,  1741, -3798,  2031, -3798, -3798,   143, -3798,   101, -3798,
   -3798, -3798, -3798, -3798, -3798,  2132,  1653, -3798, -3798,   122,
   -3798, -3798, 48419, -3798, -3798, -3798, -3798,  2068,  1993, -3798,
   -3798, -3798,   919,  2535,   208, 24653, -3798,  1957, 11527,  1561,
   -3798,  -235, -3798, -3798,  2316, -3798, -3798, 39299, 24653,  1698,
   -3798, -3798, 22186, -3798, -3798,  2547, -3798,  1984, -3798, -3798,
    1491,  3126, -3798,  1816,  2246, -3798,  2264,  2171,   -18,  2062,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
    2011,  2120, -3798, -3798, -3798, -3798,  2471, -3798,  2170, -3798,
     -28, -3798,  2020,  1431,   -28, 39907,  2390,  1526, -3798,   392,
   -3798,  2473, -3798, -3798, -3798, -3798, -3798,  2166,  2174, -3798,
   -3798,   393,  1980, -3798,  2554, -3798,   739, -3798, -3798,  2229,
   -3798,  2390,   -28,  1526, -3798,  2484,  2619,   423,  1086, -3798,
   -3798,   -93, -3798, -3798,  2689, -3798, -3798, 24653, -3798, -3798,
   -3798,  2068, -3798, -3798, -3798, -3798,  2151, -3798,  2425,  2266,
   -3798, -3798,    24, -3798,  2164,   745,  2640, -3798,   951, 35651,
   -3798, -3798, -3798,  2686,  2711,  1593,  2193, -3798, -3798, -3798,
    2833, -3798, -3798,  2216,  2738,  2738,  2738,  2857, -3798, -3798,
   -3798, -3798, -3798, -3798,  2395,  2268, -3798,  1399, 24653,  2625,
    2238, -3798, -3798,  2486, 11527, -3798, -3798,  4506,   172, -3798,
   -3798, 24653,  1804, -3798,  2822,  2458, -3798, -3798, -3798, -3798,
    2718, -3798, -3798,  2833,  2778,  2738,  2674,  2277, -3798, -3798,
   -3798, -3798, -3798, -3798,   892, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798,  1440, -3798, -3798, -3798, -3798, -3798,  1399, -3798,
   24653, -3798, -3798, -3798, 24653, -3798,  2279, -3798,  2260, -3798,
   11527, 11527,   308,  2827,  2897,  2897,  2897,  1762,  2312, 11527,
   11527, 11527, 11527, 11527, 11527, 11527, 11527, 11527, 11527, 11527,
   11527, 11527,   312,  2285, -3798, -3798,  1100, -3798,  2286, 11527,
   11527,  2389, 11527,  1491, 11527, 25883, -3798,  4211, 11527,   513,
    2779, 11527, 11527, 11527, 11527,  2324, 11527, 11527, 11527, 25883,
    2918,  2298, -3798,  2294,   993, 11527, 11527,  1326, 11527, 11527,
   11527, 11527, 11527, -3798, -3798, 11527, 11527, 11527, 11527, 16591,
   11527, 11527, 11527, 11527, 11527, 11527,  2897,  2897, 11527, 11527,
    1361, -3798, 11527,  1491,  2723,  2723, 11527,  1491,  8362, 11527,
   -3798, -3798, -3798, -3798, -3798,  2304, -3798, -3798, -3798, 25883,
    2897,  2897, 11527, 11527,  2827,  2827,  2827,   254,  2309,   960,
   11527, 27113,  2307, -3798, -3798, -3798, -3798, 11527, 11527, 11527,
   16591, -3798,   847, -3798, -3798, -3798, -3798, -3798, 12793, 16591,
   16591,  2317, 16591, 16591, 16591, 16591, 16591,  2684, 16591, 16591,
   17224, 17857, 16591, 16591, 16591, 16591,  1466,  2827, 41731, 16591,
   11527, -3798, -3798, 48419, -3798, -3798, -3798,  2318, 24653,  1611,
   -3798, -3798,   722,  2782, -3798, -3798,  2328, 24653, -3798,  2325,
   -3798,  2692, -3798, -3798,  2693,  2694,  2696, -3798, -3798, -3798,
   -3798, -3798,  2914,  2698, -3798, -3798,  2699, -3798, -3798, -3798,
   -3798,  2347, -3798, -3798, -3798, -3798, -3798, -3798, -3798,  2450,
   -3798, -3798, -3798,  2354, -3798, 39299,  2354, -3798, -3798,  2354,
   -3798, -3798,  2354,    39,  4184, -3798, -3798, 48419, -3798, 49027,
   -3798, -3798, 22186,  -167, -3798, -3798, 13426, -3798, -3798, -3798,
    2715,   331,  2357, -3798, 24653, -3798,  1762, -3798,   111,   111,
    2611,   135, 41731, -3798, -3798,   129,  2368,  2452,  2372, -3798,
    2469, -3798, -3798, 24653, 24653, -3798, -3798, -3798, -3798,  2994,
     922, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798,  2388,  2403,  2391, 39299,   962, -3798,
   48419, -3798,  1461, -3798, -3798, -3798,  2393, -3798, 11527, -3798,
    2396, -3798,  1740,  2787, -3798,  -167, 11527, -3798,  2397,  1353,
   48419, 48419, 48419, 24653, 48419, 24653, -3798,    -1,    -1, -3798,
   36259, -3798, -3798, -3798, -3798,   -28, 48419, 48419,   -28, 39299,
   -3798,  1526, 48419,   -28, -3798,  2789,  2508, -3798, -3798, -3798,
    2855, -3798, -3798,  2846,  2405, -3798,  2787, -3798, -3798,  1526,
   -3798, -3798, 24653, -3798, -3798,  1526, -3798,  1526,  1526,   -28,
     -28,  2465, -3798, -3798,  2414, -3798,  2465,  2568, -3798,  1186,
     184,  2665, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798,    63, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
     155, -3798, -3798, -3798,  1853,  2922, -3798, 41731,  1390,   647,
     853,  1390,  2387,  -167,   263, -3798,   263, -3798,  3393,  2700,
     194, 24653, -3798,  2431, 44771, 24653, -3798, -3798, -3798,   140,
    2426,  2435,  1762,  2451,  2453,  2455,  2456,  2476,  2477,  2478,
    2479,  2480,  2483,  2491,  2495,  2497,  2500,  2501,  2502,  2506,
    2507,  2444, -3798, -3798, -3798, -3798, 24653, -3798,     9, -3798,
   -3798, -3798,  2510, -3798, -3798, -3798, -3798,  2225, -3798, -3798,
   -3798,   164,  1822,  2475,  2530,   119, 39299,  2894, 48419, 48419,
    1353, 48419, 48419, -3798, -3798,   531,  2766,  2767,  2769,  2514,
   -3798, -3798, -3798,  1271, 48419,  2940, 30176, -3798,   302,   481,
   -3798,  2897,  2511, -3798,  2516,  2517,  2518, 11527,   218,   153,
     514,  1307,  1550,   731,   348,   355, -3798,  1571,   409,   465,
     471,   852,   473,   322, -3798,  2519,  2513, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798,  2522, -3798, -3798, -3798,   483,
     489,   879,   899,  2525,  2526, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798,  2968, -3798,  1617, -3798, -3798,
   -3798, -3798,  2529, -3798, -3798,  1036,   559,   571,   335,  2538,
    1681,   630,  1696,  1720,  2534, 25883, 48419,  2897,  2544,  1082,
    1091,  2897,  2546,   725,  1108,  1739,  1765,  1770,  1123,  1200,
     794,  1776,  2740,  1212,   798,   822,   831,   891,  1214,  2548,
    2550,   895,   294,  2897,  2553,   339,  2537,  2555,  1227,  9628,
   10261, 10894,   200,   906, -3798,  2558, -3798,  2294,  2563,  2565,
     364,  1239, -3798, 11527, -3798, -3798,   966,  1157,  2608,   157,
      50, -3798,  2724, 48419,  2408,   141, -3798, -3798, -3798, -3798,
   -3798, -3798,  1189, -3798,  2570, -3798,  2571,  1694,  2557, 11527,
     189,  2557,  2809,  1758,  1758, 16591,  3047,  2278, 12160,  1379,
   12160,  1379,  2557,  2557,  2557, -3798, 16591,  2576, 16591, 16591,
   -3798,  2827,  1762,  2582,   839, 48419, -3798,   722, -3798, -3798,
   -3798, -3798,   921, 39299,   100, 24653, 41731,  2583, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798,  4470, 24653, -3798, 48419,
   -3798,  2669, -3798, -3798, -3798, 22801, 22801, -3798, 22801, -3798,
   -3798,   869,   870,  2729,  2612, -3798, -3798, -3798, 29566,  1762,
   -3798, 24653, -3798,  2988,   691, 24653,  2431, -3798,  2594, -3798,
   -3798, -3798, -3798, -3798,  2383,  2705, -3798,  3214, -3798, 11527,
    -167, -3798, 39299, 39299, 24653, 24653, 24653,   877, -3798,  1480,
   -3798, -3798, -3798,  3126, 18490,  3024,  3036, 22801, 22801, 22801,
   -3798, -3798, -3798, -3798, -3798,  1250,  1762, -3798,  2591, -3798,
   -3798, -3798, -3798, -3798, 45379,   371, -3798, -3798,  -167,  3039,
   -3798,  1762,  2603, 48419, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798,  3068, -3798,  2788,
    -103, -3798, -3798, -3798, -3798, -3798, -3798, -3798,   -28, -3798,
   -3798, -3798, -3798, -3798,  2835,  2390,  1980,  3039,   -28,  1526,
   24653,   -28,   -28, -3798, -3798,  1432, -3798,   -93, -3798, -3798,
   -3798, -3798, 48419,  2441,  2774, -3798,  2616, -3798, -3798, 24653,
   -3798,  2621, -3798,  3061,  3207,  2390, -3798, -3798, -3798,   921,
     921,  2920, -3798,  -167,  2755,  2756,  2759,  2760,  2761,  2806,
   -3798, -3798,  -167,  -167, -3798, -3798,   921, -3798,   897, -3798,
   -3798, -3798, -3798,  -167,  -167,  -167,  -167,  2841,  -167,  -167,
    1809, -3798, -3798,   921,   921, -3798,  1201, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798,  1234, -3798,  2764,  3192,  2887,   921,
     921,  3192,   921,  2890,  2891,   921,   921,  2730,  3143,   921,
    3031,  2773,  3091,  3033,   921, -3798,  2775,  3150,   921,   921,
     921,   921,  3192,  2902,  3245,   921,   921, -3798,   921,  2921,
    2925,   144,  2927,  2928,   921,   134, 48419,   921,   921,  2929,
     921, -3798, -3798,  6509, -3798, -3798, -3798, -3798, -3798, -3798,
     786, 23419, -3798, -3798,   921,   461, -3798,  2872, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
    2677, -3798, -3798, 11527,  2682,  2841,  -167,  -167,  1955,  -167,
    2841,  -167,  -167,  -167,  -167,  -167,  2841,  2841,  -167,  2042,
    -167,  2841,  4506, -3798,  2736, -3798, -3798, -3798, -3798,   188,
     921,   921,   921,   921, -3798,  2367, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, 41731,  3041,  1898,   -53, -3798, -3798,
   41731, -3798, 48419, -3798,  1863, 48419,  2691,  -165,  3564,   181,
     181, -3798, 24653, 24653, 24653, 48419,  2739,  2612, 30176, -3798,
   -3798,  1186, -3798,  2681, 14059, -3798,  2695, -3798, 11527, -3798,
   -3798, -3798,   401, 11527, 11527,  3169,  2311, -3798, 40515, -3798,
   -3798, -3798, 11527, 11527, -3798, 11527, 11527, 11527, 11527, -3798,
   11527, 40515,  2311, 11527, -3798,  2697, -3798,  3092,  3098, -3798,
   -3798, -3798, -3798, 11527, -3798, 11527, 11527, -3798, 11527, 11527,
   11527, 11527, -3798, 11527, -3798, -3798, 16591, -3798,  2701,  2710,
   -3798, -3798, -3798,  2719, -3798, 11527, -3798, -3798, -3798, -3798,
   -3798, -3798, 11527, -3798, 11527, -3798, 11527, 11527, 11527, 11527,
   -3798, -3798, -3798, 14692, 11527, 11527,  2727, -3798, -3798, 11527,
   11527, 11527, -3798, 11527,  1162, 11527,  1778, 11527,  1780, 11527,
   -3798, 11527, -3798, -3798, -3798, -3798, 11527, -3798,  1811, -3798,
   -3798,  2263, -3798,   966,  2741, -3798, -3798,  1461, -3798, -3798,
    2704,  2717,  2722, 41731, 11527, -3798, -3798, -3798, -3798, -3798,
   -3798, 16591,   411,  2742, 16591, -3798,  2809,  2324,  2324,  2195,
   11527,   189,  2809, 11527,  2743,  2744, -3798, 11527, 48419, -3798,
   -3798, -3798, -3798, -3798, -3798, 41731, -3798, -3798, -3798, -3798,
     100, -3798,  2325, -3798,  2431, -3798, -3798,  1828, -3798, 39299,
    2732, -3798,  2733,  2781,  2829,  2830, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,  2390,  1480,
   -3798, -3798,  2748, -3798, -3798,  2486,  2843,  2785,  3109,  3294,
   -3798, -3798, 48419, 16591, -3798,  3347,  2768,  2771,  2786,  2776,
    1762, -3798,  2847, -3798, -3798, -3798,    41, -3798, -3798, -3798,
   -3798, -3798,    62, -3798, -3798,  2780,  2780, 20337, -3798, -3798,
   -3798,  2793,  1117,  1117,  1117, -3798, -3798, -3798, -3798,  3029,
   39299,  3213,  3220,  3221,   951, -3798,   377, -3798,  1025,  3174,
    2390, -3798,  3224, 42339, -3798, 30784, -3798,  2790,  3172,  2791,
     921, 32608,   746, 27727, 36867, -3798, -3798,  1955, -3798,   311,
   -3798, 37475,  3253, 37475, 37475, -3798,  3069, -3798, -3798, -3798,
   -3798,  2612,  1526, -3798, -3798, -3798,  2792, -3798, -3798,  1104,
    3188,  3191, -3798,  3071,    42,  3071,  1104,  1104, 25883,  1186,
    2468, -3798,  2841,  3123, -3798, -3798, -3798, 41123, 38083, -3798,
   -3798, -3798, -3798,  3333, -3798,  3334,   199, -3798, -3798,  2642,
     853, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798,  2387,  2642,  2642,   263,
   -3798,   118, -3798, -3798, -3798, -3798, -3798, 26498,  1213, -3798,
     637, -3798, 26498, -3798,   140,   140, -3798, 26498,  1213,  1955,
    2841, 26498,  2841, 45987,  1213,  -167,  -167,  2443,   921,  2841,
   -3798, -3798,  3199, 48419,  3200, 26498, 26498, -3798, 41731, -3798,
     921,   127,  2841,  1955,  1955, 26498,  1213, 25883,  1975,  2676,
   -3798,  -167,  1213, -3798, -3798, -3798, -3798, 24653,  1213,  1213,
    2961, -3798, -3798, -3798,  2841,  2676, 45987, -3798, -3798,  6256,
   -3798, -3798, -3798, 19722, 48419,   287,   881, -3798,  2816, 33827,
     652,   278,  2906,   880,  2834,  2836, 46595,  1762,  2841, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798,  -167,  2383,  2642,  2642,  1822, -3798,  3100,
    3260,   921, -3798,  2111, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798,  2931, -3798,   133,  3022,  2842, -3798, -3798,
     282, -3798, -3798,  1132, 24653, 19107, -3798,  3084, -3798,  3080,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,  2837,
    1186,  3102,  1457,  2612,  2849, -3798, 12160,  1249, -3798,  1762,
   11527,  1762,  1324, -3798,  2850,  2850,  2850, -3798,  2851, -3798,
   -3798,  2850,  3236,  2850,  3241,  2852, -3798,  2856, -3798,  1875,
    1273, -3798,  1894,  1264,  1735,  1269,  2858,  2862,  1459, -3798,
   11527, 11527,  1305,  1309,   603,   929,   940,   448, -3798,  1317,
    2765, -3798, -3798,  1333,  1365,  1371,  1395,   946,  1411,  1916,
   12160,  1419,   232,   450, -3798,  1421,   975,   998,  1430, 11527,
    1442, 11527,  1483, 11527,  1496,  1498,  1503, -3798,  2011,  2263,
   -3798, -3798,  2866, -3798, -3798, -3798, -3798, -3798,  2860,  1762,
    2868, -3798, -3798, 11527, -3798,   173, -3798, -3798, 16591,   460,
    2871, -3798,  1762, -3798, -3798,  2873,  1459, -3798, -3798, -3798,
   -3798, -3798,  2881, -3798, 48419,  -241,  2863, 31392, 39299, 39299,
   39299,  2875, 11527, -3798, -3798,  3142, 24653, -3798,  3281, -3798,
   -3798, -3798, -3798, -3798,  2876,  2878, -3798, -3798, -3798,  2809,
    3244,  3127, -3798, -3798,  2383, 48419, 39299,  3179, -3798, -3798,
    2120, 25883, -3798,  2883, -3798,  2883,  1081,  2886,  1918, -3798,
   -3798, -3798,  2888,  2062, 18490,  3327,  2328, 39299, 39299, 39299,
   -3798,  2612,  2612,   137,  2945,  3284, -3798, -3798, -3798, -3798,
   47203, -3798, -3798, -3798, -3798,   941, 48419,  3267, 48419,  8995,
   -3798, -3798,  3462, 11527, 39299,   -82,    50,   921, -3798, -3798,
   -3798, -3798, -3798, -3798,  2390, -3798, -3798, -3798, -3798, 37475,
   -3798, -3798, -3798,  2390, -3798,   -28,  1432,  -210,  1157, -3798,
    2346, -3798, -3798, -3798,  3285,  1104,  3071,  3071,  3287,  3177,
     985,  2908, -3798,   921, -3798, -3798, -3798,  2120, -3798, -3798,
   11527, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798,  1234, -3798, -3798, -3798, -3798,  2911,  3290,
    3292,   140, -3798, 26498, -3798, -3798, 26498, 26498,   102, 45987,
   -3798, -3798, -3798, -3798, -3798, -3798,  2916, -3798, -3798,  2383,
   -3798, -3798, 38083,  -167, -3798, 26498,  2916, -3798, -3798,   435,
   -3798,  -167, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   45987,  2923, -3798,  1413, -3798, -3798, -3798, -3798, -3798,  1715,
   -3798, 45987, -3798, -3798, 45987, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798,  2924,  2678,  2595, -3798,
    2915,  2933, -3798, -3798, -3798, -3798, 48419, -3798, -3798, 24653,
   -3798, -3798, -3798,  6264, 48419, -3798, -3798, -3798, -3798,  3151,
   -3798, 11527, 11527,  3198, 48419,  3202, -3798,  3469, 48419,  3540,
   45987, -3798,  2938, -3798,  2939, -3798,  1933, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798,  2943, 48419,  2642,  1898, -3798, -3798,
   -3798, -3798,  -167,  1132, -3798, -3798, -3798, -3798,  3209,  3216,
   48419, -3798, -3798, -3798, -3798,  3085, -3798, 24653,  3530, -3798,
    3114, -3798,  2949,   814,  5178, -3798,  2953,  2954,  2955, 30176,
    2612,  3319, -3798, -3798,  2324, -3798,  1762, 11527,  1037, -3798,
   -3798,   266, -3798,  1040, -3798, -3798, -3798,  2959, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798,  2750, -3798, -3798, -3798,  2311,
   -3798, -3798, -3798,  2964,  2324,  2324, -3798, -3798,  3548,  3130,
   11527, 11527, -3798, 11527, -3798,   202,  2970,  2998, -3798, -3798,
   -3798, -3798, 11527, -3798, -3798,  2324, -3798, 11527, -3798, -3798,
   11527, -3798, 11527, 11527, -3798,  1508, -3798,  1546, -3798,  1588,
   -3798, -3798, -3798,  2393, -3798, -3798,   960, 48419, -3798, -3798,
    1961, -3798, -3798, 11527, -3798, 42339, -3798, -3798,  3187, -3798,
   -3798,  3401, -3798, -3798, -3798,  -160,  -160,  -160, 15325,  1762,
    3457, -3798, -3798, -3798,  3281,  3348, -3798,    30, -3798, 48419,
    2976,   136, -3798,  1973, -3798, -3798,  2979, -3798, -3798,  2011,
    2980, -3798,   921, 15325,  2780,  3114, -3798, -3798,  1081, 25883,
   30784, -3798, -3798, 39299,  2328,  2328,  2328,  2390,  3406,  2843,
    2843, -3798, 28341, -3798, -3798,  3140, -3798, -3798, 32000, -3798,
    1712, -3798, -3798, 16591,  1637, -3798,  1762, -3798, 41123, -3798,
    1762,   921,  2987,  2989, -3798, -3798, 47811, 11527, -3798, -3798,
   -3798, -3798, -3798,  1461,  2926, -3798,  1186, -3798,  1104, -3798,
    3368,  3371,  1104, -3798, -3798, -3798, 25883,  2612, 15325, -3798,
      43,  2011,  1762,  2997,  1413, -3798,   579, 11527, 26498, -3798,
   -3798, -3798,  2996, -3798, -3798,  3502,  3504, -3798, 26498,  2225,
   48419, -3798,  3462, -3798, -3798, -3798, -3798,  6264, -3798, 25883,
   -3798, -3798, -3798, -3798, -3798, 48419, -3798, 24653, -3798, 19722,
   -3798,  3004, -3798,  2850,  2850,  2850, -3798, -3798, -3798,  2850,
   -3798,  2851,  3238, -3798,  2851,  2851, -3798, -3798, -3798, -3798,
   -3798,   266,  2139, -3798, -3798,   266, -3798, -3798, -3798,   190,
     529,  2851, -3798, -3798, -3798, -3798, -3798, -3798, -3798,  2850,
    2850,  2850, -3798, -3798,   266,  2850, -3798,  2850, -3798,  2494,
   -3798,   326,   131,  2850,  2850,  2850,  2959,  2999, -3798,  1762,
    2324,  3551, -3798, -3798,  3156,  -167,  3496, -3798,  1983, -3798,
    3012, -3798, 46595, -3798,  2841,  2387, -3798, -3798, -3798, -3798,
    3155,   801, -3798,  3186,  3017,  3019, -3798, -3798,  -167,  3018,
    3021, -3798, -3798, -3798, -3798,  3633, -3798, 48419, 48419, 48419,
    2681, -3798, 38691, -3798,   646,  1762,  3023,  3025,  3026,  3028,
    3626,   197, -3798,  3629, 40515, -3798, -3798, -3798,  1996,  3309,
   -3798, -3798,  2850, -3798,  2851, -3798, -3798, -3798,  3605, -3798,
   -3798,  2850,  3427,   266, -3798, -3798,  3046, -3798,  3052,  3053,
   -3798,   184,  3054,  1598,  1031,  2016,  3353,  3431, -3798,  3276,
   -3798,  1607,  1052,  1639,  1641,  1648,  1655, -3798, -3798, -3798,
     150,  1157, -3798, -3798,  2028, -3798,  3413,  3322,  1105,  3088,
    3088,  3088,  1637,  1762,  2030, -3798, -3798, -3798, -3798,  3454,
   -3798, -3798,  3065,  3214, 48419, -3798,  3127, -3798,  2393, 25883,
   15325,  3066,  3067, -3798,   745, -3798, -3798,  3062,  2328, -3798,
    3653,  3492, -3798, -3798, 41731,  3072, -3798, -3798,  3378, -3798,
     138,  3289, -3798, -3798, -3798,   -82,  3168,  3170,   921,  1762,
   -3798, -3798,  2616,  2753,  3124,  1104,  1104,  3229,  3128, 11527,
   11527,  3083, -3798,  3102, -3798, -3798,   361,  2393, 11527, -3798,
    2383,  3127, -3798,  1668,  3087,  3089, 48419,  3097,  3099, -3798,
    3695,   287, -3798, -3798, -3798, -3798,  1213, -3798, -3798,  2916,
      62,  3079, -3798, 48419,  3412, -3798, -3798, -3798, -3798,   875,
   -3798,  3101,   875,   875, -3798,  2170, -3798,  3122,   266, -3798,
   -3798,  3125, -3798, -3798, -3798,   875,  3103,   266, -3798, -3798,
   -3798, -3798,   875, -3798, 41731,  -167,  3562,  3706, -3798,  3154,
   -3798,  3606,  3483,  3717, -3798,  2208, -3798,  3485,  3384,   921,
   -3798,   266, -3798, -3798,  3707, -3798,   266,  3707,   875,   875,
   48419, -3798, -3798, -3798, -3798, -3798, -3798, 48419, -3798,  1126,
   -3798, -3798, -3798,  2034,  -167, -3798, -3798, -3798,  3110,  3113,
   -3798, -3798, -3798,   278, -3798, 48419,  6264, -3798, -3798, -3798,
    6509, -3798,  1127,  2038,  1413,  3116,  2048,  2050,  3580,  3296,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, 40515, -3798,
    3707,  3396,  3129, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, 11527, -3798, -3798, -3798, 11527, -3798, -3798,  3429,
    3581, -3798, -3798, -3798, -3798, -3798, -3798,  1025,  1025, -3798,
   -3798, -3798,  3738, -3798,  3219,  3222, -3798, -3798,  3225, -3798,
   -3798,   115,  2267, -3798, -3798, -3798, -3798, 15325,  3505,  3233,
   -3798, -3798,  3136,  3180, -3798, -3798,   150, -3798, -3798, -3798,
   -3798, 11527, -3798,  3102,  2443, -3798, 28341, -3798, -3798, -3798,
   -3798, -3798,  3137,  3138,  8995,   960, -3798,  3193, -3798, -3798,
   -3798,  3195,  1762,  1762, 48419,  3319, -3798, -3798,   140,   140,
   -3798,   361,   150,  1413, -3798,  2058, -3798, 48419, 48419,  2064,
   48419, 48419,  1117,  1117,  1117,  2042,  2042, -3798, -3798, -3798,
     287, -3798,  3539, -3798, -3798,  2067, -3798,    69,  3409, -3798,
   -3798, -3798, -3798,   875, -3798,   184, -3798, -3798, -3798, -3798,
   -3798,   184, -3798, -3798, -3798, -3798,  1593, -3798, -3798, -3798,
    3432,  3196, -3798, -3798, -3798, -3798, -3798, 34435, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798,  3279, -3798, 54499, -3798, -3798,
     713,  3190, -3798, -3798, -3798,  1755, 48419, 24653,  3198,  3342,
   -3798,  3462, -3798,   745,  3084,  3114, -3798,  1767, 48419, -3798,
    3440,   186,  1605, -3798,  3628, -3798, -3798,  3173,  3175,  1413,
    1675, -3798, -3798, -3798, -3798,  3661, -3798, -3798, -3798, -3798,
   -3798,   347,  3437,  2841,  2841,  2841,   632,  2267, -3798, -3798,
    3230, 24653, 16591,  3299, 48419,  1323,  3335, -3798,  1540,  1413,
   11527,  2390, 38083, -3798, -3798, -3798, -3798, -3798, -3798, 11527,
    3178, 11527,  3183,  2073, -3798, -3798,  3619,  3619, -3798, -3798,
   -3798, -3798,  2079,  2081, -3798,  2095,  2101, -3798, -3798, -3798,
    3185, -3798, 48419, -3798, -3798, -3798,   221, -3798, -3798,  2105,
   -3798,  2109, -3798,  1593, -3798,  3189, -3798, -3798, -3798, -3798,
   11527,  3665,  3223, 48419,   809, -3798, 55715, 55715, 48419, -3798,
   -3798, -3798, -3798,  5779, -3798, -3798,   -44, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,  3791, -3798,
    3194, -3798, -3798,  3203,  1135, -3798, -3798, -3798,  6264,  3635,
     880, -3798, -3798, -3798, -3798,   814,  3204,  2062,  -167,   921,
   -3798,  1767, -3798, -3798, -3798,   921,  1413,  3206,  3456, -3798,
     186, -3798, -3798, -3798,  1605, -3798, -3798, -3798, -3798, 11527,
   -3798, -3798,  3778, -3798, -3798, -3798, -3798, -3798, -3798,    83,
   -3798, -3798, 25883, -3798, -3798,  2383, -3798,  2114, -3798, -3798,
   -3798,  3301,   921,   921,  3704,  3708,   921,   921,   921,   921,
    3226,  3335, -3798,  3684, -3798, -3798, 11527, -3798, -3798,  1762,
    3447, -3798,  3777,  1157,  1762, 48419,  1762, 48419, -3798, 48419,
     912, -3798, -3798,  3430, -3798,  1767, -3798, -3798,  3127, -3798,
     838,   838,   266,   184,   266, -3798, -3798,  1762, 11527, -3798,
   11527,  3252, -3798, -3798,  3663, 48419, -3798, -3798, -3798, -3798,
   11527, -3798, 54499, 54499, -3798, -3798, -3798, -3798,  3826,   745,
    3795,  3493,  3796,  2919, -3798, -3798,  3469,  6264, -3798, -3798,
   -3798, -3798,  2841, -3798, 35043, -3798, -3798,  1710, -3798, -3798,
    1413, -3798, -3798, -3798,  3235, -3798,   921,  2443,  3231, -3798,
   -3798, 48419,  3242, -3798,  -167,  -167,   921,   921,  2854,  2854,
    2383, 41731,  3345, -3798, -3798,   921,  1413, 48419, -3798,   909,
    3599, -3798,  2117,  2121, -3798,  3823, -3798,  3827,  3246,  3249,
   -3798,  1767, -3798,   186,  1605,  2126, -3798,  3868, -3798,   856,
    3520,  3521, -3798, -3798, -3798,  3255,  1762,  1762, -3798,   251,
   -3798, -3798,  3643,  3732, 11527,  1762, 51459,  3254, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, 55107, 11527, -3798,   -44,  3791, -3798,  3523, -3798,  3524,
   -3798, -3798, -3798,  3752, 54499, -3798,  3750, -3798,   745, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, 25883, 15325, -3798, -3798,
    3299, -3798,  3266, -3798, -3798,   -40, -3798, -3798,  -167,  -167,
   -3798, -3798, -3798, -3798, -3798,  2135, -3798, 41731, -3798, -3798,
    3849,  3851,  3749,  3857,   909, -3798,  -163, -3798, -3798, -3798,
   -3798, -3798, 46595, 46595, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798,  3336,  3776,   750,  3310, 11527, 54499, -3798,  3754, -3798,
    3690,  1683,  3632,  3280, -3798,  3282,   518,  3792, 55715, 55715,
   -3798, -3798, -3798, -3798,  3768, -3798, -3798, -3798, -3798, -3798,
    3468, -3798, -3798,  2172, -3798, 15958, -3798, -3798, -3798, -3798,
   -3798, 41731, -3798,  3345, -3798,  3300,   184,   184,  3881,   184,
   -3798,  3883,  3884,  -163, -3798,  3304,  2177,   838,   838, -3798,
   -3798,   109, -3798,   288, -3798,  1762, 52067,  3882, 48419, -3798,
   -3798, -3798, -3798, 11527, -3798, 42947, 52675,  3302, -3798, -3798,
   -3798,  3480, -3798,  2919,  3718,  3777, -3798,  3266, -3798,  3307,
   -3798,  2809,  3335, -3798, -3798,  3312, -3798, -3798,   184, -3798,
     184,   184, -3798, -3798, -3798, -3798, -3798,  -167,  3688, -3798,
     109, -3798, 11527, -3798,  3790,  3407, -3798,  3315, -3798, 54499,
    1742, 54499, -3798, -3798,  3744,  3323,  1601, -3798,  3318, -3798,
   -3798, 54499,  3908,  3599, -3798, 15958,  3326, -3798, 11527,  3329,
    3330, -3798, -3798, -3798, -3798, -3798, -3798, -3798,  1762,  3904,
   54499, 48419, 49635,  3526, 53283,  3775, 48419,  6264,  3779,  3781,
   -3798, 54499, -3798,   184,  3741, -3798, -3798,  1762, -3798, -3798,
    3426, -3798, 50243, -3798,  2377, -3798,  3365, -3798, -3798,  3844,
    2995, -3798, -3798, -3798,  3618,  3351, -3798, -3798, 54499, 54499,
   -3798, -3798, -3798, 33219, 11527, -3798, -3798, -3798, -3798, -3798,
     951,     7, 20952,  3509, 50851, 53891, -3798, -3798, -3798, 28955,
   -3798, -3798, -3798,  3784, -3798,  1762, -3798, -3798, -3798, -3798,
   -3798, 41731,  2181, -3798, -3798, 25883, -3798, 33219, -3798, -3798,
   -3798, -3798, 24036,  3352, -3798,   921, -3798, -3798, 25883, -3798,
   -3798, 15325, -3798, -3798
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3798, -3798, -3798, -3798, -3798,    71, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798,  1713, -3798, -3798, -3798, -3798, -3798,
    1920, -3798,   653, -1794, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798,   651,  1542,  3332, -3798,   388, -3798,    55, -3798,
   -3798, -3798, -2866,   -69,  -259, -3798, -3798,   344,    17,  3000,
    -258, -3797, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798,   398,   395, -3798, -3798,   206, -3798, -3798, -1120, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798,  -454,  -406,  1852,
   -3798, -3798, -3798,  3959, -3798,  3428, -3798,  1236,  2184, -3798,
   -3798, -3798,  -413,   225, -3798,   227, -3798,   228, -3798,   229,
   -3798,   230,   233,   237,   238, -3798,   240, -3798, -3798,  -412,
   -3798, -3798, -3798, -3798,   242, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798,  -263, -3798, -3798,  -108, -3798, -3798,  -261,   246,
   -3798,  -214,   249, -3798,   250, -3798,  -127, -3798,  -124, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798,  3001, -3798, -3798, -3798, -2217, -3798, -3798, -2123,  2566,
   -3798, -1678, -3798, -3798, -1785, -3798, -3798, -1623,  1024, -3798,
   -3798,  -130,  -351, -3798, -1385, -1892, -1885, -3798, -3798, -3798,
   -1981, -1980,  -781,  2296, -1184, -2208, -3798, -3798, -3798, -3798,
     103, -3798, -3798, -2534,  2025,  2569, -3798,  2560, -3798, -3798,
    1122, -3798, -3798,  1303,   611,  1300, -3798,   918,  2745, -1242,
   -3798, -3798, -3798, -3798, -3798, -3798,   -33,   217,  -129, -3798,
   -3326,   617, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -2613, -3798, -3798, -3798,  -300, -3798, -3798,  -207, -3798, -3798,
    -255, -3798,    68, -2282, -3798, -3798, -3798, -3798,  2539, -1310,
   -3798,  3554, -3798,  -558,   463,  2061, -2387, -1402, -3798,  -928,
    -909, -2442, -3798, -3798, -3798, -3325,  1072,  1486, -3798,   819,
    2066, -1886, -3798, -3798, -3798, -3798, -3798,  1553, -3798, -3798,
     844, -3798,   836, -3798, -3798, -3798, -3798, -3798,  -251, -3798,
      54, -2720, -3798, -3798, -3798, -1896,  1038,   812, -3798, -3798,
   -3798,  -936, -2079,  -585, -3798,   338, -2519, -2402,   781, -3798,
   -3798,   535, -3692, -3798, -3798,  -572, -2071, -2356,    15, -3798,
   -3798,   554, -3082,   923, -3798, -3798, -3798, -3096, -1849, -3798,
      86, -3798, -3798, -3798, -3798, -3779, -3798, -3798, -1461, -2240,
   -3798, -3798,  4099,  4101, -1038, -2631, -3708,    -9,    -8, -3798,
   -3798, -3798,  2578, -1571,   177,   160,   169,  2032, -1145,   323,
   -2270, -3798,   373, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,  2115,
    -815, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -2373,   896,
   -3798, -3798,  1618, -3798, -3798, -3798, -1838,  3167, -3798, -3798,
   -3798, -3798,  3508, -2143, -3230, -3798, -3798, -3798, -3798, -3798,
   -3798,  1265, -3798, -3798,  2243,  2706, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798,   621,  1813, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798,   904,  2622, -3798, -3798, -3798,
   -3798,    25, -3798, -3798, -3798, -3798,  2332, -3798, -3798, -3798,
   -3798,  2663, -3798, -3798, -3798, -3798, -3798, -3798,  1415, -3798,
    1847, -3798, -1435, -3798, -3798,  1019,  -984,  1800,  -592,  1934,
     366, -3798,  3557, -3798, -3798, -3798, -1625, -2453, -3798,  3247,
   -1047, -2495,  2326,  -537, -1818,  1044,  1663,  -689,  3995, -3798,
   -1149, -1127, -3798, -3798,  -647, -3798, -3798, -3798, -3798, -3798,
    2026,  2035,  -651, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798,  1449, -3798, -3798, -3798, -3798, -1725,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798,  1924, -3798, -2040,
   -3798, -3798,  -473, -3798,  3035, -3798, -3798, -3798, -2291, -1900,
    1757,   963, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -2333, -3798, -3798, -3798, -3798, -3798,  1946, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -1621, -3798, -1840,   303, -3798,
     451, -3798, -3798, -3798, -3798, -3798, -3798, -3798,   -49,   843,
     -47, -2067, -1100,  1676, -3798, -3798, -1273,  3075, -1984, -3798,
   -3798, -3798,  1927, -3798, -3798, -3798, -3798, -3798,   930, -2544,
    2731, -3798, -3798, -3121,  -907, -2238,  -895, -3798, -1348,  1363,
     466, -3798, -1908, -1777, -2050, -2482, -1095, -3798,  1673, -3798,
   -3798, -3798, -3798,  -212, -3798, -3798, -3798,   494,  1836, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,  -571,
    -748, -3798,  2091,  1103, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798,  2896,  2865,  1901, -3798, -3798, -2248, -3798,
   -3798,  1867, -3798,   755, -1994, -1808,  1051, -3798, -3798,  1053,
   -3165, -3798, -3798, -3798, -3798, -3798, -3798,   994, -3798,    26,
    3624, -3798, -3798, -3798, -3798, -3798, -3798, -3798,  2660, -1058,
    3544, -3798, -3798, -3798, -3798, -3798, -3798,  2333, -3798, -3798,
   -3798, -3798, -3798, -3798,  2832,  3641,  -575, -1224, -3798,  -774,
    2805,  2335,  -746, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798,  2457,   968, -3798, -3798,
   -3798, -3798,  2889, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798,  1090,   -87, -3798,    16,  -132, -3798,   -50,
   -3798, -3798, -3798, -3798, -3798,  -228, -3798, -3798,  -233,  -691,
    -986, -1353,   682, -1781, -2009,  1078,  2874, -3276,  -693, -1158,
   -1173, -1890,    59, -3798, -3798,  3343,    10,   384,  -320,    -6,
   -2732,  -109,  -573, -3798, -1752, -3798, -3798, -3798, -3798,  2401,
   -3798, -3798, -3798, -3798,  1435, -3798, -3798, -3798,  1047, -3798,
     769,   541, -3798, -3798,   179, -3798,  2454, -3798, -3798, -3798,
   -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798,
   -3798,  2893,  3679,  3359, -3798,  2960, -3798, -3798, -3798, -3798,
   -3798,   422, -3798,   645, -2236, -1659, -3798, -3798,  2720,   851,
   -3798,  1535,  -252,  -545, -3798, -3798,   420, -3798, -3798,   289,
    3691,  3362, -3798, -3798, -3798, -3798, -3798, -2709,  -890, -3798,
   -3324, -2760, -1685, -3798, -3798, -2127, -2971, -3798, -3798, -1041,
   -3798, -3798, -3798, -3798, -2016, -3798, -3798, -3798,    66,  3751,
    3753, -3798, -3798,  -215, -3798,   678, -3798, -3798, -3798, -3798,
   -3798, -3798, -3798,  3604, -3798, -3798, -3798, -3798,  3609, -3798,
   -3798, -3798, -3798, -3798,  3610, -3798, -3798, -3798, -3798, -3798,
    1840, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798, -3798
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2585
static const yytype_int16 yytable[] =
{
     494,  1040,   956,  1457,  1455,   952,  1686,  1105,   984,  1364,
    1113,  1596,  2226,   536,   137,   621,   542,   868,  2363,  2364,
    1557,  1685,  1662,   492,  1083,  1639,   556,  2314,  2040,  1132,
    2529,  1392,  1242,   568,  1547,  1548,   571,  1871,  1794,  2442,
     568,   997,  1870,  2347,  1420,   537,  2910,  2966,   590,   796,
    2558,  1707,  2037,  3494,   553,  2767,  1392,  2637,  1751,  1715,
    2733,   561,  2855,  3023,  3161,  1462,  1163,  3031,  3205,  1167,
    2646,  1028,  2454,  2839,  1032,  1604,  2013,  1803,  1176,  2455,
    2459,   540,  1717,  1718,  1463,  1940,  1721,  1722,  1723,  1724,
     610,  1726,  1727,  1729,  1731,  1732,  1733,  1734,  1735,  2346,
    2694,  2395,  2647,  3499,  1070,  2579,  2580,  3322,  2830,  3046,
    2906,  2417,  2418,   613,  2776,   494,  2840,   494,   620,   626,
    1054,  1062,  2788,  2611,  1184,  1185,  1186,  2720,  2429,  2467,
    3690,  2527,  3830,  2471,  1335,  3421,  1227,  2539,   615,  1226,
     617,  1295,  2549,  1953,  2486,  2447,  2448,  2077,  2555,  2556,
    1918,  2267,  3000,  2560,  2495,   609,   646,  1193,  1194,  1809,
    3514,  2469,  2470,  2504,  2472,  3573,  2087,  2475,  2476,  1193,
    1194,  2479,  2126,  1193,  1194,  3725,  2488,  1878,  1386,  1422,
    2491,  2492,  2493,  2494,  1798,  3534,  3539,  2498,  2499,  3540,
    2501,  4337,  2884,  3103,  2576,  1888,  2510,   635,  2064,  2514,
    2515,  2577,  2517,  1891,  1892,  2690,  1421,   552,  3550,  1287,
    2359,  2613,  3025,  1290,   560,  3572,  1193,  1194,  3626,  1438,
     972,  3698,  3723,  3041,  3042,  2887,   548,  2600,  1170,  3048,
   -1450,  3050,  2757,  1775,  2874,   850,  2327,  1375,  4052,  2870,
    2871,  1033,  1245,  3309,  1228,  3406,  4064,  3235,  1193,  1194,
    3541,  2230,  4131,  3232,  3352,  2383,   917,   918,   860,   732,
    1228,  3883,  2563,  2564,  2565,  2566,  4171, -1450,  3948,  4266,
    1193,  1194, -2464,  1445,  2511,  4447,  1860,  3192,  2450, -1490,
    3428,  3739,  2593,  1459,  3169,  3688,  1942,  3370,  1953,  2411,
    2568,  2835,  1459,  1050, -1954,  2956,  1308,  3638,   661,  1043,
    3371,  2971,   136,  2836,  1327,  3193,  1466,  3149,   667,  2912,
    1193,  1194,  -865,   636,  3372,  2431,  1459,  4122,  1193,  1194,
    1560,  -529,  2231,  2028,  1560,   917,   918,  2813,  2858,  1390,
     570,  1861,   545,  1035,  2583,   586,  1432,   581,  1193,  1194,
     549,  2356,  4281,  1806,  3442,  -530,  1514,  3370,  2083,  1936,
    1295,  1193,  1194,  4030,  2244,  1193,  1194,  2991,  2992,  3203,
    3371,  3847,  3121,  4082,  1193,  1194,  3819,   668,  2038,  2123,
     136,  1193,  1194,  4282,  3372,  4177,  2799,  2803,  2805,   653,
    1193,  1194,  2913,   497,   569,   917,   918,  1807,  3443,  2601,
    1536,  2209,  2039,  4053,  3221,   973,   974,  3869,   651,   138,
     813,  1322,  4236,  1171,  1172,   582,   262,  2824,   264,   502,
    1433,  3664,  1036,  4224,  3005,  3849,  1390,  1193,  1194,  2890,
    3204,  3087,  1603,  1954,   637,  1193,  1194,  1193,  1194,   546,
     917,   918,   587,  1914,   853,  2029,  1132,  3949,  4083,  4236,
    2859,  1776,  3758,  2917,  2918,  1069,  2972,  1483,  2512,  1561,
    2998,  3762,  3884,  1584,  1911,  3194,  2782,   756,  1747,  1239,
    1518,  4448,  1397,  1402,  1193,  1194,  1193,  1194,  3353,  2957,
    1446,  1536,   640,  2328,  2815,  3778,  1193,  1194,  2914,  3944,
    3780,  1193,  1194,  1111,  2584,  2194,  2267,  1193,  1194,  1193,
    1194,  1309,  2837,  3809,  1936,   669,  1425,  1193,  1194,  1193,
    1194,   620,  3209,   626,  2848,  1193,  1194,  1862,  4335,  4336,
    3879,  3170,  3839,  1537,  1538,  1539,  4171,  3006,  3156,  2232,
     809,  2485,  1195,  2781,   626,  1196,  1195,  3309,  2384,  1196,
    1193,  1194,  1462,   848,  1193,  1194,  1034,   620,   861,   858,
    3407,  3164,  3165,  3166,  1229,  2268,  3242,  2530,  3716,  1112,
    3885,  1463,   876,  1940,  1335,  1712,   859,  1916,  4054,  2454,
    1229,  1720,  2891,  1751,  2893,  2838,  2455,   852,  1954,  1195,
    1777,  2904,  1196,  1376,  3236,  1193,  1194,  2888,  1741,  2453,
     968,  2892,   851,  1515,  2916,  3717,  1335,  1193,  1194,  4262,
    2925,  2927,  2579,  2580,  3665,  2908,  2909,   969,  2246,   987,
    3505,  1195,  3870,  1462,  1196,  2919,  2943,  2927,   620,  2249,
    1001,  2013,  2252,  3231, -1490,  1748,  3233,  3234,  1571,  1572,
    2725,   610,  1463,  1195, -1450,  1288,  1196,   494,  1628,  3033,
    2988,  1629,   610,  2527,  1026,  3244,   610,  3356,  2602,   610,
    1516,  3230,  2329,  1041,  1001,  1627,  1193,  1194,   620,  1873,
    1013,  1890,  1876,  1640,  3448,  1642,  3225,  1880,  1071,  1072,
    1073,  3660,  4304,  1195,  1078,  2391,  1196,  1655,  1656,  1657,
    2903,  1195,  1516,  3104,  1196,  1661,  1754,  1810,  2243,  4338,
     645,  2576,  2911,  1893,  1894,  1051,  1011,   897,  2577,  1941,
    2077,  1195,  2505,  4080,  1196,  4409,  1291,  1023,  3970,  3699,
    2878,  2575,  4125,  1241,  1195,  2527,  2371,  1196,  1195,  1596,
    3030,  1196,  1771,  2088,   817,  3001,  1133,  1195, -2464,  3943,
    1196,   975,  2089,   550,  1195,  1068,  3497,  1196,  4008,  1173,
    4106,  1516,   866,  1195,  3858,  4166,  1196,  2789,  3350,  1296,
    1799,  1193,  1194,  1796,  3525,  3526, -1490,  1193,  1194,  2873,
   -2464,  2082,  3046,  1197,  1942,  3046,  3046, -1490,  2372,  1918,
    3038,  2506,  1817,  2996,  3627,  1197,  3245,   970,  2063,  1197,
    1195,  2872,  3046,  1196,  1190,   947,  1192,  2829,  1195,  3542,
    1195,  1196,  2993,  1196,  1826,  1014,  3551,  2990,  3337,  3958,
    -865,  2229,  3571,  3574,  3576,  3577,  4031,  3167,  3168,  -529,
    1235,   494,  1237,  1516,  1001,   494,   620,  2868,   494,   620,
    1193,  1194,  1197,  3197,  1193,  1194,  1389,  1195,  2124,  1195,
    1196,  1853,  1196,  -530,  1236,  2879,  1877,  1426,  1240,  1195,
    2210,  1244,  1196,  3373,  1195,  4075,  1052,  1196,  1193,  1194,
    1195,  1900,  1195,  1196,  1197,  1196,  1300,  1193,  1194,  3218,
    1195,  4138,  1195,  1196,  4257,  1196,   654,  3007,  1195,   610,
    1749,  1196,  3088,  3527,  3668,  3046,  1197,  3528,  1193,  1194,
    2738,   620,   610,  2767,  3338,  3484,   610,   815, -2584,  3488,
    2268,  1324,  3519,  1195,  1692,  1693,  1196,  1195,  4292,  4126,
    1196,  2083,  1920,  3373,  3115,  1193,  1194,  3547,  3548,  3549,
    1398,  1403,  2582,   877,  2141,  3552,  1197,  1193,  1194,  2816,
    3455,  1193,  1194,  3578,  1197,  1193,  1194,  3483,  3570,   620,
    2531,  3487,  1193,  1194,  1311,  2195,   118,  3458,  1195,  3459,
    3140,  1196,  3941,  2114,  1197,  2804,  4132,  1330,  4134, -1490,
    1195,  2620,  3718,  1196,  2878,  1193,  1194,  1197,  1296,  3715,
    1427,  1197,  2167,  2142,  1417,  3038,  1193,  1194,  3504,  4185,
    1197,   610,  1193,  1194,  3500,  1692,  2160,  1197,  3380,  2198,
    2199,  -433,   872,  3068,  2307,  1428,  1197,  3145,  2387,  2132,
    3633,  2454,  2095,  1458,  4229,  4208,  2133,  3978,  2455,  3636,
    1392,  1193,  1194,  2347,  2215,  2216,  3210,  3211,  1273,  1195,
    4043,  2969,  1196,  2885,  2885,  1560,  1901,  2373,  2416,  1304,
    1902, -2532,   610,  1197,  1193,  1194,  2579,  2580,  2975,  3396,
    1392,  1197,  4259,  1197,  1708,   610, -2395, -2396,  1871,   554,
    1871,  1871,  3202,  2976,  3595,  2820,  2821,  2880,  3352,  2660,
    2136,  2702,  2703,  3596,   120,  1940,  3361,  1193,  1194,  2346,
    2970,  2327,  1193,  1194,  1630,  2615, -1775,  1631,  1333,  1540,
    1197,  2459,  1197,  4210,   610,   628,  2453,  1932,  1553,  3125,
    3126,  3127,  1197,  4211,  1748,  2753,  3480,  1197,  3072,  3073,
    3089,  3090,  1702,  1197,  1936,  1197,  1541,  2251,   575,  2099,
    3112,  3113,  2701,  1197,  1195,  1197,  2137,  1196,  1193,  1194,
    1195,  1197,  2138,  1196,  2140,  2576,  2308,  1193,  1194,  1133,
    2486,  2115,  2577,  2100,  2147, -2532,  4115,  2013,  3543,  1740,
    2148,  3544,  3241,  1133,  1193,  1194,  1197,   558,  1936,  1544,
    1197,  2348,  2385,  1551,  1647, -2395, -2396,  2845,  4289,  1193,
    1194,  1462,  2390,  2226,  2127,  2393,  2394,  2706,  2707,  3851,
     583,   498,  3708,  3709,  4044,   499,  1827,  1941,  3450,  3393,
    1463,  4116,  3366,  1195,  1686,  3366,  1196,  1195,  2825,  3664,
    1196,  1197,  1997,  1687,  4047,  4048,  3597,   599,  1193,  1194,
    2266,  1231,  2077,  1197,  2270,   620,  2749,  4060,  2575,  4127,
    2158,  1195, -1797,   990,  1196,  1038,  1039,  3475,  4061,  2700,
    1195,  1709,  2159,  1196,   629,  1748,  2253,  2881,  3501,  2710,
    4230,  1933,   584,  1808,  2784,  2300,  1193,  1194,  2000,  2262,
     884,  1195,   620,   602,  1196,  1588,  1953,  1744,  1193,  1194,
    1193,  1194,   610,  3493,  1230,  1686,   873,  3380,  4070,  2322,
    2323,   610,  1197,  1193,  1194,  2326,  1942,  1418,  1195,  1748,
    2843,  1196,  3353,  4111,  3979,  1193,  1194, -1798,  3011,  1953,
    1195,  2163,  2313,  1196,  1195,  1193,  1194,  1196,  1195,  2161,
    3945,  1196,   603,  2374,  1341,  1195,  3620,  4212,  1196,   620,
    1193,  1194,  4117,  4128,  1589,  1193,  1194,   655,  2328,  1193,
    1194,  1780,  3055,  1783,  2082,  3897,   610,  1746,  1195,  2309,
    2785,  1196,  3134,  3630,  2959,  2581,  4472,   605,   610,  1195,
    4129,  1590,  1196,  1787,  1362,  1195,   620,  3367,  1196,  1749,
    3367,  1193,  1194,  2404,  1686,  1193,  1194,   610,   610,  1305,
    3806,   611,   885,  1193,  1194,  1056,  1064,  1197,  1560,  2923,
    1193,  1194,   600,  1197,  1195,  3214,  4290,  1196,  2527,  1193,
    1194,   620,  3665,  2679,  1830,  3749,  2175, -1797,  1922,   614,
   -1775,  2131,  1838,  2263,  1828,   947,  2236,  1195,   616,  2527,
    1196,   627,  3012,  1560,   494,   494,   494,   610,   494,   610,
    1591,  1193,  1194,  2083,  1872,  1850,  3537,  1193,  1194,  2582,
    1874,   494,  3368,   620,  2262,  3378,   494,  1854,  1855,  1856,
    1195,  1858,  1710,  1196,   886,  1195,  1197,  4062,  1196,   947,
    1197,  1193,  1194,   991,  1875,    43,   610,  2519,  1711,  1879,
    2885,   880, -1798, -2532,  1695,  2182,  2988,  1193,  1194,  2186,
    2222,  -198,  1936,  3250,  1197,  1193,  1194,  1193,  1194,   633,
     992,  2356,  1857,  1197,  1859,  4213,  1193,  1194,  3750,  -433,
    1749,  1195,  3666,  2187,  1196,  1592,   732,  2329,  1193,  1194,
    1195,   620,  2188,  1196,  1197,  1936,  1871,  1651,  2257,  1596,
   -2395, -2396,  1923,  1831,   120,   610,  2258,  1195,  2033,   610,
    1196,  1889,  2139,  1952,  3704,   132,  1924,  2485,  2453,  2357,
    3751,  1197,  1195,  1777,  1749,  1196,  4011,  1231,  1736,  1193,
    1194,   640,  1673,  1197, -2395, -2396,  1954,  1197,  1516,  2149,
     610,  1197,  1193,  1194,  1193,  1194,  4309,  4309,  1197,  1193,
    1194,  1210,  2189,  3946,  1193,  1194,  2193, -2532,  2430,  2150,
     620,  1195,   494,   494,  1196,  2097,   494,  2211,  2263,  1954,
    2030,  1197,  1379,  2237,  2035,  2333,  3251,  1231,  1078,  3013,
    2113,  1231,  1197,  1748,  3032,  2093,  2094,  3815,  1197,  3111,
    3070,   641,  1193,  1194,   646,  3990,   133,  3215,  1900,  1195,
    2257,  3071,  1196,  1051,   881,  3777,   648,  3082,  3178,  4264,
      57,  1195,  4268,  1195,  1196,  3991,  1196,  1197,  1686,  1696,
    3789,  2333,  4181,  2705,  1429,  2223,  1195,  3369,  1380,  1196,
    3369,   650,  1832,  3152,  1193,  1194,  3092,  1540,  1195,  3667,
    1197,  1196,  2575,  4010,  1193,  1194,  4200,  4201,  1195,   732,
    1914,  1196,  3668,  1193,  1194,  1381,   579,   807,   808,  3093,
     580,   811,   812,  1195,  1542,   814,  1196,   816,  1195,  1133,
    2168,  1196,  1195,  1197,  1925,  1196,  3014,  2271,  1197,  1941,
    1900,  1113,  1163,  1167,   756,  1193,  1194,  1193,  1194,  1596,
    1593,   662,  3646,  2642,  1193,  1194,  2157,  2335,  2336,   664,
    2648,  1193,  1194,  1014,  1195,  2161,  1430,  1196,  1195,   510,
    1111,  1196,  3652,  2654,  1193,  1194,  1195,  3948,   854,  1196,
    4388,  1193,  1194,  1195,  1197,  1482,  1196,  2235,  2738,  1193,
    1194,  2945,  1195,  1197,  4364,  1196,  1213,   665,  1737,  4389,
    3155,  2241,  2171,   947,  3669,  1926,  2669,  1393,  1496,  1497,
    1197,  2172,   666,  3724,  1052,  3779,  3877,  3878,  3781,  3738,
    1594,  1738,   805,  1901,  1195,  1197,  2226,  1196,  2176,  2259,
    1195,  1927,   810,  1196,  2238,   849,  1543,   620,   732,   610,
     620,  1193,  1194,  2180,  3059,  3790,  3805,   863,  1193,  1194,
    2239,   610,   869,  2276,  1195,  4274, -2584,  1196,  1394,  2282,
    2282,   855,  2282,   871,  1197,  3738,   891,  1245,  1193,  1194,
    1195,  3816,   620,  1196,  2716,   610,  2082,   591,  1195,   610,
    1195,  1196,  2581,  1196,  1193,  1194,  1193,  1194,  1749,  1195,
    1038,  1039,  1196,  1928,  1596,   889,   620,   620,   610,   610,
     610,  1195,  1197,  2582,  1196,  1901,   881,   756,  1133,  1902,
    2321,  2282,  2282,  2282,  1197,   262,  1197,   264,  1317,   964,
    2181,  1318,  2449,  1382,  2281,  2281,  1210,  2281,  2369,  1197,
     592,   856,  2185,  1111,  2190,   962,   963,  2380,   966,  3948,
    2305,  1197,  1195, -1691,  1311,  1196,  3949,  2202,  2376,  1509,
    1510,  1197,  1519,   985,  3037,  1195,   986,  1195,  1196,  2217,
    1196,  2588,  1195,  1330,  2325,  1196,  1197,  1195,   852,  3035,
    1196,  1197,   994,  1364,   610,  1197,  2281,  2281,  2281,  2128,
    1739,   565,  1929,  2589,  3058,  1003,  2399,  4383,   565,  3060,
    1210,  1014, -1691,   610,  2070,  2902,  1200,  3198,  2108,  1162,
    1024,   593,   917,   918,  1044,  1195,  3200,  1197,  1196,  1392,
    1248,  1197,  1049,  1953,  1919,  3975,  3976,  3977,  1392,  1197,
     262,  3481,   264,  2420,  3364,  3066,  1197,  2129,  1230,  3067,
    1201,  1840,  2427,  2428,  2333,  1197,   756,  3074,  4112,  2392,
    4113,  1045,  2334,  2432,  2433,  2434,  2435,  1195,  2443,  2444,
    1196,  4074,  1383,  3078,  3398,  3399,  1080,  1195,  2410,  2681,
    1196,  2683,  1111,  1319,   118,  2569,  1195,  1197,  1520,  1196,
    2070,  2585,  1521,  1197,  1384,  3412,  1686,   262,  3595,   264,
    1202,  1081,  1404,  1522,   498,  3079,  1082,  3596,   499,  1084,
    2513,  3080,  1203,  1222,  1223,  1224,  1225,  1197,  1195,  1871,
    1195,  1196,  1841,  1196,  3619,  2528,  1085,  1195,  3949,  2638,
    1196,  1213,  1405,  1197,  1195,  3081,  1385,  1196,   975,  1475,
    1476,  1197,  2638,  1197,  1086,  3931,  1089,  1195,  1166, -1691,
    1196,  3083,  1197,  1686,  1195,   559,  1090,  1196,  1234,  3086,
    1238,  3091,  1195,  1936,  1197,  1196,  2540,  2541,  2843,  2548,
    3094,  2550,  2551,  2552,  2553,  2554,  2335,  2336,  2557,  1534,
    2559,  1233,  3096,  2571,  3237,  1091,  1686,  1406,   620,  3201,
    2542,  2348,  1407,  1092,   620,  1213,  2586,  1204, -1691,   494,
    1230,  2923,  4187,  1093,  2614,  1197,   610,   610,   610,  2609,
    2436,  1842,  2612,  2924,  1195,  3248,  1094,  1196,  1197,  2337,
    1197,  1195,  2591,  3098,  1196,  1197,  3254,  1523,  1095,  3256,
    1197,   118,   620,   947,  2698,  1276,  3100,  3470,  3101,  1936,
    3597,  1195,   900,  3102,  1196,   620,  1953,  1772,  3417,  2543,
    1773,  4072,  1096,  1774,  4004,  4005,  1097,  1195,  3471,  1195,
    1196,  1098,  1196,   594,  3931,  3931,  2719,  1277,  1197,  2437,
    3370,  2605,  2606,  2607,  4179,  3330,  4088,   703,  2071,  1215,
    1216,  4006,  1099,  3371,  1748,   595,  3418,  2253,   498,  3472,
    2130,  1230,   499,  3147,  4094,  4095,  2438,  3372,  4098,  4099,
    4100,  4101,  1100,  2070,  1101,  3507,  3508,  1102,   917,  3535,
    1197,  2134,  2135,  1954,  1245,  1245,  1245,   596,  4089,  1843,
    1197,  1249,  2708,  3616,  3617,  1524,  2581,  1274,  3419,  1197,
    3581,   119,  1103,  4300,  1408,   498,   708,   620,  3645,   499,
    3110,  3191,  1278,  1106,  3553,  2544,  1282,  3651,  1279,   120,
    3961,  3965,  1209,  2072,  2071,  1108,   643,  2154,  1230,  1109,
    1748,  1197,  2717,  1197,  1110,  2439,  1114,  3866,  3867,   620,
    1197,   901,  2638,   597,  2807,  2812,  1115,  1197,  1284,  3653,
   -1775,  3654,  1116,   620,  1117,   900,  1686, -2575,  3655,  3554,
    1197,  1118,  1280,  1519,  1294,  3656,  2571,  1197,  4198,  4199,
    3555,  3152,  1301,  1331,  1409,  1197,  1119,  4207,  3726,  1281,
    3931,  3931,  3032,  1120,   121,  3971,  2747,  1121,  2854,  2638,
    2545,  2162,  1230,  1122,  1218,  1219,  1220,  1221,  1222,  1223,
    1224,  1225,   721,  4202,  1123,  2099,  2164,  1230,  2226,  1126,
    2440,  2772,  1127,   902,   947,  3529,  3556,  1210,  3532,  3533,
    1193,  1194,  1936,  1128,   620,  2624,  1134,  1197,  1135,  2100,
    2165,  1645,  1210,  1136,  1197,  3545,  1137,  2793,  1410,  2795,
    1138,  3729,  1205,  1206,  1207,   620,  1139,   620,   620,  2177,
    1230,  2625,  1140,  2792,  1197,  1872,  1141,  1872,  1872,  2719,
    1220,  1221,  1222,  1223,  1224,  1225,   122,  2073,  1142,  3961,
    1197,  1285,  1197,  3965,  3931,  2178,  1230,   737,  1144,  1520,
    2179,  1230,  1687,  1521,   901,  1596,  2183,  1230,  1145,  3931,
     947,   620,   620,  1146,  1522,  3643,  1954,  1147,  1161,  1749,
    1210,  2284,  3931,  2285,  1193,  1194,  2626,  1148,   262,  2627,
     264,  1177,  1178,   979,   980,  1516,   981,  2628,   982,  2445,
    2446,  2687,  1230,  1605,  1606,  1607,  1608,  1609,  3634,  2070,
    2400,  2528,  1211,  1149,  2629,  1150,  2528,  2071,  2723,  2724,
    -786,  2528,  1151,  1748,  1152,  2528,  1153,  2898,  1154,  3832,
    1411,  4469,  2351,  2352,  2353,  1212,   902,  2898,  1155,  2528,
    2528,  1303,   620,  2877,  3931,  2900,  2901,  1295,  1156,  2528,
    1157,  1687,  1293,  2889,  1158,  1749,  3931,  3931,  1943,  2899,
    1159,   610,   917,   918,  1412,  3054,  2135,  1160,  1588,  1004,
    2898,  2930,   123,  -628,  1164,  2546,  1165,  2528,  2955,  1168,
    3553,  2920,  1213,  2968,  3057,  1230, -1775,  2931,  4419,  4420,
    2985,  1169,  1083,  2933,  2934,  2441,  1175,  1213,  1523,  2967,
    1610,  1611,  1612,  1613,  3931,  2400,  3084,  1230,  3158,  3159,
    1179,  2630,  3961,  3965,  3931,  1180,  1038,  1039,  1038,  1039,
    1005,  1181,  3558,  3333,  3334,  3554,  2932,  1589,  3559,  3833,
    3834,  1182, -1490,  2989,  3835,  3836,  3555,  1183,  2401,  4416,
     124,  1232,  3872,  3873,  1307,  3875,  3876,  1315,   610,  2528,
    1245,  3423,  1230,  1325,  1590,  2402,  1338,  3931,  1936,  3931,
    3405,  1944,   764,  3445,  3446,  1213,  1357,  2403,  3560,  3931,
    3823,  3824, -2575,  3586,  3587,  1340,   903,   904,   905,   906,
     907,   908,  3556,   947,  1358, -1490,  3623,  3631,  3931,  1359,
    3931,  1362,  3931,   909,  1214,  1365,  1524,  1373,   125,  3931,
    3424,  1614,  1374,  1615,  1616,  1617,  3647,  1230,  1006,  1378,
    3931,  2631,  1618,  3016,  4473, -1490,  1390, -1490,  3661,  1230,
    3676,  3677,  1399,  1591,  3792,  2446,  3931,  3931,  3807,  3808,
    1215,  1216, -1490,  2401,  1400,  2456,  3561, -1490,  3811,  3808,
    3812,  3808,  3931,  3931,  2404,  1215,  1216,  3931,  3871,  3446,
    2402,  3557, -1490,  1195,  3874,  3808,  1196,  3881,  3882,  1217,
   -1490,  1401,  2403,  4018,  4019, -2575,  3373, -1490,  1749,  4023,
    3808,  4024,  3808,  2071,   262,  2749,   264, -1490,  2276,  1748,
    1416,  1300,   620,   620,   620,  4026,  3808,  3536,  3306, -1490,
     610,  4027,  3808,  1619, -1490,  4032,  4033,  1419,  1592,  4034,
    4033,  -620,  2997, -1490,  4090,  4091,  -786,  4218,  4019,  2747,
     620,  4219,  4019,  1215,  1216,  1687,  4227,  3446,  2456,   903,
     904,  1423,   906,  1945,   908,  4272,  4273,  1588,  1133,  3890,
    2457,   620,   620,   620,  1946,  3890,   909,  1424,  3562,  2404,
    1437,  1947,  1440,  2482,  3177,  1620,  1621,  1441,  2072,  1443,
    3179,  2632,  3181,  2638,  1448,  3133,  2405,  1453,   620,  3628,
    3176,  2436,  4316,  4317,  2926,  3602, -1490,  4334,  3332,  1686,
    3268,  4461,  4462,  1872,  1459,  1218,  1219,  1220,  1221,  1222,
    1223,  1224,  1225,  2038,  4086,  1465,  1589,  -620, -1490,  1467,
    1218,  1219,  1220,  1221,  1222,  1223,  1224,  1225, -1490,  1469,
    1676,  1677,  1038,  1039,  2456,  1472,  1609,  2039,  3558,  3462,
    3463,  1473,  1007,  2860,  3559,  2633,  2457,  2400,  1480,  2406,
    2437,  1477,   262,  1481,   264,  3382,  -620,  1484,  3383,  1485,
   -1490,   505,  1486,  1948,  3430,  3431,  3384,  2528,  1528,   947,
    2528,  2528,  1210,  2898,  2634,  3674,  3675,  2438,  1529,  1530,
    1596,  2405,  1533,  3385,  3560,  1535,   620,  1556,  1228,  2528,
    1220,  1221,  1222,  1223,  1224,  1225,  2038,  1210,  1536,  1560,
    1554,  2286,  1567,  3243,  2898,  1587,  1598,  1008, -1490,  1009,
    1633,  3246,  2861,  1622,  2287,  2898,  1173,  1644,  2898,  1645,
    2039,  1646,  2073,  4161,  1684,  3386,  1197,  1623,  1624,  1694,
   -1490,  1752,  1613,  1593,  1703,  1295,  1719,  3756,  3757,  1725,
    3260,  1210,  -620,   610,  2406,  1745,  2439,   505,  3317,  1753,
    3760,  1756,  3561,  1763,  1749,  1949,  2436,  3763,   494,  1759,
    1760,  1761,  3327,  1762,  2898,  1764,  1765,  1768,  1766,  1588,
    3207, -1490,  2184,  1769,  2288,  2401,  2289,  1792,  1795,  3336,
    3387,  3323,  2038,  3782,  3783,  2484,  1804,  2862,  2567,  1812,
    1813,  1923,  2402,  1814,  3347,  1596,  1820,  3075,  1564,  1565,
    1566,   610,  3339,  1686,  2403,  1924,  2039,  1815,  3261,  1823,
    1824,  1852,  1825,  3360,  1834,  2437,  1585,  1839,  4086,  1848,
   -1490,  2440,  1881,  1882,  1883,  1884,  1886, -1490,  1589,  1895,
    1614,  1113,  1163,  1167,  1617,  1897,  2935,  4133,  2936, -1490,
   -1490,  1618,  2438,  1899,  1912,  4170,  2042,  1364,  1648,  1921,
    2025,  1652,  1516,  3467,  3562,  2860,  2043,  1213,  2044, -1490,
    2045, -1490,  2046,  2047,  2290,  2062,  3349,  3892,  -620,  2854,
    1669,  1670,  2084, -1490,  1674,  1296,  2066,  3388,  2092,  2937,
    3389,  2404,  1213,  2048,  2049,  2050,  2051,  2052, -1490, -1490,
    2053,  3422, -1490, -1490,  1688,  1689,  1969,  1970,  2054,  2793,
    2938,  2085,  2055,  3706,  2056, -1490,  4296,  2057,  2058,  2059,
    2436,  2439,  3852,  2060,  2061,  2792,  2102,  2103,  2291,  2104,
   -1490,  2111,  1619,  2747,  2861, -1490,  1213,  2145,  4321,  -769,
    -769,  2117,  1972,  3842,  2939,  2105,  2119,  2120,  2121,  2144,
    2458,  -769,  2146,  2772,  3457,  2151,  2152,   620, -1490,  2153,
    2155,  2161,  1975,  2166,  -620, -1490,   620,  3390,  2200,   508,
    1976,  2456,  2717,  1925,  2170, -1490,  2174,  2227,  2191,  2437,
    2192,  1342,   620,  2197,  1225,  1621,  2201, -1490,  2212,  1210,
    2369,  1343, -1490,  2213,  1978,  2214,  2440,  2234,  3933, -1179,
    2240, -1490,  2863,  2405,  4035,  2250,  2438,  1344,  1459,  2862,
    1687,  1979, -1316,  2297,  2272,  1215,  1216,  2279,  2306,  1345,
    1346,  1347,  2528,  2312,  2315,  2318,  2349,  2350,  2365,  4382,
    2377,  4384,  2528,  2379,  2898,  1348,  2441,  2381,  4321,  1984,
    1215,  1216,  2382,  1687,  1926,  2386,  2408,  2409,  -620,  2898,
    2413,   610,  2412,  2528,  2415,   508,  2419,  2421,  2422,  1686,
    4402,  2423,  2424,  2425, -1490,  2638,  2406,  1038,  1039,  2426,
    1927,  4003,  2456,  2468,  4454,  2439,  2473,  2474,  2477,  2482,
    2478,  2480,  1686,  2487,  1215,  1216, -1490,  2490,  2496,  1686,
    4326,  4327,  2497,  4329,  3391,  1686, -1490,  4465,  4434,  4435,
     262,  2481,   264,  2489,  4454,  2532,  2536,  2502,  1987,  2503,
    4465,  2538,  2562,  2508,  2509,  2516,  1988,  2570,  2614,  2038,
    2592,  2610,  1622,  3392,  2623,  2618,  2985,  2649, -1490,  2728,
    2650,  1989,  1928,  2400,  -620,  3583,  2651,  1624,  2258,  2940,
    2661,  2695,  4372,  2039,  4373,  4374,  2292,  2293,  2294,  2662,
    2440,  3615,  3615,  3615,  2696,  3695,  1872,  2674,  3607,  2697,
    1218,  1219,  1220,  1221,  1222,  1223,  1224,  1225,   620,  2726,
    2727,  2693,  2704,  2713,  1213,  2714, -1490,  2729,  2730,  2736,
    2739,  2742,  2743,  2941,  1990,  1218,  1219,  1220,  1221,  1222,
    1223,  1224,  1225,  2741,  2750,  2756,  2775,  2751, -1490,  1966,
    1799,  2441,  1991,  2754,  2777,  2755,  1967,  4413,  1968,  2762,
    2774,  2778,  2779,  2357,  2863,  2356,  4173,  3992,  2797,  1969,
    1970,  1929,  2819,  2826,  2822,  3993,  4003,  2796,  2798,  1218,
    1219,  1220,  1221,  1222,  1223,  1224,  1225,  2831,  3684, -1490,
    2832,  2849,  1349,  1687,  2833,  2854,  4446,  2856,  2857,  3994,
    1971,  2905,  2907,  2964,  2974,  1972,  1973,  1995,   620,  1996,
    1350,  2401,  1974,  2978,  2995,  2980,  2994,  1998,  2999,  3003,
    1997,  3004,  1914,  2112,  3029,  1975,  3049,  2483,  2402,  3038,
    3043,  3051,  3052,  1976,  3118,  2116,  3053,  3123,  3061,   564,
    2403,  2484,  3062,  1977, -1775, -1490,  3105,  3107,  3109,   868,
    3615,  3114,  3130,  3117,  3128,  3135,  3138,  1978, -1490,  3139,
     523,  1317,  3148,  3142,  3154,  3852,  3157,  3746,  3163,  2638,
    3174,  1459,  1215,  1216,  1979,  3160,  3175, -1490,  4175, -1490,
    3180,  1980,  1981,  3188,  3208,  2004,  3212,  3213,  1982,  3216,
    3227,  3741,  3228,  1296,  3229,  3258,  1983,  3240,   620,  3318,
    -892,  3325,  1984,  3257,  3249,  2441, -1490, -1490,  3321,  3329,
   -1490, -1490,  3324,  3995,  3259,  3765,   524,  2404,  3331,  3342,
    3332,  2169,  3335,  3348,  3784,  2173,  3343,  -443,  2333,  3351,
    1985,  3788,  3357,  3358,  3359,  3362,  1351,  3467,  3379,  3710,
    1969,  1970,  2005,   525,  3397,  3400,  3401,  2196,   676,  3347,
    3408,  3409,  3426,  3427,  3793,  3436,  3441,  3438,  2006,  3447,
    3460,  3449,  2007,   262,  3468,   264,  3476,  3485,  3477,  1986,
    3486,  1987,   620,  -769,  -769,  3506,  1972,   526,  3498,  1988,
    3509,  2008,  3510,  3523,  3530,  -769,  3580,  2530,  3582,  3996,
    3584,  1352,  3590,  3594,  1989,  3603,  1975,  3604,  3608,  2010,
    3605,  3609,  3611,  3621,  1976,  3622,  3623,  3997,  3624,  1353,
    3625,   820,   821,  3629,  3632,  3635,  4173,  3637,  1219,  1220,
    1221,  1222,  1223,  1224,  1225,   527,  3639,  3648,  1978,  2405,
    3732,  3998,  3640,  3641,  3644,  3649,  3650,   703,  3662,  3663,
     620,  3672,  1459,  3679,  3680,  1979,  3689,  1990,  3677,  3178,
    3691,  3692,  3697,  3696,  3700,  3702, -1405,  3703,  3864,  3744,
   -1410,  3024,  3714,  3747,  3570,  1991,  3727,  3759,  3728,  1992,
    3769,  3615,  3615,  1984,  3615,  3615,  3730,   504,  3731,  3770,
    3755,   676,  3761,  4243,  3771,  3772,  3773,  3775,  3776,   707,
    3794,  3573,  2406,  2638,  3795,  3810,   708,  4003,  4243,  3813,
    3814,  3817,   822,  3821,  3822,  3825,  3827,  3840,  1993,  3828,
    3631,  4253,  3829,  1994,  3841,  3844,  3845,  3855,  3856,  3886,
    1995,  3899,  1996,   712,   713,  3860,  4443,  3862,  3880,  1997,
    1998,   823,  3893,  3894,   262,  3900,   264,  3898,  4368,  3942,
    3938,   610,  1987,  3934,   824,  3957,   -65,  3967,  1251,  3972,
    1988,   528,  3615,  3968,  3974,  3982,  3969,  4015,  4020,   505,
    4443,  1999,  4017,  3732,  4028,  1989,   825,  3985,  4036,   826,
     703,  4038,  4056,  -309,  4065,  2000,  2001,  2002,  2003,  2594,
     827,  1252,  4058,  4059,  4069,   610,  4076,  4077,  3989,  4081,
    4093,  4096,   721,  4105,  -817,  4097,   620,   947,  2004,  4107,
    4109,   828,  4138,  2959,  4141,  4102,  3939,  -327,  4167,  4169,
    4168,  4189,  4368,  3999,  4204,   803,  4186,  4216,  1990,   529,
    4220,  4192,   707,  4228,  4221,  4222,  4029,   829,  4223,   708,
    4231,  4232,  4239,  4243,   830,  4233,  1991,  4240,  4252,  4244,
    4250,  4251,   506,  4358,  4255,  4262,  4276,  4042,  4277,  1253,
    3983,   732,  4049,  4278,  4279,  2005,   712,   713,  4288,  4297,
    4292,  4287,  3766,  4299,  4301,  4302,   736,   737,  4311,  4305,
   -2311,  2006,  4314,  1254,   831,  2007,  1255,   530,  4328,  4325,
    4330,  4331,  4471,   531,  4333,  4346,  4360,  4359,  4365,  4362,
    4376,  1995, -1574,  1996,  2008,  4379,  4381,  4380,  4392,  2009,
    4385,  1998,   532,  4390,  4386,  4393,  4396,  4401,  4071,  4398,
    1256,  4399,  2010,  4405,  4407,  4414,  4418,  4422,  4410,  4243,
    4411,  4243,  4424,  4431,  4459,   721,  1687,   533,  4412,  1257,
    4432,  4455,  2561,  4468,  4051,  2721,  3593,  3592,  2869,  4243,
    1061,  3798,  4203,  1258,   534,  4066,  4312,  4176,  4313,  3796,
    3800,  3937,  1471,  4466,  4426,   578,   959,  2341,  4436,  3864,
    3162,  3864,  3911,  4114,  3912,  3914,  3915,  3917,   803,  2004,
    3918,  4243,  4243,   803,  3919,  3920,  4458,  3921,  -892,  3922,
    4343,  4237,  4344,  3925,   732,  4310,  3926,  3927,  4249,  4142,
    4248,  1259,  1965,  2261,  1532,  2520,  2036,  2011,  4068,   736,
     737,  3253,   832,  3141,  3682,  3146,   833,  3440,  4191,  3984,
     803,  4261,  1260,  3685,  1802,  4395,  4324,  4367,  4183,  4104,
    2069,   663,   834,  3804,  2518,  3340,  2005,   803,  3522,  2961,
     835,  3022,  3511,  3515,  4182,  3989,   507,  2525,   836,  4377,
    4135,  3888,  2006,  3394,  3538,   620,  2007,  3579,  2719,   756,
    3774,  4209,  4188,  3733,  4196,  4197,  3734,   508,  3764,  4120,
     519,  3474,   520,   837,  4225,  2008,  4226,   762,   803,   803,
     803,   803,   764,  2101,  4079,   765,   838,   839,  4073,  4078,
     803,  3956,  2604,  2010,  3891,  2522,  3513,  2949,  1439,  1012,
    2397,  3743,  1898,  3512,   509,  2759,  2324,  -535,  2034,  2067,
     510,  3132,  2737,  3437,  2780,  3932,   983,  2692,  1369,  3425,
    2355,  2641,  4323,  3116,  1643,  1261,  2844,  2639,  2691,  3482,
    4022,   840,  3868,  4285,  1262,  3591,  4286,  1586,  2711,  3517,
    1687,  3865,  3199,  1915,  3735,  3736,   511,  4417,  2944,  1263,
    3854,   893,   821,  2595,   512,  2787,  2608,   821,  1786,  1818,
    2735,   620,   841,  2765,  3687,  3453,  3452,  1264,  4269,  4270,
    3492,   803,  4258,   971,  2110,  1079,  2985,  2985,   955,  2388,
    1864,  1887,  2389,  2273,   842,  3521,   843,  3439,  4363,  1822,
    4280,  4394,   756,  4332,  4467,  4470,  3733,  3456,  3768,  3734,
    2366,  3196,  1837,  3478,  3701,  3857,  1265,  1266,   896,  2311,
     762,  1829,  1356,  3973,  1779,   764,  2091,  3981,   765,  3120,
    1361,   898,  1065,     0,   657,   620,   658,  1066,  1067,     0,
       0,     0,  1267,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   822,     0,     0,     0,     0,   822,     0,     0,
       0,   498,  4348,     0,  1268,   499,     0,     0,     0,  4356,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   823,     0,     0,     0,     0,   823,  3735,  3736,     0,
       0,     0,     0,     0,   824,     0,     0,     0,     0,   824,
    1605,  1606,  1607,  1608,  1609,     0,     0,     0,     0,     0,
       0,     0,  4460,  1269,     0,     0,   825,  4375,     0,   826,
       0,   825,     0,     0,   826,     0,     0,     0,     0,     0,
     827,     0,     0,     0,     0,   827,     0,   803,     0,     0,
       0,     0,     0,     0,     0,  4403,     0,     0,     0,     0,
    4408,   828,     0,     0,     0,     0,   828,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   829,     0,     0,
       0,     0,   829,     0,   830,     0,     0,  4444,     0,   830,
       0,     0,     0,   803,   803,     0,  1687,  1610,  1611,  1612,
    1613,     0,   803,   803,   803,   803,   803,   803,   803,   803,
     803,   803,   803,   803,   803,   620,     0,     0,     0,  1687,
       0,  4444,   803,   803,   831,   803,  1687,   803,     0,   831,
       0,   803,  1687,     0,   803,   803,   803,   803,     0,   803,
     803,   803,     0,     0,     0,     0,     0,     0,   803,   803,
       0,   803,   803,   803,   803,   803,     0,     0,   803,   803,
     803,   803,   803,   803,   803,   803,   803,   803,   803,     0,
       0,   803,   803,     0,  1251,   803,     0,     0,     0,   803,
       0,   803,   803,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   803,   803,     0,  1614,     0,
    1615,  1616,  1617,   803,     0,     0,     0,  1252,     0,  1618,
     803,   803,   803,   803,     0,     0,     0,     0,     0,     0,
       0,   803,   803,   803,     0,   803,   803,   803,   803,   803,
       0,   803,   803,   803,   803,   803,   803,   803,   803,     0,
       0,     0,   803,   803,     0,     0,     0,     0,     0,     0,
       0,     0,   832,     0,     0,     0,   894,   832,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   834,     0,     0,  1253,     0,   834,     0,     0,
     835,     0,     0,     0,     0,   835,     0,     0,   836,     0,
    1619,     0,     0,   836,     0,     0,     0,     0,     0,  1254,
       0,     0,  1255,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   837,     0,     0,     0,     0,   837,   803,
       0,     0,     0,     0,     0,     0,   838,   839,     0,     0,
       0,   838,   839,     0,     0,     0,  1256,     0,     0,     0,
       0,     0,  1620,  1621,     0,  1087,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1258,
       0,   840,     0,     0,     0,     0,   840,     0,     0,     0,
       0,   803,  1125,     0,     0,     0,     0,     0,     0,   803,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1143,
       0,  1493,   841,     0,     0,     0,     0,   841,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1259,     0,     0,
       0,     0,     0,     0,   842,     0,   843,     0,     0,   842,
       0,   843,     0,     0,     0,     0,     0,     0,  1260,     0,
       0,     0,     0,  1187,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     1,     0,     2,     0,
    1494,  1495,  1496,  1497,  1498,  1499,     0,  1500,  1501,  1502,
    1503,  1504,  1505,  1506,     3,  1507,  1508,     0,     4,     0,
    1622,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2024,     5,     6,  1623,  1624,     0,     0,     0,     0,
       7,     0,     0,     0,     0,     8,     9,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    10,     0,     0,
       0,     0,     0,  1316,     0,     0,     0,     0,     0,     0,
       0,  1261,     0,     0,     0,     0,    11,     0,     0,     0,
    1262,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1263,     0,    12,     0,     0,
       0,     0,     0,     0,     0,    13,    14,    15,     0,     0,
     803,     0,     0,  1264,     0,     0,     0,    16,    17,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      18,     0,     0,  1509,  1510,     0,     0,     0,     0,     0,
       0,     0,     0,    19,     0,     0,     0,     0,     0,     0,
       0,     0,  1265,  1266,     0,     0,     0,     0,     0,    20,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    21,     0,     0,  1267,    22,
       0,     0,     0,    23,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1268,     0,     0,     0,     0,     0,     0,     0,    24,     0,
      25,     0,     0,     0,     0,     0,     0,     0,     0,  1492,
       0,     0,   803,   803,   803,     0,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   803,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,    28,  1269,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   803,     0,     0,     0,     0,     0,   803,     0,
       0,   803,     0,   803,     0,  1558,  1559,     0,     0,   803,
       0,   803,   803,     0,  1569,  1570,     0,     0,  1573,  1574,
    1575,  1578,  1579,  1580,  1581,  1582,  1583,     0,     0,     0,
       0,     0,     0,     0,  1599,  1600,     0,  1601,     0,  1602,
       0,     0,     0,     0,     0,     0,  1635,  1636,  1637,  1638,
       0,     0,  1641,     0,     0,     0,     0,     0,     0,     0,
    1649,  1650,     0,  1653,  1654,     0,     0,     0,    29,     0,
    1658,  1659,  1660,     0,     0,  1663,  1664,  1665,  1666,  1667,
    1668,     0,   803,  1671,  1672,    30,     0,  1675,     0,    31,
       0,  1678,     0,  1682,  1683,     0,     0,     0,     0,     0,
      32,     0,     0,     0,     0,     0,     0,  1690,  1691,     0,
       0,    33,     0,     0,     0,  1699,     0,     0,     0,     0,
       0,     0,  1704,  1705,  1706,     0,     0,     0,     0,     0,
       0,     0,     0,    34,  1969,  1970,    35,     0,    36,     0,
       0,    37,     0,     0,    38,    39,     0,     0,     0,     0,
       0,     0,    40,     0,    41,  1742,     0,     0,     0,     0,
       0,    42,     0,     0,     0,     0,     0,    43,     0,     0,
    1972,     0,     0,   915,     0,    44,     0,     0,     0,     0,
      45,     0,    46,   872,   916,    47,     0,     0,     0,     0,
    1975,     0,     0,     0,     0,     0,     0,     0,  1976,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   917,   918,
      48,     0,     0,     0,    49,     0,   919,     0,     0,     0,
       0,   920,  1978,     0,     0,     0,     0,     0,     0,     0,
       0,  1789,     0,     0,     0,     0,  1459,     0,     0,  1979,
       0,     0,     0,     0,     0,     0,     0,     0,   921,     0,
     922,     0,   923,     0,     0,     0,     0,     0,     0,    50,
       0,   924,     0,     0,     0,     0,     0,  1984,     0,     0,
       0,    51,     0,     0,     0,    52,     0,     0,    53,     0,
       0,     0,     0,     0,    54,     0,  2024,     0,     0,     0,
       0,     0,     0,  1836,     0,     0,     0,     0,     0,     0,
       0,  1851,     0,     0,     0,     0,     0, -1775,   925,     0,
       0,     0,   926,    55,     0,   927,   803,     0,     0,    56,
       0,     0,     0,     0,     0,     0,     0,     0,   262,     0,
     264,     0,    57,     0,     0,     0,  1987,     0,     0,     0,
       0,   928,     0,   929,  1988,     0,     0,     0,     0,     0,
     930,     0,   931,     0,     0,     0,     0,     0,     0,  1989,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2024,     0,     0,     0,     0,   932,   933,   934,     0,
       0,     0,     0,     0,     0,     0,     0,   803,     0,     0,
       0,   803,     0,     0,     0,     0,   803,   803,     0,   935,
       0,     0,     0,     0,     0,   803,   803,     0,   803,   803,
     803,   803,  1990,   803,     0,     0,   803,     0,     0,     0,
       0,   936,     0,     0,     0,     0,   803,     0,   803,   803,
    1991,   803,   803,   803,   803,     0,   803,     0,     0,   803,
       0,     0,     0,     0,     0,     0,     0,   937,   803,     0,
       0,     0,     0,     0,     0,   803,     0,   803,     0,   803,
     803,   803,   803,     0,     0,     0,   803,   803,   803,     0,
       0,     0,   803,   803,   803,     0,   803,     0,   803,     0,
     803,     0,   803,     0,   803,  1995,     0,  1996,     0,   803,
       0,     0,  2122,     0,     0,  1998,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   803,     0,     0,
       0,     0,     0,   938,   803,     0,     0,   803,     0,     0,
       0,     0,     0,   803,     0,     0,   803,     0,     0,     0,
     803,     0,     0,     0,     0,     0,     0,     0,     0,   939,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     940,   941,     0,     0,   942,   943,     0,     0,     0,     0,
       0,     0,     0,  2004,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   944,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   803,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2204,  2206,  2208,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   945,     0,
    2005,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   946,     0,     0,     0,     0,  2006,     0,     0,     0,
    2007,     0,     0,     0,  2242,     0,     0,     0,     0,     0,
       0,     0,     0,  2247,     0,  2248,     0, -2341,     0,  2008,
       0,   947,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2010,     0,   948,
     949,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2867,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2867,  2867,     1,     0,     2,     0,     0,     0,   950,     0,
       0,     0,     0,     0,  2320,     0,     0,     0,     0, -2341,
       0,     0,     0,     0,     4,     0,     0,   951,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     5,     6,
       0,     0,     0,     0,     0,     0,     7,     0,     0,     0,
       0,     8,     9,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2024,    10,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    11,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    12,     0,     0,     0,     0,  2867,  2867,
       0,    13,    14,    15,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    16,    17,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2024,     0,     0,     0,     0,     0,     0,    19,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   803,
       0,     0,     0,   803,     0,    20,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    21,     0,     0,     0,    22,     0,     0,     0,    23,
       0,     0,     0,   803,   803,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   803,    24,     0,    25,     0,     0,     0,
       0,     0,   803,     0,   803,     0,   803,     0,     0,     0,
       0,     0,    26,     0,     0,     0,     0,     0,  2537,     0,
       0,     0,     0,     0,     0,     0,   803,     0,     0,     0,
      27,   803,     0,     0,    28,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   803,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2617,
       0,     0,     0,  2619,     0,     0,     0,     0,  2621,  2622,
       0,     0,     0,     0,     0,     0,     0,  1575,  2640,     0,
    1575,     0,  2643,  2644,     0,  2645,     0,     0,     0,     0,
       0,     0,   803,     0,    29,     0,   803,     0,  2652,     0,
    2653,     0,     0,  2655,  2656,  2657,  2658,     0,  2659,     0,
       0,    30,     0,     0,     0,    31,     0,     0,     0,     0,
    2663,     0,     0,     0,     0,     0,    32,  2664,     0,  2665,
       0,  2666,  2667,  2668,     0,     0,     0,    33,  2671,  2672,
    2673,     0,     0,   803,  2675,  2676,  2677,     0,  2678,     0,
    2680,     0,  2682,     0,  2684,     0,  2685,     0,     0,    34,
       0,  2686,    35,     0,    36,     0,     0,    37,     0,     0,
      38,    39,     0,     0,     0,     0,     0,     0,    40,  2699,
      41,     0,     0,     0,     0,     0,     0,    42,     0,     0,
       0,     0,     0,    43,     0,  2709,     0,     0,  2712,     0,
       0,    44,     0,     0,     0,     0,    45,     0,    46,     0,
       0,    47,  2947,     0,     0,     0,     0,     0,     0,  1967,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1969,  1970,     0,     0,    48,     0,     0,     0,
      49,     0,     0,     0,     0,     0,     0,  3262,  3263,     0,
       0,     0,     0,  3264,     0,  3265,     0,  3266,  3267,     0,
       0,     0,     0,  1971,   803,   803,     0,     0,  1972,     0,
       0,     0,     0,     0,  3268,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    50,     0,     0,  1975,  2867,
       0,     0,     0,     0,     0,     0,  1976,    51,     0,     0,
       0,    52,     0,     0,    53,     0,  1977,     0,     0,     0,
      54,     0,     0,     0,     0,     0,     0,  2024,     0,     0,
    1978,     0,     0,     0,     0,     0,     0,     0,     0,  3269,
     803,     0,  3270,     0,  1459,     0,     0,  1979,     0,    55,
    3271,     0,     0,     0,  1980,    56,     0,     0,     0,     0,
       0,  2948,     0,     0,     0,     0,     0,  3272,    57,  1983,
       0,     0,     0,   803,   803,  1984,   803,     0,     0,     0,
       0,     0,     0,     0,  3273,   803,     0,     0,     0,     0,
     803,     0,     0,   803,     0,   803,   803,     0,     0,     0,
       0,     0,     0,  1985,     0,     0,     0,  3274,     0,  3275,
       0,     0,     0,     0,     0,     0,   803,     0,     0,     0,
       0,     0,  3276,  3277,     0,     0,     0,     0,     0,     0,
       0,   803,     0,     0,     0,     0,   262,     0,   264,     0,
       0,     0,     0,     0,  1987,     0,     0,     0,     0,     0,
       0,     0,  1988,     0,     0,     0,   803,     0,     0,     0,
       0,     0,     0,     0,  3278,     0,     0,  1989,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   803,     0,     0,     0,
       0,     0,     0,  3279,     0,  1969,  1970,     0,     0,     0,
     803,     0,  3280,  3281,     0,  3282,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1990,   803,     0,     0,     0,     0,     0,     0,  -769,  -769,
     803,  1972,     0,     0,  3283,  3284,  3285,     0,  1991,     0,
    -769,     0,  1992,     0,     0,     0,     0,     0,     0,     0,
       0,  1975,     0,  3286,  3287,  3288,     0,     0,     0,  1976,
       0,  3289,     0,     0,  3290,     0,     0,     0,     0,     0,
       0,  3034,     0,     0,     0,  3036,     0,     0,     0,     0,
    3291,  3292,     0,  1978,     0,     0,  1994,     0,     0,     0,
       0,     0,     0,  1995,     0,  1996,     0,  1459,     0,     0,
    1979,     0,     0,  1998,     0,  3064,  3065,     0,     0,     0,
       0,     0,  3569,     0,     0,     0,  3293,  3294,     0,     0,
       0,     0,     0,     0,     0,  3085,     0,     0,  1984,     0,
       0,     0,     0,     0,  3095,     0,  3097,     0,  3099,     0,
       0,  3295,     0,     0,     0,     0,     0,     0,     0,  2001,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2004,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3129,     0,   262,
       0,   264,  3296,     0,     0,     0,  3297,  1987,     0,     0,
       0,     0,     0,     0,     0,  1988,     0,     0,  3298,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1989,     0,     0,     0,     0,     0,     0,     0,  2005,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2006,     0,     0,     0,  2007,     0,
       0,     0,     0,   803,  3186,     0,     0,     0,  3190,     0,
       0,     0,  3299,     0,     0,  3300,     0,  2008,  3301,  3302,
    3303,  3304,     0,  1990,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2010,     0,     0,     0,     0,
       0,  1991,   803,   803,     0,     0,     0,     0,     0,     0,
       0,   803,     0,     0,     0,  3222,     0,     0,     0,     0,
       0,     0,  3305,  3306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3307,     0,
       0,     0,     0,     0,     0,     0,  1995,     0,  1996,     0,
       0,     0,     0,     0,     0,     0,  1998,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3569,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2024,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2004,     0,  3319,  3320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   803,     0,     0,     0,   803,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     803,  2005,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3365,     0,   803,     0,     0,  2006,     0,     0,
       0,  2007,     0,     0,     0,     0,     0,   803,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2008,     0,     0,     0,     0,  3403,  3404,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3411,  2010,     0,
       0,     0,  3413,     0,     0,  3414,     0,  3415,  3416,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3433,     0,     0,     0,     0,     0,     0,
    3929,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3433,     0,
    3955,     0,     0,     0,  3955,  3955,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   803,     0,     0,     0,     0,
       0,     0,  3479,   803,     0,     0,     0,     0,     0,     0,
       0,     0,   803,     0,   803,     0,     0,     0,     0,     0,
       0,     0,     0,  3433,     0,     0,     0,     0,     0,     0,
       0,     0,  3503,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   803,     0,     0,     0,     0,     0,  3929,
    3929,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3955,     0,     0,     0,     0,     0,
       0,     0,     0,  3955,     0,     0,     0,  3955,     0,     0,
       0,     0,   803,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   803,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3955,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   803,     0,   803,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   803,     0,  3929,  3929,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4184,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3433,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3955,     0,  3955,  3955,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3712,  3713,     0,   803,     0,  3929,
       0,     0,     0,  3222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3929,   803,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3929,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     803,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   803,  3929,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3929,  3929,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   803,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3222,     0,  3929,
       0,  3820,     0,     0,     0,     0,   803,     0,     0,  3929,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3433,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   803,  3222,     0,     0,     0,
       0,     0,  3929,     0,  3929,     0,     0,     0,     0,  3186,
       0,     0,     0,     0,  3929,     0,     0,     0,   803,     0,
       0,   803,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3929,     0,  3929,     0,  3929,     0,     0,
       0,     0,     0,     0,  3929,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3929,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3929,  3929,     0,     0,     0,     0,   803,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3929,  3929,     0,
       0,     0,  3929,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   803,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4009,     0,     0,     0,     0,
       0,     0,     0,     0,  4014,     0,  4016,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4037,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3222,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4136,     0,  4137,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4145,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4241,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4246,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3433,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4295,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4350,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4378,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4397,     0,     0,     0,   139,     0,   672,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   673,     0,   148,   149,   150,   151,   152,
     674,   154,     0,   155,     0,     0,   675,   156,   676,   677,
     678,   157,   679,     0,   158,   159,   160,  1679,   161,     0,
     162,   163,     0,     0,   164,   680,   681,   165,   166,  4445,
     167,   682,   683,   169,   170,     0,   171,   172,   173,   174,
     175,   684,   177,     0,   685,   179,   686,   687,   688,   689,
     690,   691,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   692,   200,
       0,   201,   693,   694,   202,     0,  3433,   203,   695,   696,
       0,   204,   697,   698,     0,   205,   206,   207,   699,   700,
     701,     0,     0,     0,     0,   702,   210,   703,     0,     0,
     704,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   705,     0,   236,   237,   238,   706,   707,
     239,   240,     0,   241,   242,   243,   708,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     709,   251,   710,   253,     0,   254,     0,   711,   255,   256,
     257,     0,   258,   712,   713,     0,   259,   260,     0,     0,
       0,   714,   262,   263,   264,   715,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,   716,   270,   271,
     717,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   718,     0,
    1680,   281,     0,   719,   282,   283,     0,     0,     0,     0,
       0,   720,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   721,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,   722,   306,   307,   308,   309,   723,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   724,
     317,     0,     0,   725,   319,   726,   320,     0,   321,   727,
     728,   729,   730,   731,   326,   327,   328,   329,   330,   331,
       0,   732,   332,   333,     0,     0,   334,   335,   336,   337,
     733,   734,   735,   338,   339,     0,   736,   737,     0,   340,
     341,   738,     0,   343,   344,   345,   346,     0,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,   739,   352,     0,   353,   354,   355,   356,   740,
     358,   359,   360,   361,   741,   742,   364,   743,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   744,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,   745,
     746,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,   747,   399,   400,   401,   402,   403,   748,   405,
     406,   407,   408,     0,   749,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,   750,   751,   434,   435,     0,   436,   437,   752,   439,
     440,   441,   753,   754,   442,   443,   444,   445,   755,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,   756,
     453,   454,     0,   757,   758,   759,   760,     0,     0,     0,
       0,  1681,   459,   460,   461,     0,   761,   762,   763,   463,
     464,   465,   764,   466,   467,   765,   468,   469,     0,   470,
     471,     0,     0,   472,     0,     0,   473,     0,   474,     0,
     766,   476,   477,     0,     0,   767,   768,   769,   770,   478,
       0,     0,   479,   771,     0,   772,   480,   481,   482,   483,
     484,   773,     0,     0,     0,     0,     0,     0,   486,   487,
       0,   488,   489,   490,     0,     0,   774,     0,     0,     0,
       0,     0,     0,     0,   775,   776,     0,     0,     0,     0,
     777,   778,     0,     0,   779,   780,     0,     0,   781,   782,
     139,     0,   672,   141,   142,   143,   144,  3182,     0,   145,
       0,     0,     0,   146,     0,     0,   673,     0,   148,   149,
     150,   151,   152,   674,   154,     0,   155,     0,     0,  3183,
     156,   676,   677,   678,   157,   679,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,   680,   681,
     165,   166,     0,   167,   682,   683,   169,   170,     0,   171,
     172,   173,   174,   175,   684,   177,     0,   685,   179,   686,
     687,   688,   689,   690,   691,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   692,   200,     0,   201,   693,   694,   202,     0,     0,
     203,   695,   696,     0,   204,   697,   698,     0,   205,   206,
     207,   699,   700,   701,     0,     0,     0,     0,   702,   210,
     703,     0,     0,  3184,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   705,     0,   236,   237,
     238,   706,   707,   239,   240,     0,   241,   242,   243,   708,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   709,   251,   710,   253,     0,   254,     0,
     711,   255,   256,   257,     0,   258,   712,   713,     0,   259,
     260,     0,     0,     0,   714,   262,   263,   264,   715,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
     716,   270,   271,   717,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   718,     0,     0,   281,     0,   719,   282,   283,     0,
       0,     0,     0,     0,   720,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,   721,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,   722,   306,   307,   308,
     309,   723,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   724,   317,     0,     0,   725,   319,   726,   320,
       0,   321,   727,   728,   729,   730,   731,   326,   327,   328,
     329,   330,   331,     0,   732,   332,   333,     0,     0,   334,
     335,   336,   337,   733,   734,   735,   338,   339,     0,   736,
     737,     0,   340,   341,   738,  3185,   343,   344,   345,   346,
       0,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,   349,   350,   351,     0,   739,   352,     0,   353,   354,
     355,   356,   740,   358,   359,   360,   361,   741,   742,   364,
     743,     0,   365,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   744,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   390,
     391,   392,   745,   746,   393,     0,   394,     0,   395,   396,
       0,   397,   398,     0,     0,   747,   399,   400,   401,   402,
     403,   748,   405,   406,   407,   408,     0,   749,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   750,   751,   434,   435,     0,   436,
     437,   752,   439,   440,   441,   753,   754,   442,   443,   444,
     445,   755,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,   756,   453,   454,     0,   757,   758,   759,   760,
       0,     0,     0,     0,     0,   459,   460,   461,     0,   761,
     762,   763,   463,   464,   465,   764,   466,   467,   765,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   766,   476,   477,     0,     0,   767,   768,
     769,   770,   478,     0,     0,   479,   771,     0,   772,   480,
     481,   482,   483,   484,   773,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,     0,   774,
       0,     0,     0,     0,     0,     0,     0,   775,   776,     0,
       0,     0,     0,   777,   778,     0,     0,   779,   780,     0,
       0,   781,   782,   139,     0,   672,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   673,
       0,   148,   149,   150,   151,   152,   674,   154,     0,   155,
       0,     0,   675,   156,   676,   677,   678,   157,   679,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,   680,   681,   165,   166,     0,   167,   682,   683,   169,
     170,     0,   171,   172,   173,   174,   175,   684,   177,     0,
     685,   179,   686,   687,   688,   689,   690,   691,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   692,   200,     0,   201,   693,   694,
     202,     0,     0,   203,   695,   696,     0,   204,   697,   698,
       0,   205,   206,   207,   699,   700,   701,     0,     0,     0,
       0,   702,   210,   703,     0,     0,   704,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,   705,
       0,   236,   237,   238,   706,   707,   239,   240,     0,   241,
     242,   243,   708,     0,   244,     0,     0,     0,   245,  2203,
     246,     0,   247,     0,   248,   249,   709,   251,   710,   253,
       0,   254,     0,   711,   255,   256,   257,     0,   258,   712,
     713,     0,   259,   260,     0,     0,     0,   714,   262,   263,
     264,   715,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,   716,   270,   271,   717,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   718,     0,     0,   281,     0,   719,
     282,   283,     0,     0,     0,     0,     0,   720,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,   721,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,   722,
     306,   307,   308,   309,   723,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   724,   317,     0,     0,   725,
     319,   726,   320,     0,   321,   727,   728,   729,   730,   731,
     326,   327,   328,   329,   330,   331,     0,   732,   332,   333,
       0,     0,   334,   335,   336,   337,   733,   734,   735,   338,
     339,     0,   736,   737,     0,   340,   341,   738,     0,   343,
     344,   345,   346,     0,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,   739,   352,
       0,   353,   354,   355,   356,   740,   358,   359,   360,   361,
     741,   742,   364,   743,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   744,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,   745,   746,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,   747,   399,
     400,   401,   402,   403,   748,   405,   406,   407,   408,     0,
     749,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,   750,   751,   434,
     435,     0,   436,   437,   752,   439,   440,   441,   753,   754,
     442,   443,   444,   445,   755,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,   756,   453,   454,     0,   757,
     758,   759,   760,     0,     0,     0,     0,     0,   459,   460,
     461,     0,   761,   762,   763,   463,   464,   465,   764,   466,
     467,   765,   468,   469,     0,   470,   471,     0,     0,   472,
       0,     0,   473,     0,   474,     0,   766,   476,   477,     0,
       0,   767,   768,   769,   770,   478,     0,     0,   479,   771,
       0,   772,   480,   481,   482,   483,   484,   773,     0,     0,
       0,     0,     0,     0,   486,   487,     0,   488,   489,   490,
       0,     0,   774,     0,     0,     0,     0,     0,     0,     0,
     775,   776,     0,     0,     0,     0,   777,   778,     0,     0,
     779,   780,     0,     0,   781,   782,   139,     0,   672,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   673,     0,   148,   149,   150,   151,   152,   674,
     154,     0,   155,     0,     0,   675,   156,   676,   677,   678,
     157,   679,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,   680,   681,   165,   166,     0,   167,
     682,   683,   169,   170,     0,   171,   172,   173,   174,   175,
     684,   177,     0,   685,   179,   686,   687,   688,   689,   690,
     691,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   692,   200,     0,
     201,   693,   694,   202,     0,     0,   203,   695,   696,     0,
     204,   697,   698,     0,   205,   206,   207,   699,   700,   701,
       0,     0,     0,     0,   702,   210,   703,     0,     0,   704,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,   705,     0,   236,   237,   238,   706,   707,   239,
     240,     0,   241,   242,   243,   708,     0,   244,     0,     0,
       0,   245,  2205,   246,     0,   247,     0,   248,   249,   709,
     251,   710,   253,     0,   254,     0,   711,   255,   256,   257,
       0,   258,   712,   713,     0,   259,   260,     0,     0,     0,
     714,   262,   263,   264,   715,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,   716,   270,   271,   717,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   718,     0,     0,
     281,     0,   719,   282,   283,     0,     0,     0,     0,     0,
     720,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,   721,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,   722,   306,   307,   308,   309,   723,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   724,   317,
       0,     0,   725,   319,   726,   320,     0,   321,   727,   728,
     729,   730,   731,   326,   327,   328,   329,   330,   331,     0,
     732,   332,   333,     0,     0,   334,   335,   336,   337,   733,
     734,   735,   338,   339,     0,   736,   737,     0,   340,   341,
     738,     0,   343,   344,   345,   346,     0,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   350,   351,
       0,   739,   352,     0,   353,   354,   355,   356,   740,   358,
     359,   360,   361,   741,   742,   364,   743,     0,   365,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     744,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   390,   391,   392,   745,   746,
     393,     0,   394,     0,   395,   396,     0,   397,   398,     0,
       0,   747,   399,   400,   401,   402,   403,   748,   405,   406,
     407,   408,     0,   749,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     750,   751,   434,   435,     0,   436,   437,   752,   439,   440,
     441,   753,   754,   442,   443,   444,   445,   755,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,   756,   453,
     454,     0,   757,   758,   759,   760,     0,     0,     0,     0,
       0,   459,   460,   461,     0,   761,   762,   763,   463,   464,
     465,   764,   466,   467,   765,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   766,
     476,   477,     0,     0,   767,   768,   769,   770,   478,     0,
       0,   479,   771,     0,   772,   480,   481,   482,   483,   484,
     773,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,     0,   774,     0,     0,     0,     0,
       0,     0,     0,   775,   776,     0,     0,     0,     0,   777,
     778,     0,     0,   779,   780,     0,     0,   781,   782,   139,
       0,   672,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   673,     0,   148,   149,   150,
     151,   152,   674,   154,     0,   155,     0,     0,   675,   156,
     676,   677,   678,   157,   679,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,   680,   681,   165,
     166,     0,   167,   682,   683,   169,   170,     0,   171,   172,
     173,   174,   175,   684,   177,     0,   685,   179,   686,   687,
     688,   689,   690,   691,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     692,   200,     0,   201,   693,   694,   202,     0,     0,   203,
     695,   696,     0,   204,   697,   698,     0,   205,   206,   207,
     699,   700,   701,     0,     0,     0,     0,   702,   210,   703,
       0,     0,   704,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   705,     0,   236,   237,   238,
     706,   707,   239,   240,     0,   241,   242,   243,   708,     0,
     244,     0,     0,     0,   245,  2207,   246,     0,   247,     0,
     248,   249,   709,   251,   710,   253,     0,   254,     0,   711,
     255,   256,   257,     0,   258,   712,   713,     0,   259,   260,
       0,     0,     0,   714,   262,   263,   264,   715,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,   716,
     270,   271,   717,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     718,     0,     0,   281,     0,   719,   282,   283,     0,     0,
       0,     0,     0,   720,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,   721,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,   722,   306,   307,   308,   309,
     723,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   724,   317,     0,     0,   725,   319,   726,   320,     0,
     321,   727,   728,   729,   730,   731,   326,   327,   328,   329,
     330,   331,     0,   732,   332,   333,     0,     0,   334,   335,
     336,   337,   733,   734,   735,   338,   339,     0,   736,   737,
       0,   340,   341,   738,     0,   343,   344,   345,   346,     0,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,   739,   352,     0,   353,   354,   355,
     356,   740,   358,   359,   360,   361,   741,   742,   364,   743,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   744,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,   745,   746,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,   747,   399,   400,   401,   402,   403,
     748,   405,   406,   407,   408,     0,   749,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,     0,     0,     0,     0,     0,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,   750,   751,   434,   435,     0,   436,   437,
     752,   439,   440,   441,   753,   754,   442,   443,   444,   445,
     755,   446,   447,     0,   448,     0,   449,   450,   451,   452,
       0,   756,   453,   454,     0,   757,   758,   759,   760,     0,
       0,     0,     0,     0,   459,   460,   461,     0,   761,   762,
     763,   463,   464,   465,   764,   466,   467,   765,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   766,   476,   477,     0,     0,   767,   768,   769,
     770,   478,     0,     0,   479,   771,     0,   772,   480,   481,
     482,   483,   484,   773,     0,     0,     0,     0,     0,     0,
     486,   487,     0,   488,   489,   490,     0,     0,   774,     0,
       0,     0,     0,     0,     0,     0,   775,   776,     0,     0,
       0,     0,   777,   778,     0,     0,   779,   780,     0,     0,
     781,   782,   139,     0,   672,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   673,     0,
     148,   149,   150,   151,   152,   674,   154,     0,   155,     0,
       0,   675,   156,   676,   677,   678,   157,   679,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
     680,   681,   165,   166,     0,   167,   682,   683,   169,   170,
       0,   171,   172,   173,   174,   175,   684,   177,     0,   685,
     179,   686,   687,   688,   689,   690,   691,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   692,   200,     0,   201,   693,   694,   202,
       0,     0,   203,   695,   696,     0,   204,   697,   698,     0,
     205,   206,   207,   699,   700,   701,     0,     0,     0,     0,
     702,   210,   703,     0,     0,   704,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   705,     0,
     236,   237,   238,   706,   707,   239,   240,     0,   241,   242,
     243,   708,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   709,   251,   710,   253,     0,
     254,     0,   711,   255,   256,   257,     0,   258,   712,   713,
       0,   259,   260,     0,     0,     0,   714,   262,   263,   264,
     715,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,   716,   270,   271,   717,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   718,     0,     0,   281,     0,   719,   282,
     283,     0,     0,     0,     0,     0,   720,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,   721,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,   722,   306,
     307,   308,   309,   723,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   724,   317,     0,     0,   725,   319,
     726,   320,     0,   321,   727,   728,   729,   730,   731,   326,
     327,   328,   329,   330,   331,     0,   732,   332,   333,     0,
       0,   334,   335,   336,   337,   733,   734,   735,   338,   339,
       0,   736,   737,     0,   340,   341,   738,     0,   343,   344,
     345,   346,     0,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,   739,   352,     0,
     353,   354,   355,   356,   740,   358,   359,   360,   361,   741,
     742,   364,   743,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   744,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,   745,   746,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,   747,   399,   400,
     401,   402,   403,   748,   405,   406,   407,   408,     0,   749,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   750,   751,   434,   435,
       0,   436,   437,   752,   439,   440,   441,   753,   754,   442,
     443,   444,   445,   755,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,   756,   453,   454,     0,   757,   758,
     759,   760,     0,     0,     0,     0,     0,   459,   460,   461,
       0,   761,   762,   763,   463,   464,   465,   764,   466,   467,
     765,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   766,   476,   477,     0,     0,
     767,   768,   769,   770,   478,     0,     0,   479,   771,     0,
     772,   480,   481,   482,   483,   484,   773,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
       0,   774,     0,     0,     0,     0,     0,     0,     0,   775,
     776,     0,     0,     0,     0,   777,   778,     0,     0,   779,
     780,     0,     0,   781,   782,   139,     0,   672,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   673,     0,   148,   149,   150,   151,   152,   674,   154,
       0,   155,     0,     0,   675,   156,   676,   677,   678,   157,
     679,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,   680,   681,   165,   166,     0,   167,   682,
     683,   169,   170,     0,   171,   172,   173,   174,   175,   684,
     177,     0,   685,   179,   686,   687,   688,   689,   690,   691,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   692,   200,     0,   201,
     693,   694,   202,     0,     0,   203,   695,   696,     0,   204,
     697,   698,     0,   205,   206,   207,   699,   700,   701,     0,
       0,     0,     0,   702,   210,   703,     0,     0,   704,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,   705,     0,   236,   237,   238,   706,   707,   239,   240,
       0,   241,   242,   243,   708,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   709,   251,
     710,   253,     0,   254,     0,   711,   255,   256,   257,     0,
     258,   712,   713,     0,   259,   260,     0,     0,     0,   714,
     262,   263,   264,   715,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,   716,   270,   271,   717,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   718,     0,     0,   281,
       0,   719,   282,   283,     0,     0,     0,     0,     0,   720,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
     721,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,   722,   306,   307,   308,   309,   723,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   724,   317,     0,
       0,   725,   319,   726,   320,     0,   321,   727,   728,   729,
     730,   731,   326,   327,   328,   329,   330,   331,     0,   732,
     332,   333,     0,     0,   334,   335,   336,   337,   733,   734,
     735,   338,   339,     0,   736,   737,     0,   340,   341,   738,
       0,   343,   344,   345,   346,     0,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
     739,   352,     0,   353,   354,   355,   356,   740,   358,   359,
     360,   361,   741,   742,   364,   743,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   744,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,   745,   746,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
     747,   399,   400,   401,   402,   403,   748,   405,   406,   407,
     408,     0,   749,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,     0,     0,     0,     0,     0,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   750,
     751,   434,   435,     0,   436,   437,   752,   439,   440,   441,
     753,   754,   442,   443,   444,   445,   755,   446,   447,     0,
     448,     0,   449,   450,   451,   452,     0,   756,   453,   454,
       0,   757,   758,   759,   760,     0,     0,     0,     0,     0,
     459,   460,   461,     0,   761,   762,   763,   463,   464,   465,
     764,   466,   467,   765,   468,   469,     0,   470,   471,     0,
       0,   472,     0,     0,   473,     0,   474,     0,   766,   476,
     477,     0,     0,   767,   768,   769,   770,   478,     0,     0,
     479,   771,     0,   772,   480,   481,   482,   483,   484,   773,
       0,     0,     0,     0,     0,     0,   486,   487,     0,   488,
     489,   490,     0,     0,   774,     0,     0,     0,     0,     0,
       0,     0,   775,   776,     0,     0,     0,     0,   777,  1124,
       0,     0,   779,   780,     0,     0,   781,   782,   139,     0,
     672,   141,   142,   143,   144,  1713,     0,   145,     0,     0,
       0,  1714,     0,     0,   673,     0,   148,   149,   150,   151,
     152,   674,   154,     0,   155,     0,     0,   675,   156,   676,
     677,   678,   157,   679,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,   680,   681,   165,   166,
       0,   167,   682,   683,   169,   170,     0,   171,   172,   173,
     174,   175,   684,   177,     0,   685,   179,   686,   687,   688,
     689,   690,   691,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   692,
     200,     0,   201,   693,   694,   202,     0,     0,   203,   695,
     696,     0,   204,   697,   698,     0,   205,   206,   207,   699,
     700,   701,     0,     0,     0,     0,   702,   210,   703,     0,
       0,   704,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,   705,     0,   236,   237,   238,   706,
     707,   239,   240,     0,   241,   242,   243,   708,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   709,   251,   710,   253,     0,   254,     0,   711,   255,
     256,   257,     0,   258,   712,   713,     0,   259,   260,     0,
       0,     0,   714,   262,   263,   264,   715,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,   716,   270,
     271,   717,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   718,
       0,     0,   281,     0,   719,   282,   283,     0,     0,     0,
       0,     0,   720,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,   721,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,   722,   306,   307,   308,   309,   723,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     724,   317,     0,     0,   725,   319,   726,   320,     0,   321,
     727,   728,   729,   730,   731,   326,   327,   328,   329,   330,
     331,     0,   732,   332,   333,     0,     0,   334,   335,   336,
     337,   733,     0,   735,   338,   339,     0,   736,   737,     0,
     340,   341,   738,     0,   343,   344,   345,   346,     0,   347,
     348,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,   351,     0,   739,   352,     0,   353,   354,   355,   356,
     740,   358,   359,   360,   361,   741,   742,   364,   743,     0,
     365,   366,   367,     0,   368,     0,   369,   370,   371,   372,
     373,     0,   744,   375,   376,     0,     0,   377,     0,     0,
       0,   378,   379,   380,   381,   382,     0,     0,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   390,   391,   392,
     745,   746,   393,     0,   394,     0,   395,   396,     0,   397,
     398,     0,     0,   747,   399,   400,   401,   402,   403,   748,
     405,   406,   407,   408,     0,   749,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,   750,   751,   434,   435,     0,   436,   437,   752,
     439,   440,   441,   753,   754,   442,   443,   444,   445,   755,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
     756,   453,   454,     0,   757,   758,   759,   760,     0,     0,
       0,     0,     0,   459,   460,   461,     0,   761,   762,   763,
     463,   464,   465,   764,   466,   467,   765,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   766,   476,   477,     0,     0,   767,   768,   769,   770,
     478,     0,     0,   479,   771,     0,   772,   480,   481,   482,
     483,   484,   773,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,     0,   774,     0,     0,
       0,     0,     0,     0,     0,   775,   776,     0,     0,     0,
       0,   777,   778,     0,     0,   779,   780,     0,     0,   781,
     782,   139,     0,   672,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   673,     0,   148,
     149,   150,   151,   152,   674,   154,     0,   155,     0,     0,
     675,   156,   676,   677,   678,   157,   679,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,   680,
     681,   165,   166,     0,   167,   682,   683,   169,   170,     0,
     171,   172,   173,   174,   175,   684,   177,     0,   685,   179,
     686,   687,   688,   689,   690,   691,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   692,   200,     0,   201,   693,   694,   202,     0,
       0,   203,   695,   696,     0,   204,   697,   698,     0,   205,
     206,   207,   699,   700,   701,     0,     0,     0,     0,   702,
     210,   703,     0,     0,   704,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,   705,     0,   236,
     237,   238,   706,   707,   239,   240,     0,   241,   242,   243,
     708,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   709,   251,   710,   253,     0,   254,
       0,   711,   255,   256,   257,     0,   258,   712,   713,     0,
     259,   260,     0,     0,     0,   714,   262,   263,   264,   715,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,   716,   270,   271,   717,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   718,     0,     0,   281,     0,   719,   282,   283,
       0,     0,     0,     0,     0,   720,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,   721,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,   722,   306,   307,
     308,   309,   723,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   724,   317,     0,     0,   725,   319,   726,
     320,     0,   321,   727,   728,   729,   730,   731,   326,   327,
     328,   329,   330,   331,     0,   732,   332,   333,     0,     0,
     334,   335,   336,   337,   733,   734,   735,   338,   339,     0,
     736,   737,     0,   340,   341,   738,     0,   343,   344,   345,
     346,     0,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,   739,   352,     0,   353,
     354,   355,   356,   740,   358,   359,   360,   361,   741,   742,
     364,   743,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   744,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,   745,   746,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,   747,   399,   400,   401,
     402,   403,   748,   405,   406,   407,   408,     0,   749,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,   750,   751,   434,   435,     0,
     436,   437,   752,   439,   440,   441,   753,   754,   442,   443,
     444,   445,   755,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,   756,   453,   454,     0,   757,   758,   759,
     760,     0,     0,     0,     0,     0,   459,   460,   461,     0,
     761,   762,   763,   463,   464,   465,   764,   466,   467,   765,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,  1788,   476,   477,     0,     0,   767,
     768,   769,   770,   478,     0,     0,   479,   771,     0,   772,
     480,   481,   482,   483,   484,   773,     0,     0,     0,     0,
       0,     0,   486,   487,     0,   488,   489,   490,     0,     0,
     774,     0,     0,     0,     0,     0,     0,     0,   775,   776,
       0,     0,     0,     0,   777,   778,     0,     0,   779,   780,
       0,     0,   781,   782,   139,     0,   672,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     673,     0,   148,   149,   150,   151,   152,   674,   154,     0,
     155,     0,     0,   675,   156,   676,   677,   678,   157,   679,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,   680,   681,   165,   166,     0,   167,   682,   683,
     169,   170,     0,   171,   172,   173,   174,   175,   684,   177,
       0,   685,   179,   686,   687,   688,   689,   690,   691,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   692,   200,     0,   201,   693,
     694,   202,     0,     0,   203,   695,   696,     0,   204,   697,
     698,     0,   205,   206,   207,   699,   700,   701,     0,     0,
       0,     0,   702,   210,   703,     0,     0,   704,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
     705,     0,   236,   237,   238,   706,   707,   239,   240,     0,
     241,   242,   243,   708,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   709,   251,   710,
     253,     0,   254,     0,   711,   255,   256,   257,     0,   258,
     712,   713,     0,   259,   260,     0,     0,     0,   714,   262,
     263,   264,   715,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,   716,   270,   271,  2616,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   718,     0,     0,   281,     0,
     719,   282,   283,     0,     0,     0,     0,     0,   720,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,   721,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
     722,   306,   307,   308,   309,   723,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   724,   317,     0,     0,
     725,   319,   726,   320,     0,   321,   727,   728,   729,   730,
     731,   326,   327,   328,   329,   330,   331,     0,   732,   332,
     333,     0,     0,   334,   335,   336,   337,   733,   734,   735,
     338,   339,     0,   736,   737,     0,   340,   341,   738,     0,
     343,   344,   345,   346,     0,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   350,   351,     0,   739,
     352,     0,   353,   354,   355,   356,   740,   358,   359,   360,
     361,   741,   742,   364,   743,     0,   365,   366,   367,     0,
     368,     0,   369,   370,   371,   372,   373,     0,   744,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   390,   391,   392,   745,   746,   393,     0,
     394,     0,   395,   396,     0,   397,   398,     0,     0,   747,
     399,   400,   401,   402,   403,   748,   405,   406,   407,   408,
       0,   749,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,   750,   751,
     434,   435,     0,   436,   437,   752,   439,   440,   441,   753,
     754,   442,   443,   444,   445,   755,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,   756,   453,   454,     0,
     757,   758,   759,   760,     0,     0,     0,     0,     0,   459,
     460,   461,     0,   761,   762,   763,   463,   464,   465,   764,
     466,   467,   765,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   766,   476,   477,
       0,     0,   767,   768,   769,   770,   478,     0,     0,   479,
     771,     0,   772,   480,   481,   482,   483,   484,   773,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,     0,   774,     0,     0,     0,     0,     0,     0,
       0,   775,   776,     0,     0,     0,     0,   777,   778,     0,
       0,   779,   780,     0,     0,   781,   782,   139,     0,   672,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   673,     0,   148,   149,   150,   151,   152,
     674,   154,     0,   155,     0,     0,   675,   156,   676,   677,
     678,   157,   679,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,   680,   681,   165,   166,     0,
     167,   682,   683,   169,   170,     0,   171,   172,   173,   174,
     175,   684,   177,     0,   685,   179,   686,   687,   688,   689,
     690,   691,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   692,   200,
       0,   201,   693,   694,   202,     0,     0,   203,   695,   696,
       0,   204,   697,   698,     0,   205,   206,   207,   699,   700,
     701,     0,     0,     0,     0,   702,   210,   703,     0,     0,
     704,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   705,     0,   236,   237,   238,   706,   707,
     239,   240,     0,   241,   242,   243,   708,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     709,   251,   710,   253,     0,   254,     0,   711,   255,   256,
     257,     0,   258,   712,   713,     0,   259,   260,     0,     0,
       0,   714,   262,   263,   264,   715,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,   716,   270,   271,
    2670,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   718,     0,
       0,   281,     0,   719,   282,   283,     0,     0,     0,     0,
       0,   720,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   721,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,   722,   306,   307,   308,   309,   723,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   724,
     317,     0,     0,   725,   319,   726,   320,     0,   321,   727,
     728,   729,   730,   731,   326,   327,   328,   329,   330,   331,
       0,   732,   332,   333,     0,     0,   334,   335,   336,   337,
     733,   734,   735,   338,   339,     0,   736,   737,     0,   340,
     341,   738,     0,   343,   344,   345,   346,     0,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,   739,   352,     0,   353,   354,   355,   356,   740,
     358,   359,   360,   361,   741,   742,   364,   743,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   744,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,   745,
     746,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,   747,   399,   400,   401,   402,   403,   748,   405,
     406,   407,   408,     0,   749,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,   750,   751,   434,   435,     0,   436,   437,   752,   439,
     440,   441,   753,   754,   442,   443,   444,   445,   755,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,   756,
     453,   454,     0,   757,   758,   759,   760,     0,     0,     0,
       0,     0,   459,   460,   461,     0,   761,   762,   763,   463,
     464,   465,   764,   466,   467,   765,   468,   469,     0,   470,
     471,     0,     0,   472,     0,     0,   473,     0,   474,     0,
     766,   476,   477,     0,     0,   767,   768,   769,   770,   478,
       0,     0,   479,   771,     0,   772,   480,   481,   482,   483,
     484,   773,     0,     0,     0,     0,     0,     0,   486,   487,
       0,   488,   489,   490,     0,     0,   774,     0,     0,     0,
       0,     0,     0,     0,   775,   776,     0,     0,     0,     0,
     777,   778,     0,     0,   779,   780,     0,     0,   781,   782,
     139,     0,   672,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   673,     0,   148,   149,
     150,   151,   152,   674,   154,     0,   155,     0,     0,   675,
     156,   676,   677,   678,   157,   679,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,   680,   681,
     165,   166,     0,   167,   682,   683,   169,   170,     0,   171,
     172,   173,   174,   175,   684,   177,     0,   685,   179,   686,
     687,   688,   689,   690,   691,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   692,   200,     0,   201,   693,   694,   202,     0,     0,
     203,   695,   696,     0,   204,   697,   698,     0,   205,   206,
     207,   699,   700,   701,     0,     0,     0,     0,   702,   210,
     703,     0,     0,  3432,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,   705,     0,   236,   237,
     238,   706,   707,   239,   240,     0,   241,   242,   243,   708,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   709,   251,   710,   253,     0,   254,     0,
     711,   255,   256,   257,     0,   258,   712,   713,     0,   259,
     260,     0,     0,     0,   714,   262,   263,   264,   715,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
     716,   270,   271,   717,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   718,     0,     0,   281,     0,   719,   282,   283,     0,
       0,     0,     0,     0,   720,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,   721,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,   722,   306,   307,   308,
     309,   723,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   724,   317,     0,     0,   725,   319,   726,   320,
       0,   321,   727,   728,   729,   730,   731,   326,   327,   328,
     329,   330,   331,     0,   732,   332,   333,     0,     0,   334,
     335,   336,   337,   733,   734,   735,   338,   339,     0,   736,
     737,     0,   340,   341,   738,     0,   343,   344,   345,   346,
       0,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,   349,   350,   351,     0,   739,   352,     0,   353,   354,
     355,   356,   740,   358,   359,   360,   361,   741,   742,   364,
     743,     0,   365,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   744,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   390,
     391,   392,   745,   746,   393,     0,   394,     0,   395,   396,
       0,   397,   398,     0,     0,   747,   399,   400,   401,   402,
     403,   748,   405,   406,   407,   408,     0,   749,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   750,   751,   434,   435,     0,   436,
     437,   752,   439,   440,   441,   753,   754,   442,   443,   444,
     445,   755,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,   756,   453,   454,     0,   757,   758,   759,   760,
       0,     0,     0,     0,     0,   459,   460,   461,     0,   761,
     762,   763,   463,   464,   465,   764,   466,   467,   765,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   766,   476,   477,     0,     0,   767,   768,
     769,   770,   478,     0,     0,   479,   771,     0,   772,   480,
     481,   482,   483,   484,   773,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,     0,   774,
       0,     0,     0,     0,     0,     0,     0,   775,   776,     0,
       0,     0,     0,   777,   778,     0,     0,   779,   780,     0,
       0,   781,   782,   139,     0,   672,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   673,
       0,   148,   149,   150,   151,   152,   674,   154,     0,   155,
       0,     0,   675,   156,   676,   677,   678,   157,   679,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,   680,   681,   165,   166,     0,   167,   682,   683,   169,
     170,     0,   171,   172,   173,   174,   175,   684,   177,     0,
     685,   179,   686,   687,   688,   689,   690,   691,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   692,   200,     0,   201,   693,   694,
     202,     0,     0,   203,   695,   696,     0,   204,   697,   698,
       0,   205,   206,   207,   699,   700,   701,     0,     0,     0,
       0,   702,   210,   703,     0,     0,   704,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,   705,
       0,   236,   237,   238,   706,   707,   239,   240,     0,   241,
     242,   243,   708,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   709,   251,   710,   253,
       0,   254,     0,   711,   255,   256,   257,     0,   258,   712,
     713,     0,   259,   260,     0,     0,     0,   714,   262,   263,
     264,   715,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,   716,   270,   271,   717,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   718,     0,     0,   281,     0,   719,
     282,   283,     0,     0,     0,     0,     0,   720,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,   721,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,   722,
     306,   307,   308,   309,   723,   310,   311,  4318,     0,     0,
       0,   312,   313,   314,   315,   724,   317,     0,     0,   725,
     319,   726,   320,     0,   321,   727,   728,   729,   730,   731,
     326,   327,   328,   329,   330,   331,     0,   732,   332,   333,
       0,     0,   334,   335,   336,   337,   733,     0,   735,   338,
     339,     0,   736,   737,     0,   340,   341,   738,     0,   343,
     344,   345,   346,     0,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,   739,   352,
       0,   353,   354,   355,   356,   740,   358,   359,   360,   361,
     741,   742,   364,   743,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   744,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,   745,   746,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,   747,   399,
     400,   401,   402,   403,   748,   405,   406,   407,   408,     0,
     749,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,   750,   751,   434,
     435,     0,   436,   437,   752,   439,   440,   441,   753,   754,
     442,   443,   444,   445,   755,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,   756,   453,   454,     0,   757,
     758,   759,   760,     0,     0,     0,     0,     0,   459,   460,
     461,     0,   761,   762,   763,   463,   464,   465,   764,   466,
     467,   765,   468,   469,     0,   470,   471,     0,     0,   472,
       0,     0,   473,     0,   474,     0,   766,   476,   477,     0,
       0,   767,   768,   769,   770,   478,     0,     0,   479,   771,
       0,   772,   480,   481,   482,   483,   484,   773,     0,     0,
       0,     0,     0,     0,   486,   487,     0,   488,   489,   490,
       0,     0,   774,     0,     0,     0,     0,     0,     0,     0,
     775,   776,     0,     0,     0,     0,   777,   778,     0,     0,
     779,   780,     0,     0,   781,   782,   139,     0,   672,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   673,     0,   148,   149,   150,   151,   152,   674,
     154,     0,   155,     0,     0,   675,   156,   676,   677,   678,
     157,   679,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,   680,   681,   165,   166,     0,   167,
     682,   683,   169,   170,     0,   171,   172,   173,   174,   175,
     684,   177,     0,   685,   179,   686,   687,   688,   689,   690,
     691,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   692,   200,     0,
     201,   693,   694,   202,     0,     0,   203,   695,   696,     0,
     204,   697,   698,     0,   205,   206,   207,   699,   700,   701,
       0,     0,     0,     0,   702,   210,   703,     0,     0,   704,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,   705,     0,   236,   237,   238,   706,   707,   239,
     240,     0,   241,   242,   243,   708,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   709,
     251,   710,   253,     0,   254,     0,   711,   255,   256,   257,
       0,   258,   712,   713,     0,   259,   260,     0,     0,     0,
     714,   262,   263,   264,   715,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,   716,   270,   271,   717,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   718,     0,     0,
     281,     0,   719,   282,   283,     0,     0,     0,     0,     0,
     720,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,   721,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,   722,   306,   307,   308,   309,   723,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   724,   317,
       0,     0,   725,   319,   726,   320,     0,   321,   727,   728,
     729,   730,   731,   326,   327,   328,   329,   330,   331,     0,
     732,   332,   333,     0,     0,   334,   335,   336,   337,   733,
       0,   735,   338,   339,     0,   736,   737,     0,   340,   341,
     738,     0,   343,   344,   345,   346,     0,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   350,   351,
       0,   739,   352,     0,   353,   354,   355,   356,   740,   358,
     359,   360,   361,   741,   742,   364,   743,     0,   365,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     744,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   390,   391,   392,   745,   746,
     393,     0,   394,     0,   395,   396,     0,   397,   398,     0,
       0,   747,   399,   400,   401,   402,   403,   748,   405,   406,
     407,   408,     0,   749,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     750,   751,   434,   435,     0,   436,   437,   752,   439,   440,
     441,   753,   754,   442,   443,   444,   445,   755,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,   756,   453,
     454,     0,   757,   758,   759,   760,     0,     0,     0,     0,
       0,   459,   460,   461,     0,   761,   762,   763,   463,   464,
     465,   764,   466,   467,   765,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   766,
     476,   477,     0,     0,   767,   768,   769,   770,   478,     0,
       0,   479,   771,     0,   772,   480,   481,   482,   483,   484,
     773,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,     0,   774,     0,     0,     0,     0,
       0,     0,     0,   775,   776,     0,     0,     0,     0,   777,
     778,     0,     0,   779,   780,     0,     0,   781,   782,   139,
       0,   672,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   673,     0,   148,   149,   150,
     151,   152,   674,   154,     0,   155,     0,     0,   675,   156,
     676,   677,   678,   157,   679,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,   680,   681,   165,
     166,     0,   167,   682,   683,   169,   170,     0,   171,   172,
     173,   174,   175,   684,   177,     0,   685,   179,   686,   687,
     688,   689,   690,   691,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     692,   200,     0,   201,   693,   694,   202,     0,     0,   203,
     695,   696,     0,   204,   697,   698,     0,   205,   206,   207,
     699,   700,   701,     0,     0,     0,     0,   702,   210,   703,
       0,     0,   704,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   705,     0,   236,   237,   238,
     706,   707,   239,   240,     0,   241,   242,   243,   708,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   709,   251,   710,   253,     0,   254,     0,   711,
     255,   256,   257,     0,   258,   712,   713,     0,   259,   260,
       0,     0,     0,   714,   262,   263,   264,   715,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,   716,
     270,   271,  1728,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     718,     0,     0,   281,     0,   719,   282,   283,     0,     0,
       0,     0,     0,   720,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,   721,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,   722,   306,   307,   308,   309,
     723,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   724,   317,     0,     0,   725,   319,   726,   320,     0,
     321,   727,   728,   729,   730,   731,   326,   327,   328,   329,
     330,   331,     0,   732,   332,   333,     0,     0,   334,   335,
     336,   337,   733,     0,   735,   338,   339,     0,   736,   737,
       0,   340,   341,   738,     0,   343,   344,   345,   346,     0,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,   739,   352,     0,   353,   354,   355,
     356,   740,   358,   359,   360,   361,   741,   742,   364,   743,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   744,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,   745,   746,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,   747,   399,   400,   401,   402,   403,
     748,   405,   406,   407,   408,     0,   749,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,     0,     0,     0,     0,     0,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,   750,   751,   434,   435,     0,   436,   437,
     752,   439,   440,   441,   753,   754,   442,   443,   444,   445,
     755,   446,   447,     0,   448,     0,   449,   450,   451,   452,
       0,   756,   453,   454,     0,   757,   758,   759,   760,     0,
       0,     0,     0,     0,   459,   460,   461,     0,   761,   762,
     763,   463,   464,   465,   764,   466,   467,   765,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   766,   476,   477,     0,     0,   767,   768,   769,
     770,   478,     0,     0,   479,   771,     0,   772,   480,   481,
     482,   483,   484,   773,     0,     0,     0,     0,     0,     0,
     486,   487,     0,   488,   489,   490,     0,     0,   774,     0,
       0,     0,     0,     0,     0,     0,   775,   776,     0,     0,
       0,     0,   777,   778,     0,     0,   779,   780,     0,     0,
     781,   782,   139,     0,   672,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   673,     0,
     148,   149,   150,   151,   152,   674,   154,     0,   155,     0,
       0,   675,   156,   676,   677,   678,   157,   679,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
     680,   681,   165,   166,     0,   167,   682,   683,   169,   170,
       0,   171,   172,   173,   174,   175,   684,   177,     0,   685,
     179,   686,   687,   688,   689,   690,   691,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   692,   200,     0,   201,   693,   694,   202,
       0,     0,   203,   695,   696,     0,   204,   697,   698,     0,
     205,   206,   207,   699,   700,   701,     0,     0,     0,     0,
     702,   210,   703,     0,     0,   704,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   705,     0,
     236,   237,   238,   706,   707,   239,   240,     0,   241,   242,
     243,   708,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   709,   251,   710,   253,     0,
     254,     0,   711,   255,   256,   257,     0,   258,   712,   713,
       0,   259,   260,     0,     0,     0,   714,   262,   263,   264,
     715,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,   716,   270,   271,  1730,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   718,     0,     0,   281,     0,   719,   282,
     283,     0,     0,     0,     0,     0,   720,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,   721,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,   722,   306,
     307,   308,   309,   723,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   724,   317,     0,     0,   725,   319,
     726,   320,     0,   321,   727,   728,   729,   730,   731,   326,
     327,   328,   329,   330,   331,     0,   732,   332,   333,     0,
       0,   334,   335,   336,   337,   733,     0,   735,   338,   339,
       0,   736,   737,     0,   340,   341,   738,     0,   343,   344,
     345,   346,     0,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,   739,   352,     0,
     353,   354,   355,   356,   740,   358,   359,   360,   361,   741,
     742,   364,   743,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   744,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,   745,   746,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,   747,   399,   400,
     401,   402,   403,   748,   405,   406,   407,   408,     0,   749,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   750,   751,   434,   435,
       0,   436,   437,   752,   439,   440,   441,   753,   754,   442,
     443,   444,   445,   755,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,   756,   453,   454,     0,   757,   758,
     759,   760,     0,     0,     0,     0,     0,   459,   460,   461,
       0,   761,   762,   763,   463,   464,   465,   764,   466,   467,
     765,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   766,   476,   477,     0,     0,
     767,   768,   769,   770,   478,     0,     0,   479,   771,     0,
     772,   480,   481,   482,   483,   484,   773,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
       0,   774,     0,     0,     0,     0,     0,     0,     0,   775,
     776,     0,     0,     0,     0,   777,   778,     0,     0,   779,
     780,     0,     0,   781,   782,   139,     0,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,   676,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,  2342,     0,
       0,     0,     0,   209,   210,   703,     0,     0,     0,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,   707,   239,   240,
       0,   241,   242,   243,   708,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,   255,   256,   257,     0,
     258,   712,   713,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
     721,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   732,
     332,   333,     0,     0,   334,   335,   336,   337,     0,     0,
       0,   338,   339,     0,   736,   737,     0,   340,   341,   342,
       0,   343,   344,   345,   346,     0,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
       0,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,     0,     0,     0,     0,     0,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,     0,
       0,   434,   435,     0,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,     0,   446,   447,     0,
     448,     0,   449,   450,   451,   452,     0,   756,   453,   454,
       0,  2343,   456,   457,  2344,     0,     0,     0,     0,     0,
     459,   460,   461,     0,     0,   762,   462,   463,   464,   465,
     764,   466,   467,   765,   468,   469,     0,   470,   471,     0,
       0,   472,     0,     0,   473,     0,   474,     0,   475,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,   485,
       0,     0,     0,     0,     0,     0,   486,   487,     0,   488,
     489,   490,     0,     0,   491,     0,     0,     0,     0,     0,
       0,     0,   139,     0,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,   781,   782,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,  2457,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
     505,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,   255,   256,   257,     0,   258,     0,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,  2038,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,  2039,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,  3017,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,     0,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,     0,   352,     0,
     353,   354,   355,  3018,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   374,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,  -439,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,   508,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,     0,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
       0,   491,     0,     0,     0,     0,     0,   139,     0,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,  2524,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,  2457,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,   210,     0,     0,     0,
       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,   505,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,   255,   256,
     257,     0,   258,     0,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
    2038,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,  2039,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,   338,   339,     0,     0,     0,     0,   340,
     341,   342,     0,   343,   344,   345,   346,     0,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,     0,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,   508,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,     0,     0,   434,   435,     0,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,     0,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,   469,     0,   470,
     471,     0,     0,   472,     0,     0,   473,     0,   474,     0,
     475,   476,   477,     0,     0,     0,     0,     0,     0,   478,
       0,     0,   479,     0,     0,     0,   480,   481,   482,   483,
     484,   485,     0,     0,     0,     0,     0,     0,   486,   487,
       0,   488,   489,   490,     0,     0,   491,     0,     0,     0,
       0,     0,   139,     0,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,  2524,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,   255,   256,   257,     0,   258,     0,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,     0,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,     0,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   374,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,  2333,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,     0,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
       0,   491,     0,     0,     0,     0,     0,   139,     0,   140,
     141,   142,   143,   144,     0,     0,   145,  2766,     0,     0,
     146,     0,     0,   147,   782,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,   210,     0,     0,     0,
       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,   255,   256,
     257,     0,   258,     0,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,   338,   339,     0,     0,     0,     0,   340,
     341,   342,     0,   343,   344,   345,   346,     0,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,     0,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,     0,     0,   434,   435,     0,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,     0,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,   469,     0,   470,
     471,     0,     0,   472,     0,     0,   473,     0,   474,     0,
     475,   476,   477,     0,     0,     0,     0,     0,     0,   478,
       0,     0,   479,     0,     0,     0,   480,   481,   482,   483,
     484,   485,     0,     0,     0,     0,     0,     0,   486,   487,
       0,   488,   489,   490,     0,     0,   491,     0,     0,     0,
       0,     0,     0,     0,   139,     0,   140,   141,   142,   143,
     144,     0,  4450,   145,     0,     0,     0,   146,  4451,   782,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,   255,   256,   257,     0,   258,
       0,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,     0,     0,     0,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   350,   351,     0,     0,
     352,     0,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,     0,
     368,     0,   369,   370,   371,   372,   373,     0,   374,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
     394,     0,   395,   396,     0,   397,   398,     0,     0,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,     0,   491,     0,     0,     0,     0,     0,     0,
       0,   139,     0,   140,   141,   142,   143,   144,  1129,     0,
     145,     0,     0,     0,   146,     0,   782,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,   255,   256,   257,     0,   258,     0,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,  1334,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,     0,     0,   340,   341,   342,     0,   343,   344,   345,
     346,     0,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,     0,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,     0,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,     0,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,   461,     0,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   475,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,   485,     0,     0,     0,     0,
       0,     0,   486,   487,     0,   488,   489,   490,     0,     0,
     491,     0,     0,     0,     0,     0,   139,     0,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,   539,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,   255,   256,   257,
       0,   258,     0,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,     0,   340,   341,
     342,     0,   343,   344,   345,   346,     0,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   350,   351,
       0,     0,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     374,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,   394,     0,   395,   396,     0,   397,   398,     0,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,     0,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,   462,   463,   464,
     465,     0,   466,   467,     0,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,     0,   491,     0,     0,     0,     0,
       0,     0,     0,     0,   139,  2280,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,   539,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,   255,   256,   257,     0,   258,
       0,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,     0,     0,     0,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   350,   351,     0,     0,
     352,     0,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,     0,
     368,     0,   369,   370,   371,   372,   373,     0,   374,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
     394,     0,   395,   396,     0,   397,   398,     0,     0,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,     0,   491,     0,     0,     0,     0,     0,     0,
       0,   139,     0,   140,   141,   142,   143,   144,  2523,     0,
     145,     0,     0,     0,   146,     0,  2524,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,   255,   256,   257,     0,   258,     0,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,     0,     0,   340,   341,   342,     0,   343,   344,   345,
     346,     0,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,     0,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,     0,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,     0,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,   461,     0,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   475,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,   485,     0,     0,     0,     0,
       0,     0,   486,   487,     0,   488,   489,   490,     0,     0,
     491,     0,     0,     0,     0,     0,     0,     0,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,  4451,   782,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,     0,
     340,   341,   342,     0,   343,   344,   345,   346,     0,   347,
     348,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,   351,     0,     0,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,     0,   368,     0,   369,   370,   371,   372,
     373,     0,   374,   375,   376,     0,     0,   377,     0,     0,
       0,   378,   379,   380,   381,   382,     0,     0,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,   394,     0,   395,   396,     0,   397,
     398,     0,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
       0,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,     0,   491,     0,     0,
       0,     0,     0,   139,     0,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
     539,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,   210,     0,     0,     0,     0,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   606,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,   255,   256,   257,     0,   258,     0,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,   338,
     339,     0,     0,     0,     0,   340,   341,   342,     0,   343,
     344,   345,   346,     0,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,     0,   352,
       0,   353,   354,   607,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   374,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,     0,     0,   434,
     435,     0,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,     0,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,   469,     0,   470,   471,     0,     0,   472,
       0,     0,   473,     0,   474,     0,   475,   476,   477,     0,
       0,     0,     0,     0,     0,   478,     0,     0,   479,     0,
       0,     0,   480,   481,   482,   483,   484,   485,     0,     0,
       0,     0,     0,     0,   486,   487,     0,   488,   489,   490,
       0,     0,   491,     0,     0,     0,     0,     0,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,   539,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,     0,
     340,   341,   342,     0,   343,   344,   345,   346,     0,   347,
     348,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,   351,     0,     0,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,     0,   368,     0,   369,   370,   371,   372,
     373,     0,   374,   375,   376,     0,     0,   377,     0,     0,
       0,   378,   379,   380,   381,   382,     0,     0,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,   394,     0,   395,   396,     0,   397,
     398,     0,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
       0,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,     0,   491,     0,     0,
       0,     0,     0,   139,     0,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
     782,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,   210,     0,     0,     0,     0,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,   255,   256,   257,     0,   258,     0,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,   338,
     339,     0,     0,     0,     0,   340,   341,   342,     0,   343,
     344,   345,   346,     0,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,     0,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   374,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,     0,     0,   434,
     435,     0,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,     0,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,   469,     0,   470,   471,     0,     0,   472,
       0,     0,   473,     0,   474,     0,   475,   476,   477,     0,
       0,     0,     0,     0,     0,   478,     0,     0,   479,     0,
       0,     0,   480,   481,   482,   483,   484,   485,     0,     0,
       0,     0,     0,     0,   486,   487,     0,   488,   489,   490,
       0,     0,   491,     0,     0,     0,     0,     0,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,  2524,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,   618,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,     0,
     340,   341,   342,     0,   343,   344,   345,   346,     0,   347,
     348,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,   351,     0,     0,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,     0,   368,     0,   369,   370,   371,   372,
     373,     0,   374,   375,   376,     0,     0,   377,     0,     0,
       0,   378,   379,   380,   381,   382,     0,     0,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,   394,     0,   395,   396,     0,   397,
     398,     0,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
     136,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,     0,   491,     0,     0,
       0,     0,   139,     0,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,  1700,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,   255,   256,   257,     0,   258,     0,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,   618,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,     0,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,     0,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   374,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,   136,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
       0,   491,     0,     0,     0,     0,   139,     0,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,  2806,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,   255,   256,   257,
       0,   258,     0,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,   618,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,     0,   340,   341,
     342,     0,   343,   344,   345,   346,     0,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   350,   351,
       0,     0,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     374,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,   394,     0,   395,   396,     0,   397,   398,     0,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,   136,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,   462,   463,   464,
     465,     0,   466,   467,     0,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,     0,   491,     0,     0,     0,     0,
     139,     0,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,     0,  3464,   148,   149,
     150,   151,   152,   153,     0,     0,  -329,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,     0,     0,     0,     0,   164,  3902,     0,
     165,   166,     0,   167,     0,     0,     0,     0,     0,   171,
     172,   173,   174,  3903,   176,   177,     0,   178,   179,     0,
       0,     0,     0,     0,     0,     0,   186,     0,   188,     0,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,     0,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,     0,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,     0,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
       0,   224,     0,   225,   226,   227,     0,   228,   229,     0,
     230,   231,   232,   233,     0,     0,     0,     0,   236,   237,
     238,     0,     0,   239,   240,  3904,   241,   242,   243,     0,
       0,     0,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   256,   257,     0,     0,     0,     0,     0,     0,
     260,     0,     0,     0,   261,   262,   263,   264,  3905,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,     0,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,  3906,     0,     0,   277,     0,     0,     0,
     279,   280,     0,     0,   281,  3907,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,  -284,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,     0,   339,     0,     0,
       0,     0,   340,   341,   342,     0,   343,   344,   345,  3908,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   350,   351,     0,     0,     0,     0,   353,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,     0,
       0,     0,     0,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   374,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,     0,     0,   390,
       0,   392,  -284,     0,   393,     0,     0,     0,   395,     0,
       0,   397,   398,  3909,     0,     0,     0,   400,   401,   402,
     403,   404,   405,     0,   407,   408,     0,   409,     0,     0,
       0,     0,   411,   412,   413,     0,     0,     0,     0,   415,
       0,     0,     0,   416,     0,     0,   418,     0,   420,     0,
     421,     0,   423,     0,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,     0,   433,     0,     0,     0,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,     0,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,     0,   463,   464,   465,     0,   466,   467,     0,   468,
     469,     0,     0,     0,     0,     0,   472,     0,     0,   473,
       0,     0,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,     0,     0,  -284,     0,     0,
       0,   486,     0,     0,   488,     0,   490,     0,     0,   491,
       0,   139,     0,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,  4457,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,   995,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,   255,   256,   257,     0,   258,     0,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
     618,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,     0,     0,   340,   341,   342,     0,   343,   344,   345,
     346,     0,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,     0,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,     0,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,   136,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,   461,     0,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   475,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,   485,     0,     0,     0,     0,
       0,     0,   486,   487,     0,   488,   489,   490,     0,     0,
     491,   139,     0,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,  1175,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,   255,   256,   257,     0,   258,     0,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,     0,     0,   340,   341,   342,     0,   343,   344,   345,
     346,     0,   347,   348,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,     0,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,     0,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,     0,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,   461,     0,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   475,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,   485,     0,     0,     0,     0,
       0,     0,   486,   487,     0,   488,   489,   490,     0,   139,
     491,   140,   141,   142,   143,   144,     0,     0,   145,     0,
    2112,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
       0,     0,     0,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
     255,   256,   257,     0,   258,     0,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,   332,   333,     0,     0,   334,   335,
     336,   337,     0,     0,     0,   338,   339,     0,     0,     0,
       0,   340,   341,   342,     0,   343,   344,   345,   346,     0,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,     0,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   374,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,     0,     0,     0,     0,     0,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,     0,     0,   434,   435,     0,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
       0,   446,   447,     0,   448,     0,   449,   450,   451,   452,
       0,     0,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,   461,     0,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   475,   476,   477,     0,     0,     0,     0,     0,
       0,   478,     0,     0,   479,     0,     0,     0,   480,   481,
     482,   483,   484,   485,     0,     0,     0,     0,     0,     0,
     486,   487,     0,   488,   489,   490,     0,   139,   491,   140,
     141,   142,   143,   144,     0,     0,   145,     0,  2794,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,   210,     0,     0,     0,
       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,   255,   256,
     257,     0,   258,     0,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,   338,   339,     0,     0,     0,     0,   340,
     341,   342,     0,   343,   344,   345,   346,     0,   347,   348,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,     0,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,     0,     0,   434,   435,     0,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,     0,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,   469,     0,   470,
     471,     0,     0,   472,     0,     0,   473,     0,   474,     0,
     475,   476,   477,     0,     0,     0,     0,     0,     0,   478,
       0,     0,   479,     0,     0,     0,   480,   481,   482,   483,
     484,   485,     0,     0,     0,     0,     0,     0,   486,   487,
       0,   488,   489,   490,     0,   139,   491,   140,   141,   142,
     143,   144,     0,     0,   145,     0,  3124,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,   210,     0,     0,     0,     0,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,   255,   256,   257,     0,
     258,     0,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,     0,     0,
       0,   338,   339,     0,     0,     0,     0,   340,   341,   342,
       0,   343,   344,   345,   346,     0,   347,   348,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
       0,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,     0,     0,     0,     0,     0,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,     0,
       0,   434,   435,     0,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,     0,   446,   447,     0,
     448,     0,   449,   450,   451,   452,     0,     0,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,   461,     0,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,   469,     0,   470,   471,     0,
       0,   472,     0,     0,   473,     0,   474,     0,   475,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,   485,
       0,     0,     0,     0,     0,     0,   486,   487,     0,   488,
     489,   490,     0,   139,   491,   140,   141,   142,   143,   144,
       0,     0,   145,     0,  3469,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,  2636,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,   210,     0,     0,     0,  2800,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,   255,   256,   257,     0,   258,     0,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,   618,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,   338,
     339,     0,     0,     0,     0,   340,   341,   342,     0,   343,
     344,   345,   346,     0,   347,   348,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,     0,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   374,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,  2262,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,     0,     0,   434,
     435,     0,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,     0,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,   136,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,   469,     0,   470,   471,     0,     0,   472,
       0,     0,   473,     0,   474,     0,   475,   476,   477,     0,
       0,     0,     0,     0,     0,   478,     0,     0,   479,     0,
       0,     0,   480,   481,   482,   483,   484,   485,     0,     0,
       0,     0,     0,     0,   486,   487,     0,   488,   489,   490,
       0,     0,   491,     0,   139,  2263,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,  2436,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,  2437,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,   255,   256,   257,     0,   258,
    2438,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,  2439,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,  1038,  1039,     0,
     338,   339,     0,     0,  2440,     0,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   350,   351,     0,     0,
     352,     0,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,     0,
     368,     0,   369,   370,   371,   372,   373,     0,   374,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
     394,     0,   395,   396,     0,   397,   398,     0,     0,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,  4437,   564,  4438,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,  2441,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,   139,   491,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,  1588,     0,     0,  2965,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,  1589,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,   255,   256,   257,     0,   258,  2860,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,  2861,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,  2862,     0,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,     0,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   374,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,   136,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,   462,   463,   464,   465,  2863,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
     139,   491,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
    1588,     0,     0,  3896,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,  1589,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,   255,   256,   257,     0,   258,  2860,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,  2861,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,   338,   339,     0,     0,
    2862,     0,   340,   341,   342,     0,   343,   344,   345,   346,
       0,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,   349,   350,   351,     0,     0,   352,     0,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   374,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   390,
     391,   392,     0,     0,   393,     0,   394,     0,   395,   396,
       0,   397,   398,     0,     0,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,     0,     0,   434,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,   136,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,   462,   463,   464,   465,  2863,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,   139,   491,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,  1588,     0,
       0,  4180,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,  1589,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,   255,
     256,   257,     0,   258,  2860,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,  2861,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,  2862,     0,
     340,   341,   342,     0,   343,   344,   345,   346,     0,   347,
     348,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,   351,     0,     0,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,     0,   368,     0,   369,   370,   371,   372,
     373,     0,   374,   375,   376,     0,     0,   377,     0,     0,
       0,   378,   379,   380,   381,   382,     0,     0,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,   394,     0,   395,   396,     0,   397,
     398,     0,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
     136,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,   462,
     463,   464,   465,  2863,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,   139,   491,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,   972,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,   255,   256,   257,
       0,   258,   973,   974,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,     0,   340,   341,
     342,     0,   343,   344,   345,   346,     0,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   350,   351,
       0,     0,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     374,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,   394,     0,   395,   396,     0,   397,   398,     0,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,   975,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,   462,   463,   464,
     465,     0,   466,   467,     0,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,   139,   491,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,   255,   256,   257,     0,   258,
       0,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,  1865,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,     0,  1866,     0,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   350,   351,     0,   739,
     352,     0,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,     0,
     368,     0,   369,   370,   371,   372,   373,     0,   374,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
     394,     0,   395,   396,     0,   397,   398,     0,     0,     0,
     399,   400,   401,  1867,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,  1868,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,   139,   491,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,  2808,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,  2809,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,   255,   256,   257,     0,   258,     0,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,   618,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,     0,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,     0,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   374,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,   136,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
     139,   491,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,   255,   256,   257,     0,   258,     0,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,  1865,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,   338,   339,     0,     0,
    1866,     0,   340,   341,   342,     0,   343,   344,   345,   346,
       0,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,   349,   350,   351,     0,   739,   352,     0,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   374,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   390,
     391,   392,     0,     0,   393,     0,   394,     0,   395,   396,
       0,   397,   398,     0,     0,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,     0,     0,   434,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,     0,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,   462,   463,   464,   465,  1868,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,   139,   491,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,  2636,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,  2800,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,   618,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,     0,
     340,   341,   342,     0,   343,   344,   345,   346,     0,   347,
     348,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,   351,     0,     0,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,     0,   368,     0,   369,   370,   371,   372,
     373,     0,   374,   375,   376,     0,     0,   377,     0,     0,
       0,   378,   379,   380,   381,   382,     0,     0,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,   394,     0,   395,   396,     0,   397,
     398,     0,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
     136,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,   139,   491,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,   255,   256,   257,
       0,   258,     0,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,  1865,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,  1866,     0,   340,   341,
     342,     0,   343,   344,   345,   346,     0,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   350,   351,
       0,   739,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     374,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,   394,     0,   395,   396,     0,   397,   398,     0,
       0,     0,   399,   400,   401,  3618,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,     0,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,   462,   463,   464,
     465,  1868,   466,   467,     0,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,   139,   491,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,   995,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,   255,   256,   257,     0,   258,
       0,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,   618,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,     0,     0,     0,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   350,   351,     0,     0,
     352,     0,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,     0,
     368,     0,   369,   370,   371,   372,   373,     0,   374,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
     394,     0,   395,   396,     0,   397,   398,     0,     0,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,   136,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,   139,   491,   140,   141,   142,   143,   144,  1387,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,   255,   256,   257,     0,   258,     0,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,   618,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,     0,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,     0,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   374,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,   136,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
     139,   491,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,  2636,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,   255,   256,   257,     0,   258,     0,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,   618,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,   338,   339,     0,     0,
       0,     0,   340,   341,   342,     0,   343,   344,   345,   346,
       0,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,   349,   350,   351,     0,     0,   352,     0,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   374,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   390,
     391,   392,     0,     0,   393,     0,   394,     0,   395,   396,
       0,   397,   398,     0,     0,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,     0,     0,   434,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,   136,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,   462,   463,   464,   465,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,   139,   491,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,  2851,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,   618,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,     0,
     340,   341,   342,     0,   343,   344,   345,   346,     0,   347,
     348,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,   351,     0,     0,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,     0,   368,     0,   369,   370,   371,   372,
     373,     0,   374,   375,   376,     0,     0,   377,     0,     0,
       0,   378,   379,   380,   381,   382,     0,     0,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,   394,     0,   395,   396,     0,   397,
     398,     0,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
     136,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,   139,   491,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,   255,   256,   257,
       0,   258,     0,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,   618,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,     0,   340,   341,
     342,     0,   343,   344,   345,   346,     0,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   350,   351,
       0,     0,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     374,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,   394,     0,   395,   396,     0,   397,   398,     0,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,   136,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,   462,   463,   464,
     465,     0,   466,   467,     0,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,   139,   491,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,  2790,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,   255,   256,   257,     0,   258,
       0,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,     0,     0,     0,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   350,   351,     0,     0,
     352,     0,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,     0,
     368,     0,   369,   370,   371,   372,   373,     0,   374,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
     394,     0,   395,   396,     0,   397,   398,     0,     0,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,   136,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,   139,   491,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,  4352,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,  4353,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,   255,   256,   257,     0,   258,     0,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,     0,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,     0,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   374,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,     0,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
     139,   491,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,   255,   256,   257,     0,   258,     0,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,   338,   339,     0,     0,
       0,     0,   340,   341,   342,     0,   343,   344,   345,   346,
       0,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,   349,   350,   351,     0,     0,   352,     0,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   374,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   390,
     391,   392,     0,     0,   393,     0,   394,     0,   395,   396,
       0,   397,   398,     0,     0,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,     0,   564,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,     0,     0,   434,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,     0,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,   462,   463,   464,   465,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,   139,   491,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,  1074,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,     0,
     340,   341,   342,     0,   343,   344,   345,   346,     0,   347,
     348,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,   351,     0,     0,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,     0,   368,     0,   369,   370,   371,   372,
     373,     0,   374,   375,   376,     0,     0,   377,     0,     0,
       0,   378,   379,   380,   381,   382,     0,     0,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,   394,     0,   395,   396,     0,   397,
     398,     0,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
       0,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,   139,   491,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,  2031,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,   255,   256,   257,
       0,   258,     0,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,     0,   340,   341,
     342,     0,   343,   344,   345,   346,     0,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   350,   351,
       0,     0,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     374,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,   394,     0,   395,   396,     0,   397,   398,     0,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,     0,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,   462,   463,   464,
     465,     0,   466,   467,     0,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,   139,   491,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,  2367,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,   255,   256,   257,     0,   258,
       0,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,     0,     0,     0,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   350,   351,     0,     0,
     352,     0,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,     0,
     368,     0,   369,   370,   371,   372,   373,     0,   374,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
     394,     0,   395,   396,     0,   397,   398,     0,     0,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,  2368,
     460,   461,     0,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,   139,   491,   140,   141,   142,   143,   144,  2894,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,   255,   256,   257,     0,   258,     0,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,     0,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,     0,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   374,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,     0,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
     139,   491,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,   255,   256,   257,     0,   258,     0,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,   338,   339,     0,     0,
       0,     0,   340,   341,   342,     0,   343,   344,   345,   346,
       0,   347,   348,     0,     0,     0,     0,     0,     0,     0,
       0,   349,   350,   351,     0,     0,   352,     0,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,  2981,   368,     0,   369,   370,
     371,   372,   373,     0,   374,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   390,
     391,   392,     0,     0,   393,     0,   394,     0,   395,   396,
       0,   397,   398,     0,     0,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,     0,     0,   434,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,     0,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,   462,   463,   464,   465,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,   139,   491,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,     0,
     340,   341,   342,     0,   343,   344,   345,   346,     0,   347,
     348,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,   351,     0,     0,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,     0,   368,     0,   369,   370,   371,   372,
     373,     0,   374,   375,   376,     0,     0,   377,     0,     0,
       0,   378,   379,   380,   381,   382,     0,     0,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,   394,     0,   395,   396,     0,   397,
     398,     0,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
     136,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,   139,   491,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,  2367,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,   255,   256,   257,
       0,   258,     0,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,     0,   340,   341,
     342,     0,   343,   344,   345,   346,     0,   347,   348,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   350,   351,
       0,     0,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     374,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,   394,     0,   395,   396,     0,   397,   398,     0,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,     0,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,   462,   463,   464,
     465,     0,   466,   467,     0,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,   139,   491,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,   255,   256,   257,     0,   258,
       0,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,     0,     0,     0,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,   348,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   350,   351,     0,     0,
     352,     0,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,     0,
     368,     0,   369,   370,   371,   372,   373,     0,   374,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
     394,     0,   395,   396,     0,   397,   398,     0,     0,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,   139,   491,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,  1781,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,   255,   256,   257,     0,   258,     0,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,  1782,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,     0,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,   348,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,     0,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   374,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,     0,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
     139,   491,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,     0,     0,   148,   149,
     150,   151,   152,   153,     0,     0,  -329,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,     0,     0,     0,     0,   164,  3902,     0,
     165,   166,     0,   167,     0,     0,     0,     0,     0,   171,
     172,   173,   174,  3903,   176,   177,     0,   178,   179,     0,
       0,     0,     0,     0,     0,     0,   186,     0,   188,     0,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,     0,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,     0,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,     0,
       0,     0,   219,   220,   221,     0,  -299,  -299,   222,     0,
    -299,   224,     0,   225,   226,   227,     0,   228,   229,     0,
     230,   231,   232,   233,     0,     0,     0,     0,   236,   237,
     238,     0,     0,   239,   240,  3904,   241,   242,   243,     0,
       0,     0,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   256,   257,     0,     0,     0,     0,     0,     0,
     260,     0,     0,     0,   261,   262,   263,   264,  3905,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,     0,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,  3906,     0,     0,   277,     0,     0,     0,
     279,   280,     0,     0,   281,  3907,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,  -284,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,     0,   339,     0,     0,
       0,     0,   340,   341,   342,     0,   343,   344,   345,  3908,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   350,   351,     0,     0,     0,     0,   353,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,     0,
       0,     0,     0,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   374,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,     0,     0,   390,
       0,   392,  -284,     0,   393,     0,     0,     0,   395,     0,
       0,   397,   398,  3909,     0,     0,     0,   400,   401,   402,
     403,   404,   405,     0,   407,   408,     0,   409,     0,     0,
       0,     0,   411,   412,   413,     0,     0,     0,     0,   415,
       0,     0,     0,   416,     0,     0,   418,     0,   420,     0,
     421,     0,   423,     0,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,     0,   433,     0,     0,     0,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,     0,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,     0,   463,   464,   465,     0,   466,   467,     0,   468,
     469,     0,     0,     0,     0,     0,   472,     0,     0,   473,
       0,     0,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,     0,     0,  -284,     0,     0,
       0,   486,     0,     0,   488,     0,   490,     0,   139,   491,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,     0,     0,   148,   149,   150,   151,
     152,   153,     0,     0,  -329,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,     0,     0,     0,     0,   164,  3902,     0,   165,   166,
       0,   167,     0,     0,     0,     0,     0,   171,   172,   173,
     174,  3903,   176,   177,     0,   178,   179,     0,     0,     0,
       0,     0,     0,     0,   186,     0,   188,     0,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,     0,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,     0,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,     0,     0,     0,
     219,   220,   221,     0,  -320,     0,   222,     0,  -320,   224,
       0,   225,   226,   227,     0,   228,   229,     0,   230,   231,
     232,   233,     0,     0,     0,     0,   236,   237,   238,     0,
       0,   239,   240,  3904,   241,   242,   243,     0,     0,     0,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
     256,   257,     0,     0,     0,     0,     0,     0,   260,     0,
       0,     0,   261,   262,   263,   264,  3905,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
       0,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,  3906,     0,     0,   277,     0,     0,     0,   279,   280,
       0,     0,   281,  3907,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,  -284,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,     0,   339,     0,     0,     0,     0,
     340,   341,   342,     0,   343,   344,   345,  3908,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     350,   351,     0,     0,     0,     0,   353,   354,   355,     0,
     357,   358,   359,   360,   361,   362,   363,     0,     0,     0,
       0,   366,   367,     0,   368,     0,   369,   370,   371,   372,
     373,     0,   374,   375,   376,     0,     0,   377,     0,     0,
       0,   378,   379,   380,   381,   382,     0,     0,   383,   384,
     385,   386,   387,     0,   388,     0,     0,   390,     0,   392,
    -284,     0,   393,     0,     0,     0,   395,     0,     0,   397,
     398,  3909,     0,     0,     0,   400,   401,   402,   403,   404,
     405,     0,   407,   408,     0,   409,     0,     0,     0,     0,
     411,   412,   413,     0,     0,     0,     0,   415,     0,     0,
       0,   416,     0,     0,   418,     0,   420,     0,   421,     0,
     423,     0,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
       0,   433,     0,     0,     0,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
       0,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,     0,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
       0,     0,     0,     0,   472,     0,     0,   473,     0,     0,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,  -320,     0,  -284,     0,     0,     0,   486,
       0,     0,   488,     0,   490,     0,   139,   491,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,     0,     0,   148,   149,   150,   151,   152,   153,
       0,     0,  -329,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,     0,
       0,     0,     0,   164,  3902,     0,   165,   166,     0,   167,
       0,     0,     0,     0,     0,   171,   172,   173,   174,  3903,
     176,   177,     0,   178,   179,     0,     0,     0,     0,     0,
       0,     0,   186,     0,   188,     0,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,     0,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,     0,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,     0,     0,     0,   219,   220,
     221,     0,  -317,     0,   222,     0,  -317,   224,     0,   225,
     226,   227,     0,   228,   229,     0,   230,   231,   232,   233,
       0,     0,     0,     0,   236,   237,   238,     0,     0,   239,
     240,  3904,   241,   242,   243,     0,     0,     0,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,   256,   257,
       0,     0,     0,     0,     0,     0,   260,     0,     0,     0,
     261,   262,   263,   264,  3905,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,     0,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,  3906,
       0,     0,   277,     0,     0,     0,   279,   280,     0,     0,
     281,  3907,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,  -284,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,     0,   339,     0,     0,     0,     0,   340,   341,
     342,     0,   343,   344,   345,  3908,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   350,   351,
       0,     0,     0,     0,   353,   354,   355,     0,   357,   358,
     359,   360,   361,   362,   363,     0,     0,     0,     0,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     374,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,     0,     0,   390,     0,   392,  -284,     0,
     393,     0,     0,     0,   395,     0,     0,   397,   398,  3909,
       0,     0,     0,   400,   401,   402,   403,   404,   405,     0,
     407,   408,     0,   409,     0,     0,     0,     0,   411,   412,
     413,     0,     0,     0,     0,   415,     0,     0,     0,   416,
       0,     0,   418,     0,   420,     0,   421,     0,   423,     0,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,     0,   433,
       0,     0,     0,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,     0,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,     0,   463,   464,
     465,     0,   466,   467,     0,   468,   469,     0,     0,     0,
       0,     0,   472,     0,     0,   473,     0,     0,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,  -317,     0,  -284,     0,     0,     0,   486,     0,     0,
     488,     0,   490,     0,   139,   491,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
       0,     0,   148,   149,   150,   151,   152,   153,     0,     0,
    -329,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,     0,     0,     0,
       0,   164,  3902,     0,   165,   166,     0,   167,     0,     0,
       0,     0,     0,   171,   172,   173,   174,  3903,   176,   177,
       0,   178,   179,     0,     0,     0,     0,     0,     0,     0,
     186,     0,   188,     0,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,     0,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,     0,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,     0,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,  4242,   224,     0,   225,   226,   227,
       0,   228,   229,     0,   230,   231,   232,   233,     0,     0,
       0,     0,   236,   237,   238,     0,     0,   239,   240,  3904,
     241,   242,   243,     0,     0,     0,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,   256,   257,     0,     0,
       0,     0,     0,     0,   260,     0,     0,     0,   261,   262,
     263,   264,  3905,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,     0,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,  3906,     0,     0,
     277,     0,     0,     0,   279,   280,     0,     0,   281,  3907,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,  -284,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
       0,   339,     0,     0,     0,     0,   340,   341,   342,     0,
     343,   344,   345,  3908,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   350,   351,     0,     0,
       0,     0,   353,   354,   355,     0,   357,   358,   359,   360,
     361,   362,   363,     0,     0,     0,     0,   366,   367,     0,
     368,     0,   369,   370,   371,   372,   373,     0,   374,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,     0,     0,   390,     0,   392,  -284,     0,   393,     0,
       0,     0,   395,     0,     0,   397,   398,  3909,     0,     0,
       0,   400,   401,   402,   403,   404,   405,     0,   407,   408,
       0,   409,     0,     0,     0,     0,   411,   412,   413,     0,
       0,     0,     0,   415,     0,     0,     0,   416,     0,     0,
     418,     0,   420,     0,   421,     0,   423,     0,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,     0,   433,     0,     0,
       0,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,     0,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,     0,     0,     0,     0,
     472,     0,     0,   473,     0,     0,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,  -284,     0,     0,     0,   486,     0,     0,   488,     0,
     490,     0,   139,   491,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,     0,     0,
     148,   149,   150,   151,   152,   153,     0,     0,  -329,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,     0,     0,     0,     0,   164,
    3902,     0,   165,   166,     0,   167,     0,     0,     0,     0,
       0,   171,   172,   173,   174,  3903,   176,   177,     0,   178,
     179,     0,     0,     0,     0,     0,     0,     0,   186,     0,
     188,     0,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,     0,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,     0,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,     0,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,  -322,   224,     0,   225,   226,   227,     0,   228,
     229,     0,   230,   231,   232,   233,     0,     0,     0,     0,
     236,   237,   238,     0,     0,   239,   240,  3904,   241,   242,
     243,     0,     0,     0,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   256,   257,     0,     0,     0,     0,
       0,     0,   260,     0,     0,     0,   261,   262,   263,   264,
    3905,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,     0,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,  3906,     0,     0,   277,     0,
       0,     0,   279,   280,     0,     0,   281,  3907,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,  -284,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,     0,   339,
       0,     0,     0,     0,   340,   341,   342,     0,   343,   344,
     345,  3908,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   350,   351,     0,     0,     0,     0,
     353,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,     0,     0,     0,     0,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   374,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,     0,
       0,   390,     0,   392,  -284,     0,   393,     0,     0,     0,
     395,     0,     0,   397,   398,  3909,     0,     0,     0,   400,
     401,   402,   403,   404,   405,     0,   407,   408,     0,   409,
       0,     0,     0,     0,   411,   412,   413,     0,     0,     0,
       0,   415,     0,     0,     0,   416,     0,     0,   418,     0,
     420,     0,   421,     0,   423,     0,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,     0,   433,     0,     0,     0,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,     0,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,     0,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,     0,     0,     0,     0,   472,     0,
       0,   473,     0,     0,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,  -284,
       0,     0,     0,   486,     0,     0,   488,     0,   490,     0,
     139,   491,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,     0,     0,   148,   149,
     150,   151,   152,   153,     0,     0,  -329,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,     0,     0,     0,     0,   164,  3902,     0,
     165,   166,     0,   167,     0,     0,     0,     0,     0,   171,
     172,   173,   174,  3903,   176,   177,     0,   178,   179,     0,
       0,     0,     0,     0,     0,     0,   186,     0,   188,     0,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,     0,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,     0,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,     0,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
    4357,   224,     0,   225,   226,   227,     0,   228,   229,     0,
     230,   231,   232,   233,     0,     0,     0,     0,   236,   237,
     238,     0,     0,   239,   240,  3904,   241,   242,   243,     0,
       0,     0,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   256,   257,     0,     0,     0,     0,     0,     0,
     260,     0,     0,     0,   261,   262,   263,   264,  3905,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,     0,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,  3906,     0,     0,   277,     0,     0,     0,
     279,   280,     0,     0,   281,  3907,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,  -284,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,     0,   339,     0,     0,
       0,     0,   340,   341,   342,     0,   343,   344,   345,  3908,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   350,   351,     0,     0,     0,     0,   353,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,     0,
       0,     0,     0,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   374,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,     0,     0,   390,
       0,   392,  -284,     0,   393,     0,     0,     0,   395,     0,
       0,   397,   398,  3909,     0,     0,     0,   400,   401,   402,
     403,   404,   405,     0,   407,   408,     0,   409,     0,     0,
       0,     0,   411,   412,   413,     0,     0,     0,     0,   415,
       0,     0,     0,   416,     0,     0,   418,     0,   420,     0,
     421,     0,   423,     0,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,     0,   433,     0,     0,     0,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,     0,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,     0,   463,   464,   465,     0,   466,   467,     0,   468,
     469,     0,     0,     0,     0,     0,   472,     0,     0,   473,
       0,     0,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,     0,     0,  -284,     0,     0,
       0,   486,     0,     0,   488,     0,   490,     0,   139,   491,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,     0,     0,   148,   149,   150,   151,
     152,   153,     0,     0,  -329,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,     0,     0,     0,     0,   164,  3902,     0,   165,   166,
       0,   167,     0,     0,     0,     0,     0,   171,   172,   173,
     174,  3903,   176,   177,     0,   178,   179,     0,     0,     0,
       0,     0,     0,     0,   186,     0,   188,     0,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,     0,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,     0,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,     0,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,  4406,   224,
       0,   225,   226,   227,     0,   228,   229,     0,   230,   231,
     232,   233,     0,     0,     0,     0,   236,   237,   238,     0,
       0,   239,   240,  3904,   241,   242,   243,     0,     0,     0,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
     256,   257,     0,     0,     0,     0,     0,     0,   260,     0,
       0,     0,   261,   262,   263,   264,  3905,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
       0,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,  3906,     0,     0,   277,     0,     0,     0,   279,   280,
       0,     0,   281,  3907,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,  -284,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,     0,   339,     0,     0,     0,     0,
     340,   341,   342,     0,   343,   344,   345,  3908,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     350,   351,     0,     0,     0,     0,   353,   354,   355,     0,
     357,   358,   359,   360,   361,   362,   363,     0,     0,     0,
       0,   366,   367,     0,   368,     0,   369,   370,   371,   372,
     373,     0,   374,   375,   376,     0,     0,   377,     0,     0,
       0,   378,   379,   380,   381,   382,     0,     0,   383,   384,
     385,   386,   387,     0,   388,     0,     0,   390,     0,   392,
    -284,     0,   393,     0,     0,     0,   395,     0,     0,   397,
     398,  3909,     0,     0,     0,   400,   401,   402,   403,   404,
     405,     0,   407,   408,     0,   409,     0,     0,     0,     0,
     411,   412,   413,     0,     0,     0,     0,   415,     0,     0,
       0,   416,     0,     0,   418,     0,   420,     0,   421,     0,
     423,     0,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
       0,   433,     0,     0,     0,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
       0,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,     0,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
       0,     0,     0,     0,   472,     0,     0,   473,     0,     0,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,  -284,     0,     0,     0,   486,
       0,     0,   488,     0,   490,     0,   139,   491,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,     0,     0,   148,   149,   150,   151,   152,   153,
       0,     0,  -329,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,     0,
       0,     0,     0,   164,  3902,     0,   165,   166,     0,   167,
       0,     0,     0,     0,     0,   171,   172,   173,   174,  3903,
     176,   177,     0,   178,   179,     0,     0,     0,     0,     0,
       0,     0,   186,     0,   188,     0,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,     0,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,     0,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,     0,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,  -303,   224,     0,   225,
     226,   227,     0,   228,   229,     0,   230,   231,   232,   233,
       0,     0,     0,     0,   236,   237,   238,     0,     0,   239,
     240,  3904,   241,   242,   243,     0,     0,     0,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,   256,   257,
       0,     0,     0,     0,     0,     0,   260,     0,     0,     0,
     261,   262,   263,   264,  3905,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,     0,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,  3906,
       0,     0,   277,     0,     0,     0,   279,   280,     0,     0,
     281,  3907,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,  -284,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,     0,   320,     0,   321,     0,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,     0,   339,     0,     0,     0,     0,   340,   341,
     342,     0,   343,   344,   345,  3908,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   350,   351,
       0,     0,     0,     0,   353,   354,   355,     0,   357,   358,
     359,   360,   361,   362,   363,     0,     0,     0,     0,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     374,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,     0,     0,   390,     0,   392,  -284,     0,
     393,     0,     0,     0,   395,     0,     0,   397,   398,  3909,
       0,     0,     0,   400,   401,   402,   403,   404,   405,     0,
     407,   408,     0,   409,     0,     0,     0,     0,   411,   412,
     413,     0,     0,     0,     0,   415,     0,     0,     0,   416,
       0,     0,   418,     0,   420,     0,   421,     0,   423,     0,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,     0,   433,
       0,     0,     0,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,     0,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,     0,   463,   464,
     465,     0,   466,   467,     0,   468,   469,     0,     0,     0,
       0,     0,   472,     0,     0,   473,     0,     0,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,     0,     0,  -284,     0,     0,     0,   486,     0,     0,
     488,     0,   490,     0,   139,   491,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
       0,     0,   148,   149,   150,   151,   152,   153,     0,     0,
    -329,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,     0,     0,     0,
       0,   164,  3902,     0,   165,   166,     0,   167,     0,     0,
       0,     0,     0,   171,   172,   173,   174,  3903,   176,   177,
       0,   178,   179,     0,     0,     0,     0,     0,     0,     0,
     186,     0,   188,     0,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,     0,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,     0,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,     0,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,     0,   224,     0,   225,   226,   227,
       0,   228,   229,     0,   230,   231,   232,   233,     0,     0,
       0,     0,   236,   237,   238,     0,     0,   239,   240,  3904,
     241,   242,   243,     0,     0,     0,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,   256,   257,     0,     0,
       0,     0,     0,     0,   260,     0,     0,     0,   261,   262,
     263,   264,  3905,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,     0,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,  3906,     0,     0,
     277,     0,     0,     0,   279,   280,     0,     0,   281,  3907,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,  -284,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
       0,   339,     0,     0,     0,     0,   340,   341,   342,     0,
     343,   344,   345,  3908,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   350,   351,     0,     0,
       0,     0,   353,   354,   355,     0,   357,   358,   359,   360,
     361,   362,   363,     0,     0,     0,     0,   366,   367,     0,
     368,     0,   369,   370,   371,   372,   373,     0,   374,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,     0,     0,   390,     0,   392,  -284,     0,   393,     0,
       0,     0,   395,     0,     0,   397,   398,  3909,     0,     0,
       0,   400,   401,   402,   403,   404,   405,     0,   407,   408,
       0,   409,     0,     0,     0,     0,   411,   412,   413,     0,
       0,     0,     0,   415,     0,     0,     0,   416,     0,     0,
     418,     0,   420,     0,   421,     0,   423,     0,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,     0,   433,     0,     0,
       0,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,     0,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,     0,     0,     0,     0,
     472,     0,     0,   473,     0,     0,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,  -284,     0,     0,     0,   486,     0,     0,   488,     0,
     490,     0,   139,   491,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,     0,     0,
     148,   149,   150,   151,   152,   153,     0,     0,  -329,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,     0,     0,     0,     0,   164,
    3902,     0,   165,   166,     0,   167,     0,     0,     0,     0,
       0,   171,   172,   173,   174,  3903,   176,   177,     0,   178,
     179,     0,     0,     0,     0,     0,     0,     0,   186,     0,
     188,     0,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,     0,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,     0,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,     0,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,     0,   224,     0,   225,   226,   227,     0,   228,
     229,     0,   230,   231,   232,   233,     0,     0,     0,     0,
     236,   237,   238,     0,     0,   239,   240,  3904,   241,   242,
     243,     0,     0,     0,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   256,   257,     0,     0,     0,     0,
       0,     0,   260,     0,     0,     0,   261,   262,   263,   264,
    3905,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,     0,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,  3906,     0,     0,   277,     0,
       0,     0,   279,   280,     0,     0,   281,  3907,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,  -284,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,     0,   339,
       0,     0,     0,     0,   340,   341,   342,     0,   343,   344,
     345,  3908,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   350,   351,     0,     0,     0,     0,
     353,   354,   355,     0,   357,   358,   359,   360,   361,   362,
     363,     0,     0,     0,     0,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   374,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,     0,
       0,   390,     0,   392,  -284,     0,   393,     0,     0,     0,
     395,     0,     0,   397,   398,  3909,     0,     0,     0,   400,
     401,   402,   403,   404,   405,     0,   407,   408,     0,   409,
       0,     0,     0,     0,   411,   412,   413,     0,     0,     0,
       0,   415,     0,     0,     0,   416,     0,     0,   418,     0,
     420,     0,   421,     0,   423,     0,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,     0,   433,     0,     0,     0,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,     0,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,     0,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,     0,     0,     0,     0,   472,     0,
       0,  4245,     0,     0,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,  -284,
       0,     0,     0,   486,     0,     0,   488,     0,   490,     0,
     139,   491,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,     0,     0,   148,   149,
     150,   151,   152,   153,     0,     0,     0,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,     0,     0,     0,     0,   164,     0,     0,
     165,   166,     0,   167,     0,     0,     0,     0,     0,   171,
     172,   173,   174,     0,   176,   177,     0,   178,   179,     0,
       0,     0,     0,     0,     0,     0,   186,     0,   188,     0,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,     0,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,     0,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,     0,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
       0,   224,     0,   225,   226,   227,     0,   228,   229,     0,
     230,   231,   232,   233,     0,     0,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,     0,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   256,   257,     0,     0,     0,     0,     0,     0,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,     0,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,     0,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,     0,   339,     0,     0,
       0,     0,   340,   341,   342,     0,   343,   344,   345,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   350,   351,     0,     0,     0,     0,   353,   354,
     355,     0,   357,   358,   359,   360,   361,   362,   363,     0,
       0,     0,     0,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   374,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,     0,     0,   390,
       0,   392,     0,     0,   393,     0,     0,     0,   395,     0,
       0,   397,   398,     0,     0,     0,     0,   400,   401,   402,
     403,   404,   405,     0,   407,   408,     0,   409,     0,     0,
       0,     0,   411,   412,   413,     0,     0,     0,     0,   415,
       0,     0,     0,   416,     0,     0,   418,     0,   420,     0,
     421,     0,   423,     0,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,     0,   433,     0,     0,     0,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,     0,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,     0,   463,   464,   465,     0,   466,   467,     0,   468,
     469,     0,     0,     0,     0,     0,   472,     0,     0,   473,
       0,     0,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,     0,     0,     0,     0,     0,
       0,   486,     0,     0,   488,     0,   490,     0,     0,   491
};

static const yytype_int16 yycheck[] =
{
       6,   648,   577,   989,   988,   577,  1179,   696,   600,   899,
     701,  1106,  1697,    19,     4,   124,    22,   554,  1836,  1837,
    1078,  1179,  1149,     6,   675,  1125,    32,  1804,  1489,   722,
    2024,   926,   813,    39,  1072,  1073,    42,  1390,  1311,  1947,
      46,   614,  1390,  1824,   951,    20,  2488,  2529,    54,   522,
    2059,  1200,  1487,  3218,    29,  2337,   951,  2128,  1242,  1208,
    2298,    36,  2418,  2597,  2773,   993,   757,  2611,  2828,   760,
    2141,   642,  1964,  2406,   645,  1116,  1478,  1319,   767,  1964,
    1966,    22,  1209,  1210,   993,  1470,  1213,  1214,  1215,  1216,
      96,  1218,  1219,  1220,  1221,  1222,  1223,  1224,  1225,  1824,
    2227,  1895,  2142,  3224,   662,  2086,  2086,  2973,  2399,  2628,
    2483,  1919,  1920,   119,  2350,   121,  2407,   123,   124,   125,
     657,   658,  2360,  2107,   775,   776,   777,  2270,  1936,  1967,
    3454,  2021,    17,  1971,   882,  3106,   787,  2045,   121,   786,
     123,    19,  2050,    25,  1982,  1953,  1954,  1532,  2056,  2057,
    1460,    51,    19,  2061,  1992,    96,    17,    16,    17,    30,
    3242,  1969,  1970,    19,  1972,    34,    47,  1975,  1976,    16,
      17,  1979,    19,    16,    17,  3501,  1984,  1401,   924,   953,
    1988,  1989,  1990,  1991,    73,  3281,  3282,  1995,  1996,  3285,
    1998,    82,  2462,  2688,  2086,  1419,  2004,   131,   189,  2007,
    2008,  2086,  2010,  1427,  1428,  2221,   952,    28,  3304,    66,
    1835,  2111,  2599,   112,    35,  3311,    16,    17,    21,   967,
      36,    83,  3498,  2625,  2626,  2465,   114,    46,    36,  2631,
     187,  2633,   191,   194,  2451,    68,   174,   265,   282,  2447,
    2448,    56,   815,  2963,    71,    43,  3938,   145,    16,    17,
      60,   201,  4031,  2884,   224,   358,    59,    60,   207,   339,
      71,   192,  2070,  2071,  2072,  2073,  4063,   224,    82,   309,
      16,    17,   157,   249,   140,   268,   277,   359,  1956,   157,
     440,  3511,   447,   128,   147,  3450,  1470,    21,    25,  1910,
    2075,   249,   128,    10,   364,     8,    88,  3393,   513,   650,
      34,    23,   537,   261,   877,   387,   995,  2760,   224,   182,
      16,    17,   157,   134,    48,  1938,   128,  4025,    16,    17,
      12,   157,   272,   129,    12,    59,    60,  2377,   129,   266,
      41,   332,   391,   351,   387,   391,   429,   482,    16,    17,
     228,   191,   505,   208,   208,   157,   174,    21,  1532,   231,
      19,    16,    17,   132,   165,    16,    17,  2565,  2566,   569,
      34,  3686,   603,   280,    16,    17,  3642,   283,   228,   151,
     537,    16,    17,   536,    48,  4067,  2370,  2371,  2372,   509,
      16,    17,   255,   298,    40,    59,    60,   252,   252,   208,
     631,   191,   252,   437,  2847,   211,   212,  3722,   507,   228,
     530,   636,   151,   211,   212,   550,   220,  2391,   222,   606,
     503,    64,   430,  4121,   132,  3691,   266,    16,    17,  2469,
     630,   189,  1115,   305,   135,    16,    17,    16,    17,   488,
      59,    60,   488,   370,   543,   241,  1129,   251,   355,   151,
     241,   402,  3538,  2493,  2494,   660,   168,  1018,   314,   141,
    2573,  3547,   383,   141,  1440,   537,  2356,   537,  1239,   810,
    1031,   454,    70,    70,    16,    17,    16,    17,   438,   182,
     446,   631,   637,   411,   163,  3571,    16,    17,   351,  3803,
    3576,    16,    17,   563,   537,   191,    51,    16,    17,    16,
      17,   283,   450,  3614,   231,   411,    73,    16,    17,    16,
      17,   507,  2835,   509,  2412,    16,    17,   508,  4287,  4288,
    3740,   374,  3677,  1050,  1051,  1052,  4313,   235,  2766,   469,
     526,  1982,   369,   146,   530,   372,   369,  3247,   631,   372,
      16,    17,  1460,   539,    16,    17,   351,   543,   487,   545,
     338,  2777,  2778,  2779,   371,   445,  2902,    86,   187,   629,
     481,  1460,   558,  1938,  1302,  1202,   546,  1452,   602,  2451,
     371,  1212,  2470,  1747,  2472,  2405,  2451,   637,   305,   369,
     531,  2479,   372,   601,   472,    16,    17,  2467,  1229,  1964,
     586,  2471,   415,   411,  2492,   224,  1334,    16,    17,   629,
    2498,  2499,  2573,  2573,   247,  2485,  2486,   587,  1725,   605,
    3231,   369,  3723,  1531,   372,  2495,  2514,  2515,   614,  1736,
     616,  2013,  1739,  2883,   283,   352,  2886,  2887,  1091,  1092,
    2279,   627,  1531,   369,   581,   482,   372,   633,   115,  2613,
    2538,   118,   638,  2523,   640,  2905,   642,  3024,   457,   645,
     631,  2881,   580,   649,   650,  1118,    16,    17,   654,  1395,
     633,  1425,  1398,  1126,  3149,  1128,  2873,  1403,   664,   665,
     666,  3421,   144,   369,   670,  1889,   372,  1140,  1141,  1142,
    2478,   369,   631,  2689,   372,  1148,  1247,   548,  1719,   570,
     501,  2573,  2490,  1429,  1430,   402,   627,   548,  2573,  1470,
    2075,   369,   548,  3969,   372,  4387,   595,   638,  3819,   561,
      63,  2086,  4028,   812,   369,  2595,   335,   372,   369,  1804,
    2610,   372,  1285,   594,   535,   582,   722,   369,   603,  3801,
     372,   537,   603,   611,   369,   659,  3221,   372,  3849,   537,
    4006,   631,   553,   369,  3705,  4059,   372,  2362,  3020,   617,
     629,    16,    17,  1314,  3263,  3264,   415,    16,    17,   631,
     635,  1532,  3271,   612,  1938,  3274,  3275,   635,   387,  2069,
     629,   617,  1333,  2571,   567,   612,  2909,   588,  1516,   612,
     369,  2449,  3291,   372,   780,   512,   782,  2398,   369,   589,
     369,   372,  2567,   372,  1357,   502,  3305,  2564,  2996,   603,
     635,   634,  3311,  3312,  3313,  3314,   575,  2781,  2782,   635,
     806,   807,   808,   631,   810,   811,   812,  2430,   814,   815,
      16,    17,   612,  2807,    16,    17,   925,   369,   600,   369,
     372,  1379,   372,   635,   807,   188,  1399,   404,   811,   369,
     630,   814,   372,   567,   369,  3956,   553,   372,    16,    17,
     369,   464,   369,   372,   612,   372,   852,    16,    17,  2843,
     369,   600,   369,   372,  4178,   372,   512,   575,   369,   865,
     597,   372,   630,  3265,   517,  3384,   612,  3269,    16,    17,
    2305,   877,   878,  3155,  2997,  3208,   882,   533,   595,  3212,
     445,   871,  3255,   369,   630,   631,   372,   369,   600,    51,
     372,  2075,  1464,   567,  2712,    16,    17,  3299,  3300,  3301,
     508,   508,  2086,   559,   582,  3307,   612,    16,    17,   598,
    3158,    16,    17,  3315,   612,    16,    17,  3208,   592,   925,
     459,  3212,    16,    17,   865,   631,    11,  3163,   369,  3167,
    2748,   372,  3798,   631,   612,   189,  4032,   878,  4034,   608,
     369,   540,   581,   372,    63,    16,    17,   612,   617,  3493,
     527,   612,  1645,   631,   215,   629,    16,    17,  3228,  4080,
     612,   967,    16,    17,   385,   630,   631,   612,  3047,   630,
     631,   157,    34,   370,   283,   552,   612,  2754,  1885,   631,
    3382,  2873,  1540,   989,   128,  4106,   631,   355,  2873,  3391,
    1885,    16,    17,  2774,   630,   631,  2836,  2837,   819,   369,
     191,   349,   372,  2464,  2465,    12,   629,   636,  1915,    90,
     633,   266,  1018,   612,    16,    17,  2997,  2997,   138,  3059,
    1915,   612,  4187,   612,   177,  1031,   157,   157,  2381,   629,
    2383,  2384,  2826,   153,   233,  2383,  2384,   400,   224,  2166,
     631,   630,   631,   242,   129,  2430,  3030,    16,    17,  2774,
     398,   174,    16,    17,   541,  2113,   159,   544,   879,   167,
     612,  2947,   612,   154,  1070,   224,  2451,   420,  1074,  2728,
    2729,  2730,   612,   164,   352,  2317,  3203,   612,   630,   631,
     630,   631,  1191,   612,   231,   612,   194,  1738,   367,   558,
     630,   631,  2241,   612,   369,   612,   631,   372,    16,    17,
     369,   612,   631,   372,   631,  2997,   415,    16,    17,  1115,
    2948,   630,  2997,   582,   631,   370,   204,  2519,   589,  1228,
     631,   592,  2899,  1129,    16,    17,   612,   458,   231,  1070,
     612,  1824,  1878,  1074,   141,   266,   266,  2410,   388,    16,
      17,  2069,  1888,  2828,   630,  1891,  1892,  2247,  2248,  3693,
     482,   527,  3485,  3486,   345,   531,   194,  1938,  3152,  3055,
    2069,   249,   125,   369,  2337,   125,   372,   369,  2392,    64,
     372,   612,   386,  1179,  3906,  3907,   375,   464,    16,    17,
    1753,   797,  2567,   612,  1755,  1191,  2313,    52,  2573,   351,
     631,   369,   464,   315,   372,   348,   349,  3191,    63,  2240,
     369,   354,   631,   372,   363,   352,  1743,   570,   629,  2250,
     354,   564,   531,  1322,   189,  1788,    16,    17,   432,   473,
     298,   369,  1228,     0,   372,   125,    25,  1233,    16,    17,
      16,    17,  1238,  3217,   631,  2408,   298,  3316,  3947,  1812,
    1813,  1247,   612,    16,    17,  1816,  2430,   508,   369,   352,
    2408,   372,   438,  4013,   622,    16,    17,   464,   126,    25,
     369,   631,  1799,   372,   369,    16,    17,   372,   369,   623,
    3804,   372,   157,  1845,   890,   369,   630,   368,   372,  1285,
      16,    17,   370,   445,   184,    16,    17,   372,   411,    16,
      17,  1297,    19,  1299,  2075,  3777,  1302,  1238,   369,   608,
     275,   372,  2737,  3374,   423,  2086,  4471,   397,  1314,   369,
     472,   211,   372,  1303,   569,   369,  1322,   280,   372,   597,
     280,    16,    17,   338,  2497,    16,    17,  1333,  1334,   410,
    3612,   617,   410,    16,    17,   657,   658,   612,    12,  2497,
      16,    17,   629,   612,   369,   360,   596,   372,  3238,    16,
      17,  1357,   247,   191,  1360,   480,   631,   629,  1467,   617,
     159,   630,  1368,   617,   402,   512,   177,   369,   204,  3259,
     372,   531,   240,    12,  1380,  1381,  1382,  1383,  1384,  1385,
     280,    16,    17,  2567,  1390,  1375,  3282,    16,    17,  2573,
    1396,  1397,   355,  1399,   473,   355,  1402,  1380,  1381,  1382,
     369,  1384,   555,   372,   482,   369,   612,   272,   372,   512,
     612,    16,    17,   535,  1397,   464,  1422,   631,   571,  1402,
    2881,   130,   629,   266,   464,   631,  3334,    16,    17,   631,
     464,   630,   231,    20,   612,    16,    17,    16,    17,   167,
     562,   191,  1383,   612,  1385,   536,    16,    17,   573,   635,
     597,   369,   347,   631,   372,   355,   339,   580,    16,    17,
     369,  1467,   631,   372,   612,   231,  2819,   141,   629,  2564,
     601,   601,    82,    12,   129,  1481,   637,   369,  1484,  1485,
     372,  1422,   630,  1473,  3478,   272,    96,  2948,  2873,   239,
     615,   612,   369,   531,   597,   372,  3852,  1113,    32,    16,
      17,   637,   141,   612,   635,   635,   305,   612,   631,   630,
    1516,   612,    16,    17,    16,    17,  4248,  4249,   612,    16,
      17,   142,   631,  3805,    16,    17,   631,   370,   631,   630,
    1536,   369,  1538,  1539,   372,  1541,  1542,   631,   617,   305,
    1481,   612,   111,   354,  1485,   464,   133,  1163,  1554,   417,
    1556,  1167,   612,   352,  2612,  1538,  1539,  3628,   612,  2708,
     631,   548,    16,    17,    17,   242,   353,   582,   464,   369,
     629,   631,   372,   402,   283,  3569,   223,   631,   637,  4192,
     629,   369,  4195,   369,   372,   262,   372,   612,  2761,   629,
     464,   464,  4074,  2244,   508,   629,   369,   560,   167,   372,
     560,   204,   141,  2761,    16,    17,   631,   167,   369,   504,
     612,   372,  2997,  3851,    16,    17,  4098,  4099,   369,   339,
     370,   372,   517,    16,    17,   194,   507,   524,   525,   631,
     511,   528,   529,   369,   194,   532,   372,   534,   369,  1645,
    1646,   372,   369,   612,   254,   372,   514,  1756,   612,  2430,
     464,  2342,  2343,  2344,   537,    16,    17,    16,    17,  2754,
     560,   531,   631,  2136,    16,    17,   630,   586,   587,   228,
    2143,    16,    17,   502,   369,   623,   590,   372,   369,   534,
     563,   372,   630,  2156,    16,    17,   369,    82,   130,   372,
      89,    16,    17,   369,   612,  1017,   372,  1703,  3133,    16,
      17,  2516,   369,   612,  4317,   372,   327,   228,   242,   108,
     629,    17,   630,   512,   609,   325,  2189,   191,   286,   287,
     612,   630,   228,  3500,   553,  3574,  3735,  3736,  3577,  3510,
     630,   265,   223,   629,   369,   612,  3421,   372,   630,  1745,
     369,   351,   204,   372,   555,   364,  1068,  1753,   339,  1755,
    1756,    16,    17,   630,    19,   629,   629,   239,    16,    17,
     571,  1767,    47,  1769,   369,  4207,   595,   372,   242,  1775,
    1776,   213,  1778,   191,   612,  3556,   472,  2350,    16,    17,
     369,  3630,  1788,   372,  2257,  1791,  2567,    31,   369,  1795,
     369,   372,  2573,   372,    16,    17,    16,    17,   597,   369,
     348,   349,   372,   413,  2899,   587,  1812,  1813,  1814,  1815,
    1816,   369,   612,  2997,   372,   629,   283,   537,  1824,   633,
    1810,  1827,  1828,  1829,   612,   220,   612,   222,   267,   603,
     630,   270,   631,   402,  1775,  1776,   142,  1778,  1844,   612,
      84,   283,   630,   563,   630,   580,   581,  1853,   583,    82,
    1791,   612,   369,   582,  1795,   372,   251,   630,  1848,   427,
     428,   612,    58,   630,   540,   369,   635,   369,   372,   630,
     372,     8,   369,  1814,  1815,   372,   612,   369,   637,   630,
     372,   612,   576,  2773,  1890,   612,  1827,  1828,  1829,   582,
     424,    39,   502,    30,   630,   366,  1902,   155,    46,   630,
     142,   502,   631,  1909,    82,  2477,   161,  2814,   637,   629,
     629,   155,    59,    60,   188,   369,  2823,   612,   372,  2814,
     817,   612,   438,    25,    71,  3833,  3834,  3835,  2823,   612,
     220,  3204,   222,  1923,  3034,   630,   612,   630,   631,   630,
     195,   201,  1932,  1933,   464,   612,   537,   630,  4015,  1890,
    4017,     6,   472,  1943,  1944,  1945,  1946,   369,  1948,  1949,
     372,  3955,   531,   630,  3064,  3065,   629,   369,  1909,   191,
     372,   191,   563,   412,    11,  2084,   369,   612,   174,   372,
      82,  2090,   178,   612,   553,  3085,  3159,   220,   233,   222,
     245,   629,    12,   189,   527,   630,   629,   242,   531,   629,
    2006,   630,   257,   624,   625,   626,   627,   612,   369,  3362,
     369,   372,   272,   372,  3362,  2021,   629,   369,   251,  2128,
     372,   327,    42,   612,   369,   630,   595,   372,   537,  1005,
    1006,   612,  2141,   612,   629,  3787,   629,   369,   629,   582,
     372,   630,   612,  3216,   369,   578,   629,   372,   171,   630,
     360,   630,   369,   231,   612,   372,  2046,  2047,  3216,  2049,
     630,  2051,  2052,  2053,  2054,  2055,   586,   587,  2058,  1045,
    2060,   637,   630,   175,  2889,   629,  3249,    97,  2084,  2825,
     125,  2774,   102,   629,  2090,   327,  2092,   342,   631,  2095,
     631,  3249,  4086,   629,   637,   612,  2102,  2103,  2104,  2105,
     125,   361,  2108,   128,   369,  2920,   629,   372,   612,   629,
     612,   369,  2095,   630,   372,   612,  2931,   313,   629,  2934,
     612,    11,  2128,   512,  2233,   453,   630,   415,   630,   231,
     375,   369,    12,   630,   372,  2141,    25,  1286,   630,   184,
    1289,  3949,   629,  1292,   604,   605,   629,   369,   436,   369,
     372,   629,   372,   397,  3906,  3907,  2265,   453,   612,   184,
      21,  2102,  2103,  2104,  4072,  2980,  3984,   125,   346,   475,
     476,   631,   629,    34,   352,   419,   630,  2714,   527,   467,
     630,   631,   531,  2756,  3992,  3993,   211,    48,  3996,  3997,
    3998,  3999,   629,    82,   629,  3233,  3234,   629,    59,    60,
     612,   630,   631,   305,  2777,  2778,  2779,   451,  3985,   469,
     612,   582,    17,  3358,  3359,   411,  2997,   401,   630,   612,
    3320,   111,   629,   540,   244,   527,   184,  2233,   630,   531,
    2703,  2804,   528,   629,    26,   280,   367,   630,   534,   129,
    3811,  3812,    32,   421,   346,   629,   595,   630,   631,   629,
     352,   612,  2258,   612,   629,   280,   629,  3718,  3719,  2265,
     612,   141,  2371,   507,  2373,  2374,   629,   612,   527,   630,
     159,   630,   629,  2279,   629,    12,  3449,   167,   630,    71,
     612,   629,   578,    58,   631,   630,   175,   612,  4096,  4097,
      82,  3449,   224,   595,   314,   612,   629,  4105,   630,   595,
    4052,  4053,  3360,   629,   194,   630,  2312,   629,  2417,  2418,
     355,   630,   631,   629,   620,   621,   622,   623,   624,   625,
     626,   627,   280,  4100,   629,   558,   630,   631,  4013,   629,
     355,  2337,   629,   213,   512,  3271,   128,   142,  3274,  3275,
      16,    17,   231,   629,  2350,    34,   629,   612,   629,   582,
     630,   631,   142,   629,   612,  3291,   629,  2363,   378,  2365,
     629,  3506,   617,   618,   619,  2371,   629,  2373,  2374,   630,
     631,    60,   629,  2363,   612,  2381,   629,  2383,  2384,  2488,
     622,   623,   624,   625,   626,   627,   276,   565,   629,  3960,
     612,   360,   612,  3964,  4146,   630,   631,   355,   735,   174,
     630,   631,  2408,   178,   141,  3500,   630,   631,   629,  4161,
     512,  2417,  2418,   629,   189,  3401,   305,   629,   755,   597,
     142,  1776,  4174,  1778,    16,    17,   115,   629,   220,   118,
     222,   768,   769,   593,   594,   631,   596,   126,   598,   630,
     631,   630,   631,   119,   120,   121,   122,   123,  3384,    82,
     104,  2457,   242,   629,   143,   629,  2462,   346,   630,   631,
     252,  2467,   629,   352,   629,  2471,   629,  2473,   629,   202,
     490,  4465,  1827,  1828,  1829,   265,   213,  2483,   629,  2485,
    2486,   488,  2488,  2458,  4236,  2475,  2476,    19,   629,  2495,
     629,  2497,   360,  2468,   629,   597,  4248,  4249,   111,  2474,
     629,  2507,    59,    60,   524,   630,   631,   629,   125,     6,
    2516,  2501,   402,    19,   629,   560,   629,  2523,  2524,   629,
      26,  2496,   327,  2529,   630,   631,   159,  2502,   151,   152,
    2536,   629,  3183,  2508,  2509,   560,   629,   327,   313,  2529,
     216,   217,   218,   219,  4296,   104,   630,   631,   630,   631,
     629,   240,  4123,  4124,  4306,   629,   348,   349,   348,   349,
      57,   629,   354,   630,   631,    71,  2507,   184,   360,   302,
     303,   629,   104,  2563,   307,   308,    82,   629,   232,  4397,
     470,   629,  3727,  3728,    49,  3730,  3731,   630,  2594,  2595,
    3163,   630,   631,   277,   211,   249,    49,  4349,   231,  4351,
    3073,   214,   560,   630,   631,   327,   360,   261,   400,  4361,
    3657,  3658,   502,   630,   631,   631,   496,   497,   498,   499,
     500,   501,   128,   512,   360,   157,   630,   631,  4380,   458,
    4382,   569,  4384,   513,   424,   624,   411,   166,   528,  4391,
    3113,   317,   472,   319,   320,   321,   630,   631,   145,   629,
    4402,   340,   328,  2594,  4472,   187,   266,   189,   630,   631,
     630,   631,   189,   280,   630,   631,  4418,  4419,   630,   631,
     475,   476,   204,   232,   508,    80,   468,   209,   630,   631,
     630,   631,  4434,  4435,   338,   475,   476,  4439,   630,   631,
     249,   197,   224,   369,   630,   631,   372,   630,   631,   489,
     232,   527,   261,   630,   631,   595,   567,   239,   597,   630,
     631,   630,   631,   346,   220,  3842,   222,   249,  2724,   352,
     166,  2727,  2728,  2729,  2730,   630,   631,   588,   589,   261,
    2736,   630,   631,   409,   266,   630,   631,   508,   355,   630,
     631,    63,   631,   275,   630,   631,   252,   630,   631,  2755,
    2756,   630,   631,   475,   476,  2761,   630,   631,    80,   496,
     497,   277,   499,   376,   501,   630,   631,   125,  2774,  3755,
      92,  2777,  2778,  2779,   387,  3761,   513,   158,   570,   338,
      91,   394,   631,   188,  2790,   461,   462,   362,   421,   523,
    2796,   480,  2798,  2902,   630,  2736,   450,   157,  2804,  3371,
    2790,   125,   630,   631,   128,  3342,   338,   630,   631,  3982,
      60,   630,   631,  2819,   128,   620,   621,   622,   623,   624,
     625,   626,   627,   228,  3982,   114,   184,    63,   360,   636,
     620,   621,   622,   623,   624,   625,   626,   627,   370,     6,
    1164,  1165,   348,   349,    80,   629,   123,   252,   354,  3169,
    3170,   113,   349,   211,   360,   544,    92,   104,   463,   513,
     184,     4,   220,   595,   222,   115,   188,   242,   118,   631,
     402,   193,   386,   486,  3126,  3127,   126,  2883,    56,   512,
    2886,  2887,   142,  2889,   573,  3430,  3431,   211,   430,   171,
    3985,   450,   114,   143,   400,   221,  2902,   637,    71,  2905,
     622,   623,   624,   625,   626,   627,   228,   142,   631,    12,
     631,   182,   600,  2903,  2920,   630,   630,   414,   450,   416,
     141,  2911,   280,   599,   195,  2931,   537,     9,  2934,   631,
     252,   637,   565,  4053,   630,   185,   612,   613,   614,   630,
     472,   159,   219,   560,   637,    19,   629,  3532,  3533,   265,
    2956,   142,   188,  2959,   513,   637,   280,   193,  2964,   631,
    3545,   636,   468,    49,   597,   578,   125,  3552,  2974,   277,
     277,   277,  2978,   277,  2980,   277,   277,   527,   631,   125,
     634,   513,   242,   629,   255,   232,   257,   272,   631,  2995,
     240,  2974,   228,  3578,  3579,   400,   385,   355,   631,   631,
     548,    82,   249,   631,  3010,  4100,    12,   242,  1084,  1085,
    1086,  3017,  3002,  4186,   261,    96,   252,   548,  2959,   631,
     617,   624,   631,  3029,   631,   184,  1102,   631,  4186,   242,
     104,   355,   243,   525,   179,   189,   631,   569,   184,   574,
     317,  3732,  3733,  3734,   321,   631,    85,  4033,    87,   581,
     582,   328,   211,   485,   389,   136,   630,  3947,  1134,   137,
     360,  1137,   631,  3172,   570,   211,   631,   327,   617,   601,
     617,   603,   617,   617,   345,   631,  3017,  3766,   400,  3188,
    1156,  1157,   607,   157,  1160,   617,   576,   337,   194,   128,
     340,   338,   327,   617,   617,   617,   617,   617,   630,   631,
     617,  3107,   634,   635,  1180,  1181,    26,    27,   617,  3115,
     149,   581,   617,   360,   617,   189,  4236,   617,   617,   617,
     125,   280,  3694,   617,   617,  3115,   360,   360,   399,   360,
     204,   191,   409,  3139,   280,   209,   327,   624,  4265,    59,
      60,   630,    62,  3680,   183,   631,   630,   630,   630,   630,
     386,    71,   630,  3159,  3160,   630,   630,  3163,   232,   191,
     631,   623,    82,   629,   400,   239,  3172,   417,   631,   491,
      90,    80,  3178,   254,   630,   249,   630,   569,   630,   184,
     630,    55,  3188,   630,   627,   462,   631,   261,   630,   142,
    3196,    65,   266,   630,   114,   630,   355,   473,  3790,   629,
     629,   275,   560,   450,  3893,   629,   211,    81,   128,   355,
    3216,   131,   630,   601,   631,   475,   476,   548,   230,    93,
      94,    95,  3228,   629,   519,    11,   202,   191,   637,  4349,
     191,  4351,  3238,   630,  3240,   109,   560,   169,  4365,   159,
     475,   476,   454,  3249,   325,   410,   472,   631,   570,  3255,
     189,  3257,   631,  3259,    47,   491,   336,   502,   502,  4432,
    4380,   502,   502,   502,   338,  3374,   513,   348,   349,   463,
     351,  3846,    80,   386,  4432,   280,   386,   386,   548,   188,
     137,   250,  4455,   250,   475,   476,   360,   137,   386,  4462,
    4276,  4277,    47,  4279,   544,  4468,   370,  4455,  4418,  4419,
     220,   528,   222,   528,  4462,   433,   629,   386,   228,   384,
    4468,   629,   576,   386,   386,   386,   236,   276,   637,   228,
     629,   582,   599,   573,   155,   630,  3332,   630,   402,   548,
     238,   251,   413,   104,   570,  3325,   238,   614,   637,   378,
     630,   637,  4328,   252,  4330,  4331,   617,   618,   619,   630,
     355,  3357,  3358,  3359,   637,  3464,  3362,   630,  3348,   637,
     620,   621,   622,   623,   624,   625,   626,   627,  3374,   637,
     637,   630,   630,   630,   327,   631,   450,   548,   548,   631,
     537,   272,    88,   422,   304,   620,   621,   622,   623,   624,
     625,   626,   627,   608,    47,   548,   367,   629,   472,     6,
     629,   560,   322,   617,   191,   629,    13,  4393,    15,   629,
     617,   191,   191,   239,   560,   191,  4063,    82,   246,    26,
      27,   502,   169,   631,   355,    90,  4001,   637,   637,   620,
     621,   622,   623,   624,   625,   626,   627,   249,  3444,   513,
     249,   318,   316,  3449,   373,  3554,  4430,   114,   114,   114,
      57,   252,   252,   637,   548,    62,    63,   377,  3464,   379,
     334,   232,    69,   629,   204,   629,   366,   387,   537,   447,
     386,   629,   370,   624,   637,    82,   240,   386,   249,   629,
     629,   240,   630,    90,   603,  1561,   630,   624,   630,   494,
     261,   400,   630,   100,   159,   569,   630,   637,   630,  4036,
    3506,   630,   360,   630,   629,   224,   630,   114,   582,   631,
     111,   267,   333,   386,   631,  4087,   630,  3523,   191,  3628,
     575,   128,   475,   476,   131,   637,   242,   601,  4065,   603,
     263,   138,   139,    71,   249,   455,   249,   360,   145,   631,
     629,  3516,   252,   617,   252,   630,   153,   631,  3554,   398,
     157,    82,   159,   629,   631,   560,   630,   631,   360,    19,
     634,   635,   360,   228,   631,  3555,   167,   338,   630,   360,
     631,  1647,   629,   488,  3580,  1651,   360,    47,   464,   630,
     187,  3587,   629,   629,   629,   266,   460,  3696,   629,   360,
      26,    27,   512,   194,   630,    47,   466,  1673,    36,  3605,
     630,   603,   415,   202,  3594,   148,   630,   259,   528,   630,
     204,   631,   532,   220,   474,   222,   629,   249,   629,   226,
     249,   228,  3628,    59,    60,   629,    62,   228,   631,   236,
     128,   551,   128,   629,   396,    71,   637,    86,   482,   304,
     144,   515,   630,   488,   251,   459,    82,   630,   630,   569,
     631,   630,    19,   630,    90,   630,   630,   322,   630,   533,
      34,    12,    13,    34,   355,    60,  4313,   240,   621,   622,
     623,   624,   625,   626,   627,   276,   630,   324,   114,   450,
     118,   346,   630,   630,   630,   254,   410,   125,   275,   367,
    3696,   603,   128,   239,   629,   131,   630,   304,   631,   637,
      47,   209,   324,   631,   415,   537,   582,   537,  3714,   630,
     582,   631,   629,   301,   592,   322,   629,   592,   629,   326,
      14,  3727,  3728,   159,  3730,  3731,   629,   111,   629,   575,
     629,    36,   629,  4146,   128,   252,    19,   252,   354,   177,
     630,    34,   513,  3852,   631,   629,   184,  4322,  4161,   169,
     454,   355,   103,   324,   173,    17,   537,   252,   365,   537,
     631,  4174,   537,   370,   531,   629,   586,   630,   630,   360,
     377,  3777,   379,   211,   212,   582,  4423,   582,   239,   386,
     387,   132,   350,   587,   220,   506,   222,  3777,  4325,   447,
    3796,  3797,   228,   603,   145,   355,   397,   169,    34,   138,
     236,   402,  3808,   630,   367,   575,   631,   629,   189,   193,
    4457,   418,   629,   118,   629,   251,   167,   518,   629,   170,
     125,   156,    31,   600,   189,   432,   433,   434,   435,   265,
     181,    67,   638,   630,   630,  3841,   630,   381,  3844,    61,
     539,   137,   280,   159,   228,   137,  3852,   512,   455,   402,
      73,   202,   600,   423,   191,   629,  3797,    31,    63,    63,
     367,   630,  4399,   528,   519,   522,   631,   268,   304,   470,
      47,   629,   177,     5,    47,   629,  3882,   228,   629,   184,
     360,   360,   239,  4296,   235,   630,   322,   155,   136,   635,
     367,   367,   276,  4306,   144,   629,    47,  3903,    47,   135,
    3841,   339,  3908,   154,    47,   512,   211,   212,   132,   155,
     600,   575,   350,   223,   282,   635,   354,   355,   150,   127,
     638,   528,   454,   159,   275,   532,   162,   528,    47,   629,
      47,    47,  4469,   534,   630,    53,   456,   635,   631,   221,
     252,   377,   630,   379,   551,   155,   631,   540,  4361,   556,
     206,   387,   553,   635,   631,    47,   630,    53,  3948,   630,
     196,   631,   569,   437,   189,   224,   540,   602,   189,  4382,
     189,  4384,   128,   355,   190,   280,  3982,   578,  4391,   215,
     629,   472,  2062,   631,  3913,  2272,  3335,  3334,  2446,  4402,
     658,  3603,  4101,   229,   595,  3940,  4255,  4066,  4256,  3601,
    3605,  3795,  1002,  4457,  4410,    46,   578,  1823,  4420,  4015,
    2774,  4017,  3787,  4019,  3787,  3787,  3787,  3787,   675,   455,
    3787,  4434,  4435,   680,  3787,  3787,  4439,  3787,   635,  3787,
    4293,  4139,  4293,  3787,   339,  4249,  3787,  3787,  4165,  4045,
    4164,   277,  1476,  1747,  1043,  2020,  1486,  1478,  3945,   354,
     355,  2929,   403,  2750,  3443,  2755,   407,  3139,  4091,  3842,
     717,  4190,   298,  3446,  1319,  4365,  4273,  4322,  4074,  4001,
    1531,   517,   423,  3610,  2013,  3003,   512,   734,  3259,  2526,
     431,  2595,  3238,  3247,  4074,  4091,   470,  2021,   439,  4340,
    4036,  3753,   528,  3055,  3282,  4101,   532,  3316,  4207,   537,
    3565,  4107,  4087,   541,  4094,  4095,   544,   491,  3554,  4023,
      11,  3188,    11,   464,  4123,   551,  4124,   555,   775,   776,
     777,   778,   560,  1545,  3964,   563,   477,   478,  3951,  3960,
     787,  3808,  2100,   569,  3761,  2020,  3240,  2519,   971,   631,
    1897,  3520,  1436,  3239,   528,  2332,  1814,   531,  1485,  1527,
     534,  2736,  2305,  3134,  2354,  3789,   599,  2223,   911,  3115,
    1834,  2135,  4271,  2714,  1129,   401,  2409,  2132,  2222,  3206,
    3867,   522,  3721,  4222,   410,  3332,  4223,  1102,  2251,  3249,
    4186,  3715,  2819,  1452,   622,   623,   570,  4399,  2515,   425,
    3696,    12,    13,   629,   578,  2359,  2105,    13,  1302,  1334,
    2299,  4207,   553,  2336,  3449,  3154,  3153,   443,  4198,  4199,
    3216,   868,  4186,   589,  1554,   671,  4222,  4223,   577,  1886,
    1388,  1416,  1887,  1766,   575,  3257,   577,  3137,  4315,  1340,
    4214,  4363,   537,  4283,  4462,  4468,   541,  3159,  3556,   544,
    1839,  2806,  1368,  3196,  3475,  3704,   482,   483,   569,  1795,
     555,  1358,   893,  3831,  1294,   560,  1536,  3837,   563,  2724,
     898,   570,   658,    -1,   513,  4271,   513,   658,   658,    -1,
      -1,    -1,   508,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   103,    -1,    -1,    -1,    -1,   103,    -1,    -1,
      -1,   527,  4298,    -1,   530,   531,    -1,    -1,    -1,  4305,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   132,    -1,    -1,    -1,    -1,   132,   622,   623,    -1,
      -1,    -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,   145,
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4451,   579,    -1,    -1,   167,  4337,    -1,   170,
      -1,   167,    -1,    -1,   170,    -1,    -1,    -1,    -1,    -1,
     181,    -1,    -1,    -1,    -1,   181,    -1,  1024,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4381,    -1,    -1,    -1,    -1,
    4386,   202,    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   228,    -1,    -1,
      -1,    -1,   228,    -1,   235,    -1,    -1,  4423,    -1,   235,
      -1,    -1,    -1,  1080,  1081,    -1,  4432,   216,   217,   218,
     219,    -1,  1089,  1090,  1091,  1092,  1093,  1094,  1095,  1096,
    1097,  1098,  1099,  1100,  1101,  4451,    -1,    -1,    -1,  4455,
      -1,  4457,  1109,  1110,   275,  1112,  4462,  1114,    -1,   275,
      -1,  1118,  4468,    -1,  1121,  1122,  1123,  1124,    -1,  1126,
    1127,  1128,    -1,    -1,    -1,    -1,    -1,    -1,  1135,  1136,
      -1,  1138,  1139,  1140,  1141,  1142,    -1,    -1,  1145,  1146,
    1147,  1148,  1149,  1150,  1151,  1152,  1153,  1154,  1155,    -1,
      -1,  1158,  1159,    -1,    34,  1162,    -1,    -1,    -1,  1166,
      -1,  1168,  1169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1182,  1183,    -1,   317,    -1,
     319,   320,   321,  1190,    -1,    -1,    -1,    67,    -1,   328,
    1197,  1198,  1199,  1200,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1208,  1209,  1210,    -1,  1212,  1213,  1214,  1215,  1216,
      -1,  1218,  1219,  1220,  1221,  1222,  1223,  1224,  1225,    -1,
      -1,    -1,  1229,  1230,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,   407,   403,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   423,    -1,    -1,   135,    -1,   423,    -1,    -1,
     431,    -1,    -1,    -1,    -1,   431,    -1,    -1,   439,    -1,
     409,    -1,    -1,   439,    -1,    -1,    -1,    -1,    -1,   159,
      -1,    -1,   162,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   464,    -1,    -1,    -1,    -1,   464,  1306,
      -1,    -1,    -1,    -1,    -1,    -1,   477,   478,    -1,    -1,
      -1,   477,   478,    -1,    -1,    -1,   196,    -1,    -1,    -1,
      -1,    -1,   461,   462,    -1,   680,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   215,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   229,
      -1,   522,    -1,    -1,    -1,    -1,   522,    -1,    -1,    -1,
      -1,  1368,   717,    -1,    -1,    -1,    -1,    -1,    -1,  1376,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   734,
      -1,   225,   553,    -1,    -1,    -1,    -1,   553,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,
      -1,    -1,    -1,    -1,   575,    -1,   577,    -1,    -1,   575,
      -1,   577,    -1,    -1,    -1,    -1,    -1,    -1,   298,    -1,
      -1,    -1,    -1,   778,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    13,    -1,    15,    -1,
     284,   285,   286,   287,   288,   289,    -1,   291,   292,   293,
     294,   295,   296,   297,    31,   299,   300,    -1,    35,    -1,
     599,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1478,    49,    50,   613,   614,    -1,    -1,    -1,    -1,
      57,    -1,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,
      -1,    -1,    -1,   868,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   401,    -1,    -1,    -1,    -1,   103,    -1,    -1,    -1,
     410,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   425,    -1,   124,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   132,   133,   134,    -1,    -1,
    1567,    -1,    -1,   443,    -1,    -1,    -1,   144,   145,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     157,    -1,    -1,   427,   428,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   482,   483,    -1,    -1,    -1,    -1,    -1,   186,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   202,    -1,    -1,   508,   206,
      -1,    -1,    -1,   210,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     530,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   235,    -1,
     237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1024,
      -1,    -1,  1679,  1680,  1681,    -1,   253,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1693,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   271,    -1,    -1,    -1,   275,   579,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1719,    -1,    -1,    -1,    -1,    -1,  1725,    -1,
      -1,  1728,    -1,  1730,    -1,  1080,  1081,    -1,    -1,  1736,
      -1,  1738,  1739,    -1,  1089,  1090,    -1,    -1,  1093,  1094,
    1095,  1096,  1097,  1098,  1099,  1100,  1101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1109,  1110,    -1,  1112,    -1,  1114,
      -1,    -1,    -1,    -1,    -1,    -1,  1121,  1122,  1123,  1124,
      -1,    -1,  1127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1135,  1136,    -1,  1138,  1139,    -1,    -1,    -1,   365,    -1,
    1145,  1146,  1147,    -1,    -1,  1150,  1151,  1152,  1153,  1154,
    1155,    -1,  1809,  1158,  1159,   382,    -1,  1162,    -1,   386,
      -1,  1166,    -1,  1168,  1169,    -1,    -1,    -1,    -1,    -1,
     397,    -1,    -1,    -1,    -1,    -1,    -1,  1182,  1183,    -1,
      -1,   408,    -1,    -1,    -1,  1190,    -1,    -1,    -1,    -1,
      -1,    -1,  1197,  1198,  1199,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   430,    26,    27,   433,    -1,   435,    -1,
      -1,   438,    -1,    -1,   441,   442,    -1,    -1,    -1,    -1,
      -1,    -1,   449,    -1,   451,  1230,    -1,    -1,    -1,    -1,
      -1,   458,    -1,    -1,    -1,    -1,    -1,   464,    -1,    -1,
      62,    -1,    -1,    24,    -1,   472,    -1,    -1,    -1,    -1,
     477,    -1,   479,    34,    35,   482,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,
     507,    -1,    -1,    -1,   511,    -1,    67,    -1,    -1,    -1,
      -1,    72,   114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1306,    -1,    -1,    -1,    -1,   128,    -1,    -1,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
     101,    -1,   103,    -1,    -1,    -1,    -1,    -1,    -1,   556,
      -1,   112,    -1,    -1,    -1,    -1,    -1,   159,    -1,    -1,
      -1,   568,    -1,    -1,    -1,   572,    -1,    -1,   575,    -1,
      -1,    -1,    -1,    -1,   581,    -1,  2013,    -1,    -1,    -1,
      -1,    -1,    -1,  1368,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1376,    -1,    -1,    -1,    -1,    -1,   158,   159,    -1,
      -1,    -1,   163,   610,    -1,   166,  2043,    -1,    -1,   616,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   220,    -1,
     222,    -1,   629,    -1,    -1,    -1,   228,    -1,    -1,    -1,
      -1,   192,    -1,   194,   236,    -1,    -1,    -1,    -1,    -1,
     201,    -1,   203,    -1,    -1,    -1,    -1,    -1,    -1,   251,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2098,    -1,    -1,    -1,    -1,   227,   228,   229,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2114,    -1,    -1,
      -1,  2118,    -1,    -1,    -1,    -1,  2123,  2124,    -1,   250,
      -1,    -1,    -1,    -1,    -1,  2132,  2133,    -1,  2135,  2136,
    2137,  2138,   304,  2140,    -1,    -1,  2143,    -1,    -1,    -1,
      -1,   272,    -1,    -1,    -1,    -1,  2153,    -1,  2155,  2156,
     322,  2158,  2159,  2160,  2161,    -1,  2163,    -1,    -1,  2166,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,  2175,    -1,
      -1,    -1,    -1,    -1,    -1,  2182,    -1,  2184,    -1,  2186,
    2187,  2188,  2189,    -1,    -1,    -1,  2193,  2194,  2195,    -1,
      -1,    -1,  2199,  2200,  2201,    -1,  2203,    -1,  2205,    -1,
    2207,    -1,  2209,    -1,  2211,   377,    -1,   379,    -1,  2216,
      -1,    -1,  1567,    -1,    -1,   387,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2234,    -1,    -1,
      -1,    -1,    -1,   364,  2241,    -1,    -1,  2244,    -1,    -1,
      -1,    -1,    -1,  2250,    -1,    -1,  2253,    -1,    -1,    -1,
    2257,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     401,   402,    -1,    -1,   405,   406,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   426,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2313,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1679,  1680,  1681,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   469,    -1,
     512,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   482,    -1,    -1,    -1,    -1,   528,    -1,    -1,    -1,
     532,    -1,    -1,    -1,  1719,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1728,    -1,  1730,    -1,   508,    -1,   551,
      -1,   512,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   569,    -1,   530,
     531,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2429,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2447,  2448,    13,    -1,    15,    -1,    -1,    -1,   579,    -1,
      -1,    -1,    -1,    -1,  1809,    -1,    -1,    -1,    -1,   590,
      -1,    -1,    -1,    -1,    35,    -1,    -1,   598,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    57,    -1,    -1,    -1,
      -1,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2519,    84,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,  2565,  2566,
      -1,   132,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   144,   145,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2599,    -1,    -1,    -1,    -1,    -1,    -1,   170,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2616,
      -1,    -1,    -1,  2620,    -1,   186,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   202,    -1,    -1,    -1,   206,    -1,    -1,    -1,   210,
      -1,    -1,    -1,  2650,  2651,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2670,   235,    -1,   237,    -1,    -1,    -1,
      -1,    -1,  2679,    -1,  2681,    -1,  2683,    -1,    -1,    -1,
      -1,    -1,   253,    -1,    -1,    -1,    -1,    -1,  2043,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2703,    -1,    -1,    -1,
     271,  2708,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2732,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2114,
      -1,    -1,    -1,  2118,    -1,    -1,    -1,    -1,  2123,  2124,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2132,  2133,    -1,
    2135,    -1,  2137,  2138,    -1,  2140,    -1,    -1,    -1,    -1,
      -1,    -1,  2799,    -1,   365,    -1,  2803,    -1,  2153,    -1,
    2155,    -1,    -1,  2158,  2159,  2160,  2161,    -1,  2163,    -1,
      -1,   382,    -1,    -1,    -1,   386,    -1,    -1,    -1,    -1,
    2175,    -1,    -1,    -1,    -1,    -1,   397,  2182,    -1,  2184,
      -1,  2186,  2187,  2188,    -1,    -1,    -1,   408,  2193,  2194,
    2195,    -1,    -1,  2850,  2199,  2200,  2201,    -1,  2203,    -1,
    2205,    -1,  2207,    -1,  2209,    -1,  2211,    -1,    -1,   430,
      -1,  2216,   433,    -1,   435,    -1,    -1,   438,    -1,    -1,
     441,   442,    -1,    -1,    -1,    -1,    -1,    -1,   449,  2234,
     451,    -1,    -1,    -1,    -1,    -1,    -1,   458,    -1,    -1,
      -1,    -1,    -1,   464,    -1,  2250,    -1,    -1,  2253,    -1,
      -1,   472,    -1,    -1,    -1,    -1,   477,    -1,   479,    -1,
      -1,   482,     6,    -1,    -1,    -1,    -1,    -1,    -1,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    26,    27,    -1,    -1,   507,    -1,    -1,    -1,
     511,    -1,    -1,    -1,    -1,    -1,    -1,    33,    34,    -1,
      -1,    -1,    -1,    39,    -1,    41,    -1,    43,    44,    -1,
      -1,    -1,    -1,    57,  2971,  2972,    -1,    -1,    62,    -1,
      -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   556,    -1,    -1,    82,  2996,
      -1,    -1,    -1,    -1,    -1,    -1,    90,   568,    -1,    -1,
      -1,   572,    -1,    -1,   575,    -1,   100,    -1,    -1,    -1,
     581,    -1,    -1,    -1,    -1,    -1,    -1,  3024,    -1,    -1,
     114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,
    3037,    -1,   118,    -1,   128,    -1,    -1,   131,    -1,   610,
     126,    -1,    -1,    -1,   138,   616,    -1,    -1,    -1,    -1,
      -1,   145,    -1,    -1,    -1,    -1,    -1,   143,   629,   153,
      -1,    -1,    -1,  3070,  3071,   159,  3073,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   160,  3082,    -1,    -1,    -1,    -1,
    3087,    -1,    -1,  3090,    -1,  3092,  3093,    -1,    -1,    -1,
      -1,    -1,    -1,   187,    -1,    -1,    -1,   183,    -1,   185,
      -1,    -1,    -1,    -1,    -1,    -1,  3113,    -1,    -1,    -1,
      -1,    -1,   198,   199,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3128,    -1,    -1,    -1,    -1,   220,    -1,   222,    -1,
      -1,    -1,    -1,    -1,   228,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   236,    -1,    -1,    -1,  3153,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   240,    -1,    -1,   251,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3183,    -1,    -1,    -1,
      -1,    -1,    -1,   269,    -1,    26,    27,    -1,    -1,    -1,
    3197,    -1,   278,   279,    -1,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     304,  3218,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,
    3227,    62,    -1,    -1,   310,   311,   312,    -1,   322,    -1,
      71,    -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,   329,   330,   331,    -1,    -1,    -1,    90,
      -1,   337,    -1,    -1,   340,    -1,    -1,    -1,    -1,    -1,
      -1,  2616,    -1,    -1,    -1,  2620,    -1,    -1,    -1,    -1,
     356,   357,    -1,   114,    -1,    -1,   370,    -1,    -1,    -1,
      -1,    -1,    -1,   377,    -1,   379,    -1,   128,    -1,    -1,
     131,    -1,    -1,   387,    -1,  2650,  2651,    -1,    -1,    -1,
      -1,    -1,  3309,    -1,    -1,    -1,   392,   393,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2670,    -1,    -1,   159,    -1,
      -1,    -1,    -1,    -1,  2679,    -1,  2681,    -1,  2683,    -1,
      -1,   417,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   433,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2732,    -1,   220,
      -1,   222,   468,    -1,    -1,    -1,   472,   228,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   236,    -1,    -1,   484,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     251,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   512,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   528,    -1,    -1,    -1,   532,    -1,
      -1,    -1,    -1,  3450,  2799,    -1,    -1,    -1,  2803,    -1,
      -1,    -1,   538,    -1,    -1,   541,    -1,   551,   544,   545,
     546,   547,    -1,   304,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   569,    -1,    -1,    -1,    -1,
      -1,   322,  3489,  3490,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3498,    -1,    -1,    -1,  2850,    -1,    -1,    -1,    -1,
      -1,    -1,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   377,    -1,   379,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   387,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3565,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3610,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   455,    -1,  2971,  2972,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3642,    -1,    -1,    -1,  3646,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3677,   512,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3037,    -1,  3691,    -1,    -1,   528,    -1,    -1,
      -1,   532,    -1,    -1,    -1,    -1,    -1,  3704,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     551,    -1,    -1,    -1,    -1,  3070,  3071,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3082,   569,    -1,
      -1,    -1,  3087,    -1,    -1,  3090,    -1,  3092,  3093,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3128,    -1,    -1,    -1,    -1,    -1,    -1,
    3787,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3153,    -1,
    3807,    -1,    -1,    -1,  3811,  3812,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3842,    -1,    -1,    -1,    -1,
      -1,    -1,  3197,  3850,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3859,    -1,  3861,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3218,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3227,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3900,    -1,    -1,    -1,    -1,    -1,  3906,
    3907,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3951,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3960,    -1,    -1,    -1,  3964,    -1,    -1,
      -1,    -1,  3969,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4006,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4025,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4038,    -1,  4040,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4050,    -1,  4052,  4053,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4077,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3450,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4121,    -1,  4123,  4124,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3489,  3490,    -1,  4144,    -1,  4146,
      -1,    -1,    -1,  3498,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4161,  4162,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4174,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4235,  4236,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4248,  4249,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4265,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3642,    -1,  4296,
      -1,  3646,    -1,    -1,    -1,    -1,  4303,    -1,    -1,  4306,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3677,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4342,  3691,    -1,    -1,    -1,
      -1,    -1,  4349,    -1,  4351,    -1,    -1,    -1,    -1,  3704,
      -1,    -1,    -1,    -1,  4361,    -1,    -1,    -1,  4365,    -1,
      -1,  4368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4380,    -1,  4382,    -1,  4384,    -1,    -1,
      -1,    -1,    -1,    -1,  4391,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4402,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4418,  4419,    -1,    -1,    -1,    -1,  4424,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4434,  4435,    -1,
      -1,    -1,  4439,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4471,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3850,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3859,    -1,  3861,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3900,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3969,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4006,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4038,    -1,  4040,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4050,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4144,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4162,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4303,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4342,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4368,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    43,    44,    45,    46,    -1,
      48,    49,    -1,    -1,    52,    53,    54,    55,    56,  4424,
      58,    59,    60,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,    -1,  4471,   105,   106,   107,
      -1,   109,   110,   111,    -1,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,
     128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,   179,    -1,   181,   182,   183,   184,    -1,   186,    -1,
      -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,    -1,   210,   211,   212,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,   223,    -1,   225,   226,   227,
      -1,   229,    -1,   231,    -1,    -1,    -1,   235,   236,   237,
     238,    -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,
     258,   259,    -1,   261,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,   280,    -1,    -1,    -1,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,    -1,    -1,    -1,   313,   314,   315,   316,   317,
     318,    -1,    -1,   321,   322,   323,   324,    -1,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,    -1,    -1,   344,   345,   346,   347,
     348,   349,   350,   351,   352,    -1,   354,   355,    -1,   357,
     358,   359,    -1,   361,   362,   363,   364,    -1,   366,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,   377,
     378,    -1,   380,   381,    -1,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,    -1,   401,    -1,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,    -1,    -1,   414,    -1,    -1,    -1,
     418,   419,   420,   421,   422,    -1,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,   435,   436,   437,
     438,   439,    -1,   441,    -1,   443,   444,    -1,   446,   447,
      -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,    -1,    -1,    -1,   467,
     468,   469,   470,    -1,    -1,    -1,   474,    -1,    -1,    -1,
     478,    -1,   480,   481,   482,   483,    -1,   485,   486,   487,
     488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,
     498,    -1,   500,    -1,    -1,   503,    -1,    -1,   506,   507,
     508,   509,   510,   511,   512,    -1,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,    -1,   530,    -1,   532,   533,   534,   535,    -1,   537,
     538,   539,    -1,   541,   542,   543,   544,    -1,    -1,    -1,
      -1,   549,   550,   551,   552,    -1,   554,   555,   556,   557,
     558,   559,   560,   561,   562,   563,   564,   565,    -1,   567,
     568,    -1,    -1,   571,    -1,    -1,   574,    -1,   576,    -1,
     578,   579,   580,    -1,    -1,   583,   584,   585,   586,   587,
      -1,    -1,   590,   591,    -1,   593,   594,   595,   596,   597,
     598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,   607,
      -1,   609,   610,   611,    -1,    -1,   614,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   622,   623,    -1,    -1,    -1,    -1,
     628,   629,    -1,    -1,   632,   633,    -1,    -1,   636,   637,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,    -1,    -1,
     105,   106,   107,    -1,   109,   110,   111,    -1,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,   124,
     125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
      -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,    -1,   210,   211,   212,    -1,   214,
     215,    -1,    -1,    -1,   219,   220,   221,   222,   223,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
     235,   236,   237,   238,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,   256,    -1,    -1,   259,    -1,   261,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,   280,    -1,    -1,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,    -1,    -1,    -1,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,   322,   323,   324,
      -1,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,    -1,   357,   358,   359,   360,   361,   362,   363,   364,
      -1,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   376,   377,   378,    -1,   380,   381,    -1,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,   399,    -1,   401,    -1,   403,   404,
     405,   406,   407,    -1,   409,   410,   411,    -1,    -1,   414,
      -1,    -1,    -1,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
     435,   436,   437,   438,   439,    -1,   441,    -1,   443,   444,
      -1,   446,   447,    -1,    -1,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,    -1,
      -1,    -1,   467,   468,   469,   470,    -1,    -1,    -1,   474,
      -1,    -1,    -1,   478,    -1,   480,   481,   482,   483,    -1,
     485,   486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,
      -1,    -1,   497,   498,    -1,   500,    -1,    -1,   503,    -1,
      -1,   506,   507,   508,   509,   510,   511,   512,    -1,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,    -1,   530,    -1,   532,   533,   534,
     535,    -1,   537,   538,   539,    -1,   541,   542,   543,   544,
      -1,    -1,    -1,    -1,    -1,   550,   551,   552,    -1,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,    -1,   567,   568,    -1,    -1,   571,    -1,    -1,   574,
      -1,   576,    -1,   578,   579,   580,    -1,    -1,   583,   584,
     585,   586,   587,    -1,    -1,   590,   591,    -1,   593,   594,
     595,   596,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,
      -1,   606,   607,    -1,   609,   610,   611,    -1,    -1,   614,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   622,   623,    -1,
      -1,    -1,    -1,   628,   629,    -1,    -1,   632,   633,    -1,
      -1,   636,   637,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,    -1,    -1,   105,   106,   107,    -1,   109,   110,   111,
      -1,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,   123,   124,   125,    -1,    -1,   128,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,    -1,   181,
     182,   183,   184,    -1,   186,    -1,    -1,    -1,   190,   191,
     192,    -1,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,    -1,   210,   211,
     212,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,   223,    -1,   225,   226,   227,    -1,   229,    -1,   231,
      -1,    -1,    -1,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,
      -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,   261,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,    -1,
      -1,    -1,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,    -1,    -1,
      -1,   313,   314,   315,   316,   317,   318,    -1,    -1,   321,
     322,   323,   324,    -1,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
      -1,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
     352,    -1,   354,   355,    -1,   357,   358,   359,    -1,   361,
     362,   363,   364,    -1,   366,   367,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   376,   377,   378,    -1,   380,   381,
      -1,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,    -1,   401,
      -1,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
      -1,    -1,   414,    -1,    -1,    -1,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,   435,   436,   437,   438,   439,    -1,   441,
      -1,   443,   444,    -1,   446,   447,    -1,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,    -1,    -1,    -1,   467,   468,   469,   470,    -1,
      -1,    -1,   474,    -1,    -1,    -1,   478,    -1,   480,   481,
     482,   483,    -1,   485,   486,   487,   488,   489,   490,    -1,
      -1,    -1,    -1,    -1,    -1,   497,   498,    -1,   500,    -1,
      -1,   503,    -1,    -1,   506,   507,   508,   509,   510,   511,
     512,    -1,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,    -1,   530,    -1,
     532,   533,   534,   535,    -1,   537,   538,   539,    -1,   541,
     542,   543,   544,    -1,    -1,    -1,    -1,    -1,   550,   551,
     552,    -1,   554,   555,   556,   557,   558,   559,   560,   561,
     562,   563,   564,   565,    -1,   567,   568,    -1,    -1,   571,
      -1,    -1,   574,    -1,   576,    -1,   578,   579,   580,    -1,
      -1,   583,   584,   585,   586,   587,    -1,    -1,   590,   591,
      -1,   593,   594,   595,   596,   597,   598,   599,    -1,    -1,
      -1,    -1,    -1,    -1,   606,   607,    -1,   609,   610,   611,
      -1,    -1,   614,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     622,   623,    -1,    -1,    -1,    -1,   628,   629,    -1,    -1,
     632,   633,    -1,    -1,   636,   637,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,    -1,
     109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,    -1,   181,   182,   183,   184,    -1,   186,    -1,    -1,
      -1,   190,   191,   192,    -1,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
      -1,   210,   211,   212,    -1,   214,   215,    -1,    -1,    -1,
     219,   220,   221,   222,   223,    -1,   225,   226,   227,    -1,
     229,    -1,   231,    -1,    -1,    -1,   235,   236,   237,   238,
      -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,
     259,    -1,   261,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,   280,    -1,    -1,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,    -1,    -1,    -1,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,   322,   323,   324,    -1,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,    -1,    -1,   344,   345,   346,   347,   348,
     349,   350,   351,   352,    -1,   354,   355,    -1,   357,   358,
     359,    -1,   361,   362,   363,   364,    -1,   366,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,   377,   378,
      -1,   380,   381,    -1,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,    -1,   401,    -1,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,    -1,    -1,   414,    -1,    -1,    -1,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,   435,   436,   437,   438,
     439,    -1,   441,    -1,   443,   444,    -1,   446,   447,    -1,
      -1,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,    -1,    -1,    -1,   467,   468,
     469,   470,    -1,    -1,    -1,   474,    -1,    -1,    -1,   478,
      -1,   480,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,
      -1,   500,    -1,    -1,   503,    -1,    -1,   506,   507,   508,
     509,   510,   511,   512,    -1,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
      -1,   530,    -1,   532,   533,   534,   535,    -1,   537,   538,
     539,    -1,   541,   542,   543,   544,    -1,    -1,    -1,    -1,
      -1,   550,   551,   552,    -1,   554,   555,   556,   557,   558,
     559,   560,   561,   562,   563,   564,   565,    -1,   567,   568,
      -1,    -1,   571,    -1,    -1,   574,    -1,   576,    -1,   578,
     579,   580,    -1,    -1,   583,   584,   585,   586,   587,    -1,
      -1,   590,   591,    -1,   593,   594,   595,   596,   597,   598,
     599,    -1,    -1,    -1,    -1,    -1,    -1,   606,   607,    -1,
     609,   610,   611,    -1,    -1,   614,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   622,   623,    -1,    -1,    -1,    -1,   628,
     629,    -1,    -1,   632,   633,    -1,    -1,   636,   637,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,    -1,    -1,   105,
     106,   107,    -1,   109,   110,   111,    -1,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,   123,   124,   125,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,    -1,   181,   182,   183,   184,    -1,
     186,    -1,    -1,    -1,   190,   191,   192,    -1,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,    -1,   210,   211,   212,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,   223,    -1,   225,
     226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,   244,    -1,
     246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,
     256,    -1,    -1,   259,    -1,   261,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,   280,    -1,    -1,    -1,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,    -1,    -1,    -1,   313,   314,   315,
     316,   317,   318,    -1,    -1,   321,   322,   323,   324,    -1,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,    -1,    -1,   344,   345,
     346,   347,   348,   349,   350,   351,   352,    -1,   354,   355,
      -1,   357,   358,   359,    -1,   361,   362,   363,   364,    -1,
     366,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     376,   377,   378,    -1,   380,   381,    -1,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,    -1,   401,    -1,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,    -1,    -1,   414,    -1,
      -1,    -1,   418,   419,   420,   421,   422,    -1,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,   435,
     436,   437,   438,   439,    -1,   441,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,    -1,    -1,
      -1,   467,   468,   469,   470,    -1,    -1,    -1,   474,    -1,
      -1,    -1,   478,    -1,   480,   481,   482,   483,    -1,   485,
     486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,
      -1,   497,   498,    -1,   500,    -1,    -1,   503,    -1,    -1,
     506,   507,   508,   509,   510,   511,   512,    -1,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,    -1,   530,    -1,   532,   533,   534,   535,
      -1,   537,   538,   539,    -1,   541,   542,   543,   544,    -1,
      -1,    -1,    -1,    -1,   550,   551,   552,    -1,   554,   555,
     556,   557,   558,   559,   560,   561,   562,   563,   564,   565,
      -1,   567,   568,    -1,    -1,   571,    -1,    -1,   574,    -1,
     576,    -1,   578,   579,   580,    -1,    -1,   583,   584,   585,
     586,   587,    -1,    -1,   590,   591,    -1,   593,   594,   595,
     596,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,
     606,   607,    -1,   609,   610,   611,    -1,    -1,   614,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   622,   623,    -1,    -1,
      -1,    -1,   628,   629,    -1,    -1,   632,   633,    -1,    -1,
     636,   637,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
      -1,    -1,   105,   106,   107,    -1,   109,   110,   111,    -1,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,   179,    -1,   181,   182,
     183,   184,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,    -1,   210,   211,   212,
      -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,   222,
     223,    -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,
      -1,    -1,   235,   236,   237,   238,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,   256,    -1,    -1,   259,    -1,   261,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,   280,    -1,    -1,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,    -1,    -1,    -1,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,   322,
     323,   324,    -1,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,    -1,
      -1,   344,   345,   346,   347,   348,   349,   350,   351,   352,
      -1,   354,   355,    -1,   357,   358,   359,    -1,   361,   362,
     363,   364,    -1,   366,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   376,   377,   378,    -1,   380,   381,    -1,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,    -1,
      -1,   414,    -1,    -1,    -1,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,   435,   436,   437,   438,   439,    -1,   441,    -1,
     443,   444,    -1,   446,   447,    -1,    -1,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,    -1,    -1,    -1,   467,   468,   469,   470,    -1,    -1,
      -1,   474,    -1,    -1,    -1,   478,    -1,   480,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,   497,   498,    -1,   500,    -1,    -1,
     503,    -1,    -1,   506,   507,   508,   509,   510,   511,   512,
      -1,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,    -1,   530,    -1,   532,
     533,   534,   535,    -1,   537,   538,   539,    -1,   541,   542,
     543,   544,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,
      -1,   554,   555,   556,   557,   558,   559,   560,   561,   562,
     563,   564,   565,    -1,   567,   568,    -1,    -1,   571,    -1,
      -1,   574,    -1,   576,    -1,   578,   579,   580,    -1,    -1,
     583,   584,   585,   586,   587,    -1,    -1,   590,   591,    -1,
     593,   594,   595,   596,   597,   598,   599,    -1,    -1,    -1,
      -1,    -1,    -1,   606,   607,    -1,   609,   610,   611,    -1,
      -1,   614,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   622,
     623,    -1,    -1,    -1,    -1,   628,   629,    -1,    -1,   632,
     633,    -1,    -1,   636,   637,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,    -1,    -1,   105,   106,   107,    -1,   109,
     110,   111,    -1,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
      -1,   181,   182,   183,   184,    -1,   186,    -1,    -1,    -1,
     190,    -1,   192,    -1,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,    -1,
     210,   211,   212,    -1,   214,   215,    -1,    -1,    -1,   219,
     220,   221,   222,   223,    -1,   225,   226,   227,    -1,   229,
      -1,   231,    -1,    -1,    -1,   235,   236,   237,   238,    -1,
      -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,
      -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,
      -1,   261,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
     280,    -1,    -1,    -1,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
      -1,    -1,    -1,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,   322,   323,   324,    -1,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,    -1,    -1,   344,   345,   346,   347,   348,   349,
     350,   351,   352,    -1,   354,   355,    -1,   357,   358,   359,
      -1,   361,   362,   363,   364,    -1,   366,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   376,   377,   378,    -1,
     380,   381,    -1,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
      -1,   401,    -1,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,    -1,    -1,   414,    -1,    -1,    -1,   418,   419,
     420,   421,   422,    -1,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,   435,   436,   437,   438,   439,
      -1,   441,    -1,   443,   444,    -1,   446,   447,    -1,    -1,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,    -1,    -1,    -1,   467,   468,   469,
     470,    -1,    -1,    -1,   474,    -1,    -1,    -1,   478,    -1,
     480,   481,   482,   483,    -1,   485,   486,   487,   488,   489,
     490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,    -1,
     500,    -1,    -1,   503,    -1,    -1,   506,   507,   508,   509,
     510,   511,   512,    -1,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,    -1,
     530,    -1,   532,   533,   534,   535,    -1,   537,   538,   539,
      -1,   541,   542,   543,   544,    -1,    -1,    -1,    -1,    -1,
     550,   551,   552,    -1,   554,   555,   556,   557,   558,   559,
     560,   561,   562,   563,   564,   565,    -1,   567,   568,    -1,
      -1,   571,    -1,    -1,   574,    -1,   576,    -1,   578,   579,
     580,    -1,    -1,   583,   584,   585,   586,   587,    -1,    -1,
     590,   591,    -1,   593,   594,   595,   596,   597,   598,   599,
      -1,    -1,    -1,    -1,    -1,    -1,   606,   607,    -1,   609,
     610,   611,    -1,    -1,   614,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   622,   623,    -1,    -1,    -1,    -1,   628,   629,
      -1,    -1,   632,   633,    -1,    -1,   636,   637,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,    -1,    -1,   105,   106,
     107,    -1,   109,   110,   111,    -1,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,
      -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,   179,    -1,   181,   182,   183,   184,    -1,   186,
      -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,    -1,   210,   211,   212,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,   223,    -1,   225,   226,
     227,    -1,   229,    -1,   231,    -1,    -1,    -1,   235,   236,
     237,   238,    -1,    -1,   241,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,
      -1,    -1,   259,    -1,   261,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,   280,    -1,    -1,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,    -1,    -1,    -1,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,   322,   323,   324,    -1,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,    -1,    -1,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,   354,   355,    -1,
     357,   358,   359,    -1,   361,   362,   363,   364,    -1,   366,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,
     377,   378,    -1,   380,   381,    -1,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
     397,   398,   399,    -1,   401,    -1,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,    -1,    -1,   414,    -1,    -1,
      -1,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,   435,   436,
     437,   438,   439,    -1,   441,    -1,   443,   444,    -1,   446,
     447,    -1,    -1,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,    -1,    -1,    -1,
     467,   468,   469,   470,    -1,    -1,    -1,   474,    -1,    -1,
      -1,   478,    -1,   480,   481,   482,   483,    -1,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
     497,   498,    -1,   500,    -1,    -1,   503,    -1,    -1,   506,
     507,   508,   509,   510,   511,   512,    -1,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,    -1,   530,    -1,   532,   533,   534,   535,    -1,
     537,   538,   539,    -1,   541,   542,   543,   544,    -1,    -1,
      -1,    -1,    -1,   550,   551,   552,    -1,   554,   555,   556,
     557,   558,   559,   560,   561,   562,   563,   564,   565,    -1,
     567,   568,    -1,    -1,   571,    -1,    -1,   574,    -1,   576,
      -1,   578,   579,   580,    -1,    -1,   583,   584,   585,   586,
     587,    -1,    -1,   590,   591,    -1,   593,   594,   595,   596,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
     607,    -1,   609,   610,   611,    -1,    -1,   614,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   622,   623,    -1,    -1,    -1,
      -1,   628,   629,    -1,    -1,   632,   633,    -1,    -1,   636,
     637,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,    -1,
      -1,   105,   106,   107,    -1,   109,   110,   111,    -1,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,
     124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
     184,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,    -1,   210,   211,   212,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,   223,
      -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,
      -1,   235,   236,   237,   238,    -1,    -1,   241,    -1,   243,
     244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,
     254,   255,   256,    -1,    -1,   259,    -1,   261,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,   280,    -1,    -1,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,    -1,    -1,    -1,   313,
     314,   315,   316,   317,   318,    -1,    -1,   321,   322,   323,
     324,    -1,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,    -1,    -1,
     344,   345,   346,   347,   348,   349,   350,   351,   352,    -1,
     354,   355,    -1,   357,   358,   359,    -1,   361,   362,   363,
     364,    -1,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   376,   377,   378,    -1,   380,   381,    -1,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,    -1,   401,    -1,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,    -1,    -1,
     414,    -1,    -1,    -1,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,   435,   436,   437,   438,   439,    -1,   441,    -1,   443,
     444,    -1,   446,   447,    -1,    -1,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
      -1,    -1,    -1,   467,   468,   469,   470,    -1,    -1,    -1,
     474,    -1,    -1,    -1,   478,    -1,   480,   481,   482,   483,
      -1,   485,   486,   487,   488,   489,   490,    -1,    -1,    -1,
      -1,    -1,    -1,   497,   498,    -1,   500,    -1,    -1,   503,
      -1,    -1,   506,   507,   508,   509,   510,   511,   512,    -1,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,    -1,   530,    -1,   532,   533,
     534,   535,    -1,   537,   538,   539,    -1,   541,   542,   543,
     544,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,    -1,
     554,   555,   556,   557,   558,   559,   560,   561,   562,   563,
     564,   565,    -1,   567,   568,    -1,    -1,   571,    -1,    -1,
     574,    -1,   576,    -1,   578,   579,   580,    -1,    -1,   583,
     584,   585,   586,   587,    -1,    -1,   590,   591,    -1,   593,
     594,   595,   596,   597,   598,   599,    -1,    -1,    -1,    -1,
      -1,    -1,   606,   607,    -1,   609,   610,   611,    -1,    -1,
     614,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   622,   623,
      -1,    -1,    -1,    -1,   628,   629,    -1,    -1,   632,   633,
      -1,    -1,   636,   637,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,    -1,    -1,   105,   106,   107,    -1,   109,   110,
     111,    -1,   113,   114,   115,   116,   117,   118,    -1,    -1,
      -1,    -1,   123,   124,   125,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,    -1,
     181,   182,   183,   184,    -1,   186,    -1,    -1,    -1,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,    -1,   210,
     211,   212,    -1,   214,   215,    -1,    -1,    -1,   219,   220,
     221,   222,   223,    -1,   225,   226,   227,    -1,   229,    -1,
     231,    -1,    -1,    -1,   235,   236,   237,   238,    -1,    -1,
     241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,
     261,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,
      -1,    -1,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,    -1,
      -1,    -1,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,   322,   323,   324,    -1,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,    -1,    -1,   344,   345,   346,   347,   348,   349,   350,
     351,   352,    -1,   354,   355,    -1,   357,   358,   359,    -1,
     361,   362,   363,   364,    -1,   366,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   376,   377,   378,    -1,   380,
     381,    -1,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,   397,   398,   399,    -1,
     401,    -1,   403,   404,   405,   406,   407,    -1,   409,   410,
     411,    -1,    -1,   414,    -1,    -1,    -1,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,   435,   436,   437,   438,   439,    -1,
     441,    -1,   443,   444,    -1,   446,   447,    -1,    -1,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,    -1,    -1,    -1,   467,   468,   469,   470,
      -1,    -1,    -1,   474,    -1,    -1,    -1,   478,    -1,   480,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,    -1,    -1,   497,   498,    -1,   500,
      -1,    -1,   503,    -1,    -1,   506,   507,   508,   509,   510,
     511,   512,    -1,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,    -1,   530,
      -1,   532,   533,   534,   535,    -1,   537,   538,   539,    -1,
     541,   542,   543,   544,    -1,    -1,    -1,    -1,    -1,   550,
     551,   552,    -1,   554,   555,   556,   557,   558,   559,   560,
     561,   562,   563,   564,   565,    -1,   567,   568,    -1,    -1,
     571,    -1,    -1,   574,    -1,   576,    -1,   578,   579,   580,
      -1,    -1,   583,   584,   585,   586,   587,    -1,    -1,   590,
     591,    -1,   593,   594,   595,   596,   597,   598,   599,    -1,
      -1,    -1,    -1,    -1,    -1,   606,   607,    -1,   609,   610,
     611,    -1,    -1,   614,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   622,   623,    -1,    -1,    -1,    -1,   628,   629,    -1,
      -1,   632,   633,    -1,    -1,   636,   637,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,    -1,    -1,   105,   106,   107,
      -1,   109,   110,   111,    -1,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,
     128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,   179,    -1,   181,   182,   183,   184,    -1,   186,    -1,
      -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,    -1,   210,   211,   212,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,   223,    -1,   225,   226,   227,
      -1,   229,    -1,   231,    -1,    -1,    -1,   235,   236,   237,
     238,    -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,
      -1,   259,    -1,   261,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,   280,    -1,    -1,    -1,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,    -1,    -1,    -1,   313,   314,   315,   316,   317,
     318,    -1,    -1,   321,   322,   323,   324,    -1,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,    -1,    -1,   344,   345,   346,   347,
     348,   349,   350,   351,   352,    -1,   354,   355,    -1,   357,
     358,   359,    -1,   361,   362,   363,   364,    -1,   366,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,   377,
     378,    -1,   380,   381,    -1,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,    -1,   401,    -1,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,    -1,    -1,   414,    -1,    -1,    -1,
     418,   419,   420,   421,   422,    -1,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,   435,   436,   437,
     438,   439,    -1,   441,    -1,   443,   444,    -1,   446,   447,
      -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,    -1,    -1,    -1,   467,
     468,   469,   470,    -1,    -1,    -1,   474,    -1,    -1,    -1,
     478,    -1,   480,   481,   482,   483,    -1,   485,   486,   487,
     488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,
     498,    -1,   500,    -1,    -1,   503,    -1,    -1,   506,   507,
     508,   509,   510,   511,   512,    -1,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,    -1,   530,    -1,   532,   533,   534,   535,    -1,   537,
     538,   539,    -1,   541,   542,   543,   544,    -1,    -1,    -1,
      -1,    -1,   550,   551,   552,    -1,   554,   555,   556,   557,
     558,   559,   560,   561,   562,   563,   564,   565,    -1,   567,
     568,    -1,    -1,   571,    -1,    -1,   574,    -1,   576,    -1,
     578,   579,   580,    -1,    -1,   583,   584,   585,   586,   587,
      -1,    -1,   590,   591,    -1,   593,   594,   595,   596,   597,
     598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,   607,
      -1,   609,   610,   611,    -1,    -1,   614,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   622,   623,    -1,    -1,    -1,    -1,
     628,   629,    -1,    -1,   632,   633,    -1,    -1,   636,   637,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,    -1,    -1,
     105,   106,   107,    -1,   109,   110,   111,    -1,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,   124,
     125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
      -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,    -1,   210,   211,   212,    -1,   214,
     215,    -1,    -1,    -1,   219,   220,   221,   222,   223,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
     235,   236,   237,   238,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,   256,    -1,    -1,   259,    -1,   261,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,   280,    -1,    -1,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,    -1,    -1,    -1,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,   322,   323,   324,
      -1,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,    -1,    -1,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    -1,   354,
     355,    -1,   357,   358,   359,    -1,   361,   362,   363,   364,
      -1,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   376,   377,   378,    -1,   380,   381,    -1,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,   397,   398,   399,    -1,   401,    -1,   403,   404,
     405,   406,   407,    -1,   409,   410,   411,    -1,    -1,   414,
      -1,    -1,    -1,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
     435,   436,   437,   438,   439,    -1,   441,    -1,   443,   444,
      -1,   446,   447,    -1,    -1,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,    -1,
      -1,    -1,   467,   468,   469,   470,    -1,    -1,    -1,   474,
      -1,    -1,    -1,   478,    -1,   480,   481,   482,   483,    -1,
     485,   486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,
      -1,    -1,   497,   498,    -1,   500,    -1,    -1,   503,    -1,
      -1,   506,   507,   508,   509,   510,   511,   512,    -1,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,    -1,   530,    -1,   532,   533,   534,
     535,    -1,   537,   538,   539,    -1,   541,   542,   543,   544,
      -1,    -1,    -1,    -1,    -1,   550,   551,   552,    -1,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,    -1,   567,   568,    -1,    -1,   571,    -1,    -1,   574,
      -1,   576,    -1,   578,   579,   580,    -1,    -1,   583,   584,
     585,   586,   587,    -1,    -1,   590,   591,    -1,   593,   594,
     595,   596,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,
      -1,   606,   607,    -1,   609,   610,   611,    -1,    -1,   614,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   622,   623,    -1,
      -1,    -1,    -1,   628,   629,    -1,    -1,   632,   633,    -1,
      -1,   636,   637,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,    -1,    -1,   105,   106,   107,    -1,   109,   110,   111,
      -1,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,   123,   124,   125,    -1,    -1,   128,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,    -1,   181,
     182,   183,   184,    -1,   186,    -1,    -1,    -1,   190,    -1,
     192,    -1,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,    -1,   210,   211,
     212,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,   223,    -1,   225,   226,   227,    -1,   229,    -1,   231,
      -1,    -1,    -1,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,
      -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,   261,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,    -1,
      -1,    -1,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,    -1,
      -1,   313,   314,   315,   316,   317,   318,    -1,    -1,   321,
     322,   323,   324,    -1,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
      -1,    -1,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,   354,   355,    -1,   357,   358,   359,    -1,   361,
     362,   363,   364,    -1,   366,   367,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   376,   377,   378,    -1,   380,   381,
      -1,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,    -1,   401,
      -1,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
      -1,    -1,   414,    -1,    -1,    -1,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,   435,   436,   437,   438,   439,    -1,   441,
      -1,   443,   444,    -1,   446,   447,    -1,    -1,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,    -1,    -1,    -1,   467,   468,   469,   470,    -1,
      -1,    -1,   474,    -1,    -1,    -1,   478,    -1,   480,   481,
     482,   483,    -1,   485,   486,   487,   488,   489,   490,    -1,
      -1,    -1,    -1,    -1,    -1,   497,   498,    -1,   500,    -1,
      -1,   503,    -1,    -1,   506,   507,   508,   509,   510,   511,
     512,    -1,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,    -1,   530,    -1,
     532,   533,   534,   535,    -1,   537,   538,   539,    -1,   541,
     542,   543,   544,    -1,    -1,    -1,    -1,    -1,   550,   551,
     552,    -1,   554,   555,   556,   557,   558,   559,   560,   561,
     562,   563,   564,   565,    -1,   567,   568,    -1,    -1,   571,
      -1,    -1,   574,    -1,   576,    -1,   578,   579,   580,    -1,
      -1,   583,   584,   585,   586,   587,    -1,    -1,   590,   591,
      -1,   593,   594,   595,   596,   597,   598,   599,    -1,    -1,
      -1,    -1,    -1,    -1,   606,   607,    -1,   609,   610,   611,
      -1,    -1,   614,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     622,   623,    -1,    -1,    -1,    -1,   628,   629,    -1,    -1,
     632,   633,    -1,    -1,   636,   637,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,    -1,
     109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,    -1,   181,   182,   183,   184,    -1,   186,    -1,    -1,
      -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
      -1,   210,   211,   212,    -1,   214,   215,    -1,    -1,    -1,
     219,   220,   221,   222,   223,    -1,   225,   226,   227,    -1,
     229,    -1,   231,    -1,    -1,    -1,   235,   236,   237,   238,
      -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,
     259,    -1,   261,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,   280,    -1,    -1,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,    -1,    -1,    -1,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,   322,   323,   324,    -1,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,    -1,    -1,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,   354,   355,    -1,   357,   358,
     359,    -1,   361,   362,   363,   364,    -1,   366,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,   377,   378,
      -1,   380,   381,    -1,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,   397,   398,
     399,    -1,   401,    -1,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,    -1,    -1,   414,    -1,    -1,    -1,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,   435,   436,   437,   438,
     439,    -1,   441,    -1,   443,   444,    -1,   446,   447,    -1,
      -1,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,    -1,    -1,    -1,   467,   468,
     469,   470,    -1,    -1,    -1,   474,    -1,    -1,    -1,   478,
      -1,   480,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,
      -1,   500,    -1,    -1,   503,    -1,    -1,   506,   507,   508,
     509,   510,   511,   512,    -1,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
      -1,   530,    -1,   532,   533,   534,   535,    -1,   537,   538,
     539,    -1,   541,   542,   543,   544,    -1,    -1,    -1,    -1,
      -1,   550,   551,   552,    -1,   554,   555,   556,   557,   558,
     559,   560,   561,   562,   563,   564,   565,    -1,   567,   568,
      -1,    -1,   571,    -1,    -1,   574,    -1,   576,    -1,   578,
     579,   580,    -1,    -1,   583,   584,   585,   586,   587,    -1,
      -1,   590,   591,    -1,   593,   594,   595,   596,   597,   598,
     599,    -1,    -1,    -1,    -1,    -1,    -1,   606,   607,    -1,
     609,   610,   611,    -1,    -1,   614,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   622,   623,    -1,    -1,    -1,    -1,   628,
     629,    -1,    -1,   632,   633,    -1,    -1,   636,   637,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,    -1,    -1,   105,
     106,   107,    -1,   109,   110,   111,    -1,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,   123,   124,   125,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,    -1,   181,   182,   183,   184,    -1,
     186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,    -1,   210,   211,   212,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,   223,    -1,   225,
     226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,   244,    -1,
     246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,
     256,    -1,    -1,   259,    -1,   261,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,   280,    -1,    -1,    -1,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,    -1,    -1,    -1,   313,   314,   315,
     316,   317,   318,    -1,    -1,   321,   322,   323,   324,    -1,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,    -1,    -1,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,   354,   355,
      -1,   357,   358,   359,    -1,   361,   362,   363,   364,    -1,
     366,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     376,   377,   378,    -1,   380,   381,    -1,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,    -1,   401,    -1,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,    -1,    -1,   414,    -1,
      -1,    -1,   418,   419,   420,   421,   422,    -1,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,   435,
     436,   437,   438,   439,    -1,   441,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,    -1,    -1,
      -1,   467,   468,   469,   470,    -1,    -1,    -1,   474,    -1,
      -1,    -1,   478,    -1,   480,   481,   482,   483,    -1,   485,
     486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,
      -1,   497,   498,    -1,   500,    -1,    -1,   503,    -1,    -1,
     506,   507,   508,   509,   510,   511,   512,    -1,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,    -1,   530,    -1,   532,   533,   534,   535,
      -1,   537,   538,   539,    -1,   541,   542,   543,   544,    -1,
      -1,    -1,    -1,    -1,   550,   551,   552,    -1,   554,   555,
     556,   557,   558,   559,   560,   561,   562,   563,   564,   565,
      -1,   567,   568,    -1,    -1,   571,    -1,    -1,   574,    -1,
     576,    -1,   578,   579,   580,    -1,    -1,   583,   584,   585,
     586,   587,    -1,    -1,   590,   591,    -1,   593,   594,   595,
     596,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,
     606,   607,    -1,   609,   610,   611,    -1,    -1,   614,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   622,   623,    -1,    -1,
      -1,    -1,   628,   629,    -1,    -1,   632,   633,    -1,    -1,
     636,   637,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
      -1,    -1,   105,   106,   107,    -1,   109,   110,   111,    -1,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,   179,    -1,   181,   182,
     183,   184,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,    -1,   210,   211,   212,
      -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,   222,
     223,    -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,
      -1,    -1,   235,   236,   237,   238,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,   256,    -1,    -1,   259,    -1,   261,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,   280,    -1,    -1,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,    -1,    -1,    -1,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,   322,
     323,   324,    -1,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,    -1,
      -1,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,   354,   355,    -1,   357,   358,   359,    -1,   361,   362,
     363,   364,    -1,   366,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   376,   377,   378,    -1,   380,   381,    -1,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,   397,   398,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,    -1,
      -1,   414,    -1,    -1,    -1,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,   435,   436,   437,   438,   439,    -1,   441,    -1,
     443,   444,    -1,   446,   447,    -1,    -1,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,    -1,    -1,    -1,   467,   468,   469,   470,    -1,    -1,
      -1,   474,    -1,    -1,    -1,   478,    -1,   480,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,   497,   498,    -1,   500,    -1,    -1,
     503,    -1,    -1,   506,   507,   508,   509,   510,   511,   512,
      -1,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,    -1,   530,    -1,   532,
     533,   534,   535,    -1,   537,   538,   539,    -1,   541,   542,
     543,   544,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,
      -1,   554,   555,   556,   557,   558,   559,   560,   561,   562,
     563,   564,   565,    -1,   567,   568,    -1,    -1,   571,    -1,
      -1,   574,    -1,   576,    -1,   578,   579,   580,    -1,    -1,
     583,   584,   585,   586,   587,    -1,    -1,   590,   591,    -1,
     593,   594,   595,   596,   597,   598,   599,    -1,    -1,    -1,
      -1,    -1,    -1,   606,   607,    -1,   609,   610,   611,    -1,
      -1,   614,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   622,
     623,    -1,    -1,    -1,    -1,   628,   629,    -1,    -1,   632,
     633,    -1,    -1,   636,   637,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    36,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,   125,    -1,    -1,    -1,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,    -1,    -1,   173,   174,   175,    -1,   177,   178,   179,
      -1,   181,   182,   183,   184,    -1,   186,    -1,    -1,    -1,
     190,    -1,   192,    -1,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,    -1,   206,   207,   208,    -1,
     210,   211,   212,    -1,   214,   215,    -1,    -1,    -1,   219,
     220,   221,   222,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,   231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,
      -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,
      -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,
      -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
     280,    -1,    -1,    -1,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,   299,
     300,    -1,   302,   303,   304,   305,    -1,   307,   308,    -1,
      -1,    -1,    -1,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,   322,    -1,   324,    -1,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,    -1,    -1,   344,   345,   346,   347,    -1,    -1,
      -1,   351,   352,    -1,   354,   355,    -1,   357,   358,   359,
      -1,   361,   362,   363,   364,    -1,   366,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   376,   377,   378,    -1,
      -1,   381,    -1,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,    -1,    -1,   397,   398,   399,
      -1,   401,    -1,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,    -1,    -1,   414,    -1,    -1,    -1,   418,   419,
     420,   421,   422,    -1,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,   435,   436,    -1,    -1,   439,
      -1,   441,    -1,   443,   444,    -1,   446,   447,    -1,    -1,
      -1,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,    -1,    -1,    -1,   467,   468,   469,
     470,    -1,    -1,    -1,   474,    -1,    -1,    -1,   478,    -1,
     480,   481,   482,   483,    -1,   485,   486,   487,   488,   489,
     490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,    -1,
     500,    -1,    -1,   503,    -1,    -1,   506,   507,   508,    -1,
      -1,   511,   512,    -1,   514,   515,   516,   517,   518,   519,
      -1,    -1,   522,   523,   524,   525,    -1,   527,   528,    -1,
     530,    -1,   532,   533,   534,   535,    -1,   537,   538,   539,
      -1,   541,   542,   543,   544,    -1,    -1,    -1,    -1,    -1,
     550,   551,   552,    -1,    -1,   555,   556,   557,   558,   559,
     560,   561,   562,   563,   564,   565,    -1,   567,   568,    -1,
      -1,   571,    -1,    -1,   574,    -1,   576,    -1,   578,   579,
     580,    -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,    -1,
     590,    -1,    -1,    -1,   594,   595,   596,   597,   598,   599,
      -1,    -1,    -1,    -1,    -1,    -1,   606,   607,    -1,   609,
     610,   611,    -1,    -1,   614,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,   636,   637,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,    -1,    -1,
     173,   174,   175,    -1,    -1,   178,   179,    -1,   181,   182,
     183,    -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,
     193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,    -1,   206,   207,   208,    -1,   210,    -1,    -1,
      -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,   222,
      -1,    -1,   225,   226,   227,   228,   229,    -1,   231,    -1,
      -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,   252,
      -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,    -1,   265,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
     303,   304,   305,    -1,   307,   308,    -1,    -1,    -1,    -1,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,   322,
      -1,   324,    -1,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,    -1,   340,   341,    -1,
      -1,   344,   345,   346,   347,    -1,    -1,    -1,   351,   352,
      -1,    -1,    -1,    -1,   357,   358,   359,    -1,   361,   362,
     363,   364,    -1,   366,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   376,   377,   378,    -1,    -1,   381,    -1,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,    -1,    -1,   397,   398,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,    -1,
      -1,   414,    -1,    -1,    -1,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,   435,   436,    -1,    -1,   439,    -1,   441,    -1,
     443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,   464,    -1,    -1,   467,   468,   469,   470,    -1,    -1,
      -1,   474,    -1,    -1,    -1,   478,    -1,   480,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,   491,    -1,
      -1,    -1,    -1,    -1,   497,   498,    -1,   500,    -1,    -1,
     503,    -1,    -1,   506,   507,   508,    -1,    -1,   511,   512,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,   524,   525,    -1,   527,   528,    -1,   530,    -1,   532,
     533,   534,   535,    -1,    -1,   538,   539,    -1,   541,   542,
     543,   544,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,
      -1,    -1,    -1,   556,   557,   558,   559,    -1,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,    -1,   571,    -1,
      -1,   574,    -1,   576,    -1,   578,   579,   580,    -1,    -1,
      -1,    -1,    -1,    -1,   587,    -1,    -1,   590,    -1,    -1,
      -1,   594,   595,   596,   597,   598,   599,    -1,    -1,    -1,
      -1,    -1,    -1,   606,   607,    -1,   609,   610,   611,    -1,
      -1,   614,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,   637,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
      -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,    -1,   173,   174,   175,    -1,    -1,
     178,   179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,
      -1,    -1,   190,    -1,   192,   193,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,    -1,   206,   207,
     208,    -1,   210,    -1,    -1,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
     228,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,   237,
      -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,   252,    -1,   254,   255,   256,    -1,
      -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,    -1,    -1,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,   299,   300,    -1,   302,   303,   304,   305,    -1,   307,
     308,    -1,    -1,    -1,    -1,   313,   314,   315,   316,   317,
     318,    -1,    -1,   321,   322,    -1,   324,    -1,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,    -1,   340,   341,    -1,    -1,   344,   345,   346,   347,
      -1,    -1,    -1,   351,   352,    -1,    -1,    -1,    -1,   357,
     358,   359,    -1,   361,   362,   363,   364,    -1,   366,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,   377,
     378,    -1,    -1,   381,    -1,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,    -1,    -1,   397,
     398,   399,    -1,   401,    -1,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,    -1,    -1,   414,    -1,    -1,    -1,
     418,   419,   420,   421,   422,    -1,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,   435,   436,    -1,
      -1,   439,    -1,   441,    -1,   443,   444,    -1,   446,   447,
      -1,    -1,    -1,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,    -1,    -1,    -1,   467,
     468,   469,   470,    -1,    -1,    -1,   474,    -1,    -1,    -1,
     478,    -1,   480,   481,   482,   483,    -1,   485,   486,   487,
     488,   489,   490,   491,    -1,    -1,    -1,    -1,    -1,   497,
     498,    -1,   500,    -1,    -1,   503,    -1,    -1,   506,   507,
     508,    -1,    -1,   511,   512,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,   524,   525,    -1,   527,
     528,    -1,   530,    -1,   532,   533,   534,   535,    -1,    -1,
     538,   539,    -1,   541,   542,   543,   544,    -1,    -1,    -1,
      -1,    -1,   550,   551,   552,    -1,    -1,    -1,   556,   557,
     558,   559,    -1,   561,   562,    -1,   564,   565,    -1,   567,
     568,    -1,    -1,   571,    -1,    -1,   574,    -1,   576,    -1,
     578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,
      -1,    -1,   590,    -1,    -1,    -1,   594,   595,   596,   597,
     598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,   607,
      -1,   609,   610,   611,    -1,    -1,   614,    -1,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,   637,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,    -1,    -1,
     173,   174,   175,    -1,    -1,   178,   179,    -1,   181,   182,
     183,    -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,    -1,   206,   207,   208,    -1,   210,    -1,    -1,
      -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,   222,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,
      -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
     303,   304,   305,    -1,   307,   308,    -1,    -1,    -1,    -1,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,   322,
      -1,   324,    -1,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,    -1,   340,   341,    -1,
      -1,   344,   345,   346,   347,    -1,    -1,    -1,   351,   352,
      -1,    -1,    -1,    -1,   357,   358,   359,    -1,   361,   362,
     363,   364,    -1,   366,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   376,   377,   378,    -1,    -1,   381,    -1,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,    -1,    -1,   397,   398,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,    -1,
      -1,   414,    -1,    -1,    -1,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,   435,   436,    -1,    -1,   439,    -1,   441,    -1,
     443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,   464,    -1,    -1,   467,   468,   469,   470,    -1,    -1,
      -1,   474,    -1,    -1,    -1,   478,    -1,   480,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,   497,   498,    -1,   500,    -1,    -1,
     503,    -1,    -1,   506,   507,   508,    -1,    -1,   511,   512,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,   524,   525,    -1,   527,   528,    -1,   530,    -1,   532,
     533,   534,   535,    -1,    -1,   538,   539,    -1,   541,   542,
     543,   544,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,
      -1,    -1,    -1,   556,   557,   558,   559,    -1,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,    -1,   571,    -1,
      -1,   574,    -1,   576,    -1,   578,   579,   580,    -1,    -1,
      -1,    -1,    -1,    -1,   587,    -1,    -1,   590,    -1,    -1,
      -1,   594,   595,   596,   597,   598,   599,    -1,    -1,    -1,
      -1,    -1,    -1,   606,   607,    -1,   609,   610,   611,    -1,
      -1,   614,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,   630,    -1,    -1,
      18,    -1,    -1,    21,   637,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
      -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,    -1,   173,   174,   175,    -1,    -1,
     178,   179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,
      -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,    -1,   206,   207,
     208,    -1,   210,    -1,    -1,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
      -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,   237,
      -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,
      -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,    -1,    -1,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,   299,   300,    -1,   302,   303,   304,   305,    -1,   307,
     308,    -1,    -1,    -1,    -1,   313,   314,   315,   316,   317,
     318,    -1,    -1,   321,   322,    -1,   324,    -1,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,    -1,   340,   341,    -1,    -1,   344,   345,   346,   347,
      -1,    -1,    -1,   351,   352,    -1,    -1,    -1,    -1,   357,
     358,   359,    -1,   361,   362,   363,   364,    -1,   366,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,   377,
     378,    -1,    -1,   381,    -1,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,    -1,    -1,   397,
     398,   399,    -1,   401,    -1,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,    -1,    -1,   414,    -1,    -1,    -1,
     418,   419,   420,   421,   422,    -1,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,   435,   436,    -1,
      -1,   439,    -1,   441,    -1,   443,   444,    -1,   446,   447,
      -1,    -1,    -1,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,    -1,    -1,    -1,   467,
     468,   469,   470,    -1,    -1,    -1,   474,    -1,    -1,    -1,
     478,    -1,   480,   481,   482,   483,    -1,   485,   486,   487,
     488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,
     498,    -1,   500,    -1,    -1,   503,    -1,    -1,   506,   507,
     508,    -1,    -1,   511,   512,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,   524,   525,    -1,   527,
     528,    -1,   530,    -1,   532,   533,   534,   535,    -1,    -1,
     538,   539,    -1,   541,   542,   543,   544,    -1,    -1,    -1,
      -1,    -1,   550,   551,   552,    -1,    -1,    -1,   556,   557,
     558,   559,    -1,   561,   562,    -1,   564,   565,    -1,   567,
     568,    -1,    -1,   571,    -1,    -1,   574,    -1,   576,    -1,
     578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,
      -1,    -1,   590,    -1,    -1,    -1,   594,   595,   596,   597,
     598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,   607,
      -1,   609,   610,   611,    -1,    -1,   614,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,   630,    14,    -1,    -1,    -1,    18,   636,   637,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,
     181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,    -1,   206,   207,   208,    -1,   210,
      -1,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,
     221,   222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
     231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,
     241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,   299,   300,
      -1,   302,   303,   304,   305,    -1,   307,   308,    -1,    -1,
      -1,    -1,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,   322,    -1,   324,    -1,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,    -1,   340,
     341,    -1,    -1,   344,   345,   346,   347,    -1,    -1,    -1,
     351,   352,    -1,    -1,    -1,    -1,   357,   358,   359,    -1,
     361,   362,   363,   364,    -1,   366,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   376,   377,   378,    -1,    -1,
     381,    -1,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,    -1,    -1,   397,   398,   399,    -1,
     401,    -1,   403,   404,   405,   406,   407,    -1,   409,   410,
     411,    -1,    -1,   414,    -1,    -1,    -1,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
     441,    -1,   443,   444,    -1,   446,   447,    -1,    -1,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,    -1,    -1,    -1,   467,   468,   469,   470,
      -1,    -1,    -1,   474,    -1,    -1,    -1,   478,    -1,   480,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,    -1,    -1,   497,   498,    -1,   500,
      -1,    -1,   503,    -1,    -1,   506,   507,   508,    -1,    -1,
     511,   512,    -1,   514,   515,   516,   517,   518,   519,    -1,
      -1,   522,   523,   524,   525,    -1,   527,   528,    -1,   530,
      -1,   532,   533,   534,   535,    -1,    -1,   538,   539,    -1,
     541,   542,   543,   544,    -1,    -1,    -1,    -1,    -1,   550,
     551,   552,    -1,    -1,    -1,   556,   557,   558,   559,    -1,
     561,   562,    -1,   564,   565,    -1,   567,   568,    -1,    -1,
     571,    -1,    -1,   574,    -1,   576,    -1,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,    -1,   590,
      -1,    -1,    -1,   594,   595,   596,   597,   598,   599,    -1,
      -1,    -1,    -1,    -1,    -1,   606,   607,    -1,   609,   610,
     611,    -1,    -1,   614,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,   629,    -1,
      14,    -1,    -1,    -1,    18,    -1,   637,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,    -1,    -1,   173,
     174,   175,    -1,    -1,   178,   179,    -1,   181,   182,   183,
      -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,    -1,   206,   207,   208,    -1,   210,    -1,    -1,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,
      -1,    -1,   236,   237,    -1,   239,    -1,   241,    -1,   243,
     244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,
     254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,   299,   300,    -1,   302,   303,
     304,   305,    -1,   307,   308,    -1,    -1,    -1,    -1,   313,
     314,   315,   316,   317,   318,    -1,    -1,   321,   322,    -1,
     324,    -1,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,    -1,   340,   341,    -1,    -1,
     344,   345,   346,   347,    -1,    -1,    -1,   351,   352,    -1,
      -1,    -1,    -1,   357,   358,   359,    -1,   361,   362,   363,
     364,    -1,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   376,   377,   378,    -1,    -1,   381,    -1,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,    -1,    -1,   397,   398,   399,    -1,   401,    -1,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,    -1,    -1,
     414,    -1,    -1,    -1,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,   435,   436,    -1,    -1,   439,    -1,   441,    -1,   443,
     444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
      -1,    -1,    -1,   467,   468,   469,   470,    -1,    -1,    -1,
     474,    -1,    -1,    -1,   478,    -1,   480,   481,   482,   483,
      -1,   485,   486,   487,   488,   489,   490,    -1,    -1,    -1,
      -1,    -1,    -1,   497,   498,    -1,   500,    -1,    -1,   503,
      -1,    -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,
     514,   515,   516,   517,   518,   519,    -1,    -1,   522,   523,
     524,   525,    -1,   527,   528,    -1,   530,    -1,   532,   533,
     534,   535,    -1,    -1,   538,   539,    -1,   541,   542,   543,
     544,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,    -1,
      -1,    -1,   556,   557,   558,   559,    -1,   561,   562,    -1,
     564,   565,    -1,   567,   568,    -1,    -1,   571,    -1,    -1,
     574,    -1,   576,    -1,   578,   579,   580,    -1,    -1,    -1,
      -1,    -1,    -1,   587,    -1,    -1,   590,    -1,    -1,    -1,
     594,   595,   596,   597,   598,   599,    -1,    -1,    -1,    -1,
      -1,    -1,   606,   607,    -1,   609,   610,   611,    -1,    -1,
     614,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,   637,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,    -1,    -1,   173,   174,   175,    -1,    -1,   178,
     179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,
      -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,    -1,   206,   207,   208,
      -1,   210,    -1,    -1,    -1,   214,   215,    -1,    -1,    -1,
     219,   220,   221,   222,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,   231,    -1,    -1,    -1,    -1,   236,   237,    -1,
      -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,    -1,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,   300,    -1,   302,   303,   304,   305,    -1,   307,   308,
      -1,    -1,    -1,    -1,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,   322,    -1,   324,    -1,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
      -1,   340,   341,    -1,    -1,   344,   345,   346,   347,    -1,
      -1,    -1,   351,   352,    -1,    -1,    -1,    -1,   357,   358,
     359,    -1,   361,   362,   363,   364,    -1,   366,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,   377,   378,
      -1,    -1,   381,    -1,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,    -1,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,    -1,    -1,   414,    -1,    -1,    -1,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,   435,   436,    -1,    -1,
     439,    -1,   441,    -1,   443,   444,    -1,   446,   447,    -1,
      -1,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,    -1,    -1,    -1,   467,   468,
     469,   470,    -1,    -1,    -1,   474,    -1,    -1,    -1,   478,
      -1,   480,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,
      -1,   500,    -1,    -1,   503,    -1,    -1,   506,   507,   508,
      -1,    -1,   511,   512,    -1,   514,   515,   516,   517,   518,
     519,    -1,    -1,   522,   523,   524,   525,    -1,   527,   528,
      -1,   530,    -1,   532,   533,   534,   535,    -1,    -1,   538,
     539,    -1,   541,   542,   543,   544,    -1,    -1,    -1,    -1,
      -1,   550,   551,   552,    -1,    -1,    -1,   556,   557,   558,
     559,    -1,   561,   562,    -1,   564,   565,    -1,   567,   568,
      -1,    -1,   571,    -1,    -1,   574,    -1,   576,    -1,   578,
     579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,
      -1,   590,    -1,    -1,    -1,   594,   595,   596,   597,   598,
     599,    -1,    -1,    -1,    -1,    -1,    -1,   606,   607,    -1,
     609,   610,   611,    -1,    -1,   614,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     5,   624,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,   637,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,
     181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,    -1,   206,   207,   208,    -1,   210,
      -1,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,
     221,   222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
     231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,
     241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,   299,   300,
      -1,   302,   303,   304,   305,    -1,   307,   308,    -1,    -1,
      -1,    -1,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,   322,    -1,   324,    -1,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,    -1,   340,
     341,    -1,    -1,   344,   345,   346,   347,    -1,    -1,    -1,
     351,   352,    -1,    -1,    -1,    -1,   357,   358,   359,    -1,
     361,   362,   363,   364,    -1,   366,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   376,   377,   378,    -1,    -1,
     381,    -1,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,    -1,    -1,   397,   398,   399,    -1,
     401,    -1,   403,   404,   405,   406,   407,    -1,   409,   410,
     411,    -1,    -1,   414,    -1,    -1,    -1,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
     441,    -1,   443,   444,    -1,   446,   447,    -1,    -1,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,    -1,    -1,    -1,   467,   468,   469,   470,
      -1,    -1,    -1,   474,    -1,    -1,    -1,   478,    -1,   480,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,    -1,    -1,   497,   498,    -1,   500,
      -1,    -1,   503,    -1,    -1,   506,   507,   508,    -1,    -1,
     511,   512,    -1,   514,   515,   516,   517,   518,   519,    -1,
      -1,   522,   523,   524,   525,    -1,   527,   528,    -1,   530,
      -1,   532,   533,   534,   535,    -1,    -1,   538,   539,    -1,
     541,   542,   543,   544,    -1,    -1,    -1,    -1,    -1,   550,
     551,   552,    -1,    -1,    -1,   556,   557,   558,   559,    -1,
     561,   562,    -1,   564,   565,    -1,   567,   568,    -1,    -1,
     571,    -1,    -1,   574,    -1,   576,    -1,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,    -1,   590,
      -1,    -1,    -1,   594,   595,   596,   597,   598,   599,    -1,
      -1,    -1,    -1,    -1,    -1,   606,   607,    -1,   609,   610,
     611,    -1,    -1,   614,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,   629,    -1,
      14,    -1,    -1,    -1,    18,    -1,   637,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,    -1,    -1,   173,
     174,   175,    -1,    -1,   178,   179,    -1,   181,   182,   183,
      -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,    -1,   206,   207,   208,    -1,   210,    -1,    -1,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,
      -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,
     244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,
     254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,   299,   300,    -1,   302,   303,
     304,   305,    -1,   307,   308,    -1,    -1,    -1,    -1,   313,
     314,   315,   316,   317,   318,    -1,    -1,   321,   322,    -1,
     324,    -1,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,    -1,   340,   341,    -1,    -1,
     344,   345,   346,   347,    -1,    -1,    -1,   351,   352,    -1,
      -1,    -1,    -1,   357,   358,   359,    -1,   361,   362,   363,
     364,    -1,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   376,   377,   378,    -1,    -1,   381,    -1,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,    -1,    -1,   397,   398,   399,    -1,   401,    -1,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,    -1,    -1,
     414,    -1,    -1,    -1,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,   435,   436,    -1,    -1,   439,    -1,   441,    -1,   443,
     444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
      -1,    -1,    -1,   467,   468,   469,   470,    -1,    -1,    -1,
     474,    -1,    -1,    -1,   478,    -1,   480,   481,   482,   483,
      -1,   485,   486,   487,   488,   489,   490,    -1,    -1,    -1,
      -1,    -1,    -1,   497,   498,    -1,   500,    -1,    -1,   503,
      -1,    -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,
     514,   515,   516,   517,   518,   519,    -1,    -1,   522,   523,
     524,   525,    -1,   527,   528,    -1,   530,    -1,   532,   533,
     534,   535,    -1,    -1,   538,   539,    -1,   541,   542,   543,
     544,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,    -1,
      -1,    -1,   556,   557,   558,   559,    -1,   561,   562,    -1,
     564,   565,    -1,   567,   568,    -1,    -1,   571,    -1,    -1,
     574,    -1,   576,    -1,   578,   579,   580,    -1,    -1,    -1,
      -1,    -1,    -1,   587,    -1,    -1,   590,    -1,    -1,    -1,
     594,   595,   596,   597,   598,   599,    -1,    -1,    -1,    -1,
      -1,    -1,   606,   607,    -1,   609,   610,   611,    -1,    -1,
     614,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,   636,   637,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,    -1,    -1,   173,   174,   175,    -1,
      -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,   186,
      -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,    -1,   206,
     207,   208,    -1,   210,    -1,    -1,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,
     237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,   300,    -1,   302,   303,   304,   305,    -1,
     307,   308,    -1,    -1,    -1,    -1,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,   322,    -1,   324,    -1,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,    -1,   340,   341,    -1,    -1,   344,   345,   346,
     347,    -1,    -1,    -1,   351,   352,    -1,    -1,    -1,    -1,
     357,   358,   359,    -1,   361,   362,   363,   364,    -1,   366,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,
     377,   378,    -1,    -1,   381,    -1,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,    -1,    -1,
     397,   398,   399,    -1,   401,    -1,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,    -1,    -1,   414,    -1,    -1,
      -1,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,   435,   436,
      -1,    -1,   439,    -1,   441,    -1,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,    -1,    -1,    -1,
     467,   468,   469,   470,    -1,    -1,    -1,   474,    -1,    -1,
      -1,   478,    -1,   480,   481,   482,   483,    -1,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
     497,   498,    -1,   500,    -1,    -1,   503,    -1,    -1,   506,
     507,   508,    -1,    -1,   511,   512,    -1,   514,   515,   516,
     517,   518,   519,    -1,    -1,   522,   523,   524,   525,    -1,
     527,   528,    -1,   530,    -1,   532,   533,   534,   535,    -1,
      -1,   538,   539,    -1,   541,   542,   543,   544,    -1,    -1,
      -1,    -1,    -1,   550,   551,   552,    -1,    -1,    -1,   556,
     557,   558,   559,    -1,   561,   562,    -1,   564,   565,    -1,
     567,   568,    -1,    -1,   571,    -1,    -1,   574,    -1,   576,
      -1,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,
     587,    -1,    -1,   590,    -1,    -1,    -1,   594,   595,   596,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
     607,    -1,   609,   610,   611,    -1,    -1,   614,    -1,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
     637,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
      -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,   181,
     182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,    -1,
     192,    -1,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,    -1,   206,   207,   208,    -1,   210,    -1,
      -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,
      -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,
      -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,
      -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,
      -1,    -1,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,   300,    -1,
     302,   303,   304,   305,    -1,   307,   308,    -1,    -1,    -1,
      -1,   313,   314,   315,   316,   317,   318,    -1,    -1,   321,
     322,    -1,   324,    -1,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,    -1,   340,   341,
      -1,    -1,   344,   345,   346,   347,    -1,    -1,    -1,   351,
     352,    -1,    -1,    -1,    -1,   357,   358,   359,    -1,   361,
     362,   363,   364,    -1,   366,   367,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   376,   377,   378,    -1,    -1,   381,
      -1,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,    -1,    -1,   397,   398,   399,    -1,   401,
      -1,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
      -1,    -1,   414,    -1,    -1,    -1,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,   441,
      -1,   443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,    -1,    -1,    -1,   467,   468,   469,   470,    -1,
      -1,    -1,   474,    -1,    -1,    -1,   478,    -1,   480,   481,
     482,   483,    -1,   485,   486,   487,   488,   489,   490,    -1,
      -1,    -1,    -1,    -1,    -1,   497,   498,    -1,   500,    -1,
      -1,   503,    -1,    -1,   506,   507,   508,    -1,    -1,   511,
     512,    -1,   514,   515,   516,   517,   518,   519,    -1,    -1,
     522,   523,   524,   525,    -1,   527,   528,    -1,   530,    -1,
     532,   533,   534,   535,    -1,    -1,   538,   539,    -1,   541,
     542,   543,   544,    -1,    -1,    -1,    -1,    -1,   550,   551,
     552,    -1,    -1,    -1,   556,   557,   558,   559,    -1,   561,
     562,    -1,   564,   565,    -1,   567,   568,    -1,    -1,   571,
      -1,    -1,   574,    -1,   576,    -1,   578,   579,   580,    -1,
      -1,    -1,    -1,    -1,    -1,   587,    -1,    -1,   590,    -1,
      -1,    -1,   594,   595,   596,   597,   598,   599,    -1,    -1,
      -1,    -1,    -1,    -1,   606,   607,    -1,   609,   610,   611,
      -1,    -1,   614,    -1,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   637,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,    -1,    -1,   173,   174,   175,    -1,
      -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,   186,
      -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,    -1,   206,
     207,   208,    -1,   210,    -1,    -1,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,
     237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,   300,    -1,   302,   303,   304,   305,    -1,
     307,   308,    -1,    -1,    -1,    -1,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,   322,    -1,   324,    -1,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,    -1,   340,   341,    -1,    -1,   344,   345,   346,
     347,    -1,    -1,    -1,   351,   352,    -1,    -1,    -1,    -1,
     357,   358,   359,    -1,   361,   362,   363,   364,    -1,   366,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,
     377,   378,    -1,    -1,   381,    -1,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,    -1,    -1,
     397,   398,   399,    -1,   401,    -1,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,    -1,    -1,   414,    -1,    -1,
      -1,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,   435,   436,
      -1,    -1,   439,    -1,   441,    -1,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,    -1,    -1,    -1,
     467,   468,   469,   470,    -1,    -1,    -1,   474,    -1,    -1,
      -1,   478,    -1,   480,   481,   482,   483,    -1,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
     497,   498,    -1,   500,    -1,    -1,   503,    -1,    -1,   506,
     507,   508,    -1,    -1,   511,   512,    -1,   514,   515,   516,
     517,   518,   519,    -1,    -1,   522,   523,   524,   525,    -1,
     527,   528,    -1,   530,    -1,   532,   533,   534,   535,    -1,
      -1,   538,   539,    -1,   541,   542,   543,   544,    -1,    -1,
      -1,    -1,    -1,   550,   551,   552,    -1,    -1,    -1,   556,
     557,   558,   559,    -1,   561,   562,    -1,   564,   565,    -1,
     567,   568,    -1,    -1,   571,    -1,    -1,   574,    -1,   576,
      -1,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,
     587,    -1,    -1,   590,    -1,    -1,    -1,   594,   595,   596,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
     607,    -1,   609,   610,   611,    -1,    -1,   614,    -1,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
     637,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
      -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,   181,
     182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,    -1,
     192,    -1,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,    -1,   206,   207,   208,    -1,   210,    -1,
      -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,
      -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,
      -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,
      -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,
      -1,    -1,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,   300,    -1,
     302,   303,   304,   305,    -1,   307,   308,    -1,    -1,    -1,
      -1,   313,   314,   315,   316,   317,   318,    -1,    -1,   321,
     322,    -1,   324,    -1,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,    -1,   340,   341,
      -1,    -1,   344,   345,   346,   347,    -1,    -1,    -1,   351,
     352,    -1,    -1,    -1,    -1,   357,   358,   359,    -1,   361,
     362,   363,   364,    -1,   366,   367,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   376,   377,   378,    -1,    -1,   381,
      -1,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,    -1,    -1,   397,   398,   399,    -1,   401,
      -1,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
      -1,    -1,   414,    -1,    -1,    -1,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,   441,
      -1,   443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,    -1,    -1,    -1,   467,   468,   469,   470,    -1,
      -1,    -1,   474,    -1,    -1,    -1,   478,    -1,   480,   481,
     482,   483,    -1,   485,   486,   487,   488,   489,   490,    -1,
      -1,    -1,    -1,    -1,    -1,   497,   498,    -1,   500,    -1,
      -1,   503,    -1,    -1,   506,   507,   508,    -1,    -1,   511,
     512,    -1,   514,   515,   516,   517,   518,   519,    -1,    -1,
     522,   523,   524,   525,    -1,   527,   528,    -1,   530,    -1,
     532,   533,   534,   535,    -1,    -1,   538,   539,    -1,   541,
     542,   543,   544,    -1,    -1,    -1,    -1,    -1,   550,   551,
     552,    -1,    -1,    -1,   556,   557,   558,   559,    -1,   561,
     562,    -1,   564,   565,    -1,   567,   568,    -1,    -1,   571,
      -1,    -1,   574,    -1,   576,    -1,   578,   579,   580,    -1,
      -1,    -1,    -1,    -1,    -1,   587,    -1,    -1,   590,    -1,
      -1,    -1,   594,   595,   596,   597,   598,   599,    -1,    -1,
      -1,    -1,    -1,    -1,   606,   607,    -1,   609,   610,   611,
      -1,    -1,   614,    -1,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   637,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,    -1,    -1,   173,   174,   175,    -1,
      -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,   186,
      -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,    -1,   206,
     207,   208,    -1,   210,    -1,    -1,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,
     237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,   264,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,   300,    -1,   302,   303,   304,   305,    -1,
     307,   308,    -1,    -1,    -1,    -1,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,   322,    -1,   324,    -1,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,    -1,   340,   341,    -1,    -1,   344,   345,   346,
     347,    -1,    -1,    -1,   351,   352,    -1,    -1,    -1,    -1,
     357,   358,   359,    -1,   361,   362,   363,   364,    -1,   366,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,
     377,   378,    -1,    -1,   381,    -1,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,    -1,    -1,
     397,   398,   399,    -1,   401,    -1,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,    -1,    -1,   414,    -1,    -1,
      -1,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,   435,   436,
      -1,    -1,   439,    -1,   441,    -1,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,    -1,    -1,    -1,
     467,   468,   469,   470,    -1,    -1,    -1,   474,    -1,    -1,
      -1,   478,    -1,   480,   481,   482,   483,    -1,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
     497,   498,    -1,   500,    -1,    -1,   503,    -1,    -1,   506,
     507,   508,    -1,    -1,   511,   512,    -1,   514,   515,   516,
     517,   518,   519,    -1,    -1,   522,   523,   524,   525,    -1,
     527,   528,    -1,   530,    -1,   532,   533,   534,   535,    -1,
     537,   538,   539,    -1,   541,   542,   543,   544,    -1,    -1,
      -1,    -1,    -1,   550,   551,   552,    -1,    -1,    -1,   556,
     557,   558,   559,    -1,   561,   562,    -1,   564,   565,    -1,
     567,   568,    -1,    -1,   571,    -1,    -1,   574,    -1,   576,
      -1,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,
     587,    -1,    -1,   590,    -1,    -1,    -1,   594,   595,   596,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
     607,    -1,   609,   610,   611,    -1,    -1,   614,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,   636,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,    -1,    -1,
     173,   174,   175,    -1,    -1,   178,   179,    -1,   181,   182,
     183,    -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,    -1,   206,   207,   208,    -1,   210,    -1,    -1,
      -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,   222,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,
      -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,   264,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
     303,   304,   305,    -1,   307,   308,    -1,    -1,    -1,    -1,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,   322,
      -1,   324,    -1,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,    -1,   340,   341,    -1,
      -1,   344,   345,   346,   347,    -1,    -1,    -1,   351,   352,
      -1,    -1,    -1,    -1,   357,   358,   359,    -1,   361,   362,
     363,   364,    -1,   366,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   376,   377,   378,    -1,    -1,   381,    -1,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,    -1,    -1,   397,   398,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,    -1,
      -1,   414,    -1,    -1,    -1,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,   435,   436,    -1,    -1,   439,    -1,   441,    -1,
     443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,    -1,    -1,    -1,   467,   468,   469,   470,    -1,    -1,
      -1,   474,    -1,    -1,    -1,   478,    -1,   480,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,   497,   498,    -1,   500,    -1,    -1,
     503,    -1,    -1,   506,   507,   508,    -1,    -1,   511,   512,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,   524,   525,    -1,   527,   528,    -1,   530,    -1,   532,
     533,   534,   535,    -1,   537,   538,   539,    -1,   541,   542,
     543,   544,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,
      -1,    -1,    -1,   556,   557,   558,   559,    -1,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,    -1,   571,    -1,
      -1,   574,    -1,   576,    -1,   578,   579,   580,    -1,    -1,
      -1,    -1,    -1,    -1,   587,    -1,    -1,   590,    -1,    -1,
      -1,   594,   595,   596,   597,   598,   599,    -1,    -1,    -1,
      -1,    -1,    -1,   606,   607,    -1,   609,   610,   611,    -1,
      -1,   614,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,   636,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,    -1,    -1,   173,   174,   175,    -1,    -1,   178,
     179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,
      -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,    -1,   206,   207,   208,
      -1,   210,    -1,    -1,    -1,   214,   215,    -1,    -1,    -1,
     219,   220,   221,   222,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,   231,    -1,    -1,    -1,    -1,   236,   237,    -1,
      -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,    -1,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,   300,    -1,   302,   303,   304,   305,    -1,   307,   308,
      -1,    -1,    -1,    -1,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,   322,    -1,   324,    -1,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
      -1,   340,   341,    -1,    -1,   344,   345,   346,   347,    -1,
      -1,    -1,   351,   352,    -1,    -1,    -1,    -1,   357,   358,
     359,    -1,   361,   362,   363,   364,    -1,   366,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,   377,   378,
      -1,    -1,   381,    -1,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,    -1,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,    -1,    -1,   414,    -1,    -1,    -1,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,   435,   436,    -1,    -1,
     439,    -1,   441,    -1,   443,   444,    -1,   446,   447,    -1,
      -1,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,    -1,    -1,    -1,   467,   468,
     469,   470,    -1,    -1,    -1,   474,    -1,    -1,    -1,   478,
      -1,   480,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,
      -1,   500,    -1,    -1,   503,    -1,    -1,   506,   507,   508,
      -1,    -1,   511,   512,    -1,   514,   515,   516,   517,   518,
     519,    -1,    -1,   522,   523,   524,   525,    -1,   527,   528,
      -1,   530,    -1,   532,   533,   534,   535,    -1,   537,   538,
     539,    -1,   541,   542,   543,   544,    -1,    -1,    -1,    -1,
      -1,   550,   551,   552,    -1,    -1,    -1,   556,   557,   558,
     559,    -1,   561,   562,    -1,   564,   565,    -1,   567,   568,
      -1,    -1,   571,    -1,    -1,   574,    -1,   576,    -1,   578,
     579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,
      -1,   590,    -1,    -1,    -1,   594,   595,   596,   597,   598,
     599,    -1,    -1,    -1,    -1,    -1,    -1,   606,   607,    -1,
     609,   610,   611,    -1,    -1,   614,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    -1,   636,    23,    24,
      25,    26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,
      55,    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    83,    -1,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    -1,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,    -1,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
      -1,   156,    -1,   158,   159,   160,    -1,   162,   163,    -1,
     165,   166,   167,   168,    -1,    -1,    -1,    -1,   173,   174,
     175,    -1,    -1,   178,   179,   180,   181,   182,   183,    -1,
      -1,    -1,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
      -1,    -1,   207,   208,    -1,    -1,    -1,    -1,    -1,    -1,
     215,    -1,    -1,    -1,   219,   220,   221,   222,   223,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
      -1,   236,    -1,    -1,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,   248,    -1,    -1,   251,    -1,    -1,    -1,
     255,   256,    -1,    -1,   259,   260,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,   300,    -1,   302,   303,   304,
     305,    -1,   307,   308,    -1,    -1,    -1,    -1,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,   322,    -1,   324,
      -1,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,    -1,   340,   341,    -1,    -1,   344,
     345,   346,   347,    -1,    -1,    -1,    -1,   352,    -1,    -1,
      -1,    -1,   357,   358,   359,    -1,   361,   362,   363,   364,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   377,   378,    -1,    -1,    -1,    -1,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,    -1,
      -1,    -1,    -1,   398,   399,    -1,   401,    -1,   403,   404,
     405,   406,   407,    -1,   409,   410,   411,    -1,    -1,   414,
      -1,    -1,    -1,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,    -1,   431,    -1,    -1,   434,
      -1,   436,   437,    -1,   439,    -1,    -1,    -1,   443,    -1,
      -1,   446,   447,   448,    -1,    -1,    -1,   452,   453,   454,
     455,   456,   457,    -1,   459,   460,    -1,   462,    -1,    -1,
      -1,    -1,   467,   468,   469,    -1,    -1,    -1,    -1,   474,
      -1,    -1,    -1,   478,    -1,    -1,   481,    -1,   483,    -1,
     485,    -1,   487,    -1,   489,   490,    -1,    -1,    -1,    -1,
      -1,    -1,   497,   498,    -1,   500,    -1,    -1,   503,    -1,
      -1,   506,    -1,   508,    -1,    -1,    -1,   512,    -1,   514,
     515,   516,   517,   518,   519,    -1,    -1,   522,   523,   524,
     525,    -1,   527,   528,    -1,   530,    -1,   532,   533,   534,
     535,    -1,    -1,   538,   539,    -1,   541,   542,   543,   544,
      -1,    -1,    -1,    -1,    -1,   550,   551,   552,    -1,    -1,
      -1,    -1,   557,   558,   559,    -1,   561,   562,    -1,   564,
     565,    -1,    -1,    -1,    -1,    -1,   571,    -1,    -1,   574,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,    -1,
      -1,    -1,   587,    -1,    -1,   590,    -1,    -1,    -1,   594,
     595,   596,   597,   598,   599,    -1,    -1,   602,    -1,    -1,
      -1,   606,    -1,    -1,   609,    -1,   611,    -1,    -1,   614,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,   631,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,   107,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,    -1,    -1,   173,
     174,   175,    -1,    -1,   178,   179,    -1,   181,   182,   183,
      -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,    -1,   206,   207,   208,    -1,   210,    -1,    -1,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,
      -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,
     244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,
     254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
     264,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,   299,   300,    -1,   302,   303,
     304,   305,    -1,   307,   308,    -1,    -1,    -1,    -1,   313,
     314,   315,   316,   317,   318,    -1,    -1,   321,   322,    -1,
     324,    -1,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,    -1,   340,   341,    -1,    -1,
     344,   345,   346,   347,    -1,    -1,    -1,   351,   352,    -1,
      -1,    -1,    -1,   357,   358,   359,    -1,   361,   362,   363,
     364,    -1,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   376,   377,   378,    -1,    -1,   381,    -1,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,    -1,    -1,   397,   398,   399,    -1,   401,    -1,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,    -1,    -1,
     414,    -1,    -1,    -1,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,   435,   436,    -1,    -1,   439,    -1,   441,    -1,   443,
     444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
      -1,    -1,    -1,   467,   468,   469,   470,    -1,    -1,    -1,
     474,    -1,    -1,    -1,   478,    -1,   480,   481,   482,   483,
      -1,   485,   486,   487,   488,   489,   490,    -1,    -1,    -1,
      -1,    -1,    -1,   497,   498,    -1,   500,    -1,    -1,   503,
      -1,    -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,
     514,   515,   516,   517,   518,   519,    -1,    -1,   522,   523,
     524,   525,    -1,   527,   528,    -1,   530,    -1,   532,   533,
     534,   535,    -1,   537,   538,   539,    -1,   541,   542,   543,
     544,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,    -1,
      -1,    -1,   556,   557,   558,   559,    -1,   561,   562,    -1,
     564,   565,    -1,   567,   568,    -1,    -1,   571,    -1,    -1,
     574,    -1,   576,    -1,   578,   579,   580,    -1,    -1,    -1,
      -1,    -1,    -1,   587,    -1,    -1,   590,    -1,    -1,    -1,
     594,   595,   596,   597,   598,   599,    -1,    -1,    -1,    -1,
      -1,    -1,   606,   607,    -1,   609,   610,   611,    -1,    -1,
     614,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,   629,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,    -1,    -1,   173,
     174,   175,    -1,    -1,   178,   179,    -1,   181,   182,   183,
      -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,    -1,   206,   207,   208,    -1,   210,    -1,    -1,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,
      -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,
     244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,
     254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,    -1,   298,   299,   300,    -1,   302,   303,
     304,   305,    -1,   307,   308,    -1,    -1,    -1,    -1,   313,
     314,   315,   316,   317,   318,    -1,    -1,   321,   322,    -1,
     324,    -1,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,    -1,   340,   341,    -1,    -1,
     344,   345,   346,   347,    -1,    -1,    -1,   351,   352,    -1,
      -1,    -1,    -1,   357,   358,   359,    -1,   361,   362,   363,
     364,    -1,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   376,   377,   378,    -1,    -1,   381,    -1,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,    -1,    -1,   397,   398,   399,    -1,   401,    -1,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,    -1,    -1,
     414,    -1,    -1,    -1,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,    -1,
     434,   435,   436,    -1,    -1,   439,    -1,   441,    -1,   443,
     444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,    -1,   462,   463,
      -1,    -1,    -1,   467,   468,   469,   470,    -1,    -1,    -1,
     474,    -1,    -1,    -1,   478,    -1,   480,   481,   482,   483,
      -1,   485,   486,   487,   488,   489,   490,    -1,    -1,    -1,
      -1,    -1,    -1,   497,   498,    -1,   500,    -1,    -1,   503,
      -1,    -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,
     514,   515,   516,   517,   518,   519,    -1,    -1,   522,   523,
     524,   525,    -1,   527,   528,    -1,   530,    -1,   532,   533,
     534,   535,    -1,    -1,   538,   539,    -1,   541,   542,   543,
     544,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,    -1,
      -1,    -1,   556,   557,   558,   559,    -1,   561,   562,    -1,
     564,   565,    -1,   567,   568,    -1,    -1,   571,    -1,    -1,
     574,    -1,   576,    -1,   578,   579,   580,    -1,    -1,    -1,
      -1,    -1,    -1,   587,    -1,    -1,   590,    -1,    -1,    -1,
     594,   595,   596,   597,   598,   599,    -1,    -1,    -1,    -1,
      -1,    -1,   606,   607,    -1,   609,   610,   611,    -1,     5,
     614,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
     624,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,
      -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,   173,   174,   175,
      -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,
     186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,    -1,
     206,   207,   208,    -1,   210,    -1,    -1,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,
     236,   237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,
     246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,
     256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,    -1,    -1,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,    -1,   298,   299,   300,    -1,   302,   303,   304,   305,
      -1,   307,   308,    -1,    -1,    -1,    -1,   313,   314,   315,
     316,   317,   318,    -1,    -1,   321,   322,    -1,   324,    -1,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,    -1,   340,   341,    -1,    -1,   344,   345,
     346,   347,    -1,    -1,    -1,   351,   352,    -1,    -1,    -1,
      -1,   357,   358,   359,    -1,   361,   362,   363,   364,    -1,
     366,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     376,   377,   378,    -1,    -1,   381,    -1,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,    -1,
      -1,   397,   398,   399,    -1,   401,    -1,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,    -1,    -1,   414,    -1,
      -1,    -1,   418,   419,   420,   421,   422,    -1,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,   441,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,    -1,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,    -1,    -1,
      -1,   467,   468,   469,   470,    -1,    -1,    -1,   474,    -1,
      -1,    -1,   478,    -1,   480,   481,   482,   483,    -1,   485,
     486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,
      -1,   497,   498,    -1,   500,    -1,    -1,   503,    -1,    -1,
     506,   507,   508,    -1,    -1,   511,   512,    -1,   514,   515,
     516,   517,   518,   519,    -1,    -1,   522,   523,   524,   525,
      -1,   527,   528,    -1,   530,    -1,   532,   533,   534,   535,
      -1,    -1,   538,   539,    -1,   541,   542,   543,   544,    -1,
      -1,    -1,    -1,    -1,   550,   551,   552,    -1,    -1,    -1,
     556,   557,   558,   559,    -1,   561,   562,    -1,   564,   565,
      -1,   567,   568,    -1,    -1,   571,    -1,    -1,   574,    -1,
     576,    -1,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,
      -1,   587,    -1,    -1,   590,    -1,    -1,    -1,   594,   595,
     596,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,
     606,   607,    -1,   609,   610,   611,    -1,     5,   614,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,   624,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
      -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,    -1,   173,   174,   175,    -1,    -1,
     178,   179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,
      -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,    -1,   206,   207,
     208,    -1,   210,    -1,    -1,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
      -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,   237,
      -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,
      -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,    -1,    -1,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,    -1,
     298,   299,   300,    -1,   302,   303,   304,   305,    -1,   307,
     308,    -1,    -1,    -1,    -1,   313,   314,   315,   316,   317,
     318,    -1,    -1,   321,   322,    -1,   324,    -1,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,    -1,   340,   341,    -1,    -1,   344,   345,   346,   347,
      -1,    -1,    -1,   351,   352,    -1,    -1,    -1,    -1,   357,
     358,   359,    -1,   361,   362,   363,   364,    -1,   366,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,   377,
     378,    -1,    -1,   381,    -1,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,    -1,    -1,   397,
     398,   399,    -1,   401,    -1,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,    -1,    -1,   414,    -1,    -1,    -1,
     418,   419,   420,   421,   422,    -1,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,    -1,   434,   435,   436,    -1,
      -1,   439,    -1,   441,    -1,   443,   444,    -1,   446,   447,
      -1,    -1,    -1,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,    -1,   462,   463,    -1,    -1,    -1,   467,
     468,   469,   470,    -1,    -1,    -1,   474,    -1,    -1,    -1,
     478,    -1,   480,   481,   482,   483,    -1,   485,   486,   487,
     488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,
     498,    -1,   500,    -1,    -1,   503,    -1,    -1,   506,   507,
     508,    -1,    -1,   511,   512,    -1,   514,   515,   516,   517,
     518,   519,    -1,    -1,   522,   523,   524,   525,    -1,   527,
     528,    -1,   530,    -1,   532,   533,   534,   535,    -1,    -1,
     538,   539,    -1,   541,   542,   543,   544,    -1,    -1,    -1,
      -1,    -1,   550,   551,   552,    -1,    -1,    -1,   556,   557,
     558,   559,    -1,   561,   562,    -1,   564,   565,    -1,   567,
     568,    -1,    -1,   571,    -1,    -1,   574,    -1,   576,    -1,
     578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,
      -1,    -1,   590,    -1,    -1,    -1,   594,   595,   596,   597,
     598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,   607,
      -1,   609,   610,   611,    -1,     5,   614,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,   624,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,    -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,
      -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,
     190,    -1,   192,    -1,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,    -1,   206,   207,   208,    -1,
     210,    -1,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,
     220,   221,   222,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,   231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,
      -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,
      -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,
      -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
      -1,    -1,    -1,    -1,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,    -1,   298,   299,
     300,    -1,   302,   303,   304,   305,    -1,   307,   308,    -1,
      -1,    -1,    -1,   313,   314,   315,   316,   317,   318,    -1,
      -1,   321,   322,    -1,   324,    -1,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,    -1,
     340,   341,    -1,    -1,   344,   345,   346,   347,    -1,    -1,
      -1,   351,   352,    -1,    -1,    -1,    -1,   357,   358,   359,
      -1,   361,   362,   363,   364,    -1,   366,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   376,   377,   378,    -1,
      -1,   381,    -1,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,    -1,    -1,   397,   398,   399,
      -1,   401,    -1,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,    -1,    -1,   414,    -1,    -1,    -1,   418,   419,
     420,   421,   422,    -1,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,    -1,   434,   435,   436,    -1,    -1,   439,
      -1,   441,    -1,   443,   444,    -1,   446,   447,    -1,    -1,
      -1,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,    -1,   462,   463,    -1,    -1,    -1,   467,   468,   469,
     470,    -1,    -1,    -1,   474,    -1,    -1,    -1,   478,    -1,
     480,   481,   482,   483,    -1,   485,   486,   487,   488,   489,
     490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,    -1,
     500,    -1,    -1,   503,    -1,    -1,   506,   507,   508,    -1,
      -1,   511,   512,    -1,   514,   515,   516,   517,   518,   519,
      -1,    -1,   522,   523,   524,   525,    -1,   527,   528,    -1,
     530,    -1,   532,   533,   534,   535,    -1,    -1,   538,   539,
      -1,   541,   542,   543,   544,    -1,    -1,    -1,    -1,    -1,
     550,   551,   552,    -1,    -1,    -1,   556,   557,   558,   559,
      -1,   561,   562,    -1,   564,   565,    -1,   567,   568,    -1,
      -1,   571,    -1,    -1,   574,    -1,   576,    -1,   578,   579,
     580,    -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,    -1,
     590,    -1,    -1,    -1,   594,   595,   596,   597,   598,   599,
      -1,    -1,    -1,    -1,    -1,    -1,   606,   607,    -1,   609,
     610,   611,    -1,     5,   614,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,   624,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,   124,    -1,    -1,    -1,   128,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
      -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,   181,
     182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,    -1,
     192,    -1,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,    -1,   206,   207,   208,    -1,   210,    -1,
      -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,
      -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,
      -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,
      -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,
     262,   263,   264,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,
      -1,    -1,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,    -1,   298,   299,   300,    -1,
     302,   303,   304,   305,    -1,   307,   308,    -1,    -1,    -1,
      -1,   313,   314,   315,   316,   317,   318,    -1,    -1,   321,
     322,    -1,   324,    -1,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,    -1,   340,   341,
      -1,    -1,   344,   345,   346,   347,    -1,    -1,    -1,   351,
     352,    -1,    -1,    -1,    -1,   357,   358,   359,    -1,   361,
     362,   363,   364,    -1,   366,   367,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   376,   377,   378,    -1,    -1,   381,
      -1,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,    -1,    -1,   397,   398,   399,    -1,   401,
      -1,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
      -1,    -1,   414,    -1,    -1,    -1,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,   441,
      -1,   443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,    -1,
     462,   463,    -1,    -1,    -1,   467,   468,   469,   470,    -1,
      -1,   473,   474,    -1,    -1,    -1,   478,    -1,   480,   481,
     482,   483,    -1,   485,   486,   487,   488,   489,   490,    -1,
      -1,    -1,    -1,    -1,    -1,   497,   498,    -1,   500,    -1,
      -1,   503,    -1,    -1,   506,   507,   508,    -1,    -1,   511,
     512,    -1,   514,   515,   516,   517,   518,   519,    -1,    -1,
     522,   523,   524,   525,    -1,   527,   528,    -1,   530,    -1,
     532,   533,   534,   535,    -1,   537,   538,   539,    -1,   541,
     542,   543,   544,    -1,    -1,    -1,    -1,    -1,   550,   551,
     552,    -1,    -1,    -1,   556,   557,   558,   559,    -1,   561,
     562,    -1,   564,   565,    -1,   567,   568,    -1,    -1,   571,
      -1,    -1,   574,    -1,   576,    -1,   578,   579,   580,    -1,
      -1,    -1,    -1,    -1,    -1,   587,    -1,    -1,   590,    -1,
      -1,    -1,   594,   595,   596,   597,   598,   599,    -1,    -1,
      -1,    -1,    -1,    -1,   606,   607,    -1,   609,   610,   611,
      -1,    -1,   614,    -1,     5,   617,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,   125,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,
     181,   182,   183,   184,    -1,   186,    -1,    -1,    -1,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,    -1,   206,   207,   208,    -1,   210,
     211,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,
     221,   222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
     231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,
     241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,
      -1,    -1,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,   299,   300,
      -1,   302,   303,   304,   305,    -1,   307,   308,    -1,    -1,
      -1,    -1,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,   322,    -1,   324,    -1,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,    -1,   340,
     341,    -1,    -1,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,    -1,    -1,   355,    -1,   357,   358,   359,    -1,
     361,   362,   363,   364,    -1,   366,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   376,   377,   378,    -1,    -1,
     381,    -1,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,    -1,    -1,   397,   398,   399,    -1,
     401,    -1,   403,   404,   405,   406,   407,    -1,   409,   410,
     411,    -1,    -1,   414,    -1,    -1,    -1,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
     441,    -1,   443,   444,    -1,   446,   447,    -1,    -1,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,    -1,    -1,    -1,   467,   468,   469,   470,
      -1,    -1,    -1,   474,    -1,    -1,    -1,   478,    -1,   480,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,    -1,   493,   494,   495,    -1,   497,   498,    -1,   500,
      -1,    -1,   503,    -1,    -1,   506,   507,   508,    -1,    -1,
     511,   512,    -1,   514,   515,   516,   517,   518,   519,    -1,
      -1,   522,   523,   524,   525,    -1,   527,   528,    -1,   530,
      -1,   532,   533,   534,   535,    -1,    -1,   538,   539,    -1,
     541,   542,   543,   544,    -1,    -1,    -1,    -1,    -1,   550,
     551,   552,    -1,    -1,    -1,   556,   557,   558,   559,   560,
     561,   562,    -1,   564,   565,    -1,   567,   568,    -1,    -1,
     571,    -1,    -1,   574,    -1,   576,    -1,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,    -1,   590,
      -1,    -1,    -1,   594,   595,   596,   597,   598,   599,    -1,
      -1,    -1,    -1,    -1,    -1,   606,   607,    -1,   609,   610,
     611,    -1,     5,   614,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,    -1,    -1,
     173,   174,   175,    -1,    -1,   178,   179,    -1,   181,   182,
     183,   184,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,    -1,   206,   207,   208,    -1,   210,   211,    -1,
      -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,   222,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,
      -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,   280,    -1,    -1,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
     303,   304,   305,    -1,   307,   308,    -1,    -1,    -1,    -1,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,   322,
      -1,   324,    -1,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,    -1,   340,   341,    -1,
      -1,   344,   345,   346,   347,    -1,    -1,    -1,   351,   352,
      -1,    -1,   355,    -1,   357,   358,   359,    -1,   361,   362,
     363,   364,    -1,   366,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   376,   377,   378,    -1,    -1,   381,    -1,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,    -1,    -1,   397,   398,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,    -1,
      -1,   414,    -1,    -1,    -1,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,   435,   436,    -1,    -1,   439,    -1,   441,    -1,
     443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,    -1,    -1,    -1,   467,   468,   469,   470,    -1,    -1,
      -1,   474,    -1,    -1,    -1,   478,    -1,   480,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,   497,   498,    -1,   500,    -1,    -1,
     503,    -1,    -1,   506,   507,   508,    -1,    -1,   511,   512,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,   524,   525,    -1,   527,   528,    -1,   530,    -1,   532,
     533,   534,   535,    -1,   537,   538,   539,    -1,   541,   542,
     543,   544,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,
      -1,    -1,    -1,   556,   557,   558,   559,   560,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,    -1,   571,    -1,
      -1,   574,    -1,   576,    -1,   578,   579,   580,    -1,    -1,
      -1,    -1,    -1,    -1,   587,    -1,    -1,   590,    -1,    -1,
      -1,   594,   595,   596,   597,   598,   599,    -1,    -1,    -1,
      -1,    -1,    -1,   606,   607,    -1,   609,   610,   611,    -1,
       5,   614,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
     125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,    -1,    -1,   173,   174,
     175,    -1,    -1,   178,   179,    -1,   181,   182,   183,   184,
      -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
      -1,   206,   207,   208,    -1,   210,   211,    -1,    -1,   214,
     215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
      -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,   280,    -1,    -1,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,   300,    -1,   302,   303,   304,
     305,    -1,   307,   308,    -1,    -1,    -1,    -1,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,   322,    -1,   324,
      -1,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,    -1,   340,   341,    -1,    -1,   344,
     345,   346,   347,    -1,    -1,    -1,   351,   352,    -1,    -1,
     355,    -1,   357,   358,   359,    -1,   361,   362,   363,   364,
      -1,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   376,   377,   378,    -1,    -1,   381,    -1,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
      -1,    -1,   397,   398,   399,    -1,   401,    -1,   403,   404,
     405,   406,   407,    -1,   409,   410,   411,    -1,    -1,   414,
      -1,    -1,    -1,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
     435,   436,    -1,    -1,   439,    -1,   441,    -1,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,    -1,
      -1,    -1,   467,   468,   469,   470,    -1,    -1,    -1,   474,
      -1,    -1,    -1,   478,    -1,   480,   481,   482,   483,    -1,
     485,   486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,
      -1,    -1,   497,   498,    -1,   500,    -1,    -1,   503,    -1,
      -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,   514,
     515,   516,   517,   518,   519,    -1,    -1,   522,   523,   524,
     525,    -1,   527,   528,    -1,   530,    -1,   532,   533,   534,
     535,    -1,   537,   538,   539,    -1,   541,   542,   543,   544,
      -1,    -1,    -1,    -1,    -1,   550,   551,   552,    -1,    -1,
      -1,   556,   557,   558,   559,   560,   561,   562,    -1,   564,
     565,    -1,   567,   568,    -1,    -1,   571,    -1,    -1,   574,
      -1,   576,    -1,   578,   579,   580,    -1,    -1,    -1,    -1,
      -1,    -1,   587,    -1,    -1,   590,    -1,    -1,    -1,   594,
     595,   596,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,
      -1,   606,   607,    -1,   609,   610,   611,    -1,     5,   614,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,
      -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,    -1,    -1,   173,   174,   175,    -1,
      -1,   178,   179,    -1,   181,   182,   183,   184,    -1,   186,
      -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,    -1,   206,
     207,   208,    -1,   210,   211,    -1,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,
     237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,   280,    -1,    -1,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,   300,    -1,   302,   303,   304,   305,    -1,
     307,   308,    -1,    -1,    -1,    -1,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,   322,    -1,   324,    -1,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,    -1,   340,   341,    -1,    -1,   344,   345,   346,
     347,    -1,    -1,    -1,   351,   352,    -1,    -1,   355,    -1,
     357,   358,   359,    -1,   361,   362,   363,   364,    -1,   366,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,
     377,   378,    -1,    -1,   381,    -1,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,    -1,    -1,
     397,   398,   399,    -1,   401,    -1,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,    -1,    -1,   414,    -1,    -1,
      -1,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,   435,   436,
      -1,    -1,   439,    -1,   441,    -1,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,    -1,    -1,    -1,
     467,   468,   469,   470,    -1,    -1,    -1,   474,    -1,    -1,
      -1,   478,    -1,   480,   481,   482,   483,    -1,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
     497,   498,    -1,   500,    -1,    -1,   503,    -1,    -1,   506,
     507,   508,    -1,    -1,   511,   512,    -1,   514,   515,   516,
     517,   518,   519,    -1,    -1,   522,   523,   524,   525,    -1,
     527,   528,    -1,   530,    -1,   532,   533,   534,   535,    -1,
     537,   538,   539,    -1,   541,   542,   543,   544,    -1,    -1,
      -1,    -1,    -1,   550,   551,   552,    -1,    -1,    -1,   556,
     557,   558,   559,   560,   561,   562,    -1,   564,   565,    -1,
     567,   568,    -1,    -1,   571,    -1,    -1,   574,    -1,   576,
      -1,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,
     587,    -1,    -1,   590,    -1,    -1,    -1,   594,   595,   596,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
     607,    -1,   609,   610,   611,    -1,     5,   614,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    36,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,    -1,    -1,   173,   174,   175,    -1,    -1,   178,
     179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,
      -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,    -1,   206,   207,   208,
      -1,   210,   211,   212,    -1,   214,   215,    -1,    -1,    -1,
     219,   220,   221,   222,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,   231,    -1,    -1,    -1,    -1,   236,   237,    -1,
      -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,    -1,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,   300,    -1,   302,   303,   304,   305,    -1,   307,   308,
      -1,    -1,    -1,    -1,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,   322,    -1,   324,    -1,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
      -1,   340,   341,    -1,    -1,   344,   345,   346,   347,    -1,
      -1,    -1,   351,   352,    -1,    -1,    -1,    -1,   357,   358,
     359,    -1,   361,   362,   363,   364,    -1,   366,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,   377,   378,
      -1,    -1,   381,    -1,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,    -1,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,    -1,    -1,   414,    -1,    -1,    -1,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,   435,   436,    -1,    -1,
     439,    -1,   441,    -1,   443,   444,    -1,   446,   447,    -1,
      -1,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,    -1,    -1,    -1,   467,   468,
     469,   470,    -1,    -1,    -1,   474,    -1,    -1,    -1,   478,
      -1,   480,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,
      -1,   500,    -1,    -1,   503,    -1,    -1,   506,   507,   508,
      -1,    -1,   511,   512,    -1,   514,   515,   516,   517,   518,
     519,    -1,    -1,   522,   523,   524,   525,    -1,   527,   528,
      -1,   530,    -1,   532,   533,   534,   535,    -1,   537,   538,
     539,    -1,   541,   542,   543,   544,    -1,    -1,    -1,    -1,
      -1,   550,   551,   552,    -1,    -1,    -1,   556,   557,   558,
     559,    -1,   561,   562,    -1,   564,   565,    -1,   567,   568,
      -1,    -1,   571,    -1,    -1,   574,    -1,   576,    -1,   578,
     579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,
      -1,   590,    -1,    -1,    -1,   594,   595,   596,   597,   598,
     599,    -1,    -1,    -1,    -1,    -1,    -1,   606,   607,    -1,
     609,   610,   611,    -1,     5,   614,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,
     181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,    -1,   206,   207,   208,    -1,   210,
      -1,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,
     221,   222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
     231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,
     241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,
      -1,    -1,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,   299,   300,
      -1,   302,   303,   304,   305,    -1,   307,   308,    -1,    -1,
      -1,    -1,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,   322,    -1,   324,    -1,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,    -1,   340,
     341,    -1,    -1,   344,   345,   346,   347,    -1,    -1,    -1,
     351,   352,    -1,    -1,   355,    -1,   357,   358,   359,    -1,
     361,   362,   363,   364,    -1,   366,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   376,   377,   378,    -1,   380,
     381,    -1,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,    -1,    -1,   397,   398,   399,    -1,
     401,    -1,   403,   404,   405,   406,   407,    -1,   409,   410,
     411,    -1,    -1,   414,    -1,    -1,    -1,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
     441,    -1,   443,   444,    -1,   446,   447,    -1,    -1,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,    -1,    -1,    -1,   467,   468,   469,   470,
      -1,    -1,    -1,   474,    -1,    -1,    -1,   478,    -1,   480,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,    -1,    -1,   497,   498,    -1,   500,
      -1,    -1,   503,    -1,    -1,   506,   507,   508,    -1,    -1,
     511,   512,    -1,   514,   515,   516,   517,   518,   519,    -1,
      -1,   522,   523,   524,   525,    -1,   527,   528,    -1,   530,
      -1,   532,   533,   534,   535,    -1,    -1,   538,   539,    -1,
     541,   542,   543,   544,    -1,    -1,    -1,    -1,    -1,   550,
     551,   552,    -1,    -1,    -1,   556,   557,   558,   559,   560,
     561,   562,    -1,   564,   565,    -1,   567,   568,    -1,    -1,
     571,    -1,    -1,   574,    -1,   576,    -1,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,    -1,   590,
      -1,    -1,    -1,   594,   595,   596,   597,   598,   599,    -1,
      -1,    -1,    -1,    -1,    -1,   606,   607,    -1,   609,   610,
     611,    -1,     5,   614,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,   128,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,    -1,    -1,
     173,   174,   175,    -1,    -1,   178,   179,    -1,   181,   182,
     183,    -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,    -1,   206,   207,   208,    -1,   210,    -1,    -1,
      -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,   222,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,
      -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,   264,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
     303,   304,   305,    -1,   307,   308,    -1,    -1,    -1,    -1,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,   322,
      -1,   324,    -1,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,    -1,   340,   341,    -1,
      -1,   344,   345,   346,   347,    -1,    -1,    -1,   351,   352,
      -1,    -1,    -1,    -1,   357,   358,   359,    -1,   361,   362,
     363,   364,    -1,   366,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   376,   377,   378,    -1,    -1,   381,    -1,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,    -1,    -1,   397,   398,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,    -1,
      -1,   414,    -1,    -1,    -1,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,   435,   436,    -1,    -1,   439,    -1,   441,    -1,
     443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,    -1,    -1,    -1,   467,   468,   469,   470,    -1,    -1,
      -1,   474,    -1,    -1,    -1,   478,    -1,   480,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,   497,   498,    -1,   500,    -1,    -1,
     503,    -1,    -1,   506,   507,   508,    -1,    -1,   511,   512,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,   524,   525,    -1,   527,   528,    -1,   530,    -1,   532,
     533,   534,   535,    -1,   537,   538,   539,    -1,   541,   542,
     543,   544,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,
      -1,    -1,    -1,   556,   557,   558,   559,    -1,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,    -1,   571,    -1,
      -1,   574,    -1,   576,    -1,   578,   579,   580,    -1,    -1,
      -1,    -1,    -1,    -1,   587,    -1,    -1,   590,    -1,    -1,
      -1,   594,   595,   596,   597,   598,   599,    -1,    -1,    -1,
      -1,    -1,    -1,   606,   607,    -1,   609,   610,   611,    -1,
       5,   614,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,    -1,    -1,   173,   174,
     175,    -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,
      -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
      -1,   206,   207,   208,    -1,   210,    -1,    -1,    -1,   214,
     215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
      -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,   280,    -1,    -1,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,   300,    -1,   302,   303,   304,
     305,    -1,   307,   308,    -1,    -1,    -1,    -1,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,   322,    -1,   324,
      -1,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,    -1,   340,   341,    -1,    -1,   344,
     345,   346,   347,    -1,    -1,    -1,   351,   352,    -1,    -1,
     355,    -1,   357,   358,   359,    -1,   361,   362,   363,   364,
      -1,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   376,   377,   378,    -1,   380,   381,    -1,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
      -1,    -1,   397,   398,   399,    -1,   401,    -1,   403,   404,
     405,   406,   407,    -1,   409,   410,   411,    -1,    -1,   414,
      -1,    -1,    -1,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
     435,   436,    -1,    -1,   439,    -1,   441,    -1,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,    -1,
      -1,    -1,   467,   468,   469,   470,    -1,    -1,    -1,   474,
      -1,    -1,    -1,   478,    -1,   480,   481,   482,   483,    -1,
     485,   486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,
      -1,    -1,   497,   498,    -1,   500,    -1,    -1,   503,    -1,
      -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,   514,
     515,   516,   517,   518,   519,    -1,    -1,   522,   523,   524,
     525,    -1,   527,   528,    -1,   530,    -1,   532,   533,   534,
     535,    -1,    -1,   538,   539,    -1,   541,   542,   543,   544,
      -1,    -1,    -1,    -1,    -1,   550,   551,   552,    -1,    -1,
      -1,   556,   557,   558,   559,   560,   561,   562,    -1,   564,
     565,    -1,   567,   568,    -1,    -1,   571,    -1,    -1,   574,
      -1,   576,    -1,   578,   579,   580,    -1,    -1,    -1,    -1,
      -1,    -1,   587,    -1,    -1,   590,    -1,    -1,    -1,   594,
     595,   596,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,
      -1,   606,   607,    -1,   609,   610,   611,    -1,     5,   614,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,    -1,    -1,   173,   174,   175,    -1,
      -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,   186,
      -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,    -1,   206,
     207,   208,    -1,   210,    -1,    -1,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,
     237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,   264,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,   300,    -1,   302,   303,   304,   305,    -1,
     307,   308,    -1,    -1,    -1,    -1,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,   322,    -1,   324,    -1,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,    -1,   340,   341,    -1,    -1,   344,   345,   346,
     347,    -1,    -1,    -1,   351,   352,    -1,    -1,    -1,    -1,
     357,   358,   359,    -1,   361,   362,   363,   364,    -1,   366,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,
     377,   378,    -1,    -1,   381,    -1,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,    -1,    -1,
     397,   398,   399,    -1,   401,    -1,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,    -1,    -1,   414,    -1,    -1,
      -1,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,   435,   436,
      -1,    -1,   439,    -1,   441,    -1,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,    -1,    -1,    -1,
     467,   468,   469,   470,    -1,    -1,    -1,   474,    -1,    -1,
      -1,   478,    -1,   480,   481,   482,   483,    -1,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
     497,   498,    -1,   500,    -1,    -1,   503,    -1,    -1,   506,
     507,   508,    -1,    -1,   511,   512,    -1,   514,   515,   516,
     517,   518,   519,    -1,    -1,   522,   523,   524,   525,    -1,
     527,   528,    -1,   530,    -1,   532,   533,   534,   535,    -1,
     537,   538,   539,    -1,   541,   542,   543,   544,    -1,    -1,
      -1,    -1,    -1,   550,   551,   552,    -1,    -1,    -1,   556,
     557,   558,   559,    -1,   561,   562,    -1,   564,   565,    -1,
     567,   568,    -1,    -1,   571,    -1,    -1,   574,    -1,   576,
      -1,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,
     587,    -1,    -1,   590,    -1,    -1,    -1,   594,   595,   596,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
     607,    -1,   609,   610,   611,    -1,     5,   614,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,    -1,    -1,   173,   174,   175,    -1,    -1,   178,
     179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,
      -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,    -1,   206,   207,   208,
      -1,   210,    -1,    -1,    -1,   214,   215,    -1,    -1,    -1,
     219,   220,   221,   222,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,   231,    -1,    -1,    -1,    -1,   236,   237,    -1,
      -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,   280,    -1,    -1,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,   300,    -1,   302,   303,   304,   305,    -1,   307,   308,
      -1,    -1,    -1,    -1,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,   322,    -1,   324,    -1,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
      -1,   340,   341,    -1,    -1,   344,   345,   346,   347,    -1,
      -1,    -1,   351,   352,    -1,    -1,   355,    -1,   357,   358,
     359,    -1,   361,   362,   363,   364,    -1,   366,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,   377,   378,
      -1,   380,   381,    -1,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,    -1,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,    -1,    -1,   414,    -1,    -1,    -1,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,   435,   436,    -1,    -1,
     439,    -1,   441,    -1,   443,   444,    -1,   446,   447,    -1,
      -1,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,    -1,    -1,    -1,   467,   468,
     469,   470,    -1,    -1,    -1,   474,    -1,    -1,    -1,   478,
      -1,   480,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,
      -1,   500,    -1,    -1,   503,    -1,    -1,   506,   507,   508,
      -1,    -1,   511,   512,    -1,   514,   515,   516,   517,   518,
     519,    -1,    -1,   522,   523,   524,   525,    -1,   527,   528,
      -1,   530,    -1,   532,   533,   534,   535,    -1,    -1,   538,
     539,    -1,   541,   542,   543,   544,    -1,    -1,    -1,    -1,
      -1,   550,   551,   552,    -1,    -1,    -1,   556,   557,   558,
     559,   560,   561,   562,    -1,   564,   565,    -1,   567,   568,
      -1,    -1,   571,    -1,    -1,   574,    -1,   576,    -1,   578,
     579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,
      -1,   590,    -1,    -1,    -1,   594,   595,   596,   597,   598,
     599,    -1,    -1,    -1,    -1,    -1,    -1,   606,   607,    -1,
     609,   610,   611,    -1,     5,   614,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,   107,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,
     181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,    -1,   206,   207,   208,    -1,   210,
      -1,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,
     221,   222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
     231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,
     241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,   264,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,   299,   300,
      -1,   302,   303,   304,   305,    -1,   307,   308,    -1,    -1,
      -1,    -1,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,   322,    -1,   324,    -1,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,    -1,   340,
     341,    -1,    -1,   344,   345,   346,   347,    -1,    -1,    -1,
     351,   352,    -1,    -1,    -1,    -1,   357,   358,   359,    -1,
     361,   362,   363,   364,    -1,   366,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   376,   377,   378,    -1,    -1,
     381,    -1,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,    -1,    -1,   397,   398,   399,    -1,
     401,    -1,   403,   404,   405,   406,   407,    -1,   409,   410,
     411,    -1,    -1,   414,    -1,    -1,    -1,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
     441,    -1,   443,   444,    -1,   446,   447,    -1,    -1,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,    -1,    -1,    -1,   467,   468,   469,   470,
      -1,    -1,    -1,   474,    -1,    -1,    -1,   478,    -1,   480,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,    -1,    -1,   497,   498,    -1,   500,
      -1,    -1,   503,    -1,    -1,   506,   507,   508,    -1,    -1,
     511,   512,    -1,   514,   515,   516,   517,   518,   519,    -1,
      -1,   522,   523,   524,   525,    -1,   527,   528,    -1,   530,
      -1,   532,   533,   534,   535,    -1,   537,   538,   539,    -1,
     541,   542,   543,   544,    -1,    -1,    -1,    -1,    -1,   550,
     551,   552,    -1,    -1,    -1,   556,   557,   558,   559,    -1,
     561,   562,    -1,   564,   565,    -1,   567,   568,    -1,    -1,
     571,    -1,    -1,   574,    -1,   576,    -1,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,    -1,   590,
      -1,    -1,    -1,   594,   595,   596,   597,   598,   599,    -1,
      -1,    -1,    -1,    -1,    -1,   606,   607,    -1,   609,   610,
     611,    -1,     5,   614,     7,     8,     9,    10,    11,    12,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,    -1,    -1,
     173,   174,   175,    -1,    -1,   178,   179,    -1,   181,   182,
     183,    -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,    -1,   206,   207,   208,    -1,   210,    -1,    -1,
      -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,   222,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,
      -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,   264,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
     303,   304,   305,    -1,   307,   308,    -1,    -1,    -1,    -1,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,   322,
      -1,   324,    -1,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,    -1,   340,   341,    -1,
      -1,   344,   345,   346,   347,    -1,    -1,    -1,   351,   352,
      -1,    -1,    -1,    -1,   357,   358,   359,    -1,   361,   362,
     363,   364,    -1,   366,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   376,   377,   378,    -1,    -1,   381,    -1,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,    -1,    -1,   397,   398,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,    -1,
      -1,   414,    -1,    -1,    -1,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,   435,   436,    -1,    -1,   439,    -1,   441,    -1,
     443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,    -1,    -1,    -1,   467,   468,   469,   470,    -1,    -1,
      -1,   474,    -1,    -1,    -1,   478,    -1,   480,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,   497,   498,    -1,   500,    -1,    -1,
     503,    -1,    -1,   506,   507,   508,    -1,    -1,   511,   512,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,   524,   525,    -1,   527,   528,    -1,   530,    -1,   532,
     533,   534,   535,    -1,   537,   538,   539,    -1,   541,   542,
     543,   544,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,
      -1,    -1,    -1,   556,   557,   558,   559,    -1,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,    -1,   571,    -1,
      -1,   574,    -1,   576,    -1,   578,   579,   580,    -1,    -1,
      -1,    -1,    -1,    -1,   587,    -1,    -1,   590,    -1,    -1,
      -1,   594,   595,   596,   597,   598,   599,    -1,    -1,    -1,
      -1,    -1,    -1,   606,   607,    -1,   609,   610,   611,    -1,
       5,   614,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    34,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,    -1,    -1,   173,   174,
     175,    -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,
      -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
      -1,   206,   207,   208,    -1,   210,    -1,    -1,    -1,   214,
     215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
      -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,   264,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,   300,    -1,   302,   303,   304,
     305,    -1,   307,   308,    -1,    -1,    -1,    -1,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,   322,    -1,   324,
      -1,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,    -1,   340,   341,    -1,    -1,   344,
     345,   346,   347,    -1,    -1,    -1,   351,   352,    -1,    -1,
      -1,    -1,   357,   358,   359,    -1,   361,   362,   363,   364,
      -1,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   376,   377,   378,    -1,    -1,   381,    -1,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
      -1,    -1,   397,   398,   399,    -1,   401,    -1,   403,   404,
     405,   406,   407,    -1,   409,   410,   411,    -1,    -1,   414,
      -1,    -1,    -1,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
     435,   436,    -1,    -1,   439,    -1,   441,    -1,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,    -1,
      -1,    -1,   467,   468,   469,   470,    -1,    -1,    -1,   474,
      -1,    -1,    -1,   478,    -1,   480,   481,   482,   483,    -1,
     485,   486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,
      -1,    -1,   497,   498,    -1,   500,    -1,    -1,   503,    -1,
      -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,   514,
     515,   516,   517,   518,   519,    -1,    -1,   522,   523,   524,
     525,    -1,   527,   528,    -1,   530,    -1,   532,   533,   534,
     535,    -1,   537,   538,   539,    -1,   541,   542,   543,   544,
      -1,    -1,    -1,    -1,    -1,   550,   551,   552,    -1,    -1,
      -1,   556,   557,   558,   559,    -1,   561,   562,    -1,   564,
     565,    -1,   567,   568,    -1,    -1,   571,    -1,    -1,   574,
      -1,   576,    -1,   578,   579,   580,    -1,    -1,    -1,    -1,
      -1,    -1,   587,    -1,    -1,   590,    -1,    -1,    -1,   594,
     595,   596,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,
      -1,   606,   607,    -1,   609,   610,   611,    -1,     5,   614,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,    -1,    -1,   173,   174,   175,    -1,
      -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,   186,
      -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,    -1,   206,
     207,   208,    -1,   210,    -1,    -1,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,
     237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,   264,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,   300,    -1,   302,   303,   304,   305,    -1,
     307,   308,    -1,    -1,    -1,    -1,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,   322,    -1,   324,    -1,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,    -1,   340,   341,    -1,    -1,   344,   345,   346,
     347,    -1,    -1,    -1,   351,   352,    -1,    -1,    -1,    -1,
     357,   358,   359,    -1,   361,   362,   363,   364,    -1,   366,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,
     377,   378,    -1,    -1,   381,    -1,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,    -1,    -1,
     397,   398,   399,    -1,   401,    -1,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,    -1,    -1,   414,    -1,    -1,
      -1,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,   435,   436,
      -1,    -1,   439,    -1,   441,    -1,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,    -1,    -1,    -1,
     467,   468,   469,   470,    -1,    -1,    -1,   474,    -1,    -1,
      -1,   478,    -1,   480,   481,   482,   483,    -1,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
     497,   498,    -1,   500,    -1,    -1,   503,    -1,    -1,   506,
     507,   508,    -1,    -1,   511,   512,    -1,   514,   515,   516,
     517,   518,   519,    -1,    -1,   522,   523,   524,   525,    -1,
     527,   528,    -1,   530,    -1,   532,   533,   534,   535,    -1,
     537,   538,   539,    -1,   541,   542,   543,   544,    -1,    -1,
      -1,    -1,    -1,   550,   551,   552,    -1,    -1,    -1,   556,
     557,   558,   559,    -1,   561,   562,    -1,   564,   565,    -1,
     567,   568,    -1,    -1,   571,    -1,    -1,   574,    -1,   576,
      -1,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,
     587,    -1,    -1,   590,    -1,    -1,    -1,   594,   595,   596,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
     607,    -1,   609,   610,   611,    -1,     5,   614,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,    -1,    -1,   173,   174,   175,    -1,    -1,   178,
     179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,
      -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,    -1,   206,   207,   208,
      -1,   210,    -1,    -1,    -1,   214,   215,    -1,    -1,    -1,
     219,   220,   221,   222,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,   231,    -1,    -1,    -1,    -1,   236,   237,    -1,
      -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,    -1,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,   300,    -1,   302,   303,   304,   305,    -1,   307,   308,
      -1,    -1,    -1,    -1,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,   322,    -1,   324,    -1,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
      -1,   340,   341,    -1,    -1,   344,   345,   346,   347,    -1,
      -1,    -1,   351,   352,    -1,    -1,    -1,    -1,   357,   358,
     359,    -1,   361,   362,   363,   364,    -1,   366,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,   377,   378,
      -1,    -1,   381,    -1,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,    -1,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,    -1,    -1,   414,    -1,    -1,    -1,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,   435,   436,    -1,    -1,
     439,    -1,   441,    -1,   443,   444,    -1,   446,   447,    -1,
      -1,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,    -1,    -1,    -1,   467,   468,
     469,   470,    -1,    -1,    -1,   474,    -1,    -1,    -1,   478,
      -1,   480,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,
      -1,   500,    -1,    -1,   503,    -1,    -1,   506,   507,   508,
      -1,    -1,   511,   512,    -1,   514,   515,   516,   517,   518,
     519,    -1,    -1,   522,   523,   524,   525,    -1,   527,   528,
      -1,   530,    -1,   532,   533,   534,   535,    -1,   537,   538,
     539,    -1,   541,   542,   543,   544,    -1,    -1,    -1,    -1,
      -1,   550,   551,   552,    -1,    -1,    -1,   556,   557,   558,
     559,    -1,   561,   562,    -1,   564,   565,    -1,   567,   568,
      -1,    -1,   571,    -1,    -1,   574,    -1,   576,    -1,   578,
     579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,
      -1,   590,    -1,    -1,    -1,   594,   595,   596,   597,   598,
     599,    -1,    -1,    -1,    -1,    -1,    -1,   606,   607,    -1,
     609,   610,   611,    -1,     5,   614,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,
     181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,    -1,   206,   207,   208,    -1,   210,
      -1,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,
     221,   222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
     231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,
     241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,   299,   300,
      -1,   302,   303,   304,   305,    -1,   307,   308,    -1,    -1,
      -1,    -1,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,   322,    -1,   324,    -1,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,    -1,   340,
     341,    -1,    -1,   344,   345,   346,   347,    -1,    -1,    -1,
     351,   352,    -1,    -1,    -1,    -1,   357,   358,   359,    -1,
     361,   362,   363,   364,    -1,   366,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   376,   377,   378,    -1,    -1,
     381,    -1,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,    -1,    -1,   397,   398,   399,    -1,
     401,    -1,   403,   404,   405,   406,   407,    -1,   409,   410,
     411,    -1,    -1,   414,    -1,    -1,    -1,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
     441,    -1,   443,   444,    -1,   446,   447,    -1,    -1,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,    -1,    -1,    -1,   467,   468,   469,   470,
      -1,    -1,    -1,   474,    -1,    -1,    -1,   478,    -1,   480,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,    -1,    -1,   497,   498,    -1,   500,
      -1,    -1,   503,    -1,    -1,   506,   507,   508,    -1,    -1,
     511,   512,    -1,   514,   515,   516,   517,   518,   519,    -1,
      -1,   522,   523,   524,   525,    -1,   527,   528,    -1,   530,
      -1,   532,   533,   534,   535,    -1,   537,   538,   539,    -1,
     541,   542,   543,   544,    -1,    -1,    -1,    -1,    -1,   550,
     551,   552,    -1,    -1,    -1,   556,   557,   558,   559,    -1,
     561,   562,    -1,   564,   565,    -1,   567,   568,    -1,    -1,
     571,    -1,    -1,   574,    -1,   576,    -1,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,    -1,   590,
      -1,    -1,    -1,   594,   595,   596,   597,   598,   599,    -1,
      -1,    -1,    -1,    -1,    -1,   606,   607,    -1,   609,   610,
     611,    -1,     5,   614,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,    -1,   172,
     173,   174,   175,    -1,    -1,   178,   179,    -1,   181,   182,
     183,    -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,    -1,   206,   207,   208,    -1,   210,    -1,    -1,
      -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,   222,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,
      -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
     303,   304,   305,    -1,   307,   308,    -1,    -1,    -1,    -1,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,   322,
      -1,   324,    -1,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,    -1,   340,   341,    -1,
      -1,   344,   345,   346,   347,    -1,    -1,    -1,   351,   352,
      -1,    -1,    -1,    -1,   357,   358,   359,    -1,   361,   362,
     363,   364,    -1,   366,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   376,   377,   378,    -1,    -1,   381,    -1,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,    -1,    -1,   397,   398,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,    -1,
      -1,   414,    -1,    -1,    -1,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,   435,   436,    -1,    -1,   439,    -1,   441,    -1,
     443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,    -1,    -1,    -1,   467,   468,   469,   470,    -1,    -1,
      -1,   474,    -1,    -1,    -1,   478,    -1,   480,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,   497,   498,    -1,   500,    -1,    -1,
     503,    -1,    -1,   506,   507,   508,    -1,    -1,   511,   512,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,   524,   525,    -1,   527,   528,    -1,   530,    -1,   532,
     533,   534,   535,    -1,    -1,   538,   539,    -1,   541,   542,
     543,   544,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,
      -1,    -1,    -1,   556,   557,   558,   559,    -1,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,    -1,   571,    -1,
      -1,   574,    -1,   576,    -1,   578,   579,   580,    -1,    -1,
      -1,    -1,    -1,    -1,   587,    -1,    -1,   590,    -1,    -1,
      -1,   594,   595,   596,   597,   598,   599,    -1,    -1,    -1,
      -1,    -1,    -1,   606,   607,    -1,   609,   610,   611,    -1,
       5,   614,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,    -1,    -1,   173,   174,
     175,    -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,
      -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
      -1,   206,   207,   208,    -1,   210,    -1,    -1,    -1,   214,
     215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
      -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,   300,    -1,   302,   303,   304,
     305,    -1,   307,   308,    -1,    -1,    -1,    -1,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,   322,    -1,   324,
      -1,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,    -1,   340,   341,    -1,    -1,   344,
     345,   346,   347,    -1,    -1,    -1,   351,   352,    -1,    -1,
      -1,    -1,   357,   358,   359,    -1,   361,   362,   363,   364,
      -1,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   376,   377,   378,    -1,    -1,   381,    -1,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
      -1,    -1,   397,   398,   399,    -1,   401,    -1,   403,   404,
     405,   406,   407,    -1,   409,   410,   411,    -1,    -1,   414,
      -1,    -1,    -1,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
     435,   436,    -1,    -1,   439,    -1,   441,    -1,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,    -1,
      -1,    -1,   467,   468,   469,   470,    -1,    -1,    -1,   474,
      -1,    -1,    -1,   478,    -1,   480,   481,   482,   483,    -1,
     485,   486,   487,   488,   489,   490,    -1,    -1,    -1,   494,
      -1,    -1,   497,   498,    -1,   500,    -1,    -1,   503,    -1,
      -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,   514,
     515,   516,   517,   518,   519,    -1,    -1,   522,   523,   524,
     525,    -1,   527,   528,    -1,   530,    -1,   532,   533,   534,
     535,    -1,    -1,   538,   539,    -1,   541,   542,   543,   544,
      -1,    -1,    -1,    -1,    -1,   550,   551,   552,    -1,    -1,
      -1,   556,   557,   558,   559,    -1,   561,   562,    -1,   564,
     565,    -1,   567,   568,    -1,    -1,   571,    -1,    -1,   574,
      -1,   576,    -1,   578,   579,   580,    -1,    -1,    -1,    -1,
      -1,    -1,   587,    -1,    -1,   590,    -1,    -1,    -1,   594,
     595,   596,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,
      -1,   606,   607,    -1,   609,   610,   611,    -1,     5,   614,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,    -1,    -1,   173,   174,   175,    -1,
      -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,   186,
      -1,    -1,    -1,   190,   191,   192,    -1,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,    -1,   206,
     207,   208,    -1,   210,    -1,    -1,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,
     237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,   300,    -1,   302,   303,   304,   305,    -1,
     307,   308,    -1,    -1,    -1,    -1,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,   322,    -1,   324,    -1,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,    -1,   340,   341,    -1,    -1,   344,   345,   346,
     347,    -1,    -1,    -1,   351,   352,    -1,    -1,    -1,    -1,
     357,   358,   359,    -1,   361,   362,   363,   364,    -1,   366,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,
     377,   378,    -1,    -1,   381,    -1,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,    -1,    -1,
     397,   398,   399,    -1,   401,    -1,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,    -1,    -1,   414,    -1,    -1,
      -1,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,   435,   436,
      -1,    -1,   439,    -1,   441,    -1,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,    -1,    -1,    -1,
     467,   468,   469,   470,    -1,    -1,    -1,   474,    -1,    -1,
      -1,   478,    -1,   480,   481,   482,   483,    -1,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
     497,   498,    -1,   500,    -1,    -1,   503,    -1,    -1,   506,
     507,   508,    -1,    -1,   511,   512,    -1,   514,   515,   516,
     517,   518,   519,    -1,    -1,   522,   523,   524,   525,    -1,
     527,   528,    -1,   530,    -1,   532,   533,   534,   535,    -1,
      -1,   538,   539,    -1,   541,   542,   543,   544,    -1,    -1,
      -1,    -1,    -1,   550,   551,   552,    -1,    -1,    -1,   556,
     557,   558,   559,    -1,   561,   562,    -1,   564,   565,    -1,
     567,   568,    -1,    -1,   571,    -1,    -1,   574,    -1,   576,
      -1,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,
     587,    -1,    -1,   590,    -1,    -1,    -1,   594,   595,   596,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
     607,    -1,   609,   610,   611,    -1,     5,   614,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,    -1,    -1,   173,   174,   175,    -1,    -1,   178,
     179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,
      -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,    -1,   206,   207,   208,
      -1,   210,    -1,    -1,    -1,   214,   215,    -1,    -1,    -1,
     219,   220,   221,   222,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,   231,    -1,    -1,    -1,    -1,   236,   237,    -1,
      -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,    -1,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,   300,    -1,   302,   303,   304,   305,    -1,   307,   308,
      -1,    -1,    -1,    -1,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,   322,    -1,   324,    -1,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
      -1,   340,   341,    -1,    -1,   344,   345,   346,   347,    -1,
      -1,    -1,   351,   352,    -1,    -1,    -1,    -1,   357,   358,
     359,    -1,   361,   362,   363,   364,    -1,   366,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,   377,   378,
      -1,    -1,   381,    -1,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,    -1,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,    -1,    -1,   414,    -1,    -1,    -1,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,   435,   436,    -1,    -1,
     439,    -1,   441,    -1,   443,   444,    -1,   446,   447,    -1,
      -1,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,    -1,    -1,    -1,   467,   468,
     469,   470,    -1,    -1,    -1,   474,    -1,    -1,    -1,   478,
      -1,   480,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,
      -1,   500,    -1,    -1,   503,    -1,    -1,   506,   507,   508,
      -1,    -1,   511,   512,    -1,   514,   515,   516,   517,   518,
     519,    -1,    -1,   522,   523,   524,   525,    -1,   527,   528,
      -1,   530,    -1,   532,   533,   534,   535,    -1,    -1,   538,
     539,    -1,   541,   542,   543,   544,    -1,    -1,    -1,    -1,
      -1,   550,   551,   552,    -1,    -1,    -1,   556,   557,   558,
     559,    -1,   561,   562,    -1,   564,   565,    -1,   567,   568,
      -1,    -1,   571,    -1,    -1,   574,    -1,   576,    -1,   578,
     579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,
      -1,   590,    -1,    -1,    -1,   594,   595,   596,   597,   598,
     599,    -1,    -1,    -1,    -1,    -1,    -1,   606,   607,    -1,
     609,   610,   611,    -1,     5,   614,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,
     181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,    -1,   206,   207,   208,    -1,   210,
      -1,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,
     221,   222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
     231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,
     241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,   299,   300,
      -1,   302,   303,   304,   305,    -1,   307,   308,    -1,    -1,
      -1,    -1,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,   322,    -1,   324,    -1,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,    -1,   340,
     341,    -1,    -1,   344,   345,   346,   347,    -1,    -1,    -1,
     351,   352,    -1,    -1,    -1,    -1,   357,   358,   359,    -1,
     361,   362,   363,   364,    -1,   366,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   376,   377,   378,    -1,    -1,
     381,    -1,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,    -1,    -1,   397,   398,   399,    -1,
     401,    -1,   403,   404,   405,   406,   407,    -1,   409,   410,
     411,    -1,    -1,   414,    -1,    -1,    -1,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
     441,    -1,   443,   444,    -1,   446,   447,    -1,    -1,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,    -1,    -1,    -1,   467,   468,   469,   470,
      -1,    -1,    -1,   474,    -1,    -1,    -1,   478,    -1,   480,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,    -1,    -1,   497,   498,    -1,   500,
      -1,    -1,   503,    -1,    -1,   506,   507,   508,    -1,    -1,
     511,   512,    -1,   514,   515,   516,   517,   518,   519,    -1,
      -1,   522,   523,   524,   525,    -1,   527,   528,    -1,   530,
      -1,   532,   533,   534,   535,    -1,    -1,   538,   539,    -1,
     541,   542,   543,   544,    -1,    -1,    -1,    -1,    -1,   550,
     551,   552,    -1,    -1,    -1,   556,   557,   558,   559,    -1,
     561,   562,    -1,   564,   565,    -1,   567,   568,    -1,    -1,
     571,    -1,    -1,   574,    -1,   576,    -1,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,    -1,   590,
      -1,    -1,    -1,   594,   595,   596,   597,   598,   599,    -1,
      -1,    -1,    -1,    -1,    -1,   606,   607,    -1,   609,   610,
     611,    -1,     5,   614,     7,     8,     9,    10,    11,    12,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,    -1,    -1,
     173,   174,   175,    -1,    -1,   178,   179,    -1,   181,   182,
     183,    -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,    -1,   206,   207,   208,    -1,   210,    -1,    -1,
      -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,   222,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,
      -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
     303,   304,   305,    -1,   307,   308,    -1,    -1,    -1,    -1,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,   322,
      -1,   324,    -1,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,    -1,   340,   341,    -1,
      -1,   344,   345,   346,   347,    -1,    -1,    -1,   351,   352,
      -1,    -1,    -1,    -1,   357,   358,   359,    -1,   361,   362,
     363,   364,    -1,   366,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   376,   377,   378,    -1,    -1,   381,    -1,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,    -1,    -1,   397,   398,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,    -1,
      -1,   414,    -1,    -1,    -1,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,   435,   436,    -1,    -1,   439,    -1,   441,    -1,
     443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,    -1,    -1,    -1,   467,   468,   469,   470,    -1,    -1,
      -1,   474,    -1,    -1,    -1,   478,    -1,   480,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,   497,   498,    -1,   500,    -1,    -1,
     503,    -1,    -1,   506,   507,   508,    -1,    -1,   511,   512,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,   524,   525,    -1,   527,   528,    -1,   530,    -1,   532,
     533,   534,   535,    -1,    -1,   538,   539,    -1,   541,   542,
     543,   544,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,
      -1,    -1,    -1,   556,   557,   558,   559,    -1,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,    -1,   571,    -1,
      -1,   574,    -1,   576,    -1,   578,   579,   580,    -1,    -1,
      -1,    -1,    -1,    -1,   587,    -1,    -1,   590,    -1,    -1,
      -1,   594,   595,   596,   597,   598,   599,    -1,    -1,    -1,
      -1,    -1,    -1,   606,   607,    -1,   609,   610,   611,    -1,
       5,   614,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,    -1,    -1,   173,   174,
     175,    -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,
      -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
      -1,   206,   207,   208,    -1,   210,    -1,    -1,    -1,   214,
     215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
      -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,   300,    -1,   302,   303,   304,
     305,    -1,   307,   308,    -1,    -1,    -1,    -1,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,   322,    -1,   324,
      -1,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,    -1,   340,   341,    -1,    -1,   344,
     345,   346,   347,    -1,    -1,    -1,   351,   352,    -1,    -1,
      -1,    -1,   357,   358,   359,    -1,   361,   362,   363,   364,
      -1,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   376,   377,   378,    -1,    -1,   381,    -1,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
      -1,    -1,   397,   398,   399,   400,   401,    -1,   403,   404,
     405,   406,   407,    -1,   409,   410,   411,    -1,    -1,   414,
      -1,    -1,    -1,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,    -1,   434,
     435,   436,    -1,    -1,   439,    -1,   441,    -1,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,    -1,
      -1,    -1,   467,   468,   469,   470,    -1,    -1,    -1,   474,
      -1,    -1,    -1,   478,    -1,   480,   481,   482,   483,    -1,
     485,   486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,
      -1,    -1,   497,   498,    -1,   500,    -1,    -1,   503,    -1,
      -1,   506,   507,   508,    -1,    -1,   511,   512,    -1,   514,
     515,   516,   517,   518,   519,    -1,    -1,   522,   523,   524,
     525,    -1,   527,   528,    -1,   530,    -1,   532,   533,   534,
     535,    -1,    -1,   538,   539,    -1,   541,   542,   543,   544,
      -1,    -1,    -1,    -1,    -1,   550,   551,   552,    -1,    -1,
      -1,   556,   557,   558,   559,    -1,   561,   562,    -1,   564,
     565,    -1,   567,   568,    -1,    -1,   571,    -1,    -1,   574,
      -1,   576,    -1,   578,   579,   580,    -1,    -1,    -1,    -1,
      -1,    -1,   587,    -1,    -1,   590,    -1,    -1,    -1,   594,
     595,   596,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,
      -1,   606,   607,    -1,   609,   610,   611,    -1,     5,   614,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,    -1,    -1,   173,   174,   175,    -1,
      -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,   186,
      -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,    -1,   206,
     207,   208,    -1,   210,    -1,    -1,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,
     237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,   300,    -1,   302,   303,   304,   305,    -1,
     307,   308,    -1,    -1,    -1,    -1,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,   322,    -1,   324,    -1,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,    -1,   340,   341,    -1,    -1,   344,   345,   346,
     347,    -1,    -1,    -1,   351,   352,    -1,    -1,    -1,    -1,
     357,   358,   359,    -1,   361,   362,   363,   364,    -1,   366,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,
     377,   378,    -1,    -1,   381,    -1,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,    -1,    -1,
     397,   398,   399,    -1,   401,    -1,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,    -1,    -1,   414,    -1,    -1,
      -1,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,    -1,   434,   435,   436,
      -1,    -1,   439,    -1,   441,    -1,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,    -1,    -1,    -1,
     467,   468,   469,   470,    -1,    -1,    -1,   474,    -1,    -1,
      -1,   478,    -1,   480,   481,   482,   483,    -1,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
     497,   498,    -1,   500,    -1,    -1,   503,    -1,    -1,   506,
     507,   508,    -1,    -1,   511,   512,    -1,   514,   515,   516,
     517,   518,   519,    -1,    -1,   522,   523,   524,   525,    -1,
     527,   528,    -1,   530,    -1,   532,   533,   534,   535,    -1,
     537,   538,   539,    -1,   541,   542,   543,   544,    -1,    -1,
      -1,    -1,    -1,   550,   551,   552,    -1,    -1,    -1,   556,
     557,   558,   559,    -1,   561,   562,    -1,   564,   565,    -1,
     567,   568,    -1,    -1,   571,    -1,    -1,   574,    -1,   576,
      -1,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,
     587,    -1,    -1,   590,    -1,    -1,    -1,   594,   595,   596,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
     607,    -1,   609,   610,   611,    -1,     5,   614,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,    -1,    -1,   173,   174,   175,    -1,    -1,   178,
     179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,
      -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,    -1,   206,   207,   208,
      -1,   210,    -1,    -1,    -1,   214,   215,    -1,    -1,    -1,
     219,   220,   221,   222,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,   231,    -1,    -1,    -1,    -1,   236,   237,    -1,
      -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,    -1,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,   300,    -1,   302,   303,   304,   305,    -1,   307,   308,
      -1,    -1,    -1,    -1,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,   322,    -1,   324,    -1,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
      -1,   340,   341,    -1,    -1,   344,   345,   346,   347,    -1,
      -1,    -1,   351,   352,    -1,    -1,    -1,    -1,   357,   358,
     359,    -1,   361,   362,   363,   364,    -1,   366,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   376,   377,   378,
      -1,    -1,   381,    -1,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,    -1,    -1,   397,   398,
     399,    -1,   401,    -1,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,    -1,    -1,   414,    -1,    -1,    -1,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,    -1,   434,   435,   436,    -1,    -1,
     439,    -1,   441,    -1,   443,   444,    -1,   446,   447,    -1,
      -1,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,    -1,    -1,    -1,   467,   468,
     469,   470,    -1,    -1,    -1,   474,    -1,    -1,    -1,   478,
      -1,   480,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,
      -1,   500,    -1,    -1,   503,    -1,    -1,   506,   507,   508,
      -1,    -1,   511,   512,    -1,   514,   515,   516,   517,   518,
     519,    -1,    -1,   522,   523,   524,   525,    -1,   527,   528,
      -1,   530,    -1,   532,   533,   534,   535,    -1,    -1,   538,
     539,    -1,   541,   542,   543,   544,    -1,    -1,    -1,    -1,
      -1,   550,   551,   552,    -1,    -1,    -1,   556,   557,   558,
     559,    -1,   561,   562,    -1,   564,   565,    -1,   567,   568,
      -1,    -1,   571,    -1,    -1,   574,    -1,   576,    -1,   578,
     579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,
      -1,   590,    -1,    -1,    -1,   594,   595,   596,   597,   598,
     599,    -1,    -1,    -1,    -1,    -1,    -1,   606,   607,    -1,
     609,   610,   611,    -1,     5,   614,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,
     181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,    -1,   206,   207,   208,    -1,   210,
      -1,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,
     221,   222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
     231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,
     241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,   299,   300,
      -1,   302,   303,   304,   305,    -1,   307,   308,    -1,    -1,
      -1,    -1,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,   322,    -1,   324,    -1,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,    -1,   340,
     341,    -1,    -1,   344,   345,   346,   347,    -1,    -1,    -1,
     351,   352,    -1,    -1,    -1,    -1,   357,   358,   359,    -1,
     361,   362,   363,   364,    -1,   366,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   376,   377,   378,    -1,    -1,
     381,    -1,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,    -1,    -1,   397,   398,   399,    -1,
     401,    -1,   403,   404,   405,   406,   407,    -1,   409,   410,
     411,    -1,    -1,   414,    -1,    -1,    -1,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
     441,    -1,   443,   444,    -1,   446,   447,    -1,    -1,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,    -1,    -1,    -1,   467,   468,   469,   470,
      -1,    -1,    -1,   474,    -1,    -1,    -1,   478,    -1,   480,
     481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,    -1,    -1,   497,   498,    -1,   500,
      -1,    -1,   503,    -1,    -1,   506,   507,   508,    -1,    -1,
     511,   512,    -1,   514,   515,   516,   517,   518,   519,    -1,
      -1,   522,   523,   524,   525,    -1,   527,   528,    -1,   530,
      -1,   532,   533,   534,   535,    -1,    -1,   538,   539,    -1,
     541,   542,   543,   544,    -1,    -1,    -1,    -1,    -1,   550,
     551,   552,    -1,    -1,    -1,   556,   557,   558,   559,    -1,
     561,   562,    -1,   564,   565,    -1,   567,   568,    -1,    -1,
     571,    -1,    -1,   574,    -1,   576,    -1,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,    -1,   590,
      -1,    -1,    -1,   594,   595,   596,   597,   598,   599,    -1,
      -1,    -1,    -1,    -1,    -1,   606,   607,    -1,   609,   610,
     611,    -1,     5,   614,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,    -1,    -1,
     173,   174,   175,    -1,    -1,   178,   179,    -1,   181,   182,
     183,    -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,    -1,   206,   207,   208,    -1,   210,    -1,    -1,
      -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,   222,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,
      -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
     303,   304,   305,    -1,   307,   308,    -1,    -1,    -1,    -1,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,   322,
      -1,   324,    -1,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,    -1,   340,   341,    -1,
      -1,   344,   345,   346,   347,    -1,    -1,    -1,   351,   352,
      -1,    -1,    -1,    -1,   357,   358,   359,    -1,   361,   362,
     363,   364,    -1,   366,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   376,   377,   378,    -1,    -1,   381,    -1,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,    -1,    -1,   397,   398,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,    -1,
      -1,   414,    -1,    -1,    -1,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
      -1,   434,   435,   436,    -1,    -1,   439,    -1,   441,    -1,
     443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,    -1,    -1,    -1,   467,   468,   469,   470,    -1,    -1,
      -1,   474,    -1,    -1,    -1,   478,    -1,   480,   481,   482,
     483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,   497,   498,    -1,   500,    -1,    -1,
     503,    -1,    -1,   506,   507,   508,    -1,    -1,   511,   512,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,   524,   525,    -1,   527,   528,    -1,   530,    -1,   532,
     533,   534,   535,    -1,    -1,   538,   539,    -1,   541,   542,
     543,   544,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,
      -1,    -1,    -1,   556,   557,   558,   559,    -1,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,    -1,   571,    -1,
      -1,   574,    -1,   576,    -1,   578,   579,   580,    -1,    -1,
      -1,    -1,    -1,    -1,   587,    -1,    -1,   590,    -1,    -1,
      -1,   594,   595,   596,   597,   598,   599,    -1,    -1,    -1,
      -1,    -1,    -1,   606,   607,    -1,   609,   610,   611,    -1,
       5,   614,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,
      55,    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    83,    -1,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    -1,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,    -1,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,
      -1,    -1,   147,   148,   149,    -1,   151,   152,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,   162,   163,    -1,
     165,   166,   167,   168,    -1,    -1,    -1,    -1,   173,   174,
     175,    -1,    -1,   178,   179,   180,   181,   182,   183,    -1,
      -1,    -1,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
      -1,    -1,   207,   208,    -1,    -1,    -1,    -1,    -1,    -1,
     215,    -1,    -1,    -1,   219,   220,   221,   222,   223,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
      -1,   236,    -1,    -1,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,   248,    -1,    -1,   251,    -1,    -1,    -1,
     255,   256,    -1,    -1,   259,   260,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,   300,    -1,   302,   303,   304,
     305,    -1,   307,   308,    -1,    -1,    -1,    -1,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,   322,    -1,   324,
      -1,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,    -1,   340,   341,    -1,    -1,   344,
     345,   346,   347,    -1,    -1,    -1,    -1,   352,    -1,    -1,
      -1,    -1,   357,   358,   359,    -1,   361,   362,   363,   364,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   377,   378,    -1,    -1,    -1,    -1,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,    -1,
      -1,    -1,    -1,   398,   399,    -1,   401,    -1,   403,   404,
     405,   406,   407,    -1,   409,   410,   411,    -1,    -1,   414,
      -1,    -1,    -1,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,    -1,   431,    -1,    -1,   434,
      -1,   436,   437,    -1,   439,    -1,    -1,    -1,   443,    -1,
      -1,   446,   447,   448,    -1,    -1,    -1,   452,   453,   454,
     455,   456,   457,    -1,   459,   460,    -1,   462,    -1,    -1,
      -1,    -1,   467,   468,   469,    -1,    -1,    -1,    -1,   474,
      -1,    -1,    -1,   478,    -1,    -1,   481,    -1,   483,    -1,
     485,    -1,   487,    -1,   489,   490,    -1,    -1,    -1,    -1,
      -1,    -1,   497,   498,    -1,   500,    -1,    -1,   503,    -1,
      -1,   506,    -1,   508,    -1,    -1,    -1,   512,    -1,   514,
     515,   516,   517,   518,   519,    -1,    -1,   522,   523,   524,
     525,    -1,   527,   528,    -1,   530,    -1,   532,   533,   534,
     535,    -1,    -1,   538,   539,    -1,   541,   542,   543,   544,
      -1,    -1,    -1,    -1,    -1,   550,   551,   552,    -1,    -1,
      -1,    -1,   557,   558,   559,    -1,   561,   562,    -1,   564,
     565,    -1,    -1,    -1,    -1,    -1,   571,    -1,    -1,   574,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,    -1,
      -1,    -1,   587,    -1,    -1,   590,    -1,    -1,    -1,   594,
     595,   596,   597,   598,   599,    -1,    -1,   602,    -1,    -1,
      -1,   606,    -1,    -1,   609,    -1,   611,    -1,     5,   614,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,
      -1,    58,    -1,    -1,    -1,    -1,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    81,    -1,    83,    -1,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    -1,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,    -1,
     147,   148,   149,    -1,   151,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,   162,   163,    -1,   165,   166,
     167,   168,    -1,    -1,    -1,    -1,   173,   174,   175,    -1,
      -1,   178,   179,   180,   181,   182,   183,    -1,    -1,    -1,
      -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,    -1,    -1,
     207,   208,    -1,    -1,    -1,    -1,    -1,    -1,   215,    -1,
      -1,    -1,   219,   220,   221,   222,   223,    -1,   225,   226,
     227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,
      -1,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,
     247,   248,    -1,    -1,   251,    -1,    -1,    -1,   255,   256,
      -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,   282,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,   300,    -1,   302,   303,   304,   305,    -1,
     307,   308,    -1,    -1,    -1,    -1,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,   322,    -1,   324,    -1,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,    -1,   340,   341,    -1,    -1,   344,   345,   346,
     347,    -1,    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,
     357,   358,   359,    -1,   361,   362,   363,   364,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     377,   378,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,    -1,    -1,    -1,
      -1,   398,   399,    -1,   401,    -1,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,    -1,    -1,   414,    -1,    -1,
      -1,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,    -1,    -1,   434,    -1,   436,
     437,    -1,   439,    -1,    -1,    -1,   443,    -1,    -1,   446,
     447,   448,    -1,    -1,    -1,   452,   453,   454,   455,   456,
     457,    -1,   459,   460,    -1,   462,    -1,    -1,    -1,    -1,
     467,   468,   469,    -1,    -1,    -1,    -1,   474,    -1,    -1,
      -1,   478,    -1,    -1,   481,    -1,   483,    -1,   485,    -1,
     487,    -1,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
     497,   498,    -1,   500,    -1,    -1,   503,    -1,    -1,   506,
      -1,   508,    -1,    -1,    -1,   512,    -1,   514,   515,   516,
     517,   518,   519,    -1,    -1,   522,   523,   524,   525,    -1,
     527,   528,    -1,   530,    -1,   532,   533,   534,   535,    -1,
      -1,   538,   539,    -1,   541,   542,   543,   544,    -1,    -1,
      -1,    -1,    -1,   550,   551,   552,    -1,    -1,    -1,    -1,
     557,   558,   559,    -1,   561,   562,    -1,   564,   565,    -1,
      -1,    -1,    -1,    -1,   571,    -1,    -1,   574,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,
     587,    -1,    -1,   590,    -1,    -1,    -1,   594,   595,   596,
     597,   598,   599,   600,    -1,   602,    -1,    -1,    -1,   606,
      -1,    -1,   609,    -1,   611,    -1,     5,   614,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,
      -1,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    81,    -1,    83,    -1,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    -1,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,
     149,    -1,   151,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,   162,   163,    -1,   165,   166,   167,   168,
      -1,    -1,    -1,    -1,   173,   174,   175,    -1,    -1,   178,
     179,   180,   181,   182,   183,    -1,    -1,    -1,    -1,    -1,
      -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,    -1,    -1,   207,   208,
      -1,    -1,    -1,    -1,    -1,    -1,   215,    -1,    -1,    -1,
     219,   220,   221,   222,   223,    -1,   225,   226,   227,    -1,
     229,    -1,   231,    -1,    -1,    -1,    -1,   236,    -1,    -1,
      -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,   248,
      -1,    -1,   251,    -1,    -1,    -1,   255,   256,    -1,    -1,
     259,   260,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,   282,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,   300,    -1,   302,   303,   304,   305,    -1,   307,   308,
      -1,    -1,    -1,    -1,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,   322,    -1,   324,    -1,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
      -1,   340,   341,    -1,    -1,   344,   345,   346,   347,    -1,
      -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,   357,   358,
     359,    -1,   361,   362,   363,   364,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,   378,
      -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,    -1,    -1,    -1,    -1,   398,
     399,    -1,   401,    -1,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,    -1,    -1,   414,    -1,    -1,    -1,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,   431,    -1,    -1,   434,    -1,   436,   437,    -1,
     439,    -1,    -1,    -1,   443,    -1,    -1,   446,   447,   448,
      -1,    -1,    -1,   452,   453,   454,   455,   456,   457,    -1,
     459,   460,    -1,   462,    -1,    -1,    -1,    -1,   467,   468,
     469,    -1,    -1,    -1,    -1,   474,    -1,    -1,    -1,   478,
      -1,    -1,   481,    -1,   483,    -1,   485,    -1,   487,    -1,
     489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,
      -1,   500,    -1,    -1,   503,    -1,    -1,   506,    -1,   508,
      -1,    -1,    -1,   512,    -1,   514,   515,   516,   517,   518,
     519,    -1,    -1,   522,   523,   524,   525,    -1,   527,   528,
      -1,   530,    -1,   532,   533,   534,   535,    -1,    -1,   538,
     539,    -1,   541,   542,   543,   544,    -1,    -1,    -1,    -1,
      -1,   550,   551,   552,    -1,    -1,    -1,    -1,   557,   558,
     559,    -1,   561,   562,    -1,   564,   565,    -1,    -1,    -1,
      -1,    -1,   571,    -1,    -1,   574,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,
      -1,   590,    -1,    -1,    -1,   594,   595,   596,   597,   598,
     599,   600,    -1,   602,    -1,    -1,    -1,   606,    -1,    -1,
     609,    -1,   611,    -1,     5,   614,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    -1,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    52,    53,    -1,    55,    56,    -1,    58,    -1,    -1,
      -1,    -1,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      81,    -1,    83,    -1,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    -1,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,    -1,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,   162,   163,    -1,   165,   166,   167,   168,    -1,    -1,
      -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,   180,
     181,   182,   183,    -1,    -1,    -1,    -1,    -1,    -1,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,    -1,    -1,   207,   208,    -1,    -1,
      -1,    -1,    -1,    -1,   215,    -1,    -1,    -1,   219,   220,
     221,   222,   223,    -1,   225,   226,   227,    -1,   229,    -1,
     231,    -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,
     241,    -1,   243,   244,    -1,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,   255,   256,    -1,    -1,   259,   260,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,   282,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,   299,   300,
      -1,   302,   303,   304,   305,    -1,   307,   308,    -1,    -1,
      -1,    -1,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,   322,    -1,   324,    -1,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,    -1,   340,
     341,    -1,    -1,   344,   345,   346,   347,    -1,    -1,    -1,
      -1,   352,    -1,    -1,    -1,    -1,   357,   358,   359,    -1,
     361,   362,   363,   364,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,    -1,    -1,    -1,    -1,   398,   399,    -1,
     401,    -1,   403,   404,   405,   406,   407,    -1,   409,   410,
     411,    -1,    -1,   414,    -1,    -1,    -1,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,    -1,    -1,   434,    -1,   436,   437,    -1,   439,    -1,
      -1,    -1,   443,    -1,    -1,   446,   447,   448,    -1,    -1,
      -1,   452,   453,   454,   455,   456,   457,    -1,   459,   460,
      -1,   462,    -1,    -1,    -1,    -1,   467,   468,   469,    -1,
      -1,    -1,    -1,   474,    -1,    -1,    -1,   478,    -1,    -1,
     481,    -1,   483,    -1,   485,    -1,   487,    -1,   489,   490,
      -1,    -1,    -1,    -1,    -1,    -1,   497,   498,    -1,   500,
      -1,    -1,   503,    -1,    -1,   506,    -1,   508,    -1,    -1,
      -1,   512,    -1,   514,   515,   516,   517,   518,   519,    -1,
      -1,   522,   523,   524,   525,    -1,   527,   528,    -1,   530,
      -1,   532,   533,   534,   535,    -1,    -1,   538,   539,    -1,
     541,   542,   543,   544,    -1,    -1,    -1,    -1,    -1,   550,
     551,   552,    -1,    -1,    -1,    -1,   557,   558,   559,    -1,
     561,   562,    -1,   564,   565,    -1,    -1,    -1,    -1,    -1,
     571,    -1,    -1,   574,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,    -1,   590,
      -1,    -1,    -1,   594,   595,   596,   597,   598,   599,    -1,
      -1,   602,    -1,    -1,    -1,   606,    -1,    -1,   609,    -1,
     611,    -1,     5,   614,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    -1,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,
      53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,
      83,    -1,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    -1,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,    -1,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,    -1,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,   162,
     163,    -1,   165,   166,   167,   168,    -1,    -1,    -1,    -1,
     173,   174,   175,    -1,    -1,   178,   179,   180,   181,   182,
     183,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,    -1,    -1,    -1,    -1,
      -1,    -1,   215,    -1,    -1,    -1,   219,   220,   221,   222,
     223,    -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,
      -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,   248,    -1,    -1,   251,    -1,
      -1,    -1,   255,   256,    -1,    -1,   259,   260,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,   282,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
     303,   304,   305,    -1,   307,   308,    -1,    -1,    -1,    -1,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,   322,
      -1,   324,    -1,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,    -1,   340,   341,    -1,
      -1,   344,   345,   346,   347,    -1,    -1,    -1,    -1,   352,
      -1,    -1,    -1,    -1,   357,   358,   359,    -1,   361,   362,
     363,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   377,   378,    -1,    -1,    -1,    -1,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,    -1,    -1,    -1,    -1,   398,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,    -1,
      -1,   414,    -1,    -1,    -1,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,    -1,
      -1,   434,    -1,   436,   437,    -1,   439,    -1,    -1,    -1,
     443,    -1,    -1,   446,   447,   448,    -1,    -1,    -1,   452,
     453,   454,   455,   456,   457,    -1,   459,   460,    -1,   462,
      -1,    -1,    -1,    -1,   467,   468,   469,    -1,    -1,    -1,
      -1,   474,    -1,    -1,    -1,   478,    -1,    -1,   481,    -1,
     483,    -1,   485,    -1,   487,    -1,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,   497,   498,    -1,   500,    -1,    -1,
     503,    -1,    -1,   506,    -1,   508,    -1,    -1,    -1,   512,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,   524,   525,    -1,   527,   528,    -1,   530,    -1,   532,
     533,   534,   535,    -1,    -1,   538,   539,    -1,   541,   542,
     543,   544,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,
      -1,    -1,    -1,    -1,   557,   558,   559,    -1,   561,   562,
      -1,   564,   565,    -1,    -1,    -1,    -1,    -1,   571,    -1,
      -1,   574,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,    -1,    -1,    -1,   587,    -1,    -1,   590,    -1,    -1,
      -1,   594,   595,   596,   597,   598,   599,    -1,    -1,   602,
      -1,    -1,    -1,   606,    -1,    -1,   609,    -1,   611,    -1,
       5,   614,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,
      55,    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    83,    -1,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    -1,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,    -1,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,   162,   163,    -1,
     165,   166,   167,   168,    -1,    -1,    -1,    -1,   173,   174,
     175,    -1,    -1,   178,   179,   180,   181,   182,   183,    -1,
      -1,    -1,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
      -1,    -1,   207,   208,    -1,    -1,    -1,    -1,    -1,    -1,
     215,    -1,    -1,    -1,   219,   220,   221,   222,   223,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
      -1,   236,    -1,    -1,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,   248,    -1,    -1,   251,    -1,    -1,    -1,
     255,   256,    -1,    -1,   259,   260,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,   300,    -1,   302,   303,   304,
     305,    -1,   307,   308,    -1,    -1,    -1,    -1,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,   322,    -1,   324,
      -1,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,    -1,   340,   341,    -1,    -1,   344,
     345,   346,   347,    -1,    -1,    -1,    -1,   352,    -1,    -1,
      -1,    -1,   357,   358,   359,    -1,   361,   362,   363,   364,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   377,   378,    -1,    -1,    -1,    -1,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,    -1,
      -1,    -1,    -1,   398,   399,    -1,   401,    -1,   403,   404,
     405,   406,   407,    -1,   409,   410,   411,    -1,    -1,   414,
      -1,    -1,    -1,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,    -1,   431,    -1,    -1,   434,
      -1,   436,   437,    -1,   439,    -1,    -1,    -1,   443,    -1,
      -1,   446,   447,   448,    -1,    -1,    -1,   452,   453,   454,
     455,   456,   457,    -1,   459,   460,    -1,   462,    -1,    -1,
      -1,    -1,   467,   468,   469,    -1,    -1,    -1,    -1,   474,
      -1,    -1,    -1,   478,    -1,    -1,   481,    -1,   483,    -1,
     485,    -1,   487,    -1,   489,   490,    -1,    -1,    -1,    -1,
      -1,    -1,   497,   498,    -1,   500,    -1,    -1,   503,    -1,
      -1,   506,    -1,   508,    -1,    -1,    -1,   512,    -1,   514,
     515,   516,   517,   518,   519,    -1,    -1,   522,   523,   524,
     525,    -1,   527,   528,    -1,   530,    -1,   532,   533,   534,
     535,    -1,    -1,   538,   539,    -1,   541,   542,   543,   544,
      -1,    -1,    -1,    -1,    -1,   550,   551,   552,    -1,    -1,
      -1,    -1,   557,   558,   559,    -1,   561,   562,    -1,   564,
     565,    -1,    -1,    -1,    -1,    -1,   571,    -1,    -1,   574,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,    -1,
      -1,    -1,   587,    -1,    -1,   590,    -1,    -1,    -1,   594,
     595,   596,   597,   598,   599,    -1,    -1,   602,    -1,    -1,
      -1,   606,    -1,    -1,   609,    -1,   611,    -1,     5,   614,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,
      -1,    58,    -1,    -1,    -1,    -1,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    81,    -1,    83,    -1,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    -1,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,   162,   163,    -1,   165,   166,
     167,   168,    -1,    -1,    -1,    -1,   173,   174,   175,    -1,
      -1,   178,   179,   180,   181,   182,   183,    -1,    -1,    -1,
      -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,    -1,    -1,
     207,   208,    -1,    -1,    -1,    -1,    -1,    -1,   215,    -1,
      -1,    -1,   219,   220,   221,   222,   223,    -1,   225,   226,
     227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,
      -1,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,
     247,   248,    -1,    -1,   251,    -1,    -1,    -1,   255,   256,
      -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,   282,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
      -1,   298,   299,   300,    -1,   302,   303,   304,   305,    -1,
     307,   308,    -1,    -1,    -1,    -1,   313,   314,   315,   316,
     317,   318,    -1,    -1,   321,   322,    -1,   324,    -1,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,    -1,   340,   341,    -1,    -1,   344,   345,   346,
     347,    -1,    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,
     357,   358,   359,    -1,   361,   362,   363,   364,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     377,   378,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,    -1,    -1,    -1,
      -1,   398,   399,    -1,   401,    -1,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,    -1,    -1,   414,    -1,    -1,
      -1,   418,   419,   420,   421,   422,    -1,    -1,   425,   426,
     427,   428,   429,    -1,   431,    -1,    -1,   434,    -1,   436,
     437,    -1,   439,    -1,    -1,    -1,   443,    -1,    -1,   446,
     447,   448,    -1,    -1,    -1,   452,   453,   454,   455,   456,
     457,    -1,   459,   460,    -1,   462,    -1,    -1,    -1,    -1,
     467,   468,   469,    -1,    -1,    -1,    -1,   474,    -1,    -1,
      -1,   478,    -1,    -1,   481,    -1,   483,    -1,   485,    -1,
     487,    -1,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
     497,   498,    -1,   500,    -1,    -1,   503,    -1,    -1,   506,
      -1,   508,    -1,    -1,    -1,   512,    -1,   514,   515,   516,
     517,   518,   519,    -1,    -1,   522,   523,   524,   525,    -1,
     527,   528,    -1,   530,    -1,   532,   533,   534,   535,    -1,
      -1,   538,   539,    -1,   541,   542,   543,   544,    -1,    -1,
      -1,    -1,    -1,   550,   551,   552,    -1,    -1,    -1,    -1,
     557,   558,   559,    -1,   561,   562,    -1,   564,   565,    -1,
      -1,    -1,    -1,    -1,   571,    -1,    -1,   574,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,
     587,    -1,    -1,   590,    -1,    -1,    -1,   594,   595,   596,
     597,   598,   599,    -1,    -1,   602,    -1,    -1,    -1,   606,
      -1,    -1,   609,    -1,   611,    -1,     5,   614,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,
      -1,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    81,    -1,    83,    -1,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    -1,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,   162,   163,    -1,   165,   166,   167,   168,
      -1,    -1,    -1,    -1,   173,   174,   175,    -1,    -1,   178,
     179,   180,   181,   182,   183,    -1,    -1,    -1,    -1,    -1,
      -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,    -1,    -1,   207,   208,
      -1,    -1,    -1,    -1,    -1,    -1,   215,    -1,    -1,    -1,
     219,   220,   221,   222,   223,    -1,   225,   226,   227,    -1,
     229,    -1,   231,    -1,    -1,    -1,    -1,   236,    -1,    -1,
      -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,   248,
      -1,    -1,   251,    -1,    -1,    -1,   255,   256,    -1,    -1,
     259,   260,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,   282,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,    -1,   298,
     299,   300,    -1,   302,   303,   304,   305,    -1,   307,   308,
      -1,    -1,    -1,    -1,   313,   314,   315,   316,   317,   318,
      -1,    -1,   321,   322,    -1,   324,    -1,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
      -1,   340,   341,    -1,    -1,   344,   345,   346,   347,    -1,
      -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,   357,   358,
     359,    -1,   361,   362,   363,   364,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,   378,
      -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,    -1,    -1,    -1,    -1,   398,
     399,    -1,   401,    -1,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,    -1,    -1,   414,    -1,    -1,    -1,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,   431,    -1,    -1,   434,    -1,   436,   437,    -1,
     439,    -1,    -1,    -1,   443,    -1,    -1,   446,   447,   448,
      -1,    -1,    -1,   452,   453,   454,   455,   456,   457,    -1,
     459,   460,    -1,   462,    -1,    -1,    -1,    -1,   467,   468,
     469,    -1,    -1,    -1,    -1,   474,    -1,    -1,    -1,   478,
      -1,    -1,   481,    -1,   483,    -1,   485,    -1,   487,    -1,
     489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,
      -1,   500,    -1,    -1,   503,    -1,    -1,   506,    -1,   508,
      -1,    -1,    -1,   512,    -1,   514,   515,   516,   517,   518,
     519,    -1,    -1,   522,   523,   524,   525,    -1,   527,   528,
      -1,   530,    -1,   532,   533,   534,   535,    -1,    -1,   538,
     539,    -1,   541,   542,   543,   544,    -1,    -1,    -1,    -1,
      -1,   550,   551,   552,    -1,    -1,    -1,    -1,   557,   558,
     559,    -1,   561,   562,    -1,   564,   565,    -1,    -1,    -1,
      -1,    -1,   571,    -1,    -1,   574,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,
      -1,   590,    -1,    -1,    -1,   594,   595,   596,   597,   598,
     599,    -1,    -1,   602,    -1,    -1,    -1,   606,    -1,    -1,
     609,    -1,   611,    -1,     5,   614,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    -1,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    52,    53,    -1,    55,    56,    -1,    58,    -1,    -1,
      -1,    -1,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      81,    -1,    83,    -1,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    -1,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,    -1,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,    -1,   156,    -1,   158,   159,   160,
      -1,   162,   163,    -1,   165,   166,   167,   168,    -1,    -1,
      -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,   180,
     181,   182,   183,    -1,    -1,    -1,    -1,    -1,    -1,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,    -1,    -1,   207,   208,    -1,    -1,
      -1,    -1,    -1,    -1,   215,    -1,    -1,    -1,   219,   220,
     221,   222,   223,    -1,   225,   226,   227,    -1,   229,    -1,
     231,    -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,
     241,    -1,   243,   244,    -1,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,   255,   256,    -1,    -1,   259,   260,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,   282,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,    -1,   298,   299,   300,
      -1,   302,   303,   304,   305,    -1,   307,   308,    -1,    -1,
      -1,    -1,   313,   314,   315,   316,   317,   318,    -1,    -1,
     321,   322,    -1,   324,    -1,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,    -1,   340,
     341,    -1,    -1,   344,   345,   346,   347,    -1,    -1,    -1,
      -1,   352,    -1,    -1,    -1,    -1,   357,   358,   359,    -1,
     361,   362,   363,   364,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,    -1,    -1,    -1,    -1,   398,   399,    -1,
     401,    -1,   403,   404,   405,   406,   407,    -1,   409,   410,
     411,    -1,    -1,   414,    -1,    -1,    -1,   418,   419,   420,
     421,   422,    -1,    -1,   425,   426,   427,   428,   429,    -1,
     431,    -1,    -1,   434,    -1,   436,   437,    -1,   439,    -1,
      -1,    -1,   443,    -1,    -1,   446,   447,   448,    -1,    -1,
      -1,   452,   453,   454,   455,   456,   457,    -1,   459,   460,
      -1,   462,    -1,    -1,    -1,    -1,   467,   468,   469,    -1,
      -1,    -1,    -1,   474,    -1,    -1,    -1,   478,    -1,    -1,
     481,    -1,   483,    -1,   485,    -1,   487,    -1,   489,   490,
      -1,    -1,    -1,    -1,    -1,    -1,   497,   498,    -1,   500,
      -1,    -1,   503,    -1,    -1,   506,    -1,   508,    -1,    -1,
      -1,   512,    -1,   514,   515,   516,   517,   518,   519,    -1,
      -1,   522,   523,   524,   525,    -1,   527,   528,    -1,   530,
      -1,   532,   533,   534,   535,    -1,    -1,   538,   539,    -1,
     541,   542,   543,   544,    -1,    -1,    -1,    -1,    -1,   550,
     551,   552,    -1,    -1,    -1,    -1,   557,   558,   559,    -1,
     561,   562,    -1,   564,   565,    -1,    -1,    -1,    -1,    -1,
     571,    -1,    -1,   574,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,    -1,   590,
      -1,    -1,    -1,   594,   595,   596,   597,   598,   599,    -1,
      -1,   602,    -1,    -1,    -1,   606,    -1,    -1,   609,    -1,
     611,    -1,     5,   614,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    -1,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,
      53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,
      83,    -1,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    -1,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,    -1,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,    -1,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,    -1,   156,    -1,   158,   159,   160,    -1,   162,
     163,    -1,   165,   166,   167,   168,    -1,    -1,    -1,    -1,
     173,   174,   175,    -1,    -1,   178,   179,   180,   181,   182,
     183,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,    -1,    -1,    -1,    -1,
      -1,    -1,   215,    -1,    -1,    -1,   219,   220,   221,   222,
     223,    -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,
      -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,   248,    -1,    -1,   251,    -1,
      -1,    -1,   255,   256,    -1,    -1,   259,   260,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,   282,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
     303,   304,   305,    -1,   307,   308,    -1,    -1,    -1,    -1,
     313,   314,   315,   316,   317,   318,    -1,    -1,   321,   322,
      -1,   324,    -1,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,    -1,   340,   341,    -1,
      -1,   344,   345,   346,   347,    -1,    -1,    -1,    -1,   352,
      -1,    -1,    -1,    -1,   357,   358,   359,    -1,   361,   362,
     363,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   377,   378,    -1,    -1,    -1,    -1,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,    -1,    -1,    -1,    -1,   398,   399,    -1,   401,    -1,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,    -1,
      -1,   414,    -1,    -1,    -1,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,   431,    -1,
      -1,   434,    -1,   436,   437,    -1,   439,    -1,    -1,    -1,
     443,    -1,    -1,   446,   447,   448,    -1,    -1,    -1,   452,
     453,   454,   455,   456,   457,    -1,   459,   460,    -1,   462,
      -1,    -1,    -1,    -1,   467,   468,   469,    -1,    -1,    -1,
      -1,   474,    -1,    -1,    -1,   478,    -1,    -1,   481,    -1,
     483,    -1,   485,    -1,   487,    -1,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,   497,   498,    -1,   500,    -1,    -1,
     503,    -1,    -1,   506,    -1,   508,    -1,    -1,    -1,   512,
      -1,   514,   515,   516,   517,   518,   519,    -1,    -1,   522,
     523,   524,   525,    -1,   527,   528,    -1,   530,    -1,   532,
     533,   534,   535,    -1,    -1,   538,   539,    -1,   541,   542,
     543,   544,    -1,    -1,    -1,    -1,    -1,   550,   551,   552,
      -1,    -1,    -1,    -1,   557,   558,   559,    -1,   561,   562,
      -1,   564,   565,    -1,    -1,    -1,    -1,    -1,   571,    -1,
      -1,   574,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,    -1,    -1,    -1,   587,    -1,    -1,   590,    -1,    -1,
      -1,   594,   595,   596,   597,   598,   599,    -1,    -1,   602,
      -1,    -1,    -1,   606,    -1,    -1,   609,    -1,   611,    -1,
       5,   614,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    83,    -1,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    -1,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,    -1,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
      -1,   156,    -1,   158,   159,   160,    -1,   162,   163,    -1,
     165,   166,   167,   168,    -1,    -1,    -1,    -1,   173,   174,
     175,    -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,
      -1,    -1,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
      -1,    -1,   207,   208,    -1,    -1,    -1,    -1,    -1,    -1,
     215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
      -1,   236,    -1,    -1,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,    -1,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,    -1,   298,   299,   300,    -1,   302,   303,   304,
     305,    -1,   307,   308,    -1,    -1,    -1,    -1,   313,   314,
     315,   316,   317,   318,    -1,    -1,   321,   322,    -1,   324,
      -1,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,    -1,   340,   341,    -1,    -1,   344,
     345,   346,   347,    -1,    -1,    -1,    -1,   352,    -1,    -1,
      -1,    -1,   357,   358,   359,    -1,   361,   362,   363,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   377,   378,    -1,    -1,    -1,    -1,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,    -1,
      -1,    -1,    -1,   398,   399,    -1,   401,    -1,   403,   404,
     405,   406,   407,    -1,   409,   410,   411,    -1,    -1,   414,
      -1,    -1,    -1,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,    -1,   431,    -1,    -1,   434,
      -1,   436,    -1,    -1,   439,    -1,    -1,    -1,   443,    -1,
      -1,   446,   447,    -1,    -1,    -1,    -1,   452,   453,   454,
     455,   456,   457,    -1,   459,   460,    -1,   462,    -1,    -1,
      -1,    -1,   467,   468,   469,    -1,    -1,    -1,    -1,   474,
      -1,    -1,    -1,   478,    -1,    -1,   481,    -1,   483,    -1,
     485,    -1,   487,    -1,   489,   490,    -1,    -1,    -1,    -1,
      -1,    -1,   497,   498,    -1,   500,    -1,    -1,   503,    -1,
      -1,   506,    -1,   508,    -1,    -1,    -1,   512,    -1,   514,
     515,   516,   517,   518,   519,    -1,    -1,   522,   523,   524,
     525,    -1,   527,   528,    -1,   530,    -1,   532,   533,   534,
     535,    -1,    -1,   538,   539,    -1,   541,   542,   543,   544,
      -1,    -1,    -1,    -1,    -1,   550,   551,   552,    -1,    -1,
      -1,    -1,   557,   558,   559,    -1,   561,   562,    -1,   564,
     565,    -1,    -1,    -1,    -1,    -1,   571,    -1,    -1,   574,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,    -1,
      -1,    -1,   587,    -1,    -1,   590,    -1,    -1,    -1,   594,
     595,   596,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,
      -1,   606,    -1,    -1,   609,    -1,   611,    -1,    -1,   614
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    15,    31,    35,    49,    50,    57,    62,    63,
      84,   103,   124,   132,   133,   134,   144,   145,   157,   170,
     186,   202,   206,   210,   235,   237,   253,   271,   275,   365,
     382,   386,   397,   408,   430,   433,   435,   438,   441,   442,
     449,   451,   458,   464,   472,   477,   479,   482,   507,   511,
     556,   568,   572,   575,   581,   610,   616,   629,   640,   643,
     644,   645,   646,   647,   649,   654,   656,   663,   693,   721,
     728,   837,   928,  1002,  1045,  1048,  1056,  1061,  1067,  1069,
    1072,  1078,  1081,  1086,  1093,  1105,  1106,  1272,  1274,  1284,
    1287,  1312,  1320,  1331,  1338,  1352,  1355,  1358,  1368,  1374,
    1378,  1383,  1384,  1434,  1451,  1457,  1459,  1466,  1468,  1496,
    1502,  1503,  1504,  1505,  1558,  1566,  1567,  1568,    11,   111,
     129,   194,   276,   402,   470,   528,  1037,  1038,  1527,  1528,
    1529,  1532,   272,   353,  1080,  1497,   537,  1425,   228,     5,
       7,     8,     9,    10,    11,    14,    18,    21,    23,    24,
      25,    26,    27,    28,    29,    31,    35,    39,    42,    43,
      44,    46,    48,    49,    52,    55,    56,    58,    59,    61,
      62,    64,    65,    66,    67,    68,    69,    70,    72,    73,
      74,    75,    76,    77,    78,    79,    81,    82,    83,    84,
      85,    86,    87,    88,    90,    91,    93,    94,    95,    96,
      97,    99,   102,   105,   109,   113,   114,   115,   118,   123,
     124,   129,   131,   135,   137,   138,   139,   140,   144,   147,
     148,   149,   153,   155,   156,   158,   159,   160,   162,   163,
     165,   166,   167,   168,   169,   170,   173,   174,   175,   178,
     179,   181,   182,   183,   186,   190,   192,   194,   196,   197,
     198,   199,   200,   201,   203,   206,   207,   208,   210,   214,
     215,   219,   220,   221,   222,   225,   226,   227,   229,   231,
     236,   237,   241,   243,   244,   246,   247,   251,   254,   255,
     256,   259,   262,   263,   269,   270,   272,   274,   276,   277,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   298,   299,   300,   302,   303,   304,   305,
     307,   308,   313,   314,   315,   316,   317,   318,   321,   322,
     324,   326,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   340,   341,   344,   345,   346,   347,   351,   352,
     357,   358,   359,   361,   362,   363,   364,   366,   367,   376,
     377,   378,   381,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   397,   398,   399,   401,   403,
     404,   405,   406,   407,   409,   410,   411,   414,   418,   419,
     420,   421,   422,   425,   426,   427,   428,   429,   431,   432,
     434,   435,   436,   439,   441,   443,   444,   446,   447,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   462,
     463,   467,   468,   469,   470,   474,   478,   480,   481,   482,
     483,   485,   486,   487,   488,   489,   490,   497,   498,   500,
     503,   506,   507,   508,   511,   512,   514,   515,   516,   517,
     518,   519,   522,   523,   524,   525,   527,   528,   530,   532,
     533,   534,   535,   538,   539,   541,   542,   543,   544,   550,
     551,   552,   556,   557,   558,   559,   561,   562,   564,   565,
     567,   568,   571,   574,   576,   578,   579,   580,   587,   590,
     594,   595,   596,   597,   598,   599,   606,   607,   609,   610,
     611,   614,   687,  1424,  1428,  1432,  1433,   298,   527,   531,
    1453,  1073,   606,  1498,   111,   193,   276,   470,   491,   528,
     534,   570,   578,   669,   670,   889,   890,   891,   980,   981,
     982,  1321,  1273,   111,   167,   194,   228,   276,   402,   470,
     528,   534,   553,   578,   595,  1283,  1428,  1080,   686,   637,
    1421,  1423,  1428,   655,  1285,   391,   488,  1379,   114,   228,
     611,  1389,  1453,  1080,   629,   838,  1428,  1375,   458,   578,
    1453,  1080,  1288,  1369,   494,   718,   722,   723,  1428,   686,
    1498,  1428,  1109,  1111,  1112,   367,  1436,  1339,   722,   507,
     511,   482,   550,   482,   531,  1333,   391,   488,  1458,  1313,
    1428,    31,    84,   155,   397,   419,   451,   507,  1560,   464,
     629,  1107,     0,   157,   641,   397,   174,   385,  1356,  1421,
    1428,   617,  1013,  1428,   617,   687,   204,   687,   264,  1425,
    1428,  1430,   783,   784,   787,   810,  1428,   531,   224,   363,
    1039,  1040,  1041,   167,  1008,  1527,  1453,  1498,  1087,   694,
     637,   548,  1057,   595,  1070,  1453,    17,  1499,   223,   892,
     204,  1430,   785,   810,   686,   372,  1524,  1528,  1529,  1530,
    1531,  1532,   531,   890,   228,   228,   228,   224,   283,   411,
    1329,  1330,     7,    21,    28,    34,    36,    37,    38,    40,
      53,    54,    59,    60,    69,    72,    74,    75,    76,    77,
      78,    79,    96,   100,   101,   106,   107,   110,   111,   116,
     117,   118,   123,   125,   128,   171,   176,   177,   184,   198,
     200,   205,   211,   212,   219,   223,   235,   238,   256,   261,
     269,   280,   301,   306,   317,   321,   323,   327,   328,   329,
     330,   331,   339,   348,   349,   350,   354,   355,   359,   380,
     387,   392,   393,   395,   409,   437,   438,   450,   456,   462,
     509,   510,   516,   520,   521,   526,   537,   541,   542,   543,
     544,   554,   555,   556,   560,   563,   578,   583,   584,   585,
     586,   591,   593,   599,   614,   622,   623,   628,   629,   632,
     633,   636,   637,  1127,  1128,  1129,  1130,  1134,  1141,  1142,
    1143,  1144,  1145,  1146,  1154,  1158,  1171,  1408,  1410,  1412,
    1413,  1417,  1419,  1424,  1428,   223,  1282,  1282,  1282,  1428,
     204,  1282,  1282,   810,  1282,   686,  1282,  1453,   650,  1359,
      12,    13,   103,   132,   145,   167,   170,   181,   202,   228,
     235,   275,   403,   407,   423,   431,   439,   464,   477,   478,
     522,   553,   575,   577,  1469,  1471,  1473,  1474,  1428,   364,
      68,   415,   637,  1430,   130,   213,   283,  1290,  1428,  1425,
     207,   487,  1380,   239,  1385,  1452,  1453,   929,  1122,    47,
     839,   191,    34,   298,  1344,  1376,  1428,   686,  1082,  1062,
     130,   283,  1291,  1319,   298,   410,   482,  1370,  1371,   587,
     719,   472,   724,    12,   407,  1467,  1471,   548,  1499,  1110,
      12,   141,   213,   496,   497,   498,   499,   500,   501,   513,
    1116,  1117,  1118,  1523,  1435,    24,    35,    59,    60,    67,
      72,    99,   101,   103,   112,   159,   163,   166,   192,   194,
     201,   203,   227,   228,   229,   250,   272,   298,   364,   390,
     401,   402,   405,   406,   426,   469,   482,   512,   530,   531,
     579,   598,   954,   979,  1340,  1344,  1345,  1347,  1442,   724,
    1050,  1051,  1050,  1050,   603,  1049,  1050,  1332,  1428,  1425,
    1453,  1319,    36,   211,   212,   537,  1409,  1426,  1559,  1559,
    1559,  1559,  1559,  1111,  1107,   630,   635,  1428,  1354,  1353,
     315,   535,   562,  1004,   576,   107,  1430,  1431,  1006,   789,
     811,  1428,  1005,   366,     6,    57,   145,   349,   414,   416,
     812,  1421,  1041,   687,   502,  1533,  1534,  1007,  1068,  1088,
    1089,  1090,  1091,  1421,   629,   695,  1428,   657,  1278,  1279,
    1421,  1071,  1278,    56,   351,   351,   430,  1500,   348,   349,
    1133,  1428,   788,   811,   188,     6,  1431,  1484,  1487,   438,
      10,   402,   553,   673,  1122,  1526,  1534,  1542,  1546,  1547,
    1553,   673,  1122,  1525,  1534,  1542,  1547,  1553,  1527,  1532,
     892,  1428,  1428,  1428,   191,  1322,  1326,  1327,  1428,  1329,
     629,   629,   629,  1141,   629,   629,   629,  1127,  1174,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,  1126,  1126,   629,  1125,   629,   629,
     629,   563,   629,  1408,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,  1127,   629,   629,   629,   629,
    1172,  1173,  1417,  1428,   629,   629,   629,   629,   629,   629,
     629,   629,   629,  1127,  1125,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,  1125,   629,  1408,   629,   629,   629,  1408,   629,   629,
      36,   211,   212,   537,   953,   629,  1126,  1125,  1125,   629,
     629,   629,   629,   629,  1141,  1141,  1141,  1127,  1518,  1519,
    1428,  1159,  1428,    16,    17,   369,   372,   612,  1131,  1132,
     161,   195,   245,   257,   342,   617,   618,   619,  1135,    32,
     142,   242,   265,   327,   424,   475,   476,   489,   620,   621,
     622,   623,   624,   625,   626,   627,  1133,  1141,    71,   371,
     631,  1426,   629,   637,   171,  1428,   687,  1428,   360,   811,
     687,  1430,   821,  1345,   687,  1431,  1483,  1277,  1282,   582,
     651,    34,    67,   135,   159,   162,   196,   215,   229,   277,
     298,   401,   410,   425,   443,   482,   483,   508,   530,   579,
    1360,  1364,  1365,  1453,   401,  1472,   453,   453,   528,   534,
     578,   595,   367,  1476,   527,   360,  1478,    66,   482,  1475,
     112,   595,  1477,   360,   631,    19,   617,  1224,  1225,  1460,
    1428,   224,  1036,   488,    90,   410,  1381,    49,    88,   283,
    1391,  1421,  1454,  1455,  1079,   630,  1127,   267,   270,   412,
     840,   842,   636,   648,  1425,   277,  1083,  1431,  1084,  1085,
    1421,   595,  1059,  1453,   239,  1279,  1292,  1293,    49,  1372,
     631,  1426,    55,    65,    81,    93,    94,    95,   109,   316,
     334,   460,   515,   533,   725,   727,  1472,   360,   360,   458,
    1501,  1500,   569,  1506,  1507,   624,  1120,  1121,  1122,  1118,
    1437,  1438,  1439,   166,   472,   265,   601,  1351,   629,   111,
     167,   194,   402,   531,   553,   595,  1351,    12,   901,  1430,
     266,  1243,  1245,   191,   242,  1346,  1348,    70,   508,   189,
     508,   527,    70,   508,    12,    42,    97,   102,   244,   314,
     378,   490,   524,  1334,  1335,  1336,   166,   215,   508,   508,
    1243,  1351,  1348,   277,   158,    73,   404,   527,   552,   508,
     590,  1047,   429,   503,  1052,  1053,  1046,    91,  1279,  1036,
     631,   362,  1562,   523,  1563,   249,   446,  1561,   630,  1507,
    1509,  1511,  1512,   157,   642,  1105,  1357,  1409,  1428,   128,
     887,   888,   898,   899,   963,   114,  1126,   636,   688,     6,
     790,   688,   629,   113,   807,   807,   807,     4,  1003,  1009,
     463,   595,  1534,  1278,   242,   631,   386,  1099,  1101,  1102,
     696,   697,  1127,   225,   284,   285,   286,   287,   288,   289,
     291,   292,   293,   294,   295,   296,   297,   299,   300,   427,
     428,   658,   659,   662,   174,   411,   631,  1058,  1278,    58,
     174,   178,   189,   313,   411,  1074,  1075,  1076,    56,   430,
     171,   668,   790,   114,   807,   221,   631,  1122,  1122,  1122,
     167,   194,   194,  1534,  1421,   983,   984,   983,   983,  1280,
    1281,  1421,  1422,  1428,   631,  1324,   637,  1328,  1127,  1127,
      12,   141,  1166,  1226,  1166,  1166,  1166,   600,  1176,  1127,
    1127,  1171,  1171,  1127,  1127,  1127,  1139,  1140,  1127,  1127,
    1127,  1127,  1127,  1127,   141,  1166,  1226,   630,   125,   184,
     211,   280,   355,   560,   630,  1252,  1255,  1256,   630,  1127,
    1127,  1127,  1127,  1417,  1518,   119,   120,   121,   122,   123,
     216,   217,   218,   219,   317,   319,   320,   321,   328,   409,
     461,   462,   599,   613,   614,  1221,  1222,  1171,   115,   118,
     541,   544,  1223,   141,  1161,  1127,  1127,  1127,  1127,  1221,
    1171,  1127,  1171,  1173,     9,   631,   637,   141,  1166,  1127,
    1127,   141,  1166,  1127,  1127,  1171,  1171,  1171,  1127,  1127,
    1127,  1171,  1130,  1127,  1127,  1127,  1127,  1127,  1127,  1166,
    1166,  1127,  1127,   141,  1166,  1127,  1222,  1222,  1127,    45,
     258,   549,  1127,  1127,   630,  1418,  1419,  1428,  1166,  1166,
    1127,  1127,   630,   631,   630,   464,   629,  1515,  1516,  1127,
     636,  1160,  1430,   637,  1127,  1127,  1127,  1129,   177,   354,
     555,   571,  1133,    12,    18,  1129,  1136,  1130,  1130,   629,
    1141,  1130,  1130,  1130,  1130,   265,  1130,  1130,   238,  1130,
     238,  1130,  1130,  1130,  1130,  1130,    32,   242,   265,   424,
    1430,  1141,  1127,  1147,  1428,   637,  1421,   821,   352,   597,
     822,   823,   159,   631,  1278,  1275,   636,   652,   653,   277,
     277,   277,   277,    49,   277,   277,   631,  1361,   527,   629,
    1488,  1431,  1488,  1488,  1488,   194,   402,   531,  1470,  1474,
    1428,   182,   345,  1428,  1461,  1462,  1292,  1425,   578,  1127,
    1382,  1094,   272,  1390,  1225,   631,  1278,  1123,    73,   629,
     847,   848,   847,   848,   385,   850,   208,   252,  1430,    30,
     548,  1377,   631,   548,   631,   548,  1060,  1278,  1293,  1289,
      12,  1373,  1371,   631,   617,   631,  1431,   194,   402,  1470,
    1428,    12,   141,  1514,   631,  1113,  1127,  1415,  1428,   631,
     201,   272,   361,   469,  1440,  1441,  1444,  1445,   242,  1349,
    1425,  1127,   624,   892,   687,   687,   687,  1421,   687,  1421,
     277,   332,   508,  1343,  1343,   280,   355,   454,   560,  1246,
    1247,  1410,  1428,  1351,  1428,   687,  1351,  1431,  1346,   687,
    1351,   243,   525,   179,   189,  1337,   631,  1349,  1346,  1421,
    1348,  1346,  1346,  1351,  1351,   574,  1054,   631,  1054,   485,
     464,   629,   633,  1177,  1178,  1179,  1180,  1181,  1190,  1191,
    1205,  1409,   389,  1564,   370,  1239,  1245,  1513,   888,    71,
     954,   137,  1430,    82,    96,   254,   325,   351,   413,   502,
     690,   692,   420,   564,   808,   809,   231,   804,   805,   806,
     813,   821,   823,   111,   214,   376,   387,   394,   486,   578,
     671,   672,  1425,    25,   305,   798,   799,   800,   813,   814,
     815,   821,   823,   791,   792,   798,     6,    13,    15,    26,
      27,    57,    62,    63,    69,    82,    90,   100,   114,   131,
     138,   139,   145,   153,   159,   187,   226,   228,   236,   251,
     304,   322,   326,   365,   370,   377,   379,   386,   387,   418,
     432,   433,   434,   435,   455,   512,   528,   532,   551,   556,
     569,   834,   894,   896,   898,   899,  1014,  1018,  1020,  1023,
    1029,  1030,  1031,  1235,  1424,   360,   681,  1010,   129,   241,
    1421,   128,  1092,  1428,  1090,  1421,   836,  1101,   228,   252,
     977,  1103,   630,   631,   617,   617,   617,   617,   617,   617,
     617,   617,   617,   617,   617,   617,   617,   617,   617,   617,
     617,   617,   631,  1279,   189,  1077,   576,  1075,   886,   887,
      82,   346,   421,   565,   801,   802,   803,   813,   817,   818,
     819,   820,   821,   823,   607,   581,   786,    47,   594,   603,
    1485,  1487,   194,   687,   687,   892,   687,  1428,   664,   558,
     582,   991,   360,   360,   360,   631,  1325,  1323,   637,  1328,
    1327,   191,   624,  1428,   631,   630,  1166,   630,  1167,   630,
     630,   630,  1127,   151,   600,  1175,    19,   630,   582,   630,
     630,   630,   631,   631,   630,   631,   631,   631,   631,   630,
     631,   582,   631,  1155,   630,   624,   630,   631,   631,   630,
     630,   630,   630,   191,   630,   631,  1157,   630,   631,   631,
     631,   623,   630,   631,   630,   630,   629,  1417,  1428,  1166,
     630,   630,   630,  1166,   630,   631,   630,   630,   630,   630,
     630,   630,   631,   630,   242,   630,   631,   631,   631,   631,
     630,   630,   630,   631,   191,   631,  1166,   630,   630,   631,
     631,   631,   630,   191,  1127,   191,  1127,   191,  1127,   191,
     630,   631,   630,   630,   630,   630,   631,   630,  1171,  1195,
    1196,  1197,   464,   629,  1108,  1510,  1511,   569,  1520,   634,
     201,   272,   469,  1443,   473,  1428,   177,   354,   555,   571,
     629,    17,  1127,  1518,   165,  1231,  1130,  1127,  1127,  1130,
     629,  1141,  1130,  1122,  1151,  1152,  1153,   629,   637,  1428,
    1276,   822,   473,   617,  1303,  1304,  1431,    51,   445,  1042,
    1278,  1430,   631,  1365,  1278,  1366,  1428,  1489,  1490,   548,
     624,  1421,  1428,  1482,  1482,  1482,   182,   195,   255,   257,
     345,   399,   617,   618,   619,  1463,  1465,   601,  1227,  1286,
    1431,  1095,  1096,  1097,  1098,  1421,   230,   283,   415,   608,
    1456,  1455,   629,  1122,  1252,   519,   851,   841,    11,   843,
    1127,  1425,  1431,  1431,  1085,  1421,  1278,   174,   411,   580,
    1063,  1064,  1065,   464,   472,   586,   587,   629,   882,  1294,
    1297,   727,   118,   541,   544,   726,  1158,  1412,  1417,   202,
     191,  1482,  1482,  1482,  1508,  1121,   191,   239,  1114,  1115,
    1238,  1239,  1267,  1123,  1123,   637,  1438,   128,   550,  1428,
    1447,   335,   387,   636,   954,  1446,  1425,   191,  1350,   630,
    1428,   169,   454,   358,   631,  1351,   410,  1243,  1336,  1350,
    1351,  1346,  1421,  1351,  1351,   662,  1055,  1053,  1204,  1428,
     104,   232,   249,   261,   338,   450,   513,  1189,   472,   631,
    1421,  1204,   631,   189,  1565,    47,  1243,  1304,  1304,   336,
    1425,   502,   502,   502,   502,   502,   463,  1425,  1425,  1304,
     631,   806,  1425,  1425,  1425,  1425,   125,   184,   211,   280,
     355,   560,  1251,  1425,  1425,   630,   631,  1304,  1304,   631,
     800,   793,   794,   813,   814,   815,    80,    92,   386,   910,
     917,   918,   975,   977,   981,   982,  1035,  1035,   386,  1304,
    1304,  1035,  1304,   386,   386,  1304,  1304,   548,   137,  1304,
     250,   528,   188,   386,   400,   977,  1035,   250,  1304,   528,
     137,  1304,  1304,  1304,  1304,  1035,   386,    47,  1304,  1304,
     836,  1304,   386,   384,    19,   548,   617,  1044,   386,   386,
    1304,   140,   314,  1428,  1304,  1304,   386,  1304,   894,   631,
     833,   834,  1018,   629,   637,   909,   919,  1420,  1428,  1303,
      86,   459,   433,  1011,  1535,  1100,   629,  1127,   629,  1251,
    1425,  1425,   125,   184,   280,   355,   560,  1253,  1425,  1251,
    1425,  1425,  1425,  1425,  1425,  1251,  1251,  1425,  1413,  1425,
    1251,   659,   576,  1304,  1304,  1304,  1304,   631,   803,  1430,
     276,   175,   795,   796,   797,   813,   814,   815,   816,   819,
     820,   821,   823,   387,   537,  1430,  1428,  1554,     8,    30,
     781,   687,   629,   447,   265,   629,   825,   893,   895,   896,
      46,   208,   457,   996,   996,  1421,  1421,  1421,  1281,  1428,
     582,  1227,  1428,  1178,   637,  1328,   238,  1127,   630,  1127,
     540,  1127,  1127,   155,    34,    60,   115,   118,   126,   143,
     240,   340,   480,   544,   573,  1168,    34,   955,  1430,  1140,
    1127,  1139,  1171,  1127,  1127,  1127,   955,  1168,  1171,   630,
     238,   238,  1127,  1127,  1171,  1127,  1127,  1127,  1127,  1127,
    1130,   630,   630,  1127,  1127,  1127,  1127,  1127,  1127,  1171,
     238,  1127,  1127,  1127,   630,  1127,  1127,  1127,  1127,   191,
    1127,   191,  1127,   191,  1127,  1127,  1127,   630,  1521,  1522,
    1523,  1196,  1108,   630,  1514,   637,   637,   637,  1430,  1127,
    1518,  1129,   630,   631,   630,  1141,  1221,  1221,    17,  1127,
    1518,  1231,  1127,   630,   631,  1170,  1171,  1428,   900,  1430,
    1042,   653,  1362,   630,   631,  1484,   637,   637,   548,   548,
     548,  1464,  1228,  1244,  1245,  1294,   631,  1099,  1101,   537,
    1427,   608,   272,    88,   844,   845,   846,  1428,   856,  1130,
      47,   629,   858,   848,   617,   629,   548,   191,  1066,  1064,
     883,  1295,   629,  1300,  1305,  1300,   630,   882,  1296,  1414,
    1415,  1418,  1428,  1298,   617,   367,  1483,   191,   191,   191,
    1106,   146,  1178,  1268,   189,   275,  1119,  1267,  1244,  1115,
      19,  1124,  1425,  1428,   624,  1428,   637,   246,   637,  1303,
     128,   955,   956,  1303,   189,  1303,   636,  1430,    34,   128,
     958,   959,  1430,  1253,  1341,   163,   598,  1247,  1248,   169,
    1247,  1247,   355,  1342,  1227,  1346,   631,  1192,  1199,  1204,
    1177,   249,   249,   373,  1206,   249,   261,   450,  1206,  1190,
    1177,  1315,  1316,  1418,  1179,  1225,  1201,  1202,  1251,   318,
    1240,   128,   960,   962,  1430,   956,   114,   114,   129,   241,
     211,   280,   355,   560,   824,  1254,  1255,  1424,   806,   672,
     824,   824,   800,   631,   794,   999,  1420,  1080,    63,   188,
     400,   570,   916,   976,   999,   977,   978,   978,  1420,  1080,
    1253,  1251,  1420,  1251,    12,  1019,  1027,  1028,  1428,  1080,
    1425,  1425,   954,  1304,  1251,   252,  1027,   252,  1420,  1420,
     900,  1304,   182,   255,   351,   903,  1251,  1253,  1253,  1420,
    1080,  1236,  1237,  1418,   128,  1251,   128,  1251,  1257,   835,
    1425,  1080,  1421,  1080,  1080,    85,    87,   128,   149,   183,
     378,   422,   902,  1251,  1257,  1019,   897,     6,   145,  1031,
     906,   907,   908,   909,   910,  1428,     8,   182,  1043,   423,
     915,   916,   969,   920,   637,   128,  1254,  1425,  1428,   349,
     398,    23,   168,   675,   548,   138,   153,   677,   629,  1536,
     629,   400,  1217,  1218,  1219,  1428,   660,   661,  1251,  1425,
    1252,   824,   824,   803,   366,   204,  1304,   631,   797,   537,
      19,   582,  1486,   447,   629,   132,   235,   575,   782,   674,
    1548,   126,   240,   417,   514,   905,  1421,   265,   386,   826,
     832,   833,   906,   832,   631,   895,   665,   666,   667,   637,
    1178,  1238,  1328,  1227,  1127,   630,  1127,   540,   629,   945,
     946,   946,   946,   629,   940,   941,   945,  1169,   946,   240,
     946,   240,   630,   630,   630,    19,  1137,   630,   630,    19,
     630,   630,   630,  1156,  1127,  1127,   630,   630,   370,  1163,
     631,   631,   630,   631,   630,   242,  1148,  1149,   630,   630,
     630,   630,   631,   630,   630,  1127,   630,   189,   630,   630,
     631,   630,   631,   631,   630,  1127,   630,  1127,   630,  1127,
     630,   630,   630,  1120,  1523,   630,  1517,   637,  1000,   630,
    1171,  1129,   630,   631,   630,  1123,  1153,   630,   603,  1363,
    1490,   603,  1493,   624,   624,  1484,  1484,  1484,   629,  1127,
     360,  1310,  1097,  1421,  1101,   224,  1104,  1386,   630,   631,
    1123,   842,   386,   859,   860,  1252,   844,  1431,   333,  1116,
    1301,  1302,  1418,  1306,   631,   629,  1297,   630,   630,   631,
     637,  1506,   726,   191,  1483,  1483,  1483,  1227,  1227,   147,
     374,  1263,  1264,  1269,   575,   242,  1425,  1428,   637,  1428,
     263,  1428,    12,    34,   128,   360,  1127,  1450,    71,   961,
    1127,  1431,   359,   387,   537,  1449,  1443,  1303,  1243,  1248,
    1243,  1351,   662,   569,   630,  1510,  1200,   634,   249,  1190,
    1206,  1206,   249,   360,   360,   582,   631,  1314,  1303,  1215,
    1216,  1116,  1127,  1241,  1416,   794,  1021,   629,   252,   252,
     978,   999,   984,   999,   999,   145,   472,  1019,  1032,  1016,
     631,  1252,   956,  1425,   999,  1042,  1425,  1033,  1019,   631,
      20,   133,  1242,   839,  1019,  1024,  1019,   629,   630,   631,
    1428,  1421,    33,    34,    39,    41,    43,    44,    60,   115,
     118,   126,   143,   160,   183,   185,   198,   199,   240,   269,
     278,   279,   281,   310,   311,   312,   329,   330,   331,   337,
     340,   356,   357,   392,   393,   417,   468,   472,   484,   538,
     541,   544,   545,   546,   547,   588,   589,   614,   921,   930,
     933,   934,   935,   936,   937,   938,   939,  1428,   398,  1127,
    1127,   360,   681,   687,   360,    82,   682,  1428,  1537,    19,
    1019,   630,   631,   630,   631,   629,  1428,   824,   797,  1425,
     905,  1555,   360,   360,   698,   699,   701,  1428,   488,  1421,
     882,   630,   224,   438,   829,  1392,   895,   629,   629,   629,
    1428,  1227,   266,  1249,  1221,  1127,   125,   280,   355,   560,
      21,    34,    48,   567,   954,   964,   965,   966,   355,   629,
     941,   947,   115,   118,   126,   143,   185,   240,   337,   340,
     417,   544,   573,   934,   935,  1138,  1168,   630,  1221,  1221,
      47,   466,  1162,  1127,  1127,  1171,    43,   338,   630,   603,
    1150,  1127,  1221,  1127,  1127,  1127,  1127,   630,   630,   630,
    1198,  1515,  1428,   630,  1171,  1124,   415,   202,   440,  1491,
    1491,  1491,   128,  1127,  1308,  1309,   148,  1104,   259,  1392,
     846,   630,   208,   252,   861,   630,   631,   630,  1120,   631,
    1303,  1307,  1308,  1305,  1299,  1297,  1414,  1428,  1483,  1244,
     204,  1232,  1427,  1427,   636,  1265,  1266,  1430,   474,   624,
     415,   436,   467,  1448,   962,  1303,   629,   629,  1447,  1127,
    1514,  1225,  1180,  1177,  1190,   249,   249,  1177,  1190,  1183,
    1182,  1184,  1316,  1227,  1309,  1213,  1214,  1120,   631,  1242,
     385,   629,  1022,  1127,   999,   984,   629,   983,   983,   128,
     128,   919,  1074,  1028,   961,   921,  1015,  1237,  1025,  1027,
    1017,  1366,   908,   629,   970,   945,   945,   946,   946,   940,
     396,   931,   940,   940,   966,    60,   588,   934,   936,   966,
     966,    60,   589,   589,   592,   940,   932,   946,   946,   946,
     966,   945,   946,    26,    71,    82,   128,   197,   354,   360,
     400,   468,   570,   923,   948,   949,   950,   968,  1133,  1424,
     592,   945,   966,    34,   945,   967,   945,   945,   946,   947,
     637,  1221,   482,  1425,   144,  1012,   630,   631,  1538,  1539,
     630,  1218,   661,   671,   488,   233,   242,   375,   702,   703,
     704,   705,  1122,   459,   630,   631,   700,  1425,   630,   630,
     827,    19,   885,   997,   998,  1428,   997,   997,   454,  1247,
     630,   630,   630,   630,   630,    34,    21,   567,   954,    34,
     955,   631,   355,   946,   940,    60,   946,   240,   966,   630,
     630,   630,  1164,  1409,   630,   630,   631,   630,   324,   254,
     410,   630,   630,   630,   630,   630,   630,   904,  1115,  1244,
    1510,   630,   275,   367,    64,   247,   347,   504,   517,   609,
    1480,  1481,   603,  1492,  1492,  1492,   630,   631,  1311,   239,
     629,   849,   843,   862,  1428,   860,   884,  1302,  1309,   630,
    1509,    47,   209,  1229,  1270,  1430,   631,   324,    83,   561,
     415,  1449,   537,   537,  1303,  1193,   360,  1186,  1190,  1190,
     360,  1188,  1127,  1127,   629,  1238,   187,   224,   581,  1208,
    1209,  1212,  1203,  1416,  1252,   859,   630,   629,   629,   997,
     629,   629,   118,   541,   544,   622,   623,  1411,  1412,  1043,
    1034,  1080,  1026,  1063,   630,   971,  1428,   301,   972,   480,
     573,   615,   942,   943,   944,   629,   942,   942,   966,   592,
     942,   629,   966,   942,   960,  1425,   350,   952,  1411,    14,
     575,   128,   252,    19,   950,   252,   354,  1303,   966,   967,
     966,   967,   942,   942,  1428,   676,   683,   684,  1428,   464,
     629,  1540,   630,  1425,   630,   631,   700,  1543,   675,  1549,
     701,   930,   951,   828,   893,   629,   882,   630,   631,  1242,
     629,   630,   630,   169,   454,   955,   967,   355,  1165,  1416,
    1127,   324,   173,  1119,  1119,    17,  1367,   537,   537,   537,
      17,  1479,   202,   302,   303,   307,   308,  1494,  1495,  1309,
     252,   531,  1122,   852,   629,   586,   863,   904,  1233,  1416,
    1230,  1238,   954,   957,  1266,   630,   630,  1450,  1515,  1185,
     582,  1187,   582,  1220,  1428,  1249,   977,   977,  1209,   904,
    1242,   630,   997,   997,   630,   997,   997,  1413,  1413,  1043,
     239,   630,   631,   192,   383,   481,   360,   973,   944,  1001,
    1409,  1001,  1126,   350,   587,   922,   128,  1254,  1425,  1428,
     506,   678,    53,    68,   180,   223,   248,   260,   364,   448,
     685,   732,   734,   735,   736,   738,   739,   740,   741,   742,
     743,   745,   753,   754,   757,   768,   771,   773,   774,  1424,
    1429,  1433,  1109,  1107,   603,  1541,  1556,   704,  1428,  1421,
     680,   681,   447,   961,  1509,   832,   882,   830,    82,   251,
     985,   988,   991,   992,   993,  1424,   998,   355,   603,   986,
     990,   992,   995,   987,   989,   992,   994,   169,   630,   631,
    1242,   630,   138,  1480,   367,  1251,  1251,  1251,   355,   622,
    1250,  1495,   575,  1421,   856,   518,   857,   854,   855,  1428,
     242,   262,    82,    90,   114,   228,   304,   322,   346,   528,
     879,   880,   881,  1345,   604,   605,   631,  1234,  1242,  1127,
    1244,   956,  1271,  1194,  1127,   629,  1127,   629,   630,   631,
     189,  1207,  1207,   630,   630,   911,   630,   630,   629,  1428,
     132,   575,   630,   631,   630,  1126,   629,  1127,   156,   679,
     755,   758,  1428,   191,   345,   746,   733,  1429,  1429,  1428,
     737,   644,   282,   437,   602,   777,    31,   775,   638,   630,
      52,    63,   272,   689,   951,   189,   677,  1550,   829,   630,
    1506,  1425,  1304,   993,  1303,  1242,   630,   381,   995,   994,
    1416,    61,   280,   355,  1317,  1318,  1418,  1387,  1123,  1252,
     630,   631,   865,   539,  1304,  1304,   137,   137,  1304,  1304,
    1304,  1304,   629,   874,   881,   159,  1416,   402,  1258,    73,
    1393,  1510,  1220,  1220,  1428,   204,   249,   370,  1211,  1210,
     969,   914,   985,   912,   913,   859,    51,   351,   445,   472,
     974,   974,   966,  1409,   966,   929,  1127,  1127,   600,   760,
     764,   191,  1428,   748,   749,  1127,   707,   731,   732,   734,
     736,   738,   740,   741,   742,   743,   745,   753,   768,   771,
     773,   707,   778,   776,   769,   772,  1509,    63,   367,    63,
     136,   690,   691,  1133,  1557,  1122,   682,   951,   831,  1251,
     128,  1254,  1425,  1428,  1424,  1242,   631,  1303,   957,   630,
     853,   855,   629,   867,   869,   864,  1425,  1425,  1304,  1304,
    1254,  1254,  1252,  1430,   519,   875,   876,  1304,  1242,  1428,
     154,   164,   368,   536,  1394,  1395,   268,  1396,   630,   630,
      47,    47,   629,   629,   985,   986,   987,   630,     5,   128,
     354,   360,   360,   630,   756,   765,   151,   764,   767,   239,
     155,  1127,   155,   731,   635,   574,  1127,   708,   777,   775,
     367,   367,   136,   731,  1544,   144,  1551,  1509,  1318,  1309,
    1388,   857,   629,   868,   869,   870,   309,   866,   869,  1425,
    1425,   877,   630,   631,   900,  1259,    47,    47,   154,    47,
    1395,   505,   536,  1397,  1398,  1217,  1219,   575,   132,   388,
     596,   924,   600,   759,   761,  1127,   707,   155,   744,   223,
     540,   282,   635,   780,   144,   127,   706,   709,   770,  1429,
     770,   150,   683,   689,   454,  1399,   630,   631,   309,   872,
     873,  1130,   878,  1430,   876,   629,  1409,  1409,    47,  1409,
      47,    47,  1398,   630,   630,   974,   974,    82,   570,   925,
     926,   927,   762,   761,   767,   766,    53,   747,  1428,   750,
    1127,   779,    98,   172,   714,   729,  1428,   155,   731,   635,
     456,  1552,   221,  1393,   869,   631,   871,   879,  1122,  1260,
    1261,  1262,  1409,  1409,  1409,  1425,   252,   927,  1127,   155,
     540,   631,   707,   155,   707,   206,   631,   710,    89,   108,
     635,  1545,   731,    47,  1396,   873,   630,  1127,   630,   631,
     763,    53,   707,  1428,   751,   437,   155,   189,  1428,   951,
     189,   189,   731,  1409,   224,  1400,  1123,  1262,   540,   151,
     152,   752,   602,   711,   128,   730,   717,   718,  1251,   712,
     713,   355,   629,  1402,   707,   707,   748,   493,   495,   715,
     716,   717,   720,  1133,  1428,  1127,  1105,   268,   454,  1401,
     630,   636,  1403,  1404,  1418,   472,  1405,   631,   731,   190,
    1430,   630,   631,  1406,  1407,  1418,   716,  1404,   631,  1303,
    1407,  1122,  1309,  1123
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (thd, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, thd)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, thd); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    THD *thd;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (thd);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, thd)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    THD *thd;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, THD *thd)
#else
static void
yy_reduce_print (yyvsp, yyrule, thd)
    YYSTYPE *yyvsp;
    int yyrule;
    THD *thd;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , thd);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, thd); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, THD *thd)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, thd)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    THD *thd;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (thd);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (THD *thd);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (THD *thd)
#else
int
yyparse (thd)
    THD *thd;
#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1708 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1719 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((thd->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 1744 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 63:

/* Line 1455 of yacc.c  */
#line 1819 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 66:

/* Line 1455 of yacc.c  */
#line 1833 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 1842 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 1848 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 1857 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 1863 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 1878 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 1890 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 1898 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 1909 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 1913 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 1923 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 1927 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 1931 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 1935 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 1939 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 1943 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 1948 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 1952 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 1956 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 1960 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 1964 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 1968 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 1974 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(thd, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(thd, MYSQL_ERROR::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2005 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 100:

/* Line 1455 of yacc.c  */
#line 2020 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 101:

/* Line 1455 of yacc.c  */
#line 2026 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 102:

/* Line 1455 of yacc.c  */
#line 2030 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 103:

/* Line 1455 of yacc.c  */
#line 2046 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 2050 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 2061 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            /*
              For CREATE TABLE, an non-existing table is not an error.
              Instruct open_tables() to just take an MDL lock if the
              table does not exist.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_IF_EXISTS;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 2085 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(thd);
              push_warning_printf(thd, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  hton_name(lex->create_info.db_type)->str,
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 2101 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 2106 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 2112 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 2117 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 2123 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 2128 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 2133 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 2138 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 2145 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2151 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 2153 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 2157 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 2161 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2165 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2176 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2190 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 2194 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 2198 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 2202 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 2206 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 2210 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 130:

/* Line 1455 of yacc.c  */
#line 2214 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 131:

/* Line 1455 of yacc.c  */
#line 2221 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 2240 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2251 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2258 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 2264 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 2266 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2272 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 2278 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2287 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2294 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 2302 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2308 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2314 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 147:

/* Line 1455 of yacc.c  */
#line 2320 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 148:

/* Line 1455 of yacc.c  */
#line 2328 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2330 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 150:

/* Line 1455 of yacc.c  */
#line 2337 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 151:

/* Line 1455 of yacc.c  */
#line 2379 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 165:

/* Line 1455 of yacc.c  */
#line 2410 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 166:

/* Line 1455 of yacc.c  */
#line 2425 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 167:

/* Line 1455 of yacc.c  */
#line 2441 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 168:

/* Line 1455 of yacc.c  */
#line 2458 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 169:

/* Line 1455 of yacc.c  */
#line 2459 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 170:

/* Line 1455 of yacc.c  */
#line 2463 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 171:

/* Line 1455 of yacc.c  */
#line 2464 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 172:

/* Line 1455 of yacc.c  */
#line 2470 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 2472 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 2474 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 2476 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 2478 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 2480 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 2482 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2487 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2488 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2489 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2494 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2498 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2505 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, thd, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2513 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2529 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2533 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 196:

/* Line 1455 of yacc.c  */
#line 2551 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 197:

/* Line 1455 of yacc.c  */
#line 2572 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(1) - (3)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(3) - (3)].num),
                                                     sp_param_in);

            if (lex->sphead->fill_field_definition(thd, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 202:

/* Line 1455 of yacc.c  */
#line 2609 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(3) - (4)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(4) - (4)].num),
                                                     (sp_param_mode_t)(yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(thd, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 203:

/* Line 1455 of yacc.c  */
#line 2634 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 2635 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 2636 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_out; }
    break;

  case 206:

/* Line 1455 of yacc.c  */
#line 2637 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_inout; }
    break;

  case 207:

/* Line 1455 of yacc.c  */
#line 2641 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 209:

/* Line 1455 of yacc.c  */
#line 2646 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 2652 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 2656 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 213:

/* Line 1455 of yacc.c  */
#line 2682 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(thd);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 214:

/* Line 1455 of yacc.c  */
#line 2690 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable_t *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->dflt= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(thd, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 215:

/* Line 1455 of yacc.c  */
#line 2746 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_cond(&(yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(thd->lex->spcont->push_cond(&(yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondtype)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 216:

/* Line 1455 of yacc.c  */
#line 2761 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->spcont= lex->spcont->push_context(LABEL_HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, (yyvsp[(2) - (4)].num),
                                      ctx->current_var_count());
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == SP_HANDLER_CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(empty_c_string, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 2783 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == SP_HANDLER_CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx,
                                      ctx->current_var_count());
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx, 0);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= (yyvsp[(6) - (7)].num);
            lex->spcont->add_handlers((yyvsp[(6) - (7)].num));
          }
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 2815 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor(&(yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
            if (i == NULL ||
                sp->add_instr(i) ||
                ctx->push_cursor(&(yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 2840 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd);
          }
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 2844 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 2863 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_EXIT; }
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 2864 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_CONTINUE; }
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 2870 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 2872 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 2877 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->find_handler((yyvsp[(1) - (1)].spcondtype)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondtype));
              ctx->push_handler((yyvsp[(1) - (1)].spcondtype));
            }
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 2900 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *) thd->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::number;
            (yyval.spcondtype)->mysqlerr= (yyvsp[(1) - (1)].ulong_num);
          }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 2917 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* SQLSTATE */
            if (!sp_cond_check(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *) thd->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::state;
            memcpy((yyval.spcondtype)->sqlstate, (yyvsp[(3) - (3)].lex_str).str, SQLSTATE_LENGTH);
            (yyval.spcondtype)->sqlstate[SQLSTATE_LENGTH]= '\0';
          }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 2933 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 2934 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 2939 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype);
          }
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 2943 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= Lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if ((yyval.spcondtype) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 2952 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *) thd->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::warning;
          }
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 2959 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *) thd->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::notfound;
          }
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 2966 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *) thd->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::exception;
          }
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 2976 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_stmt= new (thd->mem_root) Signal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 2990 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_cond_type_t *cond;
            if (lex->spcont == NULL)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            cond= lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if (cond == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_cond_type_t::state)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= cond;
          }
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 3013 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 3018 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spcondtype)= NULL; }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 3020 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 3025 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            thd->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3033 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3042 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3061 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 3063 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 3081 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 3087 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 3089 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 3091 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3093 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 3095 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3097 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3099 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3101 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 256:

/* Line 1455 of yacc.c  */
#line 3103 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3105 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 3107 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 3109 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3114 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_stmt= new (thd->mem_root) Resignal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3128 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(1) - (1)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= 1;
          }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3143 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(3) - (3)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3160 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3161 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 3182 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 3184 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 3188 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 3196 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 3243 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3245 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 3271 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label((char *)"", lex->sphead->instructions());
          }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3277 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3286 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == SP_LAB_BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3339 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab || lab->type != SP_LAB_ITER)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3382 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3402 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(3) - (4)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3419 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3424 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3450 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3470 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(3) - (3)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3492 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3494 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 3510 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
          }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3522 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 306:

/* Line 1455 of yacc.c  */
#line 3542 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 307:

/* Line 1455 of yacc.c  */
#line 3548 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 308:

/* Line 1455 of yacc.c  */
#line 3561 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 309:

/* Line 1455 of yacc.c  */
#line 3569 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 310:

/* Line 1455 of yacc.c  */
#line 3577 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 315:

/* Line 1455 of yacc.c  */
#line 3595 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 316:

/* Line 1455 of yacc.c  */
#line 3599 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 317:

/* Line 1455 of yacc.c  */
#line 3611 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 318:

/* Line 1455 of yacc.c  */
#line 3620 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 319:

/* Line 1455 of yacc.c  */
#line 3624 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 320:

/* Line 1455 of yacc.c  */
#line 3634 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 3643 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 3658 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                           lex->sphead->instructions());
              lab->type= SP_LAB_ITER;
            }
          }
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 3676 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 3693 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 3694 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 3699 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                         lex->sphead->instructions());
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 3715 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 329:

/* Line 1455 of yacc.c  */
#line 3731 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->push_label((char *)"", ip);
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 330:

/* Line 1455 of yacc.c  */
#line 3738 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 331:

/* Line 1455 of yacc.c  */
#line 3746 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(LABEL_DEFAULT_SCOPE);
          }
    break;

  case 332:

/* Line 1455 of yacc.c  */
#line 3755 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 3783 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 3793 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 335:

/* Line 1455 of yacc.c  */
#line 3795 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 336:

/* Line 1455 of yacc.c  */
#line 3811 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 337:

/* Line 1455 of yacc.c  */
#line 3822 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 338:

/* Line 1455 of yacc.c  */
#line 3824 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 339:

/* Line 1455 of yacc.c  */
#line 3843 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 340:

/* Line 1455 of yacc.c  */
#line 3845 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 341:

/* Line 1455 of yacc.c  */
#line 3850 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 342:

/* Line 1455 of yacc.c  */
#line 3852 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 343:

/* Line 1455 of yacc.c  */
#line 3854 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 347:

/* Line 1455 of yacc.c  */
#line 3888 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 348:

/* Line 1455 of yacc.c  */
#line 3890 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 349:

/* Line 1455 of yacc.c  */
#line 3900 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 350:

/* Line 1455 of yacc.c  */
#line 3906 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 355:

/* Line 1455 of yacc.c  */
#line 3929 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 402:

/* Line 1455 of yacc.c  */
#line 4023 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 403:

/* Line 1455 of yacc.c  */
#line 4031 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 404:

/* Line 1455 of yacc.c  */
#line 4039 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 405:

/* Line 1455 of yacc.c  */
#line 4047 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 406:

/* Line 1455 of yacc.c  */
#line 4059 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 407:

/* Line 1455 of yacc.c  */
#line 4071 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 408:

/* Line 1455 of yacc.c  */
#line 4076 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 409:

/* Line 1455 of yacc.c  */
#line 4081 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 410:

/* Line 1455 of yacc.c  */
#line 4089 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 411:

/* Line 1455 of yacc.c  */
#line 4097 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 412:

/* Line 1455 of yacc.c  */
#line 4105 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 413:

/* Line 1455 of yacc.c  */
#line 4113 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 414:

/* Line 1455 of yacc.c  */
#line 4121 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 415:

/* Line 1455 of yacc.c  */
#line 4129 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 416:

/* Line 1455 of yacc.c  */
#line 4137 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 417:

/* Line 1455 of yacc.c  */
#line 4150 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 418:

/* Line 1455 of yacc.c  */
#line 4163 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 421:

/* Line 1455 of yacc.c  */
#line 4182 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 422:

/* Line 1455 of yacc.c  */
#line 4187 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 423:

/* Line 1455 of yacc.c  */
#line 4199 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulonglong_number);}
    break;

  case 424:

/* Line 1455 of yacc.c  */
#line 4201 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 425:

/* Line 1455 of yacc.c  */
#line 4251 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 426:

/* Line 1455 of yacc.c  */
#line 4254 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 427:

/* Line 1455 of yacc.c  */
#line 4256 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 428:

/* Line 1455 of yacc.c  */
#line 4270 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 429:

/* Line 1455 of yacc.c  */
#line 4287 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.option_list= NULL;
          }
    break;

  case 430:

/* Line 1455 of yacc.c  */
#line 4292 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 431:

/* Line 1455 of yacc.c  */
#line 4295 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 432:

/* Line 1455 of yacc.c  */
#line 4296 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 433:

/* Line 1455 of yacc.c  */
#line 4300 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 434:

/* Line 1455 of yacc.c  */
#line 4302 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 435:

/* Line 1455 of yacc.c  */
#line 4303 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 436:

/* Line 1455 of yacc.c  */
#line 4305 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 437:

/* Line 1455 of yacc.c  */
#line 4306 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 438:

/* Line 1455 of yacc.c  */
#line 4311 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 439:

/* Line 1455 of yacc.c  */
#line 4347 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 441:

/* Line 1455 of yacc.c  */
#line 4353 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= ALTER_PARTITION;
            }
          }
    break;

  case 443:

/* Line 1455 of yacc.c  */
#line 4371 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 444:

/* Line 1455 of yacc.c  */
#line 4390 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 4402 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 447:

/* Line 1455 of yacc.c  */
#line 4411 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 448:

/* Line 1455 of yacc.c  */
#line 4418 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 4419 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 4421 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 4423 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 4425 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 4427 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 4431 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 4433 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 4438 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 4440 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            switch ((yyvsp[(3) - (3)].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 4456 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 4457 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 4461 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 4462 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 4467 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 4486 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 4496 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 4507 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 4515 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 4517 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 4532 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 4534 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 4535 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 4538 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 4543 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 4547 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 4548 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 4553 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 4571 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 4586 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 4588 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 4603 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 4619 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 4640 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 4641 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 4646 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 4665 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 485:

/* Line 1455 of yacc.c  */
#line 4670 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            if (check_ident_length(&(yyvsp[(1) - (1)].lex_str)))
              MYSQL_YYABORT;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 4681 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 4703 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 4718 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 4720 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 4735 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 4740 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 4761 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 4766 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 4795 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 4806 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 4807 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 497:

/* Line 1455 of yacc.c  */
#line 4812 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 4823 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 4825 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 4848 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 4849 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 4854 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 4867 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(thd, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 4887 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 4901 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 4926 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 4927 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 4932 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 4964 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 4969 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_ident_length(&(yyvsp[(1) - (1)].lex_str)))
              MYSQL_YYABORT;
            Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 4977 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 4978 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 4982 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 4983 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 4988 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 4990 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 4996 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
          }
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 5002 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 5004 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 5006 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 5008 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 5010 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 5012 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 5021 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 5036 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 5040 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 5050 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 5051 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 5055 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 5056 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 5060 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 5061 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 5065 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 5066 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 5070 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 5071 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 5075 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 5076 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 5080 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 5084 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 5085 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 5106 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 5111 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 5116 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 5121 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 5126 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 5131 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 5136 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 5141 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 5156 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 5162 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 5167 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 5172 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 5177 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 5182 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 5187 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 5191 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5215 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 5220 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 5225 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 5230 "/home/buildbot/git/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5232 "/home/buildbot/git/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5234 "/home/buildbot/git/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 5236 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 5242 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5247 "/home/buildbot/git/sql/sql_yacc.yy"
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5252 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5258 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 5264 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 5270 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 5279 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 5297 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 5314 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (thd->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(thd, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 583:

/* Line 1455 of yacc.c  */
#line 5337 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 584:

/* Line 1455 of yacc.c  */
#line 5350 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 585:

/* Line 1455 of yacc.c  */
#line 5351 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 5352 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 5353 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 5354 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 5355 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 5356 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_PAGE; }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 5360 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 5361 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 5362 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 5366 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 5371 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 5372 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 5373 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 5374 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 5380 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 5398 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 5405 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 608:

/* Line 1455 of yacc.c  */
#line 5407 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(2) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 5413 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 5415 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 5421 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 5423 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 5429 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 5431 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (9)].key_type), (yyvsp[(3) - (9)].lex_str).str ? (yyvsp[(3) - (9)].lex_str) : (yyvsp[(1) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 5436 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table),
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->option_list= NULL;
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= ALTER_FOREIGN_KEY;
          }
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 5455 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 5470 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 5471 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 5475 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 5480 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 5491 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_type).type,
                                  (yyvsp[(3) - (3)].lex_type).length, (yyvsp[(3) - (3)].lex_type).dec, lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change, &lex->interval_list, (yyvsp[(3) - (3)].lex_type).charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 5506 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_type).set((yyvsp[(1) - (2)].num), Lex->length, Lex->dec, Lex->charset); }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 5508 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_type).set((yyvsp[(1) - (3)].num), Lex->length, Lex->dec, Lex->charset); }
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 5510 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_type)= (yyvsp[(4) - (9)].lex_type);
            Lex->vcol_info->set_field_type((yyval.lex_type).type);
            (yyval.lex_type).type= (enum enum_field_types)MYSQL_TYPE_VIRTUAL;
          }
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 5519 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 5524 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 5528 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 5532 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(TRUE);
          }
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 5538 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 5539 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 5543 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 5549 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 5555 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 5560 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 5565 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            if (!Lex->parse_vcol_expr)
            {
              my_message(ER_SYNTAX_ERROR, ER(ER_SYNTAX_ERROR), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 641:

/* Line 1455 of yacc.c  */
#line 5581 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->vcol_info= new Virtual_column_info();
            if (!Lex->vcol_info)
            {
              mem_alloc_error(sizeof(Virtual_column_info));
              MYSQL_YYABORT;
            }
            uint expr_len= (uint)((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)) - 1;
            Lex->vcol_info->expr_str.str= (char* ) sql_memdup((yyvsp[(1) - (3)].simple_string) + 1, expr_len);
            Lex->vcol_info->expr_str.length= expr_len;
            Lex->vcol_info->expr_item= (yyvsp[(2) - (3)].item);
          }
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 5596 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 5597 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 5598 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 5600 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 5605 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 5609 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 5614 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 5619 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 650:

/* Line 1455 of yacc.c  */
#line 5623 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 651:

/* Line 1455 of yacc.c  */
#line 5628 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 652:

/* Line 1455 of yacc.c  */
#line 5633 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 5639 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 5644 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 5650 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 5654 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 5659 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 5664 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(thd, MYSQL_ERROR::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER(ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 5682 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 5684 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 5686 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 5699 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 5701 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 5706 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 5711 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 5723 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 5728 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 5733 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 5738 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 5740 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 5742 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 5744 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 5746 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 5748 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 5750 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 5752 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 5754 "/home/buildbot/git/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 5756 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 5758 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 5760 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 5762 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 5764 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 5772 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 5773 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 5775 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->length= const_cast<char*>(STRINGIFY_ARG
                                           (MAX_LEN_GEOM_POINT_FIELD));
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 5780 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 5781 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 5782 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 5783 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 5784 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 5788 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 5792 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 5793 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 5797 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 5798 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 5802 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 5803 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 5804 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 5805 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 5806 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 5810 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 5811 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 5812 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 5813 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 5814 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 5819 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= thd->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 5824 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 5826 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 5831 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 5833 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 5835 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 5840 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 5848 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 5849 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 5853 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 5854 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 5858 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 5859 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 5860 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 5864 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 5865 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 5866 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 5867 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 5870 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 5871 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 5875 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 5876 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 5880 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 5881 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 5885 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 5890 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 5891 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 5892 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 5894 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_now_local(6);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 5900 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 5902 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 5908 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 5914 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 5920 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX; 
          }
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 5925 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 5927 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 5940 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 5946 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 5952 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 5958 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 5967 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 5988 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local(6);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 5994 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 5998 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 5999 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 6003 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 6004 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6009 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 6016 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6020 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 6021 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 6025 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6026 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6031 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 6039 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 6043 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6044 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 6049 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6059 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6060 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 6064 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6065 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6069 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 6070 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 6075 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 6077 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 6081 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 6088 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6097 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 6105 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 6115 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 6118 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 6119 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 6121 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 6126 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 6133 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 6134 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 6149 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6156 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 6162 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 6169 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 6181 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 6183 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 6185 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 6187 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 6192 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 6198 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 6204 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 6211 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 6218 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 6226 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 6227 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 6228 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6229 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 6230 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 6234 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 6238 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 6239 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 6243 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 6244 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 6248 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 6253 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 6254 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 6255 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 6259 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 6260 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 6264 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 6269 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 6281 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 824:

/* Line 1455 of yacc.c  */
#line 6298 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 6303 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 828:

/* Line 1455 of yacc.c  */
#line 6308 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 6328 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 6329 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 6334 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 6335 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 6337 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 6343 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 6349 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 6355 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 6373 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 6385 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 6386 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 6387 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 6391 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 6392 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 854:

/* Line 1455 of yacc.c  */
#line 6397 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 6403 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 6416 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 6417 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 6421 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 6422 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 6426 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 6427 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 6435 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_stmt);
          }
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 6460 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (!lex->m_stmt)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_stmt= new (thd->mem_root) Alter_table_statement(lex);
              if (lex->m_stmt == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 6471 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 6476 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 6485 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 6496 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 6507 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 6514 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 6525 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 6532 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 872:

/* Line 1455 of yacc.c  */
#line 6543 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 873:

/* Line 1455 of yacc.c  */
#line 6550 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_INHERIT;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 6562 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 6564 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 6584 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 6597 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 6602 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 6607 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 880:

/* Line 1455 of yacc.c  */
#line 6612 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 881:

/* Line 1455 of yacc.c  */
#line 6617 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 882:

/* Line 1455 of yacc.c  */
#line 6626 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 6627 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 6628 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 6629 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 6633 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 6635 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 6646 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 6647 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 890:

/* Line 1455 of yacc.c  */
#line 6651 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 891:

/* Line 1455 of yacc.c  */
#line 6652 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 893:

/* Line 1455 of yacc.c  */
#line 6657 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= DISCARD_TABLESPACE; }
    break;

  case 894:

/* Line 1455 of yacc.c  */
#line 6658 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= IMPORT_TABLESPACE; }
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 6675 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_PARTITION;
          }
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 6680 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 6687 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_optimize_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 6700 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_analyze_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 6711 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_check_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 6723 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_repair_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 6735 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 6742 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_truncate_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 6756 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 6763 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ALL_PARTITION;
          }
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 6771 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 916:

/* Line 1455 of yacc.c  */
#line 6783 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 6789 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 6794 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 6801 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 6816 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_TABLE_REORG;
          }
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 6820 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 6824 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 6831 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 6832 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 6837 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 6857 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= ALTER_ADD_COLUMN;
          }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 6866 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 6870 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 6875 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
          }
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 6879 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
            lex->option_list= NULL;
          }
    break;

  case 935:

/* Line 1455 of yacc.c  */
#line 6886 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 936:

/* Line 1455 of yacc.c  */
#line 6890 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 6901 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (5)].lex_str),
                                  (yyvsp[(5) - (5)].lex_type).type,
                                  (yyvsp[(5) - (5)].lex_type).length, (yyvsp[(5) - (5)].lex_type).dec, lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (5)].lex_str).str, &lex->interval_list, (yyvsp[(5) - (5)].lex_type).charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 6914 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 939:

/* Line 1455 of yacc.c  */
#line 6918 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_COLUMN;
          }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 6927 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_INDEX | ALTER_FOREIGN_KEY;
          }
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 6931 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 6940 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 943:

/* Line 1455 of yacc.c  */
#line 6949 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= DISABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 6955 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= ENABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 945:

/* Line 1455 of yacc.c  */
#line 6961 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 946:

/* Line 1455 of yacc.c  */
#line 6970 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 6979 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= ALTER_RENAME;
          }
    break;

  case 948:

/* Line 1455 of yacc.c  */
#line 6998 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= ALTER_CONVERT;
          }
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 7018 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 950:

/* Line 1455 of yacc.c  */
#line 7028 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_RECREATE;
          }
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 7032 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_ORDER;
          }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 7039 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 953:

/* Line 1455 of yacc.c  */
#line 7040 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 7044 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 955:

/* Line 1455 of yacc.c  */
#line 7045 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 956:

/* Line 1455 of yacc.c  */
#line 7049 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= Lex->online= 0;}
    break;

  case 962:

/* Line 1455 of yacc.c  */
#line 7063 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 963:

/* Line 1455 of yacc.c  */
#line 7064 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->online= 1;}
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 7068 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 965:

/* Line 1455 of yacc.c  */
#line 7069 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 7070 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 967:

/* Line 1455 of yacc.c  */
#line 7074 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 968:

/* Line 1455 of yacc.c  */
#line 7075 "/home/buildbot/git/sql/sql_yacc.yy"
    { store_position_for_column((yyvsp[(2) - (2)].lex_str).str); }
    break;

  case 969:

/* Line 1455 of yacc.c  */
#line 7076 "/home/buildbot/git/sql/sql_yacc.yy"
    { store_position_for_column(first_keyword); }
    break;

  case 970:

/* Line 1455 of yacc.c  */
#line 7080 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 7081 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 7082 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 7083 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 7092 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 7099 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 7101 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 7108 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
          }
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 7114 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 979:

/* Line 1455 of yacc.c  */
#line 7116 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
          }
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 7125 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 981:

/* Line 1455 of yacc.c  */
#line 7133 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 7135 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 7141 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 7143 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 7152 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 7153 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 7154 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 7158 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 991:

/* Line 1455 of yacc.c  */
#line 7160 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 994:

/* Line 1455 of yacc.c  */
#line 7181 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 995:

/* Line 1455 of yacc.c  */
#line 7188 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 996:

/* Line 1455 of yacc.c  */
#line 7192 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 7193 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 7194 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1000:

/* Line 1455 of yacc.c  */
#line 7199 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->only_view= TRUE; }
    break;

  case 1002:

/* Line 1455 of yacc.c  */
#line 7204 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1003:

/* Line 1455 of yacc.c  */
#line 7214 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Repair_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 7224 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 7225 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 7229 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 7230 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 7234 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 7235 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 7236 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 7240 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 7241 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FROM_MYSQL; }
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 7246 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 7256 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Analyze_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 7267 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 7275 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->only_view= TRUE; }
    break;

  case 1019:

/* Line 1455 of yacc.c  */
#line 7279 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 7289 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Check_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 7304 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 7305 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1023:

/* Line 1455 of yacc.c  */
#line 7309 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 7310 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 7314 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1026:

/* Line 1455 of yacc.c  */
#line 7315 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1027:

/* Line 1455 of yacc.c  */
#line 7316 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1028:

/* Line 1455 of yacc.c  */
#line 7317 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1029:

/* Line 1455 of yacc.c  */
#line 7318 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 7319 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 7323 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 7324 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 7329 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 7339 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Optimize_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 7349 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1036:

/* Line 1455 of yacc.c  */
#line 7350 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 7351 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1038:

/* Line 1455 of yacc.c  */
#line 7356 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1039:

/* Line 1455 of yacc.c  */
#line 7360 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 7362 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1041:

/* Line 1455 of yacc.c  */
#line 7369 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1042:

/* Line 1455 of yacc.c  */
#line 7374 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1045:

/* Line 1455 of yacc.c  */
#line 7387 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1046:

/* Line 1455 of yacc.c  */
#line 7400 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 7404 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 7423 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 7433 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 7442 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 7443 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1056:

/* Line 1455 of yacc.c  */
#line 7448 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1057:

/* Line 1455 of yacc.c  */
#line 7454 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1062:

/* Line 1455 of yacc.c  */
#line 7469 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1063:

/* Line 1455 of yacc.c  */
#line 7479 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 7489 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
          }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 7496 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(thd);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1068:

/* Line 1455 of yacc.c  */
#line 7505 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 7511 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1071:

/* Line 1455 of yacc.c  */
#line 7512 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1072:

/* Line 1455 of yacc.c  */
#line 7522 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 7536 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1077:

/* Line 1455 of yacc.c  */
#line 7546 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1079:

/* Line 1455 of yacc.c  */
#line 7555 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1081:

/* Line 1455 of yacc.c  */
#line 7574 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 7582 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 7589 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1089:

/* Line 1455 of yacc.c  */
#line 7599 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 7614 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1096:

/* Line 1455 of yacc.c  */
#line 7631 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1097:

/* Line 1455 of yacc.c  */
#line 7659 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 7691 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 7697 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1103:

/* Line 1455 of yacc.c  */
#line 7709 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1104:

/* Line 1455 of yacc.c  */
#line 7723 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1105:

/* Line 1455 of yacc.c  */
#line 7728 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1106:

/* Line 1455 of yacc.c  */
#line 7752 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1107:

/* Line 1455 of yacc.c  */
#line 7758 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1108:

/* Line 1455 of yacc.c  */
#line 7764 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1109:

/* Line 1455 of yacc.c  */
#line 7765 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1110:

/* Line 1455 of yacc.c  */
#line 7766 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1111:

/* Line 1455 of yacc.c  */
#line 7767 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1112:

/* Line 1455 of yacc.c  */
#line 7768 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1113:

/* Line 1455 of yacc.c  */
#line 7772 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1114:

/* Line 1455 of yacc.c  */
#line 7773 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1115:

/* Line 1455 of yacc.c  */
#line 7774 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1116:

/* Line 1455 of yacc.c  */
#line 7778 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 7779 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1118:

/* Line 1455 of yacc.c  */
#line 7785 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (thd->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1119:

/* Line 1455 of yacc.c  */
#line 7836 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (thd->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1120:

/* Line 1455 of yacc.c  */
#line 7843 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (thd->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1121:

/* Line 1455 of yacc.c  */
#line 7886 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1122:

/* Line 1455 of yacc.c  */
#line 7892 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1123:

/* Line 1455 of yacc.c  */
#line 7898 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1124:

/* Line 1455 of yacc.c  */
#line 7904 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 7910 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1126:

/* Line 1455 of yacc.c  */
#line 7916 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1127:

/* Line 1455 of yacc.c  */
#line 7922 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1129:

/* Line 1455 of yacc.c  */
#line 7932 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 7938 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 7944 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 7950 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1133:

/* Line 1455 of yacc.c  */
#line 7956 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1135:

/* Line 1455 of yacc.c  */
#line 7966 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1136:

/* Line 1455 of yacc.c  */
#line 7972 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1137:

/* Line 1455 of yacc.c  */
#line 7981 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 7987 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (thd->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 7995 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1140:

/* Line 1455 of yacc.c  */
#line 8001 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (thd->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1141:

/* Line 1455 of yacc.c  */
#line 8011 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1142:

/* Line 1455 of yacc.c  */
#line 8017 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (thd->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1143:

/* Line 1455 of yacc.c  */
#line 8026 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item1= new (thd->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (thd->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 8036 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1145:

/* Line 1455 of yacc.c  */
#line 8042 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1146:

/* Line 1455 of yacc.c  */
#line 8052 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 8058 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1149:

/* Line 1455 of yacc.c  */
#line 8071 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1150:

/* Line 1455 of yacc.c  */
#line 8077 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 8083 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1152:

/* Line 1455 of yacc.c  */
#line 8089 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1153:

/* Line 1455 of yacc.c  */
#line 8095 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1154:

/* Line 1455 of yacc.c  */
#line 8101 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1155:

/* Line 1455 of yacc.c  */
#line 8107 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1156:

/* Line 1455 of yacc.c  */
#line 8113 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 8119 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1158:

/* Line 1455 of yacc.c  */
#line 8125 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1159:

/* Line 1455 of yacc.c  */
#line 8131 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 8137 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 8143 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 8149 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 8178 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 8179 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 8180 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1175:

/* Line 1455 of yacc.c  */
#line 8181 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 8182 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 8183 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1178:

/* Line 1455 of yacc.c  */
#line 8187 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 8188 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 8193 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
	    (yyval.num)= DYN_COL_NULL; /* automatic type */
            lex->charset= NULL;
            lex->length= lex->dec= 0;
	  }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 8199 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (2)].num); }
    break;

  case 1182:

/* Line 1455 of yacc.c  */
#line 8204 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_INT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 8211 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_UINT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 8218 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1185:

/* Line 1455 of yacc.c  */
#line 8225 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1186:

/* Line 1455 of yacc.c  */
#line 8232 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 8239 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= DYN_COL_DECIMAL;
            Lex->charset= NULL;
          }
    break;

  case 1188:

/* Line 1455 of yacc.c  */
#line 8244 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->length= lex->dec= 0;
          }
    break;

  case 1189:

/* Line 1455 of yacc.c  */
#line 8250 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->charset= national_charset_info;
            lex->length= lex->dec= 0;
          }
    break;

  case 1190:

/* Line 1455 of yacc.c  */
#line 8257 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1191:

/* Line 1455 of yacc.c  */
#line 8264 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_TIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1192:

/* Line 1455 of yacc.c  */
#line 8272 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATETIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1193:

/* Line 1455 of yacc.c  */
#line 8283 "/home/buildbot/git/sql/sql_yacc.yy"
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(thd->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->num= (yyvsp[(1) - (4)].item);
     (yyval.dyncol_def)->value= (yyvsp[(3) - (4)].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[(4) - (4)].num);
     (yyval.dyncol_def)->cs= lex->charset;
     if (lex->length)
       (yyval.dyncol_def)->len= strtoul(lex->length, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if (lex->dec)
       (yyval.dyncol_def)->frac= strtoul(lex->dec, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
    break;

  case 1194:

/* Line 1455 of yacc.c  */
#line 8305 "/home/buildbot/git/sql/sql_yacc.yy"
    {
         (yyval.dyncol_def_list)= new (thd->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[(1) - (1)].dyncol_def));
       }
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 8312 "/home/buildbot/git/sql/sql_yacc.yy"
    {
         (yyvsp[(1) - (3)].dyncol_def_list)->push_back((yyvsp[(3) - (3)].dyncol_def));
         (yyval.dyncol_def_list)= (yyvsp[(1) - (3)].dyncol_def_list);
       }
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 8325 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 8340 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1207:

/* Line 1455 of yacc.c  */
#line 8346 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1208:

/* Line 1455 of yacc.c  */
#line 8350 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 8356 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 8362 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 8368 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (thd->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 8374 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 8376 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (thd->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 8383 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (thd->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 8390 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 8396 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(3) - (4)].item); }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 8398 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (thd->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 8407 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 8414 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1220:

/* Line 1455 of yacc.c  */
#line 8422 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1221:

/* Line 1455 of yacc.c  */
#line 8428 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1222:

/* Line 1455 of yacc.c  */
#line 8435 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1223:

/* Line 1455 of yacc.c  */
#line 8441 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1224:

/* Line 1455 of yacc.c  */
#line 8455 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1225:

/* Line 1455 of yacc.c  */
#line 8463 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1226:

/* Line 1455 of yacc.c  */
#line 8478 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1227:

/* Line 1455 of yacc.c  */
#line 8484 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1228:

/* Line 1455 of yacc.c  */
#line 8490 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 8498 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 8504 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 8510 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 8516 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 8522 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 8536 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 8547 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1236:

/* Line 1455 of yacc.c  */
#line 8553 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 8559 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 8565 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 8571 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:

/* Line 1455 of yacc.c  */
#line 8577 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:

/* Line 1455 of yacc.c  */
#line 8583 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 8589 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:

/* Line 1455 of yacc.c  */
#line 8595 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:

/* Line 1455 of yacc.c  */
#line 8601 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 8607 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 8613 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 8619 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 8625 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 8631 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 8637 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 8643 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 8651 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 8672 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 8679 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 8685 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 8692 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 8700 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 8707 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 8713 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 8719 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 8725 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 8732 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 8738 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 8745 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 8751 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 8757 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 8763 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 8769 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 8775 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (thd->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].num));
            else
              (yyval.item)= new (thd->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 8793 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 8799 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 8805 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1273:

/* Line 1455 of yacc.c  */
#line 8812 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 8819 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 8827 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_add(thd, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 8834 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_delete(thd, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 8841 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dyncol_exists((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 8848 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dyncol_list((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1279:

/* Line 1455 of yacc.c  */
#line 8855 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_create(thd, *(yyvsp[(3) - (4)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 8862 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].cast_type),
                                        lex->length, lex->dec,
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 8879 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 8885 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 8891 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 8897 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1285:

/* Line 1455 of yacc.c  */
#line 8903 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 8910 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 8916 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_last_value(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 8922 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 8928 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 8934 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 8940 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 8951 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 8957 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 8963 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 8969 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 8975 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 8986 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 8992 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 9008 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1300:

/* Line 1455 of yacc.c  */
#line 9014 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 9021 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 9028 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 9035 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 9042 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 9049 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 9053 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 9072 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 9091 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 9144 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 9185 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 9187 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 9191 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 9192 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 9196 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 9197 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 9201 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 9202 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 9207 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 9214 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 9222 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM &&
                     (yyvsp[(2) - (4)].item)->type() != Item::REF_ITEM /* For HAVING */ )
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 9249 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 9255 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 9261 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 9267 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 9273 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 9279 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 9288 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 9294 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 9296 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 9298 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 9304 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 9315 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 9321 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 9327 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 9333 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 9339 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 9345 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 9351 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 9357 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 9363 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 9369 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 9373 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (thd->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 9388 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 9396 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 9403 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (thd->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 9413 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 9421 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(thd, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 9436 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 9437 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 9442 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.string)= new (thd->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 9447 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 9453 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 9470 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_gorder_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 9472 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_gorder_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1357:

/* Line 1455 of yacc.c  */
#line 9477 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 9486 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 9494 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 9496 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 9498 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 9500 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 9502 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 9504 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 9506 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 9508 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 9510 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 9512 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_TIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 9518 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_DATETIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 9524 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 9526 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->charset= NULL; Lex->length= Lex->dec= 0;}
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 9528 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DOUBLE; }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 9531 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 9532 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 9537 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 9544 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 9551 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 9552 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 9557 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 9564 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 9571 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 9572 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 9576 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 9577 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 9582 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 9590 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 9600 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 9602 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 9613 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 9624 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 9625 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 9631 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 9633 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 9653 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 9655 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 9658 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 9666 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 9673 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 9681 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 9689 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 9693 "/home/buildbot/git/sql/sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1402:

/* Line 1455 of yacc.c  */
#line 9695 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 9703 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 9711 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 9719 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 9723 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1407:

/* Line 1455 of yacc.c  */
#line 9729 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 9739 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 9747 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 9756 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 9760 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 9767 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 9777 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 9778 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 9779 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 9791 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 9796 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(thd, (yyvsp[(2) - (4)].table), (yyvsp[(3) - (4)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints())))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 9806 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 9846 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               new Table_ident(unit), (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            /*else if (($3->select_lex &&
                      $3->select_lex->master_unit()->is_union() &&
                      ($3->select_lex->master_unit()->first_select() ==
                       $3->select_lex || !$3->lifted)) || $5)*/
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
            /*
              Fields in derived table can be used in upper select in
              case of merge. We do not add HAVING fields because we do
              not merge such derived. We do not add union because
              also do not merge them
            */
            if ((yyval.table_list) && (yyval.table_list)->derived &&
                !(yyval.table_list)->derived->first_select()->next_select())
              (yyval.table_list)->select_lex->add_where_field((yyval.table_list)->derived->first_select());
          }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 9931 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list) && (yyvsp[(2) - (2)].is_not_empty))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 9941 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 9946 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 9954 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (7)].table_list) != NULL)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 9966 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 9985 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 9993 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 10002 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 10008 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 10024 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 10041 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 10048 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 10053 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 10078 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 10079 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 10084 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= thd->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 10087 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1439:

/* Line 1455 of yacc.c  */
#line 10088 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1440:

/* Line 1455 of yacc.c  */
#line 10089 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1441:

/* Line 1455 of yacc.c  */
#line 10093 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1442:

/* Line 1455 of yacc.c  */
#line 10094 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1443:

/* Line 1455 of yacc.c  */
#line 10099 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 10104 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 10117 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->alloc_index_hints(thd); }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 10121 "/home/buildbot/git/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 10126 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, NULL, 0); }
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 10127 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 10132 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 10134 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, (char *)"PRIMARY", 7); }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 10144 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (thd->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 10155 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            String *s= new (thd->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 10167 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 10168 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 10169 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 10170 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 10171 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 10172 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 10173 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1469:

/* Line 1455 of yacc.c  */
#line 10174 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1470:

/* Line 1455 of yacc.c  */
#line 10175 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 10176 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 10177 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 10178 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 10182 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 10183 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 10184 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1477:

/* Line 1455 of yacc.c  */
#line 10185 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 10186 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1479:

/* Line 1455 of yacc.c  */
#line 10187 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 10188 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 10189 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 10190 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 10194 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 10195 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1485:

/* Line 1455 of yacc.c  */
#line 10196 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 10197 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 10207 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 10209 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 10222 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 10224 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 10228 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond((yyvsp[(3) - (3)].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 10240 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 10244 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond((yyvsp[(3) - (3)].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 10255 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 10260 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 10281 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_group_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 10283 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_group_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 10287 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 10289 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 10309 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 10343 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 10361 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 10396 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_order_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 10398 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_order_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 10402 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 10403 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 10404 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 10409 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
	    lex->limit_rows_examined= 0;
          }
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 10416 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 10420 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 10421 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 10426 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1527:

/* Line 1455 of yacc.c  */
#line 10430 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1528:

/* Line 1455 of yacc.c  */
#line 10434 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1529:

/* Line 1455 of yacc.c  */
#line 10441 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1530:

/* Line 1455 of yacc.c  */
#line 10448 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1531:

/* Line 1455 of yacc.c  */
#line 10455 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1532:

/* Line 1455 of yacc.c  */
#line 10465 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Item_splocal *splocal;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable_t *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
          {
            splocal= new (thd->mem_root)
              Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
          {
            my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
            MYSQL_YYABORT;
          }
          if (splocal->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
    break;

  case 1533:

/* Line 1455 of yacc.c  */
#line 10498 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 10502 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 10508 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1536:

/* Line 1455 of yacc.c  */
#line 10514 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1537:

/* Line 1455 of yacc.c  */
#line 10523 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[(1) - (1)].item);
          }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 10530 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1539:

/* Line 1455 of yacc.c  */
#line 10535 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 10541 "/home/buildbot/git/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 10542 "/home/buildbot/git/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 10546 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 10547 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 10548 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 10552 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 10553 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 10554 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 10555 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 10556 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 10557 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 10561 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 10562 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 10563 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 10564 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 10565 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 10569 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 10570 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 10571 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 10572 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 10573 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 10577 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 10578 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 10579 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= strtoull((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 10580 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 10581 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 10586 "/home/buildbot/git/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 10595 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.choice)= (yyvsp[(1) - (1)].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
    break;

  case 1570:

/* Line 1455 of yacc.c  */
#line 10596 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.choice)= HA_CHOICE_UNDEF; }
    break;

  case 1572:

/* Line 1455 of yacc.c  */
#line 10602 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (thd->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);

            /*
              PROCEDURE CLAUSE cannot handle subquery as one of its parameter,
              so set expr_allows_subselect as false to disallow any subqueries
              further. Reset expr_allows_subselect back to true once the
              parameters are reduced.
            */
            Lex->expr_allows_subselect= false;
          }
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 10637 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Subqueries are allowed from now.*/
            Lex->expr_allows_subselect= true;
          }
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 10644 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 10645 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 10655 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 10664 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 10670 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 10675 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 10680 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 10699 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable_t *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 10731 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 10743 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 10751 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 10754 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 10766 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1592:

/* Line 1455 of yacc.c  */
#line 10777 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1593:

/* Line 1455 of yacc.c  */
#line 10783 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1594:

/* Line 1455 of yacc.c  */
#line 10794 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->drop_if_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1595:

/* Line 1455 of yacc.c  */
#line 10803 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1596:

/* Line 1455 of yacc.c  */
#line 10804 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1597:

/* Line 1455 of yacc.c  */
#line 10805 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 10821 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1599:

/* Line 1455 of yacc.c  */
#line 10828 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 10850 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1601:

/* Line 1455 of yacc.c  */
#line 10870 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1602:

/* Line 1455 of yacc.c  */
#line 10882 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1603:

/* Line 1455 of yacc.c  */
#line 10886 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1604:

/* Line 1455 of yacc.c  */
#line 10894 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 10896 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 10902 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 10909 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1608:

/* Line 1455 of yacc.c  */
#line 10914 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1609:

/* Line 1455 of yacc.c  */
#line 10919 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 10934 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1615:

/* Line 1455 of yacc.c  */
#line 10950 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 10960 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 10961 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 10965 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1619:

/* Line 1455 of yacc.c  */
#line 10966 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 10974 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 10982 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1622:

/* Line 1455 of yacc.c  */
#line 10987 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1623:

/* Line 1455 of yacc.c  */
#line 10992 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 10999 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 11004 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 11009 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 11017 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 11019 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 11026 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 11030 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 11032 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1632:

/* Line 1455 of yacc.c  */
#line 11042 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1633:

/* Line 1455 of yacc.c  */
#line 11043 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 11048 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 11056 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 11057 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1637:

/* Line 1455 of yacc.c  */
#line 11058 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1638:

/* Line 1455 of yacc.c  */
#line 11060 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 11070 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 11071 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 11075 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 11076 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 11078 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 11079 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 11081 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 11082 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 11097 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 11106 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1654:

/* Line 1455 of yacc.c  */
#line 11107 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 11111 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 11112 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1657:

/* Line 1455 of yacc.c  */
#line 11117 "/home/buildbot/git/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 11122 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 11130 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 11136 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 11141 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 11148 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 11150 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 11159 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 11167 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1669:

/* Line 1455 of yacc.c  */
#line 11175 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1670:

/* Line 1455 of yacc.c  */
#line 11193 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 11203 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_item_to_list(thd, (yyvsp[(1) - (3)].item)) || add_value_to_list(thd, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 11216 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1677:

/* Line 1455 of yacc.c  */
#line 11225 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1678:

/* Line 1455 of yacc.c  */
#line 11226 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1679:

/* Line 1455 of yacc.c  */
#line 11233 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 11248 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1682:

/* Line 1455 of yacc.c  */
#line 11257 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1683:

/* Line 1455 of yacc.c  */
#line 11259 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1684:

/* Line 1455 of yacc.c  */
#line 11265 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1685:

/* Line 1455 of yacc.c  */
#line 11270 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1686:

/* Line 1455 of yacc.c  */
#line 11276 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 11289 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1690:

/* Line 1455 of yacc.c  */
#line 11302 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(thd, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1691:

/* Line 1455 of yacc.c  */
#line 11317 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1692:

/* Line 1455 of yacc.c  */
#line 11318 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1693:

/* Line 1455 of yacc.c  */
#line 11322 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 11323 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1695:

/* Line 1455 of yacc.c  */
#line 11327 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1696:

/* Line 1455 of yacc.c  */
#line 11328 "/home/buildbot/git/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 11329 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1698:

/* Line 1455 of yacc.c  */
#line 11334 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1699:

/* Line 1455 of yacc.c  */
#line 11345 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Truncate_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1706:

/* Line 1455 of yacc.c  */
#line 11369 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 11373 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 11377 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 11381 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 11385 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 11389 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 11393 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 11397 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 11401 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 11408 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 11412 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 11421 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1718:

/* Line 1455 of yacc.c  */
#line 11429 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1719:

/* Line 1455 of yacc.c  */
#line 11436 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(thd, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1720:

/* Line 1455 of yacc.c  */
#line 11443 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1721:

/* Line 1455 of yacc.c  */
#line 11451 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1722:

/* Line 1455 of yacc.c  */
#line 11459 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1723:

/* Line 1455 of yacc.c  */
#line 11467 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 11475 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(thd, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 11483 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 11490 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 11492 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 11494 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 11503 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 11507 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 11511 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1733:

/* Line 1455 of yacc.c  */
#line 11516 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 11521 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 11530 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(thd, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 11537 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
            push_warning_printf(thd, MYSQL_ERROR::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                "SHOW AUTHORS");
          }
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 11546 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
            push_warning_printf(thd, MYSQL_ERROR::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                "SHOW CONTRIBUTORS");
          }
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 11555 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 11560 "/home/buildbot/git/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 11562 "/home/buildbot/git/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 11564 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 11566 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 11568 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 11570 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(thd, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 11577 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 11585 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 11587 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 11595 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(thd, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 11602 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(thd, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 11609 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1752:

/* Line 1455 of yacc.c  */
#line 11619 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 11626 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 11632 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 11640 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 11648 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1757:

/* Line 1455 of yacc.c  */
#line 11652 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 11656 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SHOW_CLIENT_STATS;
           if (prepare_schema_table(thd, lex, 0, SCH_CLIENT_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 11663 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_USER_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_USER_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 11670 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 11677 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_INDEX_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_INDEX_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 11684 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 11691 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 11698 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 11704 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 11711 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 11718 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 11723 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 11728 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 11736 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 11738 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 11740 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1777:

/* Line 1455 of yacc.c  */
#line 11754 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 11755 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1779:

/* Line 1455 of yacc.c  */
#line 11759 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 11760 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 11769 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 11770 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 11774 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 11775 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 11781 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->wild= new (thd->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 11788 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->where= normalize_cond((yyvsp[(2) - (2)].item));
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 11798 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(thd, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 11809 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1792:

/* Line 1455 of yacc.c  */
#line 11813 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 11815 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 11827 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1797:

/* Line 1455 of yacc.c  */
#line 11828 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 11829 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 11833 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 11834 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 11836 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->wild= new (thd->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 11850 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1803:

/* Line 1455 of yacc.c  */
#line 11857 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1804:

/* Line 1455 of yacc.c  */
#line 11862 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1805:

/* Line 1455 of yacc.c  */
#line 11871 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1806:

/* Line 1455 of yacc.c  */
#line 11872 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 11877 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 11879 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK | (yyvsp[(4) - (4)].num);
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1811:

/* Line 1455 of yacc.c  */
#line 11894 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1812:

/* Line 1455 of yacc.c  */
#line 11899 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1813:

/* Line 1455 of yacc.c  */
#line 11901 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1814:

/* Line 1455 of yacc.c  */
#line 11903 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1815:

/* Line 1455 of yacc.c  */
#line 11905 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1816:

/* Line 1455 of yacc.c  */
#line 11907 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 11909 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_RELAY_LOG; }
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 11911 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 11913 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 11915 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 11917 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 11919 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 11921 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            Lex->type|= REFRESH_SLAVE;
            Lex->reset_slave_info.all= false;
          }
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 11926 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_CLIENT_STATS; }
    break;

  case 1825:

/* Line 1455 of yacc.c  */
#line 11928 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_STATS; }
    break;

  case 1826:

/* Line 1455 of yacc.c  */
#line 11930 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_TABLE_STATS; }
    break;

  case 1827:

/* Line 1455 of yacc.c  */
#line 11932 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_INDEX_STATS; }
    break;

  case 1828:

/* Line 1455 of yacc.c  */
#line 11934 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 11936 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 11938 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 11942 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 11943 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 11947 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num)= 0;}
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 11948 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num)= REFRESH_CHECKPOINT; }
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 11952 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 11957 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 11966 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 11967 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 11968 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 11969 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 11973 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 11974 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 11979 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 11985 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 11994 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 11998 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 12010 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 12017 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->kill_signal= (killed_state) ((yyvsp[(3) - (5)].num) | (yyvsp[(4) - (5)].num));
          }
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 12023 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 12024 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 12025 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 12028 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 12029 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 12030 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_QUERY; }
    break;

  case 1858:

/* Line 1455 of yacc.c  */
#line 12035 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->value_list.push_front((yyval.item));
          Lex->kill_type= KILL_TYPE_ID;
         }
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 12040 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->users_list.push_back((yyvsp[(2) - (2)].lex_user));
            Lex->kill_type= KILL_TYPE_USER;
          }
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 12050 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 12061 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 12072 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 12082 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(thd, (yyvsp[(12) - (12)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (12)].lock_type), MDL_SHARED_WRITE))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 12092 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(14) - (14)].charset); }
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 12096 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 12100 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 12101 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1868:

/* Line 1455 of yacc.c  */
#line 12105 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1869:

/* Line 1455 of yacc.c  */
#line 12106 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 12110 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 12112 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 12119 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 12123 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 12124 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 12125 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 12140 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 12145 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 12152 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 12157 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 12175 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 12180 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 12187 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 12189 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 12194 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1894:

/* Line 1455 of yacc.c  */
#line 12201 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 12203 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 12207 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 12208 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 12209 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 12214 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 12216 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1901:

/* Line 1455 of yacc.c  */
#line 12220 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1902:

/* Line 1455 of yacc.c  */
#line 12222 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1903:

/* Line 1455 of yacc.c  */
#line 12230 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 12231 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1907:

/* Line 1455 of yacc.c  */
#line 12241 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item)))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name_no_truncate((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), thd->charset());
          }
    break;

  case 1908:

/* Line 1455 of yacc.c  */
#line 12254 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1909:

/* Line 1455 of yacc.c  */
#line 12277 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (thd->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1910:

/* Line 1455 of yacc.c  */
#line 12289 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_string *str= new (thd->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1911:

/* Line 1455 of yacc.c  */
#line 12300 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= thd->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 12319 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.string)= new (thd->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             thd->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 12327 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_hybrid((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 12339 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 12347 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1916:

/* Line 1455 of yacc.c  */
#line 12362 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 12381 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 12382 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 12384 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 12391 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 12392 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 12394 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 12401 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 12407 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 12413 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_hex_hybrid((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 12419 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 12425 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 12431 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (thd->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 12460 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (thd->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1930:

/* Line 1455 of yacc.c  */
#line 12487 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1931:

/* Line 1455 of yacc.c  */
#line 12488 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 12489 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 12494 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 12504 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 12514 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 12520 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   thd->charset());
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1937:

/* Line 1455 of yacc.c  */
#line 12529 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 12543 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 12544 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 12549 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 12558 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 12572 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 12577 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable_t *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 12622 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 12627 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 12643 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 12648 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 12726 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 12750 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 12779 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 12781 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 12797 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 12806 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 12811 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 12817 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(thd, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 12823 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 12833 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 12839 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(thd, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 12848 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(thd, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 12857 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 12859 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 12887 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 12901 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 12915 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 12929 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 12931 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 12940 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 12942 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 12951 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 12952 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 12953 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 12958 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 12974 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
          }
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 12995 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 13009 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 13010 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 13011 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 13012 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 13013 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 13014 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 13015 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 13016 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 13017 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 13018 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 13019 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 13020 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 13021 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 13022 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 13023 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 13024 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 13025 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 13026 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 13027 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 13028 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 13029 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 13030 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 13031 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 13032 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 13033 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 13034 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 13035 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 13036 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 13037 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 13038 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 13039 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 13040 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 13041 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 13042 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 13043 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 13044 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 13045 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 13046 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 13047 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 13048 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 13049 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 13050 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 13051 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 13052 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 13053 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 13054 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 13055 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 13056 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 13057 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 13058 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 13059 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 13060 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 13061 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 13062 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 13063 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 13064 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 13065 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 13066 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 13067 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 13077 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 13078 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 13079 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 13080 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 13081 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 13082 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 13083 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 13084 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 13085 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 13086 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 13087 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 13088 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 13089 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 13090 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 13091 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 13092 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 13093 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 13094 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 13095 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 13096 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 13097 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 13098 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 13099 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 13100 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 13101 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 13102 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 13103 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 13104 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 13105 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 13106 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 13107 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 13108 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 13109 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 13110 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 13111 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 13112 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 13113 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 13114 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 13115 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 13116 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 13117 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 13118 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 13119 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 13120 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 13121 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 13122 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 13123 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 13124 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 13125 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 13126 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 13127 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 13128 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 13129 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 13130 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 13131 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 13132 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 13133 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 13134 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 13135 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 13136 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 13137 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 13138 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 13139 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 13140 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 13141 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 13142 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 13143 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 13144 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 13145 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 13146 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 13147 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 13148 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 13149 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 13150 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 13151 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 13152 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 13153 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 13154 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 13155 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 13156 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 13157 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 13158 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 13159 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 13160 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 13161 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 13162 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 13163 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 13164 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 13165 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 13166 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 13167 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 13168 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 13169 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 13170 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 13171 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 13172 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 13173 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 13174 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 13175 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 13176 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 13177 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 13178 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 13179 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 13180 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 13181 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 13182 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 13183 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 13184 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 13185 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 13186 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 13187 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 13188 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 13189 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 13190 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 13191 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 13192 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 13193 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 13194 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 13195 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 13196 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 13197 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 13198 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 13199 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 13200 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 13201 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 13202 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 13203 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 13204 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 13205 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 13206 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 13207 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 13208 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 13209 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 13210 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 13211 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 13212 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 13213 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 13214 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 13215 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 13216 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 13217 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 13218 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 13219 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 13220 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 13221 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 13222 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 13223 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 13224 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 13225 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 13226 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 13227 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 13228 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 13229 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 13230 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 13231 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 13232 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 13233 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 13234 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 13235 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 13236 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 13237 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 13238 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 13239 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 13240 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 13241 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 13242 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 13243 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 13244 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 13245 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 13246 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 13247 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 13248 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 13249 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 13250 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 13251 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 13252 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 13253 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 13254 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 13255 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 13256 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 13257 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 13258 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 13259 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 13260 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 13261 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 13262 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 13263 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 13264 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 13265 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 13266 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 13267 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 13268 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 13269 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 13270 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 13271 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 13272 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 13273 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 13274 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 13275 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 13276 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 13277 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 13278 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 13279 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 13280 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 13281 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 13282 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 13283 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 13284 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 13285 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 13286 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 13287 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 13288 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 13289 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 13290 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 13291 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 13292 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 13293 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 13294 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 13295 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 13296 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 13297 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 13298 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 13299 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 13300 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 13301 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 13302 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 13303 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 13304 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 13305 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 13306 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 13307 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 13308 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 13309 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 13310 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 13311 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 13312 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 13313 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 13314 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 13315 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 13316 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 13317 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 13318 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 13319 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 13320 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 13321 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 13322 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 13323 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 13324 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 13325 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 13326 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 13327 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 13328 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 13329 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 13330 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 13331 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2289:

/* Line 1455 of yacc.c  */
#line 13332 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2290:

/* Line 1455 of yacc.c  */
#line 13333 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 13334 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 13335 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 13336 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 13337 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 13338 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 13339 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 13340 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 13341 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 13342 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 13343 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 13344 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 13345 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 13346 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 13347 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 13348 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 13349 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 13350 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 13351 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 13352 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 13353 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 13354 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 13355 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 13356 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 13357 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 13358 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 13359 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 13360 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 13361 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 13362 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 13363 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 13364 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 13365 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 13366 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 13367 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 13368 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 13369 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 13376 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
          }
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 13386 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 13390 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 13391 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 13400 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              /*
                If we are in SP we want have own LEX for each assignment.
                This is mostly because it is hard for several sp_instr_set
                and sp_instr_set_trigger instructions share one LEX.
                (Well, it is theoretically possible but adds some extra
                overhead on preparation for execution stage and IMO less
                robust).

                QQ: May be we should simply prohibit group assignments in SP?
              */
              lex->sphead->reset_lex(thd);
              lex= thd->lex;

              /* Set new LEX as if we at start of set rule. */
              lex->sql_command= SQLCOM_SET_OPTION;
              mysql_init_select(lex);
              lex->option_type=OPT_SESSION;
              lex->var_list.empty();
              lex->one_shot_set= 0;
              lex->autocommit= 0;
              lex->sphead->m_tmp_query= lip->get_tok_start();
            }
          }
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 13430 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              sp_head *sp= lex->sphead;

              if (!lex->var_list.is_empty())
              {
                /*
                  We have assignment to user or system variable or
                  option setting, so we should construct sp_instr_stmt
                  for it.
                */
                LEX_STRING qbuff;
                sp_instr_stmt *i;

                if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                           lex)))
                  MYSQL_YYABORT;

                /*
                  Extract the query statement from the tokenizer.  The
                  end is either lip->ptr, if there was no lookahead,
                  lip->tok_end otherwise.
                */
                if (yychar == YYEMPTY)
                  qbuff.length= lip->get_ptr() - sp->m_tmp_query;
                else
                  qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

                if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                                    qbuff.length + 5)))
                  MYSQL_YYABORT;

                strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
                        qbuff.length);
                qbuff.length+= 4;
                i->m_query= qbuff;
                if (sp->add_instr(i))
                  MYSQL_YYABORT;
              }
              if (lex->sphead->restore_lex(thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 13480 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 13481 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 13482 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 13483 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 13487 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= OPT_DEFAULT; }
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 13488 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->one_shot_set= 1; (yyval.num)= OPT_SESSION; }
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 13492 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 13493 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 13494 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 13495 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 13499 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 13500 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 13501 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 13502 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 13512 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            LEX_STRING *name= &(yyvsp[(2) - (4)].variable).base_name;

            if ((yyvsp[(2) - (4)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              if (set_trigger_new_row(thd, name, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(2) - (4)].variable).var)
            {
              if ((yyvsp[(1) - (4)].var_type))
                lex->option_type= (yyvsp[(1) - (4)].var_type);

              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(2) - (4)].variable), lex->option_type, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable_t *spv= spc->find_variable(name);

              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 13553 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->option_type= (yyvsp[(1) - (5)].var_type);
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(5) - (5)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 13571 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (thd->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 13582 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 13594 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 13607 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(&names))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2357:

/* Line 1455 of yacc.c  */
#line 13622 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2358:

/* Line 1455 of yacc.c  */
#line 13641 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(&pw))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 13667 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2360:

/* Line 1455 of yacc.c  */
#line 13680 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable_t *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 13706 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(thd, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 13749 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(thd, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 13762 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 13763 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2365:

/* Line 1455 of yacc.c  */
#line 13764 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 13765 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2367:

/* Line 1455 of yacc.c  */
#line 13769 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2368:

/* Line 1455 of yacc.c  */
#line 13771 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? thd->variables.old_passwords ?
              Item_func_old_password::alloc(thd, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(thd, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2369:

/* Line 1455 of yacc.c  */
#line 13780 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::alloc(thd, (yyvsp[(3) - (4)].lex_str).str,
                                                          (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2370:

/* Line 1455 of yacc.c  */
#line 13791 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2371:

/* Line 1455 of yacc.c  */
#line 13792 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 13794 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 13800 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 13806 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 13817 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 13828 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 13832 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 13833 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 13843 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            lock_type == TL_WRITE_CONCURRENT_INSERT ?
                                            MDL_SHARED_WRITE :
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2382:

/* Line 1455 of yacc.c  */
#line 13857 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2383:

/* Line 1455 of yacc.c  */
#line 13858 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2384:

/* Line 1455 of yacc.c  */
#line 13860 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2385:

/* Line 1455 of yacc.c  */
#line 13864 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 13865 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 13870 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 13881 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2389:

/* Line 1455 of yacc.c  */
#line 13890 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2390:

/* Line 1455 of yacc.c  */
#line 13902 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2391:

/* Line 1455 of yacc.c  */
#line 13914 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (thd->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2392:

/* Line 1455 of yacc.c  */
#line 13934 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 13947 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 13948 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2395:

/* Line 1455 of yacc.c  */
#line 13952 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2396:

/* Line 1455 of yacc.c  */
#line 13953 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2397:

/* Line 1455 of yacc.c  */
#line 13957 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2398:

/* Line 1455 of yacc.c  */
#line 13958 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 13959 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 13960 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2401:

/* Line 1455 of yacc.c  */
#line 13962 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 13970 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2403:

/* Line 1455 of yacc.c  */
#line 13974 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2404:

/* Line 1455 of yacc.c  */
#line 13975 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 13976 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 13977 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2407:

/* Line 1455 of yacc.c  */
#line 13978 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2408:

/* Line 1455 of yacc.c  */
#line 13985 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 13990 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2410:

/* Line 1455 of yacc.c  */
#line 13996 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2411:

/* Line 1455 of yacc.c  */
#line 14007 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 14018 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 14022 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 14032 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 14038 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 14045 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2417:

/* Line 1455 of yacc.c  */
#line 14057 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2418:

/* Line 1455 of yacc.c  */
#line 14068 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 14082 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 14084 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 14102 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 14103 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2429:

/* Line 1455 of yacc.c  */
#line 14105 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2430:

/* Line 1455 of yacc.c  */
#line 14106 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2431:

/* Line 1455 of yacc.c  */
#line 14108 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2432:

/* Line 1455 of yacc.c  */
#line 14109 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 14111 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2434:

/* Line 1455 of yacc.c  */
#line 14112 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2435:

/* Line 1455 of yacc.c  */
#line 14113 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2436:

/* Line 1455 of yacc.c  */
#line 14114 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2437:

/* Line 1455 of yacc.c  */
#line 14115 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2438:

/* Line 1455 of yacc.c  */
#line 14116 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2439:

/* Line 1455 of yacc.c  */
#line 14117 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 14118 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2441:

/* Line 1455 of yacc.c  */
#line 14119 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2442:

/* Line 1455 of yacc.c  */
#line 14120 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 14121 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 14122 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2445:

/* Line 1455 of yacc.c  */
#line 14123 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2446:

/* Line 1455 of yacc.c  */
#line 14124 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2447:

/* Line 1455 of yacc.c  */
#line 14125 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2448:

/* Line 1455 of yacc.c  */
#line 14126 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2449:

/* Line 1455 of yacc.c  */
#line 14127 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2450:

/* Line 1455 of yacc.c  */
#line 14128 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2451:

/* Line 1455 of yacc.c  */
#line 14129 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2452:

/* Line 1455 of yacc.c  */
#line 14130 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2453:

/* Line 1455 of yacc.c  */
#line 14131 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2454:

/* Line 1455 of yacc.c  */
#line 14132 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2455:

/* Line 1455 of yacc.c  */
#line 14133 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2456:

/* Line 1455 of yacc.c  */
#line 14134 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2457:

/* Line 1455 of yacc.c  */
#line 14135 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2458:

/* Line 1455 of yacc.c  */
#line 14136 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2459:

/* Line 1455 of yacc.c  */
#line 14137 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2460:

/* Line 1455 of yacc.c  */
#line 14138 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2461:

/* Line 1455 of yacc.c  */
#line 14142 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2462:

/* Line 1455 of yacc.c  */
#line 14143 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2465:

/* Line 1455 of yacc.c  */
#line 14153 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2466:

/* Line 1455 of yacc.c  */
#line 14163 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2467:

/* Line 1455 of yacc.c  */
#line 14173 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2468:

/* Line 1455 of yacc.c  */
#line 14186 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 14201 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2470:

/* Line 1455 of yacc.c  */
#line 14214 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2471:

/* Line 1455 of yacc.c  */
#line 14227 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2472:

/* Line 1455 of yacc.c  */
#line 14239 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2473:

/* Line 1455 of yacc.c  */
#line 14244 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2474:

/* Line 1455 of yacc.c  */
#line 14252 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2475:

/* Line 1455 of yacc.c  */
#line 14257 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2480:

/* Line 1455 of yacc.c  */
#line 14268 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (thd->variables.old_passwords)
              {
                char *buff= 
                  (char *) thd->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) thd->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2481:

/* Line 1455 of yacc.c  */
#line 14295 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
          }
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 14300 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 14306 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 14312 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2485:

/* Line 1455 of yacc.c  */
#line 14317 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2489:

/* Line 1455 of yacc.c  */
#line 14331 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            String *new_str = new (thd->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2491:

/* Line 1455 of yacc.c  */
#line 14360 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2492:

/* Line 1455 of yacc.c  */
#line 14364 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2493:

/* Line 1455 of yacc.c  */
#line 14368 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2494:

/* Line 1455 of yacc.c  */
#line 14372 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2495:

/* Line 1455 of yacc.c  */
#line 14378 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2497:

/* Line 1455 of yacc.c  */
#line 14383 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2498:

/* Line 1455 of yacc.c  */
#line 14384 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2499:

/* Line 1455 of yacc.c  */
#line 14388 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2500:

/* Line 1455 of yacc.c  */
#line 14389 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2501:

/* Line 1455 of yacc.c  */
#line 14393 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2502:

/* Line 1455 of yacc.c  */
#line 14395 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2503:

/* Line 1455 of yacc.c  */
#line 14401 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2504:

/* Line 1455 of yacc.c  */
#line 14407 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2505:

/* Line 1455 of yacc.c  */
#line 14413 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2506:

/* Line 1455 of yacc.c  */
#line 14422 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2507:

/* Line 1455 of yacc.c  */
#line 14427 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2508:

/* Line 1455 of yacc.c  */
#line 14431 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2509:

/* Line 1455 of yacc.c  */
#line 14432 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2510:

/* Line 1455 of yacc.c  */
#line 14437 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2511:

/* Line 1455 of yacc.c  */
#line 14438 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2512:

/* Line 1455 of yacc.c  */
#line 14439 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2513:

/* Line 1455 of yacc.c  */
#line 14444 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2514:

/* Line 1455 of yacc.c  */
#line 14445 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2515:

/* Line 1455 of yacc.c  */
#line 14446 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2516:

/* Line 1455 of yacc.c  */
#line 14450 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2517:

/* Line 1455 of yacc.c  */
#line 14451 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2518:

/* Line 1455 of yacc.c  */
#line 14456 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2519:

/* Line 1455 of yacc.c  */
#line 14468 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2520:

/* Line 1455 of yacc.c  */
#line 14478 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2521:

/* Line 1455 of yacc.c  */
#line 14487 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2522:

/* Line 1455 of yacc.c  */
#line 14496 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2523:

/* Line 1455 of yacc.c  */
#line 14509 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2525:

/* Line 1455 of yacc.c  */
#line 14515 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2526:

/* Line 1455 of yacc.c  */
#line 14520 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2527:

/* Line 1455 of yacc.c  */
#line 14530 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2528:

/* Line 1455 of yacc.c  */
#line 14531 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2529:

/* Line 1455 of yacc.c  */
#line 14532 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2530:

/* Line 1455 of yacc.c  */
#line 14536 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= false; }
    break;

  case 2531:

/* Line 1455 of yacc.c  */
#line 14537 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= true; }
    break;

  case 2532:

/* Line 1455 of yacc.c  */
#line 14541 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2533:

/* Line 1455 of yacc.c  */
#line 14556 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2536:

/* Line 1455 of yacc.c  */
#line 14568 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2537:

/* Line 1455 of yacc.c  */
#line 14569 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2538:

/* Line 1455 of yacc.c  */
#line 14570 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2539:

/* Line 1455 of yacc.c  */
#line 14575 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2540:

/* Line 1455 of yacc.c  */
#line 14579 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2542:

/* Line 1455 of yacc.c  */
#line 14588 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2543:

/* Line 1455 of yacc.c  */
#line 14594 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2544:

/* Line 1455 of yacc.c  */
#line 14603 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2545:

/* Line 1455 of yacc.c  */
#line 14609 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2546:

/* Line 1455 of yacc.c  */
#line 14630 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;

            /*
              Aggregate functions in having clause may add fields to an outer
              select. Count them also.
            */
            lex->current_select->select_n_having_items+=
            child->select_n_having_items;
          }
    break;

  case 2551:

/* Line 1455 of yacc.c  */
#line 14665 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2552:

/* Line 1455 of yacc.c  */
#line 14667 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2553:

/* Line 1455 of yacc.c  */
#line 14674 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2554:

/* Line 1455 of yacc.c  */
#line 14675 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2555:

/* Line 1455 of yacc.c  */
#line 14676 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2556:

/* Line 1455 of yacc.c  */
#line 14678 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2557:

/* Line 1455 of yacc.c  */
#line 14684 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2558:

/* Line 1455 of yacc.c  */
#line 14689 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2559:

/* Line 1455 of yacc.c  */
#line 14700 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2560:

/* Line 1455 of yacc.c  */
#line 14702 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2561:

/* Line 1455 of yacc.c  */
#line 14704 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2575:

/* Line 1455 of yacc.c  */
#line 14737 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            thd->lex->definer= 0;
          }
    break;

  case 2576:

/* Line 1455 of yacc.c  */
#line 14751 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            thd->lex->definer= get_current_user(thd, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2577:

/* Line 1455 of yacc.c  */
#line 14764 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2578:

/* Line 1455 of yacc.c  */
#line 14766 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2579:

/* Line 1455 of yacc.c  */
#line 14768 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2580:

/* Line 1455 of yacc.c  */
#line 14773 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2581:

/* Line 1455 of yacc.c  */
#line 14778 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
    break;

  case 2582:

/* Line 1455 of yacc.c  */
#line 14780 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2583:

/* Line 1455 of yacc.c  */
#line 14782 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2584:

/* Line 1455 of yacc.c  */
#line 14787 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2585:

/* Line 1455 of yacc.c  */
#line 14789 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2586:

/* Line 1455 of yacc.c  */
#line 14791 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2587:

/* Line 1455 of yacc.c  */
#line 14796 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2589:

/* Line 1455 of yacc.c  */
#line 14812 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2591:

/* Line 1455 of yacc.c  */
#line 14818 "/home/buildbot/git/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2592:

/* Line 1455 of yacc.c  */
#line 14823 "/home/buildbot/git/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2593:

/* Line 1455 of yacc.c  */
#line 14830 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2594:

/* Line 1455 of yacc.c  */
#line 14839 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2597:

/* Line 1455 of yacc.c  */
#line 14860 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2598:

/* Line 1455 of yacc.c  */
#line 14862 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2599:

/* Line 1455 of yacc.c  */
#line 14864 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2600:

/* Line 1455 of yacc.c  */
#line 14866 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2601:

/* Line 1455 of yacc.c  */
#line 14883 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2602:

/* Line 1455 of yacc.c  */
#line 14889 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2603:

/* Line 1455 of yacc.c  */
#line 14894 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $15 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2604:

/* Line 1455 of yacc.c  */
#line 14923 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(thd);
            sp->restore_thd_mem_root(thd);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2605:

/* Line 1455 of yacc.c  */
#line 14957 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2606:

/* Line 1455 of yacc.c  */
#line 14974 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2607:

/* Line 1455 of yacc.c  */
#line 14996 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $5 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2608:

/* Line 1455 of yacc.c  */
#line 15027 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2609:

/* Line 1455 of yacc.c  */
#line 15031 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 2610:

/* Line 1455 of yacc.c  */
#line 15040 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(thd, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2611:

/* Line 1455 of yacc.c  */
#line 15063 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $14 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2612:

/* Line 1455 of yacc.c  */
#line 15071 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  MYSQL_ERROR::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2613:

/* Line 1455 of yacc.c  */
#line 15126 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(thd, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2614:

/* Line 1455 of yacc.c  */
#line 15150 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2615:

/* Line 1455 of yacc.c  */
#line 15159 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2616:

/* Line 1455 of yacc.c  */
#line 15166 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2617:

/* Line 1455 of yacc.c  */
#line 15173 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(thd);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2618:

/* Line 1455 of yacc.c  */
#line 15187 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2619:

/* Line 1455 of yacc.c  */
#line 15191 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2620:

/* Line 1455 of yacc.c  */
#line 15195 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2621:

/* Line 1455 of yacc.c  */
#line 15199 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2622:

/* Line 1455 of yacc.c  */
#line 15203 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2623:

/* Line 1455 of yacc.c  */
#line 15207 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2624:

/* Line 1455 of yacc.c  */
#line 15214 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2625:

/* Line 1455 of yacc.c  */
#line 15221 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2626:

/* Line 1455 of yacc.c  */
#line 15228 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2627:

/* Line 1455 of yacc.c  */
#line 15237 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2628:

/* Line 1455 of yacc.c  */
#line 15238 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2629:

/* Line 1455 of yacc.c  */
#line 15242 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2630:

/* Line 1455 of yacc.c  */
#line 15243 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2631:

/* Line 1455 of yacc.c  */
#line 15244 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2632:

/* Line 1455 of yacc.c  */
#line 15248 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2633:

/* Line 1455 of yacc.c  */
#line 15249 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2634:

/* Line 1455 of yacc.c  */
#line 15254 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2635:

/* Line 1455 of yacc.c  */
#line 15256 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2637:

/* Line 1455 of yacc.c  */
#line 15261 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2638:

/* Line 1455 of yacc.c  */
#line 15262 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2639:

/* Line 1455 of yacc.c  */
#line 15267 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2640:

/* Line 1455 of yacc.c  */
#line 15274 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2641:

/* Line 1455 of yacc.c  */
#line 15284 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2642:

/* Line 1455 of yacc.c  */
#line 15290 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2643:

/* Line 1455 of yacc.c  */
#line 15301 "/home/buildbot/git/sql/sql_yacc.yy"
    {
	  YYERROR;
	}
    break;



/* Line 1455 of yacc.c  */
#line 40928 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (thd, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (thd, yymsg);
	  }
	else
	  {
	    yyerror (thd, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, thd);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, thd);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (thd, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, thd);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, thd);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



